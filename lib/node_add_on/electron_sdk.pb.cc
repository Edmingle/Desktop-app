// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: electron_sdk.proto

#include "electron_sdk.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace com {
namespace electron {
namespace sdk {
namespace proto {
PROTOBUF_CONSTEXPR InitSDKParams::InitSDKParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.domain_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customizedlanguagename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customizedlanguageinfo_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.strsupporturl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customlocalizationfilepath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.strbrandingname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customizedlanguagetype_)*/ 0

  , /*decltype(_impl_.langid_)*/ 0

  , /*decltype(_impl_.applocale_)*/ 0

  , /*decltype(_impl_.logfilesize_)*/ 0

  , /*decltype(_impl_.enablelog_)*/ false

  , /*decltype(_impl_.enablegeneraldump_)*/ false

  , /*decltype(_impl_.permonitorawarenessmode_)*/ false

  , /*decltype(_impl_.enablerawdataintermediatemode_)*/ false

  , /*decltype(_impl_.videorendermode_)*/ 0

  , /*decltype(_impl_.videorawdatamemorymode_)*/ 0

  , /*decltype(_impl_.sharerawdatamemorymode_)*/ 0

  , /*decltype(_impl_.audiorawdatamemorymode_)*/ 0

  , /*decltype(_impl_.renderpostprocessing_)*/ 0

  , /*decltype(_impl_.videocapturemethod_)*/ 0

  , /*decltype(_impl_.usecustomui_)*/ false
} {}
struct InitSDKParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitSDKParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitSDKParamsDefaultTypeInternal() {}
  union {
    InitSDKParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitSDKParamsDefaultTypeInternal _InitSDKParams_default_instance_;
PROTOBUF_CONSTEXPR AuthWithJwtTokenParams::AuthWithJwtTokenParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sdkjwttoken_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct AuthWithJwtTokenParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthWithJwtTokenParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthWithJwtTokenParamsDefaultTypeInternal() {}
  union {
    AuthWithJwtTokenParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthWithJwtTokenParamsDefaultTypeInternal _AuthWithJwtTokenParams_default_instance_;
PROTOBUF_CONSTEXPR LoginWithSSOTokenParams::LoginWithSSOTokenParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ssotoken_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rememberme_)*/ false
} {}
struct LoginWithSSOTokenParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginWithSSOTokenParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginWithSSOTokenParamsDefaultTypeInternal() {}
  union {
    LoginWithSSOTokenParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginWithSSOTokenParamsDefaultTypeInternal _LoginWithSSOTokenParams_default_instance_;
PROTOBUF_CONSTEXPR StartMeetingParams::StartMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hdirectshareappwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customerkey_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.meetingnumber_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.isvideooff_)*/ false

  , /*decltype(_impl_.isaudiooff_)*/ false

  , /*decltype(_impl_.isdirectsharedesktop_)*/ false
} {}
struct StartMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartMeetingParamsDefaultTypeInternal() {}
  union {
    StartMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartMeetingParamsDefaultTypeInternal _StartMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR StartWithoutLoginParams::StartWithoutLoginParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userzak_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sdkvanityid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hdirectshareappwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customerkey_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.meetingnumber_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nodeusertype_)*/ 0

  , /*decltype(_impl_.isdirectsharedesktop_)*/ false

  , /*decltype(_impl_.isvideooff_)*/ false

  , /*decltype(_impl_.isaudiooff_)*/ false
} {}
struct StartWithoutLoginParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartWithoutLoginParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartWithoutLoginParamsDefaultTypeInternal() {}
  union {
    StartWithoutLoginParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartWithoutLoginParamsDefaultTypeInternal _StartWithoutLoginParams_default_instance_;
PROTOBUF_CONSTEXPR JoinMeetingParams::JoinMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vanityid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.psw_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hdirectshareappwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customerkey_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.webinartoken_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.appprivilegetoken_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.join_token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.meetingnumber_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.isvideooff_)*/ false

  , /*decltype(_impl_.isaudiooff_)*/ false

  , /*decltype(_impl_.isdirectsharedesktop_)*/ false
} {}
struct JoinMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinMeetingParamsDefaultTypeInternal() {}
  union {
    JoinMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinMeetingParamsDefaultTypeInternal _JoinMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR JoinWithoutLoginParams::JoinWithoutLoginParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vanityid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.psw_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hdirectshareappwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.userzak_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customerkey_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.webinartoken_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.appprivilegetoken_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.join_token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.meetingnumber_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.isdirectsharedesktop_)*/ false

  , /*decltype(_impl_.isvideooff_)*/ false

  , /*decltype(_impl_.isaudiooff_)*/ false
} {}
struct JoinWithoutLoginParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinWithoutLoginParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinWithoutLoginParamsDefaultTypeInternal() {}
  union {
    JoinWithoutLoginParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinWithoutLoginParamsDefaultTypeInternal _JoinWithoutLoginParams_default_instance_;
PROTOBUF_CONSTEXPR LeaveMeetingParams::LeaveMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bend_)*/ false
} {}
struct LeaveMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveMeetingParamsDefaultTypeInternal() {}
  union {
    LeaveMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveMeetingParamsDefaultTypeInternal _LeaveMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR HandleZoomWebUriProtocolActionParams::HandleZoomWebUriProtocolActionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.protocolaction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct HandleZoomWebUriProtocolActionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandleZoomWebUriProtocolActionParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandleZoomWebUriProtocolActionParamsDefaultTypeInternal() {}
  union {
    HandleZoomWebUriProtocolActionParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandleZoomWebUriProtocolActionParamsDefaultTypeInternal _HandleZoomWebUriProtocolActionParams_default_instance_;
PROTOBUF_CONSTEXPR ShowChatDlgParams::ShowChatDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hparent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rectleft_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.recttop_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rectright_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rectbottom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ShowChatDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowChatDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowChatDlgParamsDefaultTypeInternal() {}
  union {
    ShowChatDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowChatDlgParamsDefaultTypeInternal _ShowChatDlgParams_default_instance_;
PROTOBUF_CONSTEXPR EnterFullScreenParams::EnterFullScreenParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bfirstview_)*/ false

  , /*decltype(_impl_.bsecview_)*/ false
} {}
struct EnterFullScreenParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterFullScreenParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterFullScreenParamsDefaultTypeInternal() {}
  union {
    EnterFullScreenParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterFullScreenParamsDefaultTypeInternal _EnterFullScreenParams_default_instance_;
PROTOBUF_CONSTEXPR ExitFullScreenParams::ExitFullScreenParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bfirstview_)*/ false

  , /*decltype(_impl_.bsecview_)*/ false
} {}
struct ExitFullScreenParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExitFullScreenParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExitFullScreenParamsDefaultTypeInternal() {}
  union {
    ExitFullScreenParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExitFullScreenParamsDefaultTypeInternal _ExitFullScreenParams_default_instance_;
PROTOBUF_CONSTEXPR MoveFloatVideoWndParams::MoveFloatVideoWndParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.top_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct MoveFloatVideoWndParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveFloatVideoWndParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveFloatVideoWndParamsDefaultTypeInternal() {}
  union {
    MoveFloatVideoWndParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveFloatVideoWndParamsDefaultTypeInternal _MoveFloatVideoWndParams_default_instance_;
PROTOBUF_CONSTEXPR ShowSharingToolbarParams::ShowSharingToolbarParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct ShowSharingToolbarParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowSharingToolbarParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowSharingToolbarParamsDefaultTypeInternal() {}
  union {
    ShowSharingToolbarParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowSharingToolbarParamsDefaultTypeInternal _ShowSharingToolbarParams_default_instance_;
PROTOBUF_CONSTEXPR ChangeFloatoActiveSpkVideoSizeParams::ChangeFloatoActiveSpkVideoSizeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.floatvideotype_)*/ 0
} {}
struct ChangeFloatoActiveSpkVideoSizeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeFloatoActiveSpkVideoSizeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeFloatoActiveSpkVideoSizeParamsDefaultTypeInternal() {}
  union {
    ChangeFloatoActiveSpkVideoSizeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeFloatoActiveSpkVideoSizeParamsDefaultTypeInternal _ChangeFloatoActiveSpkVideoSizeParams_default_instance_;
PROTOBUF_CONSTEXPR ShowParticipantsListWndParams::ShowParticipantsListWndParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct ShowParticipantsListWndParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowParticipantsListWndParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowParticipantsListWndParamsDefaultTypeInternal() {}
  union {
    ShowParticipantsListWndParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowParticipantsListWndParamsDefaultTypeInternal _ShowParticipantsListWndParams_default_instance_;
PROTOBUF_CONSTEXPR ShowBottomFloatToolbarWndParams::ShowBottomFloatToolbarWndParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct ShowBottomFloatToolbarWndParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowBottomFloatToolbarWndParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowBottomFloatToolbarWndParamsDefaultTypeInternal() {}
  union {
    ShowBottomFloatToolbarWndParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowBottomFloatToolbarWndParamsDefaultTypeInternal _ShowBottomFloatToolbarWndParams_default_instance_;
PROTOBUF_CONSTEXPR ShowPreOrNextPageVideoParams::ShowPreOrNextPageVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bpageup_)*/ false
} {}
struct ShowPreOrNextPageVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowPreOrNextPageVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowPreOrNextPageVideoParamsDefaultTypeInternal() {}
  union {
    ShowPreOrNextPageVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowPreOrNextPageVideoParamsDefaultTypeInternal _ShowPreOrNextPageVideoParams_default_instance_;
PROTOBUF_CONSTEXPR ShowSharingFrameWindowsParams::ShowSharingFrameWindowsParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct ShowSharingFrameWindowsParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowSharingFrameWindowsParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowSharingFrameWindowsParamsDefaultTypeInternal() {}
  union {
    ShowSharingFrameWindowsParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowSharingFrameWindowsParamsDefaultTypeInternal _ShowSharingFrameWindowsParams_default_instance_;
PROTOBUF_CONSTEXPR SwitchSplitScreenModeParams::SwitchSplitScreenModeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bsplit_)*/ false
} {}
struct SwitchSplitScreenModeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchSplitScreenModeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchSplitScreenModeParamsDefaultTypeInternal() {}
  union {
    SwitchSplitScreenModeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchSplitScreenModeParamsDefaultTypeInternal _SwitchSplitScreenModeParams_default_instance_;
PROTOBUF_CONSTEXPR SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.minimizeuimode_)*/ 0
} {}
struct SwitchMinimizeUIMode4FirstScreenMeetingUIWndParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchMinimizeUIMode4FirstScreenMeetingUIWndParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchMinimizeUIMode4FirstScreenMeetingUIWndParamsDefaultTypeInternal() {}
  union {
    SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchMinimizeUIMode4FirstScreenMeetingUIWndParamsDefaultTypeInternal _SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_default_instance_;
PROTOBUF_CONSTEXPR SwapToShowShareViewOrVideoParams::SwapToShowShareViewOrVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.btodisplayshare_)*/ false
} {}
struct SwapToShowShareViewOrVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwapToShowShareViewOrVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwapToShowShareViewOrVideoParamsDefaultTypeInternal() {}
  union {
    SwapToShowShareViewOrVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwapToShowShareViewOrVideoParamsDefaultTypeInternal _SwapToShowShareViewOrVideoParams_default_instance_;
PROTOBUF_CONSTEXPR ShowSettingDlgParams::ShowSettingDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hparent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.left_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.top_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hsettingwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bshow_)*/ false
} {}
struct ShowSettingDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowSettingDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowSettingDlgParamsDefaultTypeInternal() {}
  union {
    ShowSettingDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowSettingDlgParamsDefaultTypeInternal _ShowSettingDlgParams_default_instance_;
PROTOBUF_CONSTEXPR ScheduleMeetingWithWndParams::ScheduleMeetingWithWndParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hselfwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hparent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.left_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.top_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ScheduleMeetingWithWndParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleMeetingWithWndParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleMeetingWithWndParamsDefaultTypeInternal() {}
  union {
    ScheduleMeetingWithWndParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleMeetingWithWndParamsDefaultTypeInternal _ScheduleMeetingWithWndParams_default_instance_;
PROTOBUF_CONSTEXPR EditMeetingParams::EditMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meetingnumber_)*/ ::uint64_t{0u}
} {}
struct EditMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditMeetingParamsDefaultTypeInternal() {}
  union {
    EditMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditMeetingParamsDefaultTypeInternal _EditMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR EditMeetingWithWndParams::EditMeetingWithWndParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hselfwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hparent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.left_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.top_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.meetingnumber_)*/ ::uint64_t{0u}
} {}
struct EditMeetingWithWndParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditMeetingWithWndParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditMeetingWithWndParamsDefaultTypeInternal() {}
  union {
    EditMeetingWithWndParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditMeetingWithWndParamsDefaultTypeInternal _EditMeetingWithWndParams_default_instance_;
PROTOBUF_CONSTEXPR DeleteMeetingParams::DeleteMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meetingnumber_)*/ ::uint64_t{0u}
} {}
struct DeleteMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteMeetingParamsDefaultTypeInternal() {}
  union {
    DeleteMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteMeetingParamsDefaultTypeInternal _DeleteMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR AddCustomizedPictureResourceParams::AddCustomizedPictureResourceParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strpngid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.strpngpath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct AddCustomizedPictureResourceParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddCustomizedPictureResourceParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddCustomizedPictureResourceParamsDefaultTypeInternal() {}
  union {
    AddCustomizedPictureResourceParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddCustomizedPictureResourceParamsDefaultTypeInternal _AddCustomizedPictureResourceParams_default_instance_;
PROTOBUF_CONSTEXPR AddCustomizedStringResourceParams::AddCustomizedStringResourceParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strcustomizedstring_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customizedstringtype_)*/ 0
} {}
struct AddCustomizedStringResourceParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddCustomizedStringResourceParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddCustomizedStringResourceParamsDefaultTypeInternal() {}
  union {
    AddCustomizedStringResourceParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddCustomizedStringResourceParamsDefaultTypeInternal _AddCustomizedStringResourceParams_default_instance_;
PROTOBUF_CONSTEXPR AddCustomizedURLResourceParams::AddCustomizedURLResourceParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strcustomizedurl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customizedurltype_)*/ 0
} {}
struct AddCustomizedURLResourceParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddCustomizedURLResourceParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddCustomizedURLResourceParamsDefaultTypeInternal() {}
  union {
    AddCustomizedURLResourceParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddCustomizedURLResourceParamsDefaultTypeInternal _AddCustomizedURLResourceParams_default_instance_;
PROTOBUF_CONSTEXPR TryWithMeetingNumberParams::TryWithMeetingNumberParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meetingnumber_)*/ ::uint64_t{0u}
} {}
struct TryWithMeetingNumberParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TryWithMeetingNumberParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TryWithMeetingNumberParamsDefaultTypeInternal() {}
  union {
    TryWithMeetingNumberParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TryWithMeetingNumberParamsDefaultTypeInternal _TryWithMeetingNumberParams_default_instance_;
PROTOBUF_CONSTEXPR TryWithPairingCodeParams::TryWithPairingCodeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paringcode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct TryWithPairingCodeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TryWithPairingCodeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TryWithPairingCodeParamsDefaultTypeInternal() {}
  union {
    TryWithPairingCodeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TryWithPairingCodeParamsDefaultTypeInternal _TryWithPairingCodeParams_default_instance_;
PROTOBUF_CONSTEXPR StartAnnotationParams::StartAnnotationParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.top_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.viewtype_)*/ 0
} {}
struct StartAnnotationParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartAnnotationParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartAnnotationParamsDefaultTypeInternal() {}
  union {
    StartAnnotationParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartAnnotationParamsDefaultTypeInternal _StartAnnotationParams_default_instance_;
PROTOBUF_CONSTEXPR StopAnnotationParams::StopAnnotationParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewtype_)*/ 0
} {}
struct StopAnnotationParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopAnnotationParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopAnnotationParamsDefaultTypeInternal() {}
  union {
    StopAnnotationParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopAnnotationParamsDefaultTypeInternal _StopAnnotationParams_default_instance_;
PROTOBUF_CONSTEXPR SetToolParams::SetToolParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewtype_)*/ 0

  , /*decltype(_impl_.tooltype_)*/ 0
} {}
struct SetToolParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetToolParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetToolParamsDefaultTypeInternal() {}
  union {
    SetToolParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetToolParamsDefaultTypeInternal _SetToolParams_default_instance_;
PROTOBUF_CONSTEXPR ClearAnnotationParams::ClearAnnotationParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewtype_)*/ 0

  , /*decltype(_impl_.cleartype_)*/ 0
} {}
struct ClearAnnotationParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClearAnnotationParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClearAnnotationParamsDefaultTypeInternal() {}
  union {
    ClearAnnotationParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClearAnnotationParamsDefaultTypeInternal _ClearAnnotationParams_default_instance_;
PROTOBUF_CONSTEXPR SetColorParams::SetColorParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.color_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.viewtype_)*/ 0
} {}
struct SetColorParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetColorParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetColorParamsDefaultTypeInternal() {}
  union {
    SetColorParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetColorParamsDefaultTypeInternal _SetColorParams_default_instance_;
PROTOBUF_CONSTEXPR SetLineWidthParams::SetLineWidthParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.linewidth_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.viewtype_)*/ 0
} {}
struct SetLineWidthParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLineWidthParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLineWidthParamsDefaultTypeInternal() {}
  union {
    SetLineWidthParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLineWidthParamsDefaultTypeInternal _SetLineWidthParams_default_instance_;
PROTOBUF_CONSTEXPR UndoParams::UndoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewtype_)*/ 0
} {}
struct UndoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoParamsDefaultTypeInternal() {}
  union {
    UndoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoParamsDefaultTypeInternal _UndoParams_default_instance_;
PROTOBUF_CONSTEXPR RedoParams::RedoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewtype_)*/ 0
} {}
struct RedoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedoParamsDefaultTypeInternal() {}
  union {
    RedoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedoParamsDefaultTypeInternal _RedoParams_default_instance_;
PROTOBUF_CONSTEXPR MuteAudioParams::MuteAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0

  , /*decltype(_impl_.allowunmutebyself_)*/ false
} {}
struct MuteAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteAudioParamsDefaultTypeInternal() {}
  union {
    MuteAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteAudioParamsDefaultTypeInternal _MuteAudioParams_default_instance_;
PROTOBUF_CONSTEXPR UnmuteAudioParams::UnmuteAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0
} {}
struct UnmuteAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnmuteAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnmuteAudioParamsDefaultTypeInternal() {}
  union {
    UnmuteAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnmuteAudioParamsDefaultTypeInternal _UnmuteAudioParams_default_instance_;
PROTOBUF_CONSTEXPR EnablePlayChimeWhenEnterOrExitParams::EnablePlayChimeWhenEnterOrExitParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnablePlayChimeWhenEnterOrExitParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnablePlayChimeWhenEnterOrExitParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnablePlayChimeWhenEnterOrExitParamsDefaultTypeInternal() {}
  union {
    EnablePlayChimeWhenEnterOrExitParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnablePlayChimeWhenEnterOrExitParamsDefaultTypeInternal _EnablePlayChimeWhenEnterOrExitParams_default_instance_;
PROTOBUF_CONSTEXPR EnableInviteButtonOnMeetingUIParams::EnableInviteButtonOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableInviteButtonOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableInviteButtonOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableInviteButtonOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    EnableInviteButtonOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableInviteButtonOnMeetingUIParamsDefaultTypeInternal _EnableInviteButtonOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR SetFloatVideoPosParams::SetFloatVideoPosParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.top_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hselfwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hparent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SetFloatVideoPosParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetFloatVideoPosParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetFloatVideoPosParamsDefaultTypeInternal() {}
  union {
    SetFloatVideoPosParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetFloatVideoPosParamsDefaultTypeInternal _SetFloatVideoPosParams_default_instance_;
PROTOBUF_CONSTEXPR SetBottomFloatToolBarWndVisibilityParams::SetBottomFloatToolBarWndVisibilityParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetBottomFloatToolBarWndVisibilityParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetBottomFloatToolBarWndVisibilityParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetBottomFloatToolBarWndVisibilityParamsDefaultTypeInternal() {}
  union {
    SetBottomFloatToolBarWndVisibilityParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetBottomFloatToolBarWndVisibilityParamsDefaultTypeInternal _SetBottomFloatToolBarWndVisibilityParams_default_instance_;
PROTOBUF_CONSTEXPR SetSharingToolBarVisibilityParams::SetSharingToolBarVisibilityParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetSharingToolBarVisibilityParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSharingToolBarVisibilityParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSharingToolBarVisibilityParamsDefaultTypeInternal() {}
  union {
    SetSharingToolBarVisibilityParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSharingToolBarVisibilityParamsDefaultTypeInternal _SetSharingToolBarVisibilityParams_default_instance_;
PROTOBUF_CONSTEXPR SetDirectShareMonitorIDParams::SetDirectShareMonitorIDParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.monitorid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SetDirectShareMonitorIDParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetDirectShareMonitorIDParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetDirectShareMonitorIDParamsDefaultTypeInternal() {}
  union {
    SetDirectShareMonitorIDParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetDirectShareMonitorIDParamsDefaultTypeInternal _SetDirectShareMonitorIDParams_default_instance_;
PROTOBUF_CONSTEXPR SetMeetingUIPosParams::SetMeetingUIPosParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.top_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hselfwnd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hparent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SetMeetingUIPosParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMeetingUIPosParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMeetingUIPosParamsDefaultTypeInternal() {}
  union {
    SetMeetingUIPosParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMeetingUIPosParamsDefaultTypeInternal _SetMeetingUIPosParams_default_instance_;
PROTOBUF_CONSTEXPR DisableWaitingForHostDialogParams::DisableWaitingForHostDialogParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableWaitingForHostDialogParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableWaitingForHostDialogParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableWaitingForHostDialogParamsDefaultTypeInternal() {}
  union {
    DisableWaitingForHostDialogParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableWaitingForHostDialogParamsDefaultTypeInternal _DisableWaitingForHostDialogParams_default_instance_;
PROTOBUF_CONSTEXPR DisablePopupMeetingWrongPSWDlgParams::DisablePopupMeetingWrongPSWDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisablePopupMeetingWrongPSWDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisablePopupMeetingWrongPSWDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisablePopupMeetingWrongPSWDlgParamsDefaultTypeInternal() {}
  union {
    DisablePopupMeetingWrongPSWDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisablePopupMeetingWrongPSWDlgParamsDefaultTypeInternal _DisablePopupMeetingWrongPSWDlgParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoEndOtherMeetingWhenStartMeetingParams::EnableAutoEndOtherMeetingWhenStartMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoEndOtherMeetingWhenStartMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoEndOtherMeetingWhenStartMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoEndOtherMeetingWhenStartMeetingParamsDefaultTypeInternal() {}
  union {
    EnableAutoEndOtherMeetingWhenStartMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoEndOtherMeetingWhenStartMeetingParamsDefaultTypeInternal _EnableAutoEndOtherMeetingWhenStartMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableLButtonDBClick4SwitchFullScreenModeParams::EnableLButtonDBClick4SwitchFullScreenModeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableLButtonDBClick4SwitchFullScreenModeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableLButtonDBClick4SwitchFullScreenModeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableLButtonDBClick4SwitchFullScreenModeParamsDefaultTypeInternal() {}
  union {
    EnableLButtonDBClick4SwitchFullScreenModeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableLButtonDBClick4SwitchFullScreenModeParamsDefaultTypeInternal _EnableLButtonDBClick4SwitchFullScreenModeParams_default_instance_;
PROTOBUF_CONSTEXPR SetFloatVideoWndVisibilityParams::SetFloatVideoWndVisibilityParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetFloatVideoWndVisibilityParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetFloatVideoWndVisibilityParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetFloatVideoWndVisibilityParamsDefaultTypeInternal() {}
  union {
    SetFloatVideoWndVisibilityParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetFloatVideoWndVisibilityParamsDefaultTypeInternal _SetFloatVideoWndVisibilityParams_default_instance_;
PROTOBUF_CONSTEXPR PrePopulateWebinarRegistrationInfoParams::PrePopulateWebinarRegistrationInfoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.email_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct PrePopulateWebinarRegistrationInfoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrePopulateWebinarRegistrationInfoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrePopulateWebinarRegistrationInfoParamsDefaultTypeInternal() {}
  union {
    PrePopulateWebinarRegistrationInfoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrePopulateWebinarRegistrationInfoParamsDefaultTypeInternal _PrePopulateWebinarRegistrationInfoParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoAdjustSpeakerVolumeWhenJoinAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoAdjustSpeakerVolumeWhenJoinAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoAdjustSpeakerVolumeWhenJoinAudioParamsDefaultTypeInternal() {}
  union {
    EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoAdjustSpeakerVolumeWhenJoinAudioParamsDefaultTypeInternal _EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoAdjustMicVolumeWhenJoinAudioParams::EnableAutoAdjustMicVolumeWhenJoinAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoAdjustMicVolumeWhenJoinAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoAdjustMicVolumeWhenJoinAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoAdjustMicVolumeWhenJoinAudioParamsDefaultTypeInternal() {}
  union {
    EnableAutoAdjustMicVolumeWhenJoinAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoAdjustMicVolumeWhenJoinAudioParamsDefaultTypeInternal _EnableAutoAdjustMicVolumeWhenJoinAudioParams_default_instance_;
PROTOBUF_CONSTEXPR ConfigDSCPParams::ConfigDSCPParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dscpaudio_)*/ 0

  , /*decltype(_impl_.dscpvideo_)*/ 0

  , /*decltype(_impl_.breset_)*/ false
} {}
struct ConfigDSCPParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDSCPParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDSCPParamsDefaultTypeInternal() {}
  union {
    ConfigDSCPParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDSCPParamsDefaultTypeInternal _ConfigDSCPParams_default_instance_;
PROTOBUF_CONSTEXPR EnableHIdeFullPhoneNumber4PureCallinUserParams::EnableHIdeFullPhoneNumber4PureCallinUserParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableHIdeFullPhoneNumber4PureCallinUserParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableHIdeFullPhoneNumber4PureCallinUserParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableHIdeFullPhoneNumber4PureCallinUserParamsDefaultTypeInternal() {}
  union {
    EnableHIdeFullPhoneNumber4PureCallinUserParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableHIdeFullPhoneNumber4PureCallinUserParamsDefaultTypeInternal _EnableHIdeFullPhoneNumber4PureCallinUserParams_default_instance_;
PROTOBUF_CONSTEXPR EnableShareIOSDeviceParams::EnableShareIOSDeviceParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableShareIOSDeviceParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableShareIOSDeviceParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableShareIOSDeviceParamsDefaultTypeInternal() {}
  union {
    EnableShareIOSDeviceParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableShareIOSDeviceParamsDefaultTypeInternal _EnableShareIOSDeviceParams_default_instance_;
PROTOBUF_CONSTEXPR EnableShareWhiteBoardParams::EnableShareWhiteBoardParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableShareWhiteBoardParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableShareWhiteBoardParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableShareWhiteBoardParamsDefaultTypeInternal() {}
  union {
    EnableShareWhiteBoardParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableShareWhiteBoardParamsDefaultTypeInternal _EnableShareWhiteBoardParams_default_instance_;
PROTOBUF_CONSTEXPR EnableLengthLimitationOfMeetingNumberParams::EnableLengthLimitationOfMeetingNumberParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableLengthLimitationOfMeetingNumberParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableLengthLimitationOfMeetingNumberParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableLengthLimitationOfMeetingNumberParamsDefaultTypeInternal() {}
  union {
    EnableLengthLimitationOfMeetingNumberParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableLengthLimitationOfMeetingNumberParamsDefaultTypeInternal _EnableLengthLimitationOfMeetingNumberParams_default_instance_;
PROTOBUF_CONSTEXPR ForceDisableMultiShareParams::ForceDisableMultiShareParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct ForceDisableMultiShareParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForceDisableMultiShareParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForceDisableMultiShareParamsDefaultTypeInternal() {}
  union {
    ForceDisableMultiShareParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForceDisableMultiShareParamsDefaultTypeInternal _ForceDisableMultiShareParams_default_instance_;
PROTOBUF_CONSTEXPR EnableLocalRecordingConverProgressBarDialogParams::EnableLocalRecordingConverProgressBarDialogParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableLocalRecordingConverProgressBarDialogParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableLocalRecordingConverProgressBarDialogParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableLocalRecordingConverProgressBarDialogParamsDefaultTypeInternal() {}
  union {
    EnableLocalRecordingConverProgressBarDialogParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableLocalRecordingConverProgressBarDialogParamsDefaultTypeInternal _EnableLocalRecordingConverProgressBarDialogParams_default_instance_;
PROTOBUF_CONSTEXPR SetMaxDurationForOnlyHostInMeetingParams::SetMaxDurationForOnlyHostInMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nduration_)*/ 0
} {}
struct SetMaxDurationForOnlyHostInMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMaxDurationForOnlyHostInMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMaxDurationForOnlyHostInMeetingParamsDefaultTypeInternal() {}
  union {
    SetMaxDurationForOnlyHostInMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMaxDurationForOnlyHostInMeetingParamsDefaultTypeInternal _SetMaxDurationForOnlyHostInMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableApproveRemoteControlDlgParams::EnableApproveRemoteControlDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableApproveRemoteControlDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableApproveRemoteControlDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableApproveRemoteControlDlgParamsDefaultTypeInternal() {}
  union {
    EnableApproveRemoteControlDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableApproveRemoteControlDlgParamsDefaultTypeInternal _EnableApproveRemoteControlDlgParams_default_instance_;
PROTOBUF_CONSTEXPR EnableDeclineRemoteControlResponseDlgParams::EnableDeclineRemoteControlResponseDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableDeclineRemoteControlResponseDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableDeclineRemoteControlResponseDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableDeclineRemoteControlResponseDlgParamsDefaultTypeInternal() {}
  union {
    EnableDeclineRemoteControlResponseDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableDeclineRemoteControlResponseDlgParamsDefaultTypeInternal _EnableDeclineRemoteControlResponseDlgParams_default_instance_;
PROTOBUF_CONSTEXPR EnableLeaveMeetingOptionForHostParams::EnableLeaveMeetingOptionForHostParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableLeaveMeetingOptionForHostParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableLeaveMeetingOptionForHostParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableLeaveMeetingOptionForHostParamsDefaultTypeInternal() {}
  union {
    EnableLeaveMeetingOptionForHostParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableLeaveMeetingOptionForHostParamsDefaultTypeInternal _EnableLeaveMeetingOptionForHostParams_default_instance_;
PROTOBUF_CONSTEXPR EnableVideoButtonOnMeetingUIParams::EnableVideoButtonOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableVideoButtonOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableVideoButtonOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableVideoButtonOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    EnableVideoButtonOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableVideoButtonOnMeetingUIParamsDefaultTypeInternal _EnableVideoButtonOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAudioButtonOnMeetingUIParams::EnableAudioButtonOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAudioButtonOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAudioButtonOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAudioButtonOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    EnableAudioButtonOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAudioButtonOnMeetingUIParamsDefaultTypeInternal _EnableAudioButtonOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR EnableEnterAndExitFullScreenButtonOnMeetingUIParams::EnableEnterAndExitFullScreenButtonOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableEnterAndExitFullScreenButtonOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableEnterAndExitFullScreenButtonOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableEnterAndExitFullScreenButtonOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    EnableEnterAndExitFullScreenButtonOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableEnterAndExitFullScreenButtonOnMeetingUIParamsDefaultTypeInternal _EnableEnterAndExitFullScreenButtonOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectClickShareBTNEventParams::RedirectClickShareBTNEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectClickShareBTNEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectClickShareBTNEventParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectClickShareBTNEventParamsDefaultTypeInternal() {}
  union {
    RedirectClickShareBTNEventParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectClickShareBTNEventParamsDefaultTypeInternal _RedirectClickShareBTNEventParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectClickEndMeetingBTNEventParams::RedirectClickEndMeetingBTNEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectClickEndMeetingBTNEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectClickEndMeetingBTNEventParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectClickEndMeetingBTNEventParamsDefaultTypeInternal() {}
  union {
    RedirectClickEndMeetingBTNEventParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectClickEndMeetingBTNEventParamsDefaultTypeInternal _RedirectClickEndMeetingBTNEventParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectFreeMeetingEndingReminderDlgParams::RedirectFreeMeetingEndingReminderDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectFreeMeetingEndingReminderDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectFreeMeetingEndingReminderDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectFreeMeetingEndingReminderDlgParamsDefaultTypeInternal() {}
  union {
    RedirectFreeMeetingEndingReminderDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectFreeMeetingEndingReminderDlgParamsDefaultTypeInternal _RedirectFreeMeetingEndingReminderDlgParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectClickCustomLiveStreamMenuEventParams::RedirectClickCustomLiveStreamMenuEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectClickCustomLiveStreamMenuEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectClickCustomLiveStreamMenuEventParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectClickCustomLiveStreamMenuEventParamsDefaultTypeInternal() {}
  union {
    RedirectClickCustomLiveStreamMenuEventParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectClickCustomLiveStreamMenuEventParamsDefaultTypeInternal _RedirectClickCustomLiveStreamMenuEventParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectClickParticipantListBTNEventParams::RedirectClickParticipantListBTNEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectClickParticipantListBTNEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectClickParticipantListBTNEventParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectClickParticipantListBTNEventParamsDefaultTypeInternal() {}
  union {
    RedirectClickParticipantListBTNEventParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectClickParticipantListBTNEventParamsDefaultTypeInternal _RedirectClickParticipantListBTNEventParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectClickCCBTNEventParams::RedirectClickCCBTNEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectClickCCBTNEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectClickCCBTNEventParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectClickCCBTNEventParamsDefaultTypeInternal() {}
  union {
    RedirectClickCCBTNEventParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectClickCCBTNEventParamsDefaultTypeInternal _RedirectClickCCBTNEventParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectClickAudioBTNEventParams::RedirectClickAudioBTNEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectClickAudioBTNEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectClickAudioBTNEventParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectClickAudioBTNEventParamsDefaultTypeInternal() {}
  union {
    RedirectClickAudioBTNEventParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectClickAudioBTNEventParamsDefaultTypeInternal _RedirectClickAudioBTNEventParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectClickAudioMenuBTNEventParams::RedirectClickAudioMenuBTNEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectClickAudioMenuBTNEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectClickAudioMenuBTNEventParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectClickAudioMenuBTNEventParamsDefaultTypeInternal() {}
  union {
    RedirectClickAudioMenuBTNEventParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectClickAudioMenuBTNEventParamsDefaultTypeInternal _RedirectClickAudioMenuBTNEventParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectMeetingWarningMsgParams::RedirectMeetingWarningMsgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirectbadnetwork_)*/ false

  , /*decltype(_impl_.bredirectwarnhighcpu_)*/ false
} {}
struct RedirectMeetingWarningMsgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectMeetingWarningMsgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectMeetingWarningMsgParamsDefaultTypeInternal() {}
  union {
    RedirectMeetingWarningMsgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectMeetingWarningMsgParamsDefaultTypeInternal _RedirectMeetingWarningMsgParams_default_instance_;
PROTOBUF_CONSTEXPR EnableToolTipsShowParams::EnableToolTipsShowParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableToolTipsShowParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableToolTipsShowParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableToolTipsShowParamsDefaultTypeInternal() {}
  union {
    EnableToolTipsShowParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableToolTipsShowParamsDefaultTypeInternal _EnableToolTipsShowParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAirplayInstructionWindowParams::EnableAirplayInstructionWindowParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAirplayInstructionWindowParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAirplayInstructionWindowParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAirplayInstructionWindowParamsDefaultTypeInternal() {}
  union {
    EnableAirplayInstructionWindowParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAirplayInstructionWindowParamsDefaultTypeInternal _EnableAirplayInstructionWindowParams_default_instance_;
PROTOBUF_CONSTEXPR EnableClaimHostFeatureParams::EnableClaimHostFeatureParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableClaimHostFeatureParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableClaimHostFeatureParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableClaimHostFeatureParamsDefaultTypeInternal() {}
  union {
    EnableClaimHostFeatureParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableClaimHostFeatureParamsDefaultTypeInternal _EnableClaimHostFeatureParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoHideJoinAudioDialogParams::EnableAutoHideJoinAudioDialogParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoHideJoinAudioDialogParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoHideJoinAudioDialogParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoHideJoinAudioDialogParamsDefaultTypeInternal() {}
  union {
    EnableAutoHideJoinAudioDialogParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoHideJoinAudioDialogParamsDefaultTypeInternal _EnableAutoHideJoinAudioDialogParams_default_instance_;
PROTOBUF_CONSTEXPR AlwaysShowIconOnTaskBarParams::AlwaysShowIconOnTaskBarParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balwaysshow_)*/ false
} {}
struct AlwaysShowIconOnTaskBarParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlwaysShowIconOnTaskBarParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlwaysShowIconOnTaskBarParamsDefaultTypeInternal() {}
  union {
    AlwaysShowIconOnTaskBarParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlwaysShowIconOnTaskBarParamsDefaultTypeInternal _AlwaysShowIconOnTaskBarParams_default_instance_;
PROTOBUF_CONSTEXPR DisableSplitScreenModeUIElementsParams::DisableSplitScreenModeUIElementsParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableSplitScreenModeUIElementsParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableSplitScreenModeUIElementsParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableSplitScreenModeUIElementsParamsDefaultTypeInternal() {}
  union {
    DisableSplitScreenModeUIElementsParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableSplitScreenModeUIElementsParamsDefaultTypeInternal _DisableSplitScreenModeUIElementsParams_default_instance_;
PROTOBUF_CONSTEXPR SetShowAudioUseComputerSoundChkboxParams::SetShowAudioUseComputerSoundChkboxParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetShowAudioUseComputerSoundChkboxParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetShowAudioUseComputerSoundChkboxParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetShowAudioUseComputerSoundChkboxParamsDefaultTypeInternal() {}
  union {
    SetShowAudioUseComputerSoundChkboxParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetShowAudioUseComputerSoundChkboxParamsDefaultTypeInternal _SetShowAudioUseComputerSoundChkboxParams_default_instance_;
PROTOBUF_CONSTEXPR SetShowCallInTabParams::SetShowCallInTabParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetShowCallInTabParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetShowCallInTabParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetShowCallInTabParamsDefaultTypeInternal() {}
  union {
    SetShowCallInTabParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetShowCallInTabParamsDefaultTypeInternal _SetShowCallInTabParams_default_instance_;
PROTOBUF_CONSTEXPR SetShowCallMeTabParams::SetShowCallMeTabParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetShowCallMeTabParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetShowCallMeTabParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetShowCallMeTabParamsDefaultTypeInternal() {}
  union {
    SetShowCallMeTabParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetShowCallMeTabParamsDefaultTypeInternal _SetShowCallMeTabParams_default_instance_;
PROTOBUF_CONSTEXPR DisableTopMostAttr4SettingDialogParams::DisableTopMostAttr4SettingDialogParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableTopMostAttr4SettingDialogParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableTopMostAttr4SettingDialogParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableTopMostAttr4SettingDialogParamsDefaultTypeInternal() {}
  union {
    DisableTopMostAttr4SettingDialogParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableTopMostAttr4SettingDialogParamsDefaultTypeInternal _DisableTopMostAttr4SettingDialogParams_default_instance_;
PROTOBUF_CONSTEXPR EnableGrabShareWithoutReminderParams::EnableGrabShareWithoutReminderParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableGrabShareWithoutReminderParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableGrabShareWithoutReminderParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableGrabShareWithoutReminderParamsDefaultTypeInternal() {}
  union {
    EnableGrabShareWithoutReminderParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableGrabShareWithoutReminderParamsDefaultTypeInternal _EnableGrabShareWithoutReminderParams_default_instance_;
PROTOBUF_CONSTEXPR EnableShowShareSwitchMultiToSingleConfirmDlgParams::EnableShowShareSwitchMultiToSingleConfirmDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableShowShareSwitchMultiToSingleConfirmDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableShowShareSwitchMultiToSingleConfirmDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableShowShareSwitchMultiToSingleConfirmDlgParamsDefaultTypeInternal() {}
  union {
    EnableShowShareSwitchMultiToSingleConfirmDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableShowShareSwitchMultiToSingleConfirmDlgParamsDefaultTypeInternal _EnableShowShareSwitchMultiToSingleConfirmDlgParams_default_instance_;
PROTOBUF_CONSTEXPR DisableFreeMeetingRemainTimeNotifyParams::DisableFreeMeetingRemainTimeNotifyParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableFreeMeetingRemainTimeNotifyParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableFreeMeetingRemainTimeNotifyParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableFreeMeetingRemainTimeNotifyParamsDefaultTypeInternal() {}
  union {
    DisableFreeMeetingRemainTimeNotifyParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableFreeMeetingRemainTimeNotifyParamsDefaultTypeInternal _DisableFreeMeetingRemainTimeNotifyParams_default_instance_;
PROTOBUF_CONSTEXPR HideChatItemOnMeetingUIParams::HideChatItemOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideChatItemOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideChatItemOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideChatItemOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    HideChatItemOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideChatItemOnMeetingUIParamsDefaultTypeInternal _HideChatItemOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR HideRecordItemOnMeetingUIParams::HideRecordItemOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideRecordItemOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideRecordItemOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideRecordItemOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    HideRecordItemOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideRecordItemOnMeetingUIParamsDefaultTypeInternal _HideRecordItemOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR HideUpgradeFreeMeetingButtonParams::HideUpgradeFreeMeetingButtonParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideUpgradeFreeMeetingButtonParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideUpgradeFreeMeetingButtonParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideUpgradeFreeMeetingButtonParamsDefaultTypeInternal() {}
  union {
    HideUpgradeFreeMeetingButtonParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideUpgradeFreeMeetingButtonParamsDefaultTypeInternal _HideUpgradeFreeMeetingButtonParams_default_instance_;
PROTOBUF_CONSTEXPR SetShowInviteDlgTabPageParams::SetShowInviteDlgTabPageParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tabpage_)*/ 0

  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetShowInviteDlgTabPageParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetShowInviteDlgTabPageParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetShowInviteDlgTabPageParamsDefaultTypeInternal() {}
  union {
    SetShowInviteDlgTabPageParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetShowInviteDlgTabPageParamsDefaultTypeInternal _SetShowInviteDlgTabPageParams_default_instance_;
PROTOBUF_CONSTEXPR SetShowH323SubTabPageParams::SetShowH323SubTabPageParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tabpage_)*/ 0

  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetShowH323SubTabPageParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetShowH323SubTabPageParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetShowH323SubTabPageParamsDefaultTypeInternal() {}
  union {
    SetShowH323SubTabPageParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetShowH323SubTabPageParamsDefaultTypeInternal _SetShowH323SubTabPageParams_default_instance_;
PROTOBUF_CONSTEXPR HideSwitchCameraButtonParams::HideSwitchCameraButtonParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideSwitchCameraButtonParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideSwitchCameraButtonParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideSwitchCameraButtonParamsDefaultTypeInternal() {}
  union {
    HideSwitchCameraButtonParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideSwitchCameraButtonParamsDefaultTypeInternal _HideSwitchCameraButtonParams_default_instance_;
PROTOBUF_CONSTEXPR HideCopyUrlOnInviteWindowParams::HideCopyUrlOnInviteWindowParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideCopyUrlOnInviteWindowParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideCopyUrlOnInviteWindowParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideCopyUrlOnInviteWindowParamsDefaultTypeInternal() {}
  union {
    HideCopyUrlOnInviteWindowParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideCopyUrlOnInviteWindowParamsDefaultTypeInternal _HideCopyUrlOnInviteWindowParams_default_instance_;
PROTOBUF_CONSTEXPR HideCopyInvitationOnInviteWindowParams::HideCopyInvitationOnInviteWindowParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideCopyInvitationOnInviteWindowParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideCopyInvitationOnInviteWindowParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideCopyInvitationOnInviteWindowParamsDefaultTypeInternal() {}
  union {
    HideCopyInvitationOnInviteWindowParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideCopyInvitationOnInviteWindowParamsDefaultTypeInternal _HideCopyInvitationOnInviteWindowParams_default_instance_;
PROTOBUF_CONSTEXPR HideKeypadButtonOnMeetingWindowParams::HideKeypadButtonOnMeetingWindowParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideKeypadButtonOnMeetingWindowParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideKeypadButtonOnMeetingWindowParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideKeypadButtonOnMeetingWindowParamsDefaultTypeInternal() {}
  union {
    HideKeypadButtonOnMeetingWindowParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideKeypadButtonOnMeetingWindowParamsDefaultTypeInternal _HideKeypadButtonOnMeetingWindowParams_default_instance_;
PROTOBUF_CONSTEXPR HideRemoteControlOnMeetingUIParams::HideRemoteControlOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideRemoteControlOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideRemoteControlOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideRemoteControlOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    HideRemoteControlOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideRemoteControlOnMeetingUIParamsDefaultTypeInternal _HideRemoteControlOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR HideQAOnMeetingUIParams::HideQAOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideQAOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideQAOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideQAOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    HideQAOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideQAOnMeetingUIParamsDefaultTypeInternal _HideQAOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR HidePollOnMeetingUIParams::HidePollOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HidePollOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HidePollOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HidePollOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    HidePollOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HidePollOnMeetingUIParamsDefaultTypeInternal _HidePollOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR EnableInputMeetingPasswordDlgParams::EnableInputMeetingPasswordDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableInputMeetingPasswordDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableInputMeetingPasswordDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableInputMeetingPasswordDlgParamsDefaultTypeInternal() {}
  union {
    EnableInputMeetingPasswordDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableInputMeetingPasswordDlgParamsDefaultTypeInternal _EnableInputMeetingPasswordDlgParams_default_instance_;
PROTOBUF_CONSTEXPR EnableInputMeetingScreenNameDlgParams::EnableInputMeetingScreenNameDlgParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableInputMeetingScreenNameDlgParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableInputMeetingScreenNameDlgParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableInputMeetingScreenNameDlgParamsDefaultTypeInternal() {}
  union {
    EnableInputMeetingScreenNameDlgParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableInputMeetingScreenNameDlgParamsDefaultTypeInternal _EnableInputMeetingScreenNameDlgParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectWebinarNeedRegisterParams::RedirectWebinarNeedRegisterParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectWebinarNeedRegisterParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectWebinarNeedRegisterParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectWebinarNeedRegisterParamsDefaultTypeInternal() {}
  union {
    RedirectWebinarNeedRegisterParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectWebinarNeedRegisterParamsDefaultTypeInternal _RedirectWebinarNeedRegisterParams_default_instance_;
PROTOBUF_CONSTEXPR RedirectEndOtherMeetingParams::RedirectEndOtherMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bredirect_)*/ false
} {}
struct RedirectEndOtherMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectEndOtherMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectEndOtherMeetingParamsDefaultTypeInternal() {}
  union {
    RedirectEndOtherMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectEndOtherMeetingParamsDefaultTypeInternal _RedirectEndOtherMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableForceAutoStartMyVideoWhenJoinMeetingParams::EnableForceAutoStartMyVideoWhenJoinMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableForceAutoStartMyVideoWhenJoinMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableForceAutoStartMyVideoWhenJoinMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableForceAutoStartMyVideoWhenJoinMeetingParamsDefaultTypeInternal() {}
  union {
    EnableForceAutoStartMyVideoWhenJoinMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableForceAutoStartMyVideoWhenJoinMeetingParamsDefaultTypeInternal _EnableForceAutoStartMyVideoWhenJoinMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableForceAutoStopMyVideoWhenJoinMeetingParams::EnableForceAutoStopMyVideoWhenJoinMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableForceAutoStopMyVideoWhenJoinMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableForceAutoStopMyVideoWhenJoinMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableForceAutoStopMyVideoWhenJoinMeetingParamsDefaultTypeInternal() {}
  union {
    EnableForceAutoStopMyVideoWhenJoinMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableForceAutoStopMyVideoWhenJoinMeetingParamsDefaultTypeInternal _EnableForceAutoStopMyVideoWhenJoinMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParamsDefaultTypeInternal() {}
  union {
    DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParamsDefaultTypeInternal _DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR DisableShowJoinMeetingWndParams::DisableShowJoinMeetingWndParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableShowJoinMeetingWndParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableShowJoinMeetingWndParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableShowJoinMeetingWndParamsDefaultTypeInternal() {}
  union {
    DisableShowJoinMeetingWndParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableShowJoinMeetingWndParamsDefaultTypeInternal _DisableShowJoinMeetingWndParams_default_instance_;
PROTOBUF_CONSTEXPR DisableToolbarInviteButtonClickOriginActionParams::DisableToolbarInviteButtonClickOriginActionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableToolbarInviteButtonClickOriginActionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableToolbarInviteButtonClickOriginActionParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableToolbarInviteButtonClickOriginActionParamsDefaultTypeInternal() {}
  union {
    DisableToolbarInviteButtonClickOriginActionParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableToolbarInviteButtonClickOriginActionParamsDefaultTypeInternal _DisableToolbarInviteButtonClickOriginActionParams_default_instance_;
PROTOBUF_CONSTEXPR SetShowVideoOptimizeChkboxParams::SetShowVideoOptimizeChkboxParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bshow_)*/ false
} {}
struct SetShowVideoOptimizeChkboxParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetShowVideoOptimizeChkboxParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetShowVideoOptimizeChkboxParamsDefaultTypeInternal() {}
  union {
    SetShowVideoOptimizeChkboxParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetShowVideoOptimizeChkboxParamsDefaultTypeInternal _SetShowVideoOptimizeChkboxParams_default_instance_;
PROTOBUF_CONSTEXPR InputMeetingPasswordAndScreenNameParams::InputMeetingPasswordAndScreenNameParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.psw_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.screenname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct InputMeetingPasswordAndScreenNameParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputMeetingPasswordAndScreenNameParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputMeetingPasswordAndScreenNameParamsDefaultTypeInternal() {}
  union {
    InputMeetingPasswordAndScreenNameParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputMeetingPasswordAndScreenNameParamsDefaultTypeInternal _InputMeetingPasswordAndScreenNameParams_default_instance_;
PROTOBUF_CONSTEXPR InputMeetingIDAndScreenNameParams::InputMeetingIDAndScreenNameParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meetingid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.screenname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct InputMeetingIDAndScreenNameParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputMeetingIDAndScreenNameParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputMeetingIDAndScreenNameParamsDefaultTypeInternal() {}
  union {
    InputMeetingIDAndScreenNameParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputMeetingIDAndScreenNameParamsDefaultTypeInternal _InputMeetingIDAndScreenNameParams_default_instance_;
PROTOBUF_CONSTEXPR InputMeetingScreenNameParams::InputMeetingScreenNameParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.screenname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct InputMeetingScreenNameParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputMeetingScreenNameParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputMeetingScreenNameParamsDefaultTypeInternal() {}
  union {
    InputMeetingScreenNameParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputMeetingScreenNameParamsDefaultTypeInternal _InputMeetingScreenNameParams_default_instance_;
PROTOBUF_CONSTEXPR InputWebinarRegisterEmailAndScreenNameParams::InputWebinarRegisterEmailAndScreenNameParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.email_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.screenname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct InputWebinarRegisterEmailAndScreenNameParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputWebinarRegisterEmailAndScreenNameParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputWebinarRegisterEmailAndScreenNameParamsDefaultTypeInternal() {}
  union {
    InputWebinarRegisterEmailAndScreenNameParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputWebinarRegisterEmailAndScreenNameParamsDefaultTypeInternal _InputWebinarRegisterEmailAndScreenNameParams_default_instance_;
PROTOBUF_CONSTEXPR CallOutH323Params::CallOutH323Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.devicename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deviceip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.devicee164num_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.h323devicetype_)*/ 0
} {}
struct CallOutH323ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallOutH323ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallOutH323ParamsDefaultTypeInternal() {}
  union {
    CallOutH323Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallOutH323ParamsDefaultTypeInternal _CallOutH323Params_default_instance_;
PROTOBUF_CONSTEXPR GetUserInfoByUserIDParams::GetUserInfoByUserIDParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct GetUserInfoByUserIDParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserInfoByUserIDParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserInfoByUserIDParamsDefaultTypeInternal() {}
  union {
    GetUserInfoByUserIDParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserInfoByUserIDParamsDefaultTypeInternal _GetUserInfoByUserIDParams_default_instance_;
PROTOBUF_CONSTEXPR CanStartRecordingParams::CanStartRecordingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bcloudrecording_)*/ false

  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct CanStartRecordingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanStartRecordingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanStartRecordingParamsDefaultTypeInternal() {}
  union {
    CanStartRecordingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanStartRecordingParamsDefaultTypeInternal _CanStartRecordingParams_default_instance_;
PROTOBUF_CONSTEXPR IsSupportLocalRecordingParams::IsSupportLocalRecordingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct IsSupportLocalRecordingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsSupportLocalRecordingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsSupportLocalRecordingParamsDefaultTypeInternal() {}
  union {
    IsSupportLocalRecordingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsSupportLocalRecordingParamsDefaultTypeInternal _IsSupportLocalRecordingParams_default_instance_;
PROTOBUF_CONSTEXPR AllowLocalRecordingParams::AllowLocalRecordingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0
} {}
struct AllowLocalRecordingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowLocalRecordingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowLocalRecordingParamsDefaultTypeInternal() {}
  union {
    AllowLocalRecordingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowLocalRecordingParamsDefaultTypeInternal _AllowLocalRecordingParams_default_instance_;
PROTOBUF_CONSTEXPR DisAllowLocalRecordingParams::DisAllowLocalRecordingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct DisAllowLocalRecordingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisAllowLocalRecordingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisAllowLocalRecordingParamsDefaultTypeInternal() {}
  union {
    DisAllowLocalRecordingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisAllowLocalRecordingParamsDefaultTypeInternal _DisAllowLocalRecordingParams_default_instance_;
PROTOBUF_CONSTEXPR StartAppShareParams::StartAppShareParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hshareapp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct StartAppShareParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartAppShareParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartAppShareParamsDefaultTypeInternal() {}
  union {
    StartAppShareParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartAppShareParamsDefaultTypeInternal _StartAppShareParams_default_instance_;
PROTOBUF_CONSTEXPR StartMonitorShareParams::StartMonitorShareParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.monitorid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct StartMonitorShareParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartMonitorShareParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartMonitorShareParamsDefaultTypeInternal() {}
  union {
    StartMonitorShareParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartMonitorShareParamsDefaultTypeInternal _StartMonitorShareParams_default_instance_;
PROTOBUF_CONSTEXPR MuteVideoParams::MuteVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct MuteVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteVideoParamsDefaultTypeInternal() {}
  union {
    MuteVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteVideoParamsDefaultTypeInternal _MuteVideoParams_default_instance_;
PROTOBUF_CONSTEXPR UnMuteVideoParams::UnMuteVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct UnMuteVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnMuteVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnMuteVideoParamsDefaultTypeInternal() {}
  union {
    UnMuteVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnMuteVideoParamsDefaultTypeInternal _UnMuteVideoParams_default_instance_;
PROTOBUF_CONSTEXPR PinVideoParams::PinVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bpin_)*/ false

  , /*decltype(_impl_.bfirstview_)*/ false

  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct PinVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PinVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PinVideoParamsDefaultTypeInternal() {}
  union {
    PinVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PinVideoParamsDefaultTypeInternal _PinVideoParams_default_instance_;
PROTOBUF_CONSTEXPR SpotlightVideoParams::SpotlightVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bspotlight_)*/ false

  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct SpotlightVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotlightVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotlightVideoParamsDefaultTypeInternal() {}
  union {
    SpotlightVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotlightVideoParamsDefaultTypeInternal _SpotlightVideoParams_default_instance_;
PROTOBUF_CONSTEXPR HideOrShowNoVideoUserOnVideoWallParams::HideOrShowNoVideoUserOnVideoWallParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideOrShowNoVideoUserOnVideoWallParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideOrShowNoVideoUserOnVideoWallParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideOrShowNoVideoUserOnVideoWallParamsDefaultTypeInternal() {}
  union {
    HideOrShowNoVideoUserOnVideoWallParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideOrShowNoVideoUserOnVideoWallParamsDefaultTypeInternal _HideOrShowNoVideoUserOnVideoWallParams_default_instance_;
PROTOBUF_CONSTEXPR CreateRendererParams::CreateRendererParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recvhandle_)*/ ::uint64_t{0u}
} {}
struct CreateRendererParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRendererParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRendererParamsDefaultTypeInternal() {}
  union {
    CreateRendererParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRendererParamsDefaultTypeInternal _CreateRendererParams_default_instance_;
PROTOBUF_CONSTEXPR DestroyRendererParams::DestroyRendererParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recvhandle_)*/ ::uint64_t{0u}
} {}
struct DestroyRendererParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestroyRendererParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestroyRendererParamsDefaultTypeInternal() {}
  union {
    DestroyRendererParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestroyRendererParamsDefaultTypeInternal _DestroyRendererParams_default_instance_;
PROTOBUF_CONSTEXPR SubscribeParams::SubscribeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u

  , /*decltype(_impl_.rawdatatype_)*/ 0

  , /*decltype(_impl_.recvhandle_)*/ ::uint64_t{0u}
} {}
struct SubscribeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeParamsDefaultTypeInternal() {}
  union {
    SubscribeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeParamsDefaultTypeInternal _SubscribeParams_default_instance_;
PROTOBUF_CONSTEXPR UnSubscribeParams::UnSubscribeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recvhandle_)*/ ::uint64_t{0u}
} {}
struct UnSubscribeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnSubscribeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnSubscribeParamsDefaultTypeInternal() {}
  union {
    UnSubscribeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnSubscribeParamsDefaultTypeInternal _UnSubscribeParams_default_instance_;
PROTOBUF_CONSTEXPR SetRawDataResolutionParams::SetRawDataResolutionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recvhandle_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.resolution_)*/ 0
} {}
struct SetRawDataResolutionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRawDataResolutionParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRawDataResolutionParamsDefaultTypeInternal() {}
  union {
    SetRawDataResolutionParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRawDataResolutionParamsDefaultTypeInternal _SetRawDataResolutionParams_default_instance_;
PROTOBUF_CONSTEXPR GetResolutionParams::GetResolutionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recvhandle_)*/ ::uint64_t{0u}
} {}
struct GetResolutionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResolutionParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResolutionParamsDefaultTypeInternal() {}
  union {
    GetResolutionParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResolutionParamsDefaultTypeInternal _GetResolutionParams_default_instance_;
PROTOBUF_CONSTEXPR GetRawDataTypeParams::GetRawDataTypeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recvhandle_)*/ ::uint64_t{0u}
} {}
struct GetRawDataTypeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRawDataTypeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRawDataTypeParamsDefaultTypeInternal() {}
  union {
    GetRawDataTypeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRawDataTypeParamsDefaultTypeInternal _GetRawDataTypeParams_default_instance_;
PROTOBUF_CONSTEXPR GetUserIdParams::GetUserIdParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recvhandle_)*/ ::uint64_t{0u}
} {}
struct GetUserIdParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserIdParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserIdParamsDefaultTypeInternal() {}
  union {
    GetUserIdParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserIdParamsDefaultTypeInternal _GetUserIdParams_default_instance_;
PROTOBUF_CONSTEXPR EnableZoomAuthRealNameMeetingUIShownParams::EnableZoomAuthRealNameMeetingUIShownParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableZoomAuthRealNameMeetingUIShownParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableZoomAuthRealNameMeetingUIShownParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableZoomAuthRealNameMeetingUIShownParamsDefaultTypeInternal() {}
  union {
    EnableZoomAuthRealNameMeetingUIShownParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableZoomAuthRealNameMeetingUIShownParamsDefaultTypeInternal _EnableZoomAuthRealNameMeetingUIShownParams_default_instance_;
PROTOBUF_CONSTEXPR RetrieveParams::RetrieveParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.countrycode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.phonenum_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct RetrieveParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetrieveParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetrieveParamsDefaultTypeInternal() {}
  union {
    RetrieveParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetrieveParamsDefaultTypeInternal _RetrieveParams_default_instance_;
PROTOBUF_CONSTEXPR VerifyParams::VerifyParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.countrycode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.phonenum_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.verificationcode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct VerifyParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyParamsDefaultTypeInternal() {}
  union {
    VerifyParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyParamsDefaultTypeInternal _VerifyParams_default_instance_;
PROTOBUF_CONSTEXPR SetDefaultCellPhoneInfoParams::SetDefaultCellPhoneInfoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.countrycode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.phonenum_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SetDefaultCellPhoneInfoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetDefaultCellPhoneInfoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetDefaultCellPhoneInfoParamsDefaultTypeInternal() {}
  union {
    SetDefaultCellPhoneInfoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetDefaultCellPhoneInfoParamsDefaultTypeInternal _SetDefaultCellPhoneInfoParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAlwaysShowMeetingControlsParams::EnableAlwaysShowMeetingControlsParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAlwaysShowMeetingControlsParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAlwaysShowMeetingControlsParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAlwaysShowMeetingControlsParamsDefaultTypeInternal() {}
  union {
    EnableAlwaysShowMeetingControlsParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAlwaysShowMeetingControlsParamsDefaultTypeInternal _EnableAlwaysShowMeetingControlsParams_default_instance_;
PROTOBUF_CONSTEXPR SelectMicParams::SelectMicParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.devicename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SelectMicParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectMicParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectMicParamsDefaultTypeInternal() {}
  union {
    SelectMicParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectMicParamsDefaultTypeInternal _SelectMicParams_default_instance_;
PROTOBUF_CONSTEXPR SelectSpeakerParams::SelectSpeakerParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.devicename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SelectSpeakerParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectSpeakerParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectSpeakerParamsDefaultTypeInternal() {}
  union {
    SelectSpeakerParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectSpeakerParamsDefaultTypeInternal _SelectSpeakerParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoJoinAudioParams::EnableAutoJoinAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoJoinAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoJoinAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoJoinAudioParamsDefaultTypeInternal() {}
  union {
    EnableAutoJoinAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoJoinAudioParamsDefaultTypeInternal _EnableAutoJoinAudioParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoAdjustMicParams::EnableAutoAdjustMicParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoAdjustMicParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoAdjustMicParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoAdjustMicParamsDefaultTypeInternal() {}
  union {
    EnableAutoAdjustMicParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoAdjustMicParamsDefaultTypeInternal _EnableAutoAdjustMicParams_default_instance_;
PROTOBUF_CONSTEXPR EnableStereoAudioParams::EnableStereoAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableStereoAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableStereoAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableStereoAudioParamsDefaultTypeInternal() {}
  union {
    EnableStereoAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableStereoAudioParamsDefaultTypeInternal _EnableStereoAudioParams_default_instance_;
PROTOBUF_CONSTEXPR EnableMicOriginalInputParams::EnableMicOriginalInputParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableMicOriginalInputParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableMicOriginalInputParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableMicOriginalInputParamsDefaultTypeInternal() {}
  union {
    EnableMicOriginalInputParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableMicOriginalInputParamsDefaultTypeInternal _EnableMicOriginalInputParams_default_instance_;
PROTOBUF_CONSTEXPR EnableHoldSpaceKeyToSpeakParams::EnableHoldSpaceKeyToSpeakParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableHoldSpaceKeyToSpeakParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableHoldSpaceKeyToSpeakParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableHoldSpaceKeyToSpeakParamsDefaultTypeInternal() {}
  union {
    EnableHoldSpaceKeyToSpeakParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableHoldSpaceKeyToSpeakParamsDefaultTypeInternal _EnableHoldSpaceKeyToSpeakParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAlwaysMuteMicWhenJoinVoipParams::EnableAlwaysMuteMicWhenJoinVoipParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAlwaysMuteMicWhenJoinVoipParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAlwaysMuteMicWhenJoinVoipParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAlwaysMuteMicWhenJoinVoipParamsDefaultTypeInternal() {}
  union {
    EnableAlwaysMuteMicWhenJoinVoipParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAlwaysMuteMicWhenJoinVoipParamsDefaultTypeInternal _EnableAlwaysMuteMicWhenJoinVoipParams_default_instance_;
PROTOBUF_CONSTEXPR EnableSuppressAudioNotifyParams::EnableSuppressAudioNotifyParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableSuppressAudioNotifyParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableSuppressAudioNotifyParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableSuppressAudioNotifyParamsDefaultTypeInternal() {}
  union {
    EnableSuppressAudioNotifyParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableSuppressAudioNotifyParamsDefaultTypeInternal _EnableSuppressAudioNotifyParams_default_instance_;
PROTOBUF_CONSTEXPR SetEchoCancellationLevelParams::SetEchoCancellationLevelParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.level_)*/ 0
} {}
struct SetEchoCancellationLevelParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetEchoCancellationLevelParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetEchoCancellationLevelParamsDefaultTypeInternal() {}
  union {
    SetEchoCancellationLevelParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetEchoCancellationLevelParamsDefaultTypeInternal _SetEchoCancellationLevelParams_default_instance_;
PROTOBUF_CONSTEXPR SetMicVolParams::SetMicVolParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/ 0
} {}
struct SetMicVolParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMicVolParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMicVolParamsDefaultTypeInternal() {}
  union {
    SetMicVolParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMicVolParamsDefaultTypeInternal _SetMicVolParams_default_instance_;
PROTOBUF_CONSTEXPR SetSpeakerVolParams::SetSpeakerVolParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/ 0
} {}
struct SetSpeakerVolParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSpeakerVolParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSpeakerVolParamsDefaultTypeInternal() {}
  union {
    SetSpeakerVolParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSpeakerVolParamsDefaultTypeInternal _SetSpeakerVolParams_default_instance_;
PROTOBUF_CONSTEXPR EnableDualScreenModeParams::EnableDualScreenModeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableDualScreenModeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableDualScreenModeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableDualScreenModeParamsDefaultTypeInternal() {}
  union {
    EnableDualScreenModeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableDualScreenModeParamsDefaultTypeInternal _EnableDualScreenModeParams_default_instance_;
PROTOBUF_CONSTEXPR TurnOffAeroModeInSharingParams::TurnOffAeroModeInSharingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bturnoff_)*/ false
} {}
struct TurnOffAeroModeInSharingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TurnOffAeroModeInSharingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TurnOffAeroModeInSharingParamsDefaultTypeInternal() {}
  union {
    TurnOffAeroModeInSharingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TurnOffAeroModeInSharingParamsDefaultTypeInternal _TurnOffAeroModeInSharingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoFitToWindowWhenViewSharingParams::EnableAutoFitToWindowWhenViewSharingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoFitToWindowWhenViewSharingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoFitToWindowWhenViewSharingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoFitToWindowWhenViewSharingParamsDefaultTypeInternal() {}
  union {
    EnableAutoFitToWindowWhenViewSharingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoFitToWindowWhenViewSharingParamsDefaultTypeInternal _EnableAutoFitToWindowWhenViewSharingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoFullScreenVideoWhenJoinMeetingParams::EnableAutoFullScreenVideoWhenJoinMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoFullScreenVideoWhenJoinMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoFullScreenVideoWhenJoinMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoFullScreenVideoWhenJoinMeetingParamsDefaultTypeInternal() {}
  union {
    EnableAutoFullScreenVideoWhenJoinMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoFullScreenVideoWhenJoinMeetingParamsDefaultTypeInternal _EnableAutoFullScreenVideoWhenJoinMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableSplitScreenModeParams::EnableSplitScreenModeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableSplitScreenModeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableSplitScreenModeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableSplitScreenModeParamsDefaultTypeInternal() {}
  union {
    EnableSplitScreenModeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableSplitScreenModeParamsDefaultTypeInternal _EnableSplitScreenModeParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoFullScreenVideoWhenViewShareParams::EnableAutoFullScreenVideoWhenViewShareParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoFullScreenVideoWhenViewShareParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoFullScreenVideoWhenViewShareParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoFullScreenVideoWhenViewShareParamsDefaultTypeInternal() {}
  union {
    EnableAutoFullScreenVideoWhenViewShareParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoFullScreenVideoWhenViewShareParamsDefaultTypeInternal _EnableAutoFullScreenVideoWhenViewShareParams_default_instance_;
PROTOBUF_CONSTEXPR EnableDisplayReminderWindowWhenExitParams::EnableDisplayReminderWindowWhenExitParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableDisplayReminderWindowWhenExitParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableDisplayReminderWindowWhenExitParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableDisplayReminderWindowWhenExitParamsDefaultTypeInternal() {}
  union {
    EnableDisplayReminderWindowWhenExitParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableDisplayReminderWindowWhenExitParamsDefaultTypeInternal _EnableDisplayReminderWindowWhenExitParams_default_instance_;
PROTOBUF_CONSTEXPR EnableShowMyMeetingElapseTimeParams::EnableShowMyMeetingElapseTimeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableShowMyMeetingElapseTimeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableShowMyMeetingElapseTimeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableShowMyMeetingElapseTimeParamsDefaultTypeInternal() {}
  union {
    EnableShowMyMeetingElapseTimeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableShowMyMeetingElapseTimeParamsDefaultTypeInternal _EnableShowMyMeetingElapseTimeParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAccelerateGPUWhenShareParams::EnableAccelerateGPUWhenShareParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAccelerateGPUWhenShareParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAccelerateGPUWhenShareParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAccelerateGPUWhenShareParamsDefaultTypeInternal() {}
  union {
    EnableAccelerateGPUWhenShareParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAccelerateGPUWhenShareParamsDefaultTypeInternal _EnableAccelerateGPUWhenShareParams_default_instance_;
PROTOBUF_CONSTEXPR EnableRemoteControlAllApplicationsParams::EnableRemoteControlAllApplicationsParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableRemoteControlAllApplicationsParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableRemoteControlAllApplicationsParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableRemoteControlAllApplicationsParamsDefaultTypeInternal() {}
  union {
    EnableRemoteControlAllApplicationsParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableRemoteControlAllApplicationsParamsDefaultTypeInternal _EnableRemoteControlAllApplicationsParams_default_instance_;
PROTOBUF_CONSTEXPR SetRecordingPathParams::SetRecordingPathParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recpath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SetRecordingPathParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRecordingPathParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRecordingPathParamsDefaultTypeInternal() {}
  union {
    SetRecordingPathParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRecordingPathParamsDefaultTypeInternal _SetRecordingPathParams_default_instance_;
PROTOBUF_CONSTEXPR EnableSelectRecordFileLocationAfterMeetingParams::EnableSelectRecordFileLocationAfterMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableSelectRecordFileLocationAfterMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableSelectRecordFileLocationAfterMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableSelectRecordFileLocationAfterMeetingParamsDefaultTypeInternal() {}
  union {
    EnableSelectRecordFileLocationAfterMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableSelectRecordFileLocationAfterMeetingParamsDefaultTypeInternal _EnableSelectRecordFileLocationAfterMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableMultiAudioStreamRecordParams::EnableMultiAudioStreamRecordParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableMultiAudioStreamRecordParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableMultiAudioStreamRecordParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableMultiAudioStreamRecordParamsDefaultTypeInternal() {}
  union {
    EnableMultiAudioStreamRecordParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableMultiAudioStreamRecordParamsDefaultTypeInternal _EnableMultiAudioStreamRecordParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAddTimestampWatermarkParams::EnableAddTimestampWatermarkParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAddTimestampWatermarkParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAddTimestampWatermarkParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAddTimestampWatermarkParamsDefaultTypeInternal() {}
  union {
    EnableAddTimestampWatermarkParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAddTimestampWatermarkParamsDefaultTypeInternal _EnableAddTimestampWatermarkParams_default_instance_;
PROTOBUF_CONSTEXPR EnableOptimizeFor3rdPartyVideoEditorParams::EnableOptimizeFor3rdPartyVideoEditorParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableOptimizeFor3rdPartyVideoEditorParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableOptimizeFor3rdPartyVideoEditorParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableOptimizeFor3rdPartyVideoEditorParamsDefaultTypeInternal() {}
  union {
    EnableOptimizeFor3rdPartyVideoEditorParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableOptimizeFor3rdPartyVideoEditorParamsDefaultTypeInternal _EnableOptimizeFor3rdPartyVideoEditorParams_default_instance_;
PROTOBUF_CONSTEXPR EnableShowVideoThumbnailWhenShareParams::EnableShowVideoThumbnailWhenShareParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableShowVideoThumbnailWhenShareParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableShowVideoThumbnailWhenShareParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableShowVideoThumbnailWhenShareParamsDefaultTypeInternal() {}
  union {
    EnableShowVideoThumbnailWhenShareParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableShowVideoThumbnailWhenShareParamsDefaultTypeInternal _EnableShowVideoThumbnailWhenShareParams_default_instance_;
PROTOBUF_CONSTEXPR EnablePlaceVideoNextToShareInRecordParams::EnablePlaceVideoNextToShareInRecordParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnablePlaceVideoNextToShareInRecordParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnablePlaceVideoNextToShareInRecordParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnablePlaceVideoNextToShareInRecordParamsDefaultTypeInternal() {}
  union {
    EnablePlaceVideoNextToShareInRecordParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnablePlaceVideoNextToShareInRecordParamsDefaultTypeInternal _EnablePlaceVideoNextToShareInRecordParams_default_instance_;
PROTOBUF_CONSTEXPR DisableAdvancedFeatures4GeneralSettingParams::DisableAdvancedFeatures4GeneralSettingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableAdvancedFeatures4GeneralSettingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableAdvancedFeatures4GeneralSettingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableAdvancedFeatures4GeneralSettingParamsDefaultTypeInternal() {}
  union {
    DisableAdvancedFeatures4GeneralSettingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableAdvancedFeatures4GeneralSettingParamsDefaultTypeInternal _DisableAdvancedFeatures4GeneralSettingParams_default_instance_;
PROTOBUF_CONSTEXPR DisableAccountSettingTabPageParams::DisableAccountSettingTabPageParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdisable_)*/ false
} {}
struct DisableAccountSettingTabPageParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableAccountSettingTabPageParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableAccountSettingTabPageParamsDefaultTypeInternal() {}
  union {
    DisableAccountSettingTabPageParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableAccountSettingTabPageParamsDefaultTypeInternal _DisableAccountSettingTabPageParams_default_instance_;
PROTOBUF_CONSTEXPR HideAutoCopyInviteLinkCheckBoxParams::HideAutoCopyInviteLinkCheckBoxParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bhide_)*/ false
} {}
struct HideAutoCopyInviteLinkCheckBoxParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HideAutoCopyInviteLinkCheckBoxParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HideAutoCopyInviteLinkCheckBoxParamsDefaultTypeInternal() {}
  union {
    HideAutoCopyInviteLinkCheckBoxParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HideAutoCopyInviteLinkCheckBoxParamsDefaultTypeInternal _HideAutoCopyInviteLinkCheckBoxParams_default_instance_;
PROTOBUF_CONSTEXPR ConfigToShowUrlLinksInSettingParams::ConfigToShowUrlLinksInSettingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showoption_)*/ ::uint64_t{0u}
} {}
struct ConfigToShowUrlLinksInSettingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigToShowUrlLinksInSettingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigToShowUrlLinksInSettingParamsDefaultTypeInternal() {}
  union {
    ConfigToShowUrlLinksInSettingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigToShowUrlLinksInSettingParamsDefaultTypeInternal _ConfigToShowUrlLinksInSettingParams_default_instance_;
PROTOBUF_CONSTEXPR ConfSettingDialogShownTabPageParams::ConfSettingDialogShownTabPageParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showoption_)*/ ::uint64_t{0u}
} {}
struct ConfSettingDialogShownTabPageParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfSettingDialogShownTabPageParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfSettingDialogShownTabPageParamsDefaultTypeInternal() {}
  union {
    ConfSettingDialogShownTabPageParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfSettingDialogShownTabPageParamsDefaultTypeInternal _ConfSettingDialogShownTabPageParams_default_instance_;
PROTOBUF_CONSTEXPR SelectVideoCameraParams::SelectVideoCameraParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SelectVideoCameraParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectVideoCameraParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectVideoCameraParamsDefaultTypeInternal() {}
  union {
    SelectVideoCameraParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectVideoCameraParamsDefaultTypeInternal _SelectVideoCameraParams_default_instance_;
PROTOBUF_CONSTEXPR EnableVideoMirrorEffectParams::EnableVideoMirrorEffectParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableVideoMirrorEffectParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableVideoMirrorEffectParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableVideoMirrorEffectParamsDefaultTypeInternal() {}
  union {
    EnableVideoMirrorEffectParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableVideoMirrorEffectParamsDefaultTypeInternal _EnableVideoMirrorEffectParams_default_instance_;
PROTOBUF_CONSTEXPR EnableFaceBeautyEffectParams::EnableFaceBeautyEffectParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableFaceBeautyEffectParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableFaceBeautyEffectParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableFaceBeautyEffectParamsDefaultTypeInternal() {}
  union {
    EnableFaceBeautyEffectParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableFaceBeautyEffectParamsDefaultTypeInternal _EnableFaceBeautyEffectParams_default_instance_;
PROTOBUF_CONSTEXPR EnableHDVideoParams::EnableHDVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableHDVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableHDVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableHDVideoParamsDefaultTypeInternal() {}
  union {
    EnableHDVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableHDVideoParamsDefaultTypeInternal _EnableHDVideoParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAlwaysShowNameOnVideoParams::EnableAlwaysShowNameOnVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAlwaysShowNameOnVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAlwaysShowNameOnVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAlwaysShowNameOnVideoParamsDefaultTypeInternal() {}
  union {
    EnableAlwaysShowNameOnVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAlwaysShowNameOnVideoParamsDefaultTypeInternal _EnableAlwaysShowNameOnVideoParams_default_instance_;
PROTOBUF_CONSTEXPR EnableVideoPreviewDialogParams::EnableVideoPreviewDialogParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableVideoPreviewDialogParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableVideoPreviewDialogParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableVideoPreviewDialogParamsDefaultTypeInternal() {}
  union {
    EnableVideoPreviewDialogParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableVideoPreviewDialogParamsDefaultTypeInternal _EnableVideoPreviewDialogParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAutoTurnOffVideoWhenJoinMeetingParams::EnableAutoTurnOffVideoWhenJoinMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAutoTurnOffVideoWhenJoinMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAutoTurnOffVideoWhenJoinMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAutoTurnOffVideoWhenJoinMeetingParamsDefaultTypeInternal() {}
  union {
    EnableAutoTurnOffVideoWhenJoinMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAutoTurnOffVideoWhenJoinMeetingParamsDefaultTypeInternal _EnableAutoTurnOffVideoWhenJoinMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR EnableSpotlightSelfParams::EnableSpotlightSelfParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableSpotlightSelfParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableSpotlightSelfParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableSpotlightSelfParamsDefaultTypeInternal() {}
  union {
    EnableSpotlightSelfParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableSpotlightSelfParamsDefaultTypeInternal _EnableSpotlightSelfParams_default_instance_;
PROTOBUF_CONSTEXPR EnableHardwareEncodeParams::EnableHardwareEncodeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false

  , /*decltype(_impl_.encodetype_)*/ 0
} {}
struct EnableHardwareEncodeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableHardwareEncodeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableHardwareEncodeParamsDefaultTypeInternal() {}
  union {
    EnableHardwareEncodeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableHardwareEncodeParamsDefaultTypeInternal _EnableHardwareEncodeParams_default_instance_;
PROTOBUF_CONSTEXPR IsHardwareEncodeEnabledParams::IsHardwareEncodeEnabledParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encodetype_)*/ 0
} {}
struct IsHardwareEncodeEnabledParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsHardwareEncodeEnabledParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsHardwareEncodeEnabledParamsDefaultTypeInternal() {}
  union {
    IsHardwareEncodeEnabledParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsHardwareEncodeEnabledParamsDefaultTypeInternal _IsHardwareEncodeEnabledParams_default_instance_;
PROTOBUF_CONSTEXPR Enable49VideoesInGallaryViewParams::Enable49VideoesInGallaryViewParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct Enable49VideoesInGallaryViewParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Enable49VideoesInGallaryViewParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Enable49VideoesInGallaryViewParamsDefaultTypeInternal() {}
  union {
    Enable49VideoesInGallaryViewParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Enable49VideoesInGallaryViewParamsDefaultTypeInternal _Enable49VideoesInGallaryViewParams_default_instance_;
PROTOBUF_CONSTEXPR EnableHideNoVideoUsersOnWallViewParams::EnableHideNoVideoUsersOnWallViewParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableHideNoVideoUsersOnWallViewParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableHideNoVideoUsersOnWallViewParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableHideNoVideoUsersOnWallViewParamsDefaultTypeInternal() {}
  union {
    EnableHideNoVideoUsersOnWallViewParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableHideNoVideoUsersOnWallViewParamsDefaultTypeInternal _EnableHideNoVideoUsersOnWallViewParams_default_instance_;
PROTOBUF_CONSTEXPR GenerateSSOLoginWebURLParams::GenerateSSOLoginWebURLParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prefixofvanityurl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct GenerateSSOLoginWebURLParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateSSOLoginWebURLParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateSSOLoginWebURLParamsDefaultTypeInternal() {}
  union {
    GenerateSSOLoginWebURLParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateSSOLoginWebURLParamsDefaultTypeInternal _GenerateSSOLoginWebURLParams_default_instance_;
PROTOBUF_CONSTEXPR SSOLoginWithWebUriProtocolParams::SSOLoginWithWebUriProtocolParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uriprotocol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SSOLoginWithWebUriProtocolParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSOLoginWithWebUriProtocolParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSOLoginWithWebUriProtocolParamsDefaultTypeInternal() {}
  union {
    SSOLoginWithWebUriProtocolParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSOLoginWithWebUriProtocolParamsDefaultTypeInternal _SSOLoginWithWebUriProtocolParams_default_instance_;
PROTOBUF_CONSTEXPR ShowAANPanelParams::ShowAANPanelParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/ 0u

  , /*decltype(_impl_.y_)*/ 0u

  , /*decltype(_impl_.windowid_)*/ ::uint64_t{0u}
} {}
struct ShowAANPanelParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowAANPanelParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowAANPanelParamsDefaultTypeInternal() {}
  union {
    ShowAANPanelParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowAANPanelParamsDefaultTypeInternal _ShowAANPanelParams_default_instance_;
PROTOBUF_CONSTEXPR EnableInviteLinkOnMeetingUIParams::EnableInviteLinkOnMeetingUIParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableInviteLinkOnMeetingUIParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableInviteLinkOnMeetingUIParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableInviteLinkOnMeetingUIParamsDefaultTypeInternal() {}
  union {
    EnableInviteLinkOnMeetingUIParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableInviteLinkOnMeetingUIParamsDefaultTypeInternal _EnableInviteLinkOnMeetingUIParams_default_instance_;
PROTOBUF_CONSTEXPR SetMeetingTopicParams::SetMeetingTopicParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meetingtopic_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SetMeetingTopicParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMeetingTopicParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMeetingTopicParamsDefaultTypeInternal() {}
  union {
    SetMeetingTopicParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMeetingTopicParamsDefaultTypeInternal _SetMeetingTopicParams_default_instance_;
PROTOBUF_CONSTEXPR SetCustomizedCloudRecordingMgrUrlParams::SetCustomizedCloudRecordingMgrUrlParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.crmurl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SetCustomizedCloudRecordingMgrUrlParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCustomizedCloudRecordingMgrUrlParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCustomizedCloudRecordingMgrUrlParamsDefaultTypeInternal() {}
  union {
    SetCustomizedCloudRecordingMgrUrlParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCustomizedCloudRecordingMgrUrlParamsDefaultTypeInternal _SetCustomizedCloudRecordingMgrUrlParams_default_instance_;
PROTOBUF_CONSTEXPR SetCustomizedInvitationDomainParams::SetCustomizedInvitationDomainParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.invitation_domain_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SetCustomizedInvitationDomainParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCustomizedInvitationDomainParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCustomizedInvitationDomainParamsDefaultTypeInternal() {}
  union {
    SetCustomizedInvitationDomainParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCustomizedInvitationDomainParamsDefaultTypeInternal _SetCustomizedInvitationDomainParams_default_instance_;
PROTOBUF_CONSTEXPR SetCustomizedPollingUrlParams::SetCustomizedPollingUrlParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pollingurl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bcreate_)*/ false
} {}
struct SetCustomizedPollingUrlParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCustomizedPollingUrlParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCustomizedPollingUrlParamsDefaultTypeInternal() {}
  union {
    SetCustomizedPollingUrlParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCustomizedPollingUrlParamsDefaultTypeInternal _SetCustomizedPollingUrlParams_default_instance_;
PROTOBUF_CONSTEXPR SetAudioShareModeParams::SetAudioShareModeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_)*/ 0
} {}
struct SetAudioShareModeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAudioShareModeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAudioShareModeParamsDefaultTypeInternal() {}
  union {
    SetAudioShareModeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAudioShareModeParamsDefaultTypeInternal _SetAudioShareModeParams_default_instance_;
PROTOBUF_CONSTEXPR StartLiveStreamParams::StartLiveStreamParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.livestreamhandle_)*/ ::int64_t{0}
} {}
struct StartLiveStreamParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartLiveStreamParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartLiveStreamParamsDefaultTypeInternal() {}
  union {
    StartLiveStreamParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartLiveStreamParamsDefaultTypeInternal _StartLiveStreamParams_default_instance_;
PROTOBUF_CONSTEXPR StartLiveStreamWithSteamingURLParams::StartLiveStreamWithSteamingURLParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.streamingurl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.streamingkey_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.broadcasturl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct StartLiveStreamWithSteamingURLParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartLiveStreamWithSteamingURLParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartLiveStreamWithSteamingURLParamsDefaultTypeInternal() {}
  union {
    StartLiveStreamWithSteamingURLParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartLiveStreamWithSteamingURLParamsDefaultTypeInternal _StartLiveStreamWithSteamingURLParams_default_instance_;
PROTOBUF_CONSTEXPR StartRawLiveStreamParams::StartRawLiveStreamParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.broadcasturl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct StartRawLiveStreamParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRawLiveStreamParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRawLiveStreamParamsDefaultTypeInternal() {}
  union {
    StartRawLiveStreamParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRawLiveStreamParamsDefaultTypeInternal _StartRawLiveStreamParams_default_instance_;
PROTOBUF_CONSTEXPR GetLiveStreamItemInfoParams::GetLiveStreamItemInfoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.livestreamhandle_)*/ ::int64_t{0}
} {}
struct GetLiveStreamItemInfoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLiveStreamItemInfoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLiveStreamItemInfoParamsDefaultTypeInternal() {}
  union {
    GetLiveStreamItemInfoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLiveStreamItemInfoParamsDefaultTypeInternal _GetLiveStreamItemInfoParams_default_instance_;
PROTOBUF_CONSTEXPR RequestRawLiveStreamParams::RequestRawLiveStreamParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.broadcasturl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct RequestRawLiveStreamParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestRawLiveStreamParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestRawLiveStreamParamsDefaultTypeInternal() {}
  union {
    RequestRawLiveStreamParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestRawLiveStreamParamsDefaultTypeInternal _RequestRawLiveStreamParams_default_instance_;
PROTOBUF_CONSTEXPR RemoveRawLiveStreamPrivilegeParams::RemoveRawLiveStreamPrivilegeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct RemoveRawLiveStreamPrivilegeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveRawLiveStreamPrivilegeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveRawLiveStreamPrivilegeParamsDefaultTypeInternal() {}
  union {
    RemoveRawLiveStreamPrivilegeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveRawLiveStreamPrivilegeParamsDefaultTypeInternal _RemoveRawLiveStreamPrivilegeParams_default_instance_;
PROTOBUF_CONSTEXPR SetSupportDarkModeParams::SetSupportDarkModeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.support_)*/ false
} {}
struct SetSupportDarkModeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSupportDarkModeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSupportDarkModeParamsDefaultTypeInternal() {}
  union {
    SetSupportDarkModeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSupportDarkModeParamsDefaultTypeInternal _SetSupportDarkModeParams_default_instance_;
PROTOBUF_CONSTEXPR SetPipeInitParams::SetPipeInitParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.videopipename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sharepipename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.audiopipename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maxreadlength_)*/ ::uint64_t{0u}
} {}
struct SetPipeInitParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPipeInitParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPipeInitParamsDefaultTypeInternal() {}
  union {
    SetPipeInitParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPipeInitParamsDefaultTypeInternal _SetPipeInitParams_default_instance_;
PROTOBUF_CONSTEXPR SetParticipantsChatPrivilegeParams::SetParticipantsChatPrivilegeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.privilege_)*/ 0
} {}
struct SetParticipantsChatPrivilegeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetParticipantsChatPrivilegeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetParticipantsChatPrivilegeParamsDefaultTypeInternal() {}
  union {
    SetParticipantsChatPrivilegeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetParticipantsChatPrivilegeParamsDefaultTypeInternal _SetParticipantsChatPrivilegeParams_default_instance_;
PROTOBUF_CONSTEXPR ChatMessageIDParams::ChatMessageIDParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msgid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ChatMessageIDParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageIDParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageIDParamsDefaultTypeInternal() {}
  union {
    ChatMessageIDParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageIDParamsDefaultTypeInternal _ChatMessageIDParams_default_instance_;
PROTOBUF_CONSTEXPR SetChatMessageBuilderParams::SetChatMessageBuilderParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.threadid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ 0u

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.positionstart_)*/ 0

  , /*decltype(_impl_.positionend_)*/ 0

  , /*decltype(_impl_.bclearstyles_)*/ false

  , /*decltype(_impl_.bclear_)*/ false
} {}
struct SetChatMessageBuilderParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetChatMessageBuilderParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetChatMessageBuilderParamsDefaultTypeInternal() {}
  union {
    SetChatMessageBuilderParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetChatMessageBuilderParamsDefaultTypeInternal _SetChatMessageBuilderParams_default_instance_;
PROTOBUF_CONSTEXPR EnableWaitingRoomOnEntryParams::EnableWaitingRoomOnEntryParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableWaitingRoomOnEntryParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableWaitingRoomOnEntryParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableWaitingRoomOnEntryParamsDefaultTypeInternal() {}
  union {
    EnableWaitingRoomOnEntryParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableWaitingRoomOnEntryParamsDefaultTypeInternal _EnableWaitingRoomOnEntryParams_default_instance_;
PROTOBUF_CONSTEXPR GetWaitingRoomUserInfoByIDParams::GetWaitingRoomUserInfoByIDParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct GetWaitingRoomUserInfoByIDParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWaitingRoomUserInfoByIDParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWaitingRoomUserInfoByIDParamsDefaultTypeInternal() {}
  union {
    GetWaitingRoomUserInfoByIDParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWaitingRoomUserInfoByIDParamsDefaultTypeInternal _GetWaitingRoomUserInfoByIDParams_default_instance_;
PROTOBUF_CONSTEXPR AdmitToMeetingParams::AdmitToMeetingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct AdmitToMeetingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdmitToMeetingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdmitToMeetingParamsDefaultTypeInternal() {}
  union {
    AdmitToMeetingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdmitToMeetingParamsDefaultTypeInternal _AdmitToMeetingParams_default_instance_;
PROTOBUF_CONSTEXPR PutInWaitingRoomParams::PutInWaitingRoomParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct PutInWaitingRoomParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutInWaitingRoomParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutInWaitingRoomParamsDefaultTypeInternal() {}
  union {
    PutInWaitingRoomParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutInWaitingRoomParamsDefaultTypeInternal _PutInWaitingRoomParams_default_instance_;
PROTOBUF_CONSTEXPR RenameUserParams::RenameUserParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.newname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct RenameUserParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameUserParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameUserParamsDefaultTypeInternal() {}
  union {
    RenameUserParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameUserParamsDefaultTypeInternal _RenameUserParams_default_instance_;
PROTOBUF_CONSTEXPR ExpelUserParams::ExpelUserParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userid_)*/ 0u
} {}
struct ExpelUserParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpelUserParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpelUserParamsDefaultTypeInternal() {}
  union {
    ExpelUserParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpelUserParamsDefaultTypeInternal _ExpelUserParams_default_instance_;
PROTOBUF_CONSTEXPR AllowParticipantsToRequestCloudRecordingParams::AllowParticipantsToRequestCloudRecordingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ballow_)*/ false
} {}
struct AllowParticipantsToRequestCloudRecordingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowParticipantsToRequestCloudRecordingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowParticipantsToRequestCloudRecordingParamsDefaultTypeInternal() {}
  union {
    AllowParticipantsToRequestCloudRecordingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowParticipantsToRequestCloudRecordingParamsDefaultTypeInternal _AllowParticipantsToRequestCloudRecordingParams_default_instance_;
PROTOBUF_CONSTEXPR DenyRequestStartCloudRecordingParams::DenyRequestStartCloudRecordingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdenyall_)*/ false
} {}
struct DenyRequestStartCloudRecordingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenyRequestStartCloudRecordingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenyRequestStartCloudRecordingParamsDefaultTypeInternal() {}
  union {
    DenyRequestStartCloudRecordingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenyRequestStartCloudRecordingParamsDefaultTypeInternal _DenyRequestStartCloudRecordingParams_default_instance_;
PROTOBUF_CONSTEXPR SetEnableOptionParams::SetEnableOptionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_)*/ 0u
} {}
struct SetEnableOptionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetEnableOptionParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetEnableOptionParamsDefaultTypeInternal() {}
  union {
    SetEnableOptionParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetEnableOptionParamsDefaultTypeInternal _SetEnableOptionParams_default_instance_;
PROTOBUF_CONSTEXPR DeclineEnableParams::DeclineEnableParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bdeclineall_)*/ false
} {}
struct DeclineEnableParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeclineEnableParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeclineEnableParamsDefaultTypeInternal() {}
  union {
    DeclineEnableParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeclineEnableParamsDefaultTypeInternal _DeclineEnableParams_default_instance_;
PROTOBUF_CONSTEXPR InputScreenNameParams::InputScreenNameParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.screenname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct InputScreenNameParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputScreenNameParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputScreenNameParamsDefaultTypeInternal() {}
  union {
    InputScreenNameParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputScreenNameParamsDefaultTypeInternal _InputScreenNameParams_default_instance_;
}  // namespace proto
}  // namespace sdk
}  // namespace electron
}  // namespace com
namespace com {
namespace electron {
namespace sdk {
namespace proto {
// ===================================================================

class InitSDKParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InitSDKParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InitSDKParams, _impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_customizedlanguagename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_customizedlanguageinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_customizedlanguagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_strsupporturl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_langid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enablelog(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_applocale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_logfilesize(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enablegeneraldump(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_permonitorawarenessmode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_videorendermode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_videorawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sharerawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_audiorawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enablerawdataintermediatemode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_renderpostprocessing(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_videocapturemethod(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_customlocalizationfilepath(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_usecustomui(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_strbrandingname(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

InitSDKParams::InitSDKParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InitSDKParams)
}
InitSDKParams::InitSDKParams(const InitSDKParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InitSDKParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.domain_) {}

    , decltype(_impl_.customizedlanguagename_) {}

    , decltype(_impl_.customizedlanguageinfo_) {}

    , decltype(_impl_.strsupporturl_) {}

    , decltype(_impl_.customlocalizationfilepath_) {}

    , decltype(_impl_.strbrandingname_) {}

    , decltype(_impl_.customizedlanguagetype_) {}

    , decltype(_impl_.langid_) {}

    , decltype(_impl_.applocale_) {}

    , decltype(_impl_.logfilesize_) {}

    , decltype(_impl_.enablelog_) {}

    , decltype(_impl_.enablegeneraldump_) {}

    , decltype(_impl_.permonitorawarenessmode_) {}

    , decltype(_impl_.enablerawdataintermediatemode_) {}

    , decltype(_impl_.videorendermode_) {}

    , decltype(_impl_.videorawdatamemorymode_) {}

    , decltype(_impl_.sharerawdatamemorymode_) {}

    , decltype(_impl_.audiorawdatamemorymode_) {}

    , decltype(_impl_.renderpostprocessing_) {}

    , decltype(_impl_.videocapturemethod_) {}

    , decltype(_impl_.usecustomui_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.domain_.Set(from._internal_domain(), _this->GetArenaForAllocation());
  }
  _impl_.customizedlanguagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customizedlanguagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.customizedlanguagename_.Set(from._internal_customizedlanguagename(), _this->GetArenaForAllocation());
  }
  _impl_.customizedlanguageinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customizedlanguageinfo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.customizedlanguageinfo_.Set(from._internal_customizedlanguageinfo(), _this->GetArenaForAllocation());
  }
  _impl_.strsupporturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strsupporturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.strsupporturl_.Set(from._internal_strsupporturl(), _this->GetArenaForAllocation());
  }
  _impl_.customlocalizationfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customlocalizationfilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.customlocalizationfilepath_.Set(from._internal_customlocalizationfilepath(), _this->GetArenaForAllocation());
  }
  _impl_.strbrandingname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strbrandingname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.strbrandingname_.Set(from._internal_strbrandingname(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.customizedlanguagetype_, &from._impl_.customizedlanguagetype_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.usecustomui_) -
    reinterpret_cast<char*>(&_impl_.customizedlanguagetype_)) + sizeof(_impl_.usecustomui_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InitSDKParams)
}

inline void InitSDKParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.domain_) {}

    , decltype(_impl_.customizedlanguagename_) {}

    , decltype(_impl_.customizedlanguageinfo_) {}

    , decltype(_impl_.strsupporturl_) {}

    , decltype(_impl_.customlocalizationfilepath_) {}

    , decltype(_impl_.strbrandingname_) {}

    , decltype(_impl_.customizedlanguagetype_) { 0 }

    , decltype(_impl_.langid_) { 0 }

    , decltype(_impl_.applocale_) { 0 }

    , decltype(_impl_.logfilesize_) { 0 }

    , decltype(_impl_.enablelog_) { false }

    , decltype(_impl_.enablegeneraldump_) { false }

    , decltype(_impl_.permonitorawarenessmode_) { false }

    , decltype(_impl_.enablerawdataintermediatemode_) { false }

    , decltype(_impl_.videorendermode_) { 0 }

    , decltype(_impl_.videorawdatamemorymode_) { 0 }

    , decltype(_impl_.sharerawdatamemorymode_) { 0 }

    , decltype(_impl_.audiorawdatamemorymode_) { 0 }

    , decltype(_impl_.renderpostprocessing_) { 0 }

    , decltype(_impl_.videocapturemethod_) { 0 }

    , decltype(_impl_.usecustomui_) { false }

  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customizedlanguagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customizedlanguagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customizedlanguageinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customizedlanguageinfo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strsupporturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strsupporturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customlocalizationfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customlocalizationfilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strbrandingname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strbrandingname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitSDKParams::~InitSDKParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InitSDKParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitSDKParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.customizedlanguagename_.Destroy();
  _impl_.customizedlanguageinfo_.Destroy();
  _impl_.strsupporturl_.Destroy();
  _impl_.customlocalizationfilepath_.Destroy();
  _impl_.strbrandingname_.Destroy();
}

void InitSDKParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitSDKParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InitSDKParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.customizedlanguagename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.customizedlanguageinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.strsupporturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.customlocalizationfilepath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.strbrandingname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.customizedlanguagetype_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.langid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.videorendermode_) -
        reinterpret_cast<char*>(&_impl_.langid_)) + sizeof(_impl_.videorendermode_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.videorawdatamemorymode_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.usecustomui_) -
        reinterpret_cast<char*>(&_impl_.videorawdatamemorymode_)) + sizeof(_impl_.usecustomui_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InitSDKParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string customizedLanguageName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_customizedlanguagename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string customizedLanguageInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_customizedlanguageinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 customizedLanguageType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_customizedlanguagetype(&has_bits);
          _impl_.customizedlanguagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strSupportUrl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_strsupporturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 langID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_langid(&has_bits);
          _impl_.langid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enableLog = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_enablelog(&has_bits);
          _impl_.enablelog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 appLocale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_applocale(&has_bits);
          _impl_.applocale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 logFileSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_logfilesize(&has_bits);
          _impl_.logfilesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enableGeneralDump = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_enablegeneraldump(&has_bits);
          _impl_.enablegeneraldump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool permonitorAwarenessMode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_permonitorawarenessmode(&has_bits);
          _impl_.permonitorawarenessmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 videoRenderMode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_videorendermode(&has_bits);
          _impl_.videorendermode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 videoRawdataMemoryMode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_videorawdatamemorymode(&has_bits);
          _impl_.videorawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 shareRawdataMemoryMode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_sharerawdatamemorymode(&has_bits);
          _impl_.sharerawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 audioRawdataMemoryMode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_audiorawdatamemorymode(&has_bits);
          _impl_.audiorawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enableRawdataIntermediateMode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_enablerawdataintermediatemode(&has_bits);
          _impl_.enablerawdataintermediatemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 renderPostProcessing = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_renderpostprocessing(&has_bits);
          _impl_.renderpostprocessing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 videoCaptureMethod = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_videocapturemethod(&has_bits);
          _impl_.videocapturemethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string customLocalizationFilePath = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_customlocalizationfilepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool useCustomUI = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 168)) {
          _Internal::set_has_usecustomui(&has_bits);
          _impl_.usecustomui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strBrandingName = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_strbrandingname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InitSDKParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InitSDKParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string domain = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_domain();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string customizedLanguageName = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_customizedlanguagename();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string customizedLanguageInfo = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_customizedlanguageinfo();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional int32 customizedLanguageType = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_customizedlanguagetype(), target);
  }

  // optional string strSupportUrl = 6;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_strsupporturl();
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional int32 langID = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_langid(), target);
  }

  // optional bool enableLog = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_enablelog(), target);
  }

  // optional int32 appLocale = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_applocale(), target);
  }

  // optional int32 logFileSize = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        10, this->_internal_logfilesize(), target);
  }

  // optional bool enableGeneralDump = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_enablegeneraldump(), target);
  }

  // optional bool permonitorAwarenessMode = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_permonitorawarenessmode(), target);
  }

  // optional int32 videoRenderMode = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        13, this->_internal_videorendermode(), target);
  }

  // optional int32 videoRawdataMemoryMode = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        14, this->_internal_videorawdatamemorymode(), target);
  }

  // optional int32 shareRawdataMemoryMode = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        15, this->_internal_sharerawdatamemorymode(), target);
  }

  // optional int32 audioRawdataMemoryMode = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_audiorawdatamemorymode(), target);
  }

  // optional bool enableRawdataIntermediateMode = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_enablerawdataintermediatemode(), target);
  }

  // optional int32 renderPostProcessing = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this->_internal_renderpostprocessing(), target);
  }

  // optional int32 videoCaptureMethod = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        19, this->_internal_videocapturemethod(), target);
  }

  // optional string customLocalizationFilePath = 20;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_customlocalizationfilepath();
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // optional bool useCustomUI = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_usecustomui(), target);
  }

  // optional string strBrandingName = 22;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_strbrandingname();
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InitSDKParams)
  return target;
}

::size_t InitSDKParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InitSDKParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional string domain = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_domain());
    }

    // optional string customizedLanguageName = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_customizedlanguagename());
    }

    // optional string customizedLanguageInfo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_customizedlanguageinfo());
    }

    // optional string strSupportUrl = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strsupporturl());
    }

    // optional string customLocalizationFilePath = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_customlocalizationfilepath());
    }

    // optional string strBrandingName = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strbrandingname());
    }

    // optional int32 customizedLanguageType = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_customizedlanguagetype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 langID = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_langid());
    }

    // optional int32 appLocale = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_applocale());
    }

    // optional int32 logFileSize = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_logfilesize());
    }

    // optional bool enableLog = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional bool enableGeneralDump = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }

    // optional bool permonitorAwarenessMode = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2;
    }

    // optional bool enableRawdataIntermediateMode = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3;
    }

    // optional int32 videoRenderMode = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_videorendermode());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional int32 videoRawdataMemoryMode = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_videorawdatamemorymode());
    }

    // optional int32 shareRawdataMemoryMode = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_sharerawdatamemorymode());
    }

    // optional int32 audioRawdataMemoryMode = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_audiorawdatamemorymode());
    }

    // optional int32 renderPostProcessing = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_renderpostprocessing());
    }

    // optional int32 videoCaptureMethod = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_videocapturemethod());
    }

    // optional bool useCustomUI = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitSDKParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InitSDKParams*>(
      &from));
}

void InitSDKParams::MergeFrom(const InitSDKParams& from) {
  InitSDKParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InitSDKParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_customizedlanguagename(from._internal_customizedlanguagename());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_customizedlanguageinfo(from._internal_customizedlanguageinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_strsupporturl(from._internal_strsupporturl());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_customlocalizationfilepath(from._internal_customlocalizationfilepath());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_strbrandingname(from._internal_strbrandingname());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.customizedlanguagetype_ = from._impl_.customizedlanguagetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.langid_ = from._impl_.langid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.applocale_ = from._impl_.applocale_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.logfilesize_ = from._impl_.logfilesize_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.enablelog_ = from._impl_.enablelog_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.enablegeneraldump_ = from._impl_.enablegeneraldump_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.permonitorawarenessmode_ = from._impl_.permonitorawarenessmode_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.enablerawdataintermediatemode_ = from._impl_.enablerawdataintermediatemode_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.videorendermode_ = from._impl_.videorendermode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.videorawdatamemorymode_ = from._impl_.videorawdatamemorymode_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.sharerawdatamemorymode_ = from._impl_.sharerawdatamemorymode_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.audiorawdatamemorymode_ = from._impl_.audiorawdatamemorymode_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.renderpostprocessing_ = from._impl_.renderpostprocessing_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.videocapturemethod_ = from._impl_.videocapturemethod_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.usecustomui_ = from._impl_.usecustomui_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InitSDKParams::CopyFrom(const InitSDKParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InitSDKParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSDKParams::IsInitialized() const {
  return true;
}

void InitSDKParams::InternalSwap(InitSDKParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, lhs_arena,
                                       &other->_impl_.domain_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customizedlanguagename_, lhs_arena,
                                       &other->_impl_.customizedlanguagename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customizedlanguageinfo_, lhs_arena,
                                       &other->_impl_.customizedlanguageinfo_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strsupporturl_, lhs_arena,
                                       &other->_impl_.strsupporturl_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customlocalizationfilepath_, lhs_arena,
                                       &other->_impl_.customlocalizationfilepath_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strbrandingname_, lhs_arena,
                                       &other->_impl_.strbrandingname_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitSDKParams, _impl_.usecustomui_)
      + sizeof(InitSDKParams::_impl_.usecustomui_)
      - PROTOBUF_FIELD_OFFSET(InitSDKParams, _impl_.customizedlanguagetype_)>(
          reinterpret_cast<char*>(&_impl_.customizedlanguagetype_),
          reinterpret_cast<char*>(&other->_impl_.customizedlanguagetype_));
}

std::string InitSDKParams::GetTypeName() const {
  return "com.electron.sdk.proto.InitSDKParams";
}

// ===================================================================

class AuthWithJwtTokenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthWithJwtTokenParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AuthWithJwtTokenParams, _impl_._has_bits_);
  static void set_has_sdkjwttoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AuthWithJwtTokenParams::AuthWithJwtTokenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AuthWithJwtTokenParams)
}
AuthWithJwtTokenParams::AuthWithJwtTokenParams(const AuthWithJwtTokenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AuthWithJwtTokenParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sdkjwttoken_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.sdkjwttoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sdkjwttoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.sdkjwttoken_.Set(from._internal_sdkjwttoken(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AuthWithJwtTokenParams)
}

inline void AuthWithJwtTokenParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sdkjwttoken_) {}

  };
  _impl_.sdkjwttoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sdkjwttoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthWithJwtTokenParams::~AuthWithJwtTokenParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AuthWithJwtTokenParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthWithJwtTokenParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sdkjwttoken_.Destroy();
}

void AuthWithJwtTokenParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthWithJwtTokenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sdkjwttoken_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthWithJwtTokenParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sdkJwtToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdkjwttoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuthWithJwtTokenParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sdkJwtToken = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_sdkjwttoken();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AuthWithJwtTokenParams)
  return target;
}

::size_t AuthWithJwtTokenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sdkJwtToken = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sdkjwttoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthWithJwtTokenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AuthWithJwtTokenParams*>(
      &from));
}

void AuthWithJwtTokenParams::MergeFrom(const AuthWithJwtTokenParams& from) {
  AuthWithJwtTokenParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_sdkjwttoken(from._internal_sdkjwttoken());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AuthWithJwtTokenParams::CopyFrom(const AuthWithJwtTokenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthWithJwtTokenParams::IsInitialized() const {
  return true;
}

void AuthWithJwtTokenParams::InternalSwap(AuthWithJwtTokenParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdkjwttoken_, lhs_arena,
                                       &other->_impl_.sdkjwttoken_, rhs_arena);
}

std::string AuthWithJwtTokenParams::GetTypeName() const {
  return "com.electron.sdk.proto.AuthWithJwtTokenParams";
}

// ===================================================================

class LoginWithSSOTokenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginWithSSOTokenParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LoginWithSSOTokenParams, _impl_._has_bits_);
  static void set_has_ssotoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rememberme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoginWithSSOTokenParams::LoginWithSSOTokenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.LoginWithSSOTokenParams)
}
LoginWithSSOTokenParams::LoginWithSSOTokenParams(const LoginWithSSOTokenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LoginWithSSOTokenParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ssotoken_) {}

    , decltype(_impl_.rememberme_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.ssotoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssotoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ssotoken_.Set(from._internal_ssotoken(), _this->GetArenaForAllocation());
  }
  _this->_impl_.rememberme_ = from._impl_.rememberme_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.LoginWithSSOTokenParams)
}

inline void LoginWithSSOTokenParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ssotoken_) {}

    , decltype(_impl_.rememberme_) { false }

  };
  _impl_.ssotoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssotoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginWithSSOTokenParams::~LoginWithSSOTokenParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.LoginWithSSOTokenParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginWithSSOTokenParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ssotoken_.Destroy();
}

void LoginWithSSOTokenParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginWithSSOTokenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.ssotoken_.ClearNonDefaultToEmpty();
  }
  _impl_.rememberme_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginWithSSOTokenParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ssoToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssotoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool rememberMe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_rememberme(&has_bits);
          _impl_.rememberme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LoginWithSSOTokenParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string ssoToken = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_ssotoken();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool rememberMe = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_rememberme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.LoginWithSSOTokenParams)
  return target;
}

::size_t LoginWithSSOTokenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ssoToken = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_ssotoken());
    }

    // optional bool rememberMe = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginWithSSOTokenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginWithSSOTokenParams*>(
      &from));
}

void LoginWithSSOTokenParams::MergeFrom(const LoginWithSSOTokenParams& from) {
  LoginWithSSOTokenParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ssotoken(from._internal_ssotoken());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rememberme_ = from._impl_.rememberme_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginWithSSOTokenParams::CopyFrom(const LoginWithSSOTokenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginWithSSOTokenParams::IsInitialized() const {
  return true;
}

void LoginWithSSOTokenParams::InternalSwap(LoginWithSSOTokenParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ssotoken_, lhs_arena,
                                       &other->_impl_.ssotoken_, rhs_arena);

  swap(_impl_.rememberme_, other->_impl_.rememberme_);
}

std::string LoginWithSSOTokenParams::GetTypeName() const {
  return "com.electron.sdk.proto.LoginWithSSOTokenParams";
}

// ===================================================================

class StartMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartMeetingParams, _impl_._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hdirectshareappwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_customerkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isvideooff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isaudiooff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isdirectsharedesktop(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

StartMeetingParams::StartMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartMeetingParams)
}
StartMeetingParams::StartMeetingParams(const StartMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartMeetingParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hdirectshareappwnd_) {}

    , decltype(_impl_.customerkey_) {}

    , decltype(_impl_.meetingnumber_) {}

    , decltype(_impl_.isvideooff_) {}

    , decltype(_impl_.isaudiooff_) {}

    , decltype(_impl_.isdirectsharedesktop_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hdirectshareappwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.hdirectshareappwnd_.Set(from._internal_hdirectshareappwnd(), _this->GetArenaForAllocation());
  }
  _impl_.customerkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.customerkey_.Set(from._internal_customerkey(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.meetingnumber_, &from._impl_.meetingnumber_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isdirectsharedesktop_) -
    reinterpret_cast<char*>(&_impl_.meetingnumber_)) + sizeof(_impl_.isdirectsharedesktop_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartMeetingParams)
}

inline void StartMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hdirectshareappwnd_) {}

    , decltype(_impl_.customerkey_) {}

    , decltype(_impl_.meetingnumber_) { ::uint64_t{0u} }

    , decltype(_impl_.isvideooff_) { false }

    , decltype(_impl_.isaudiooff_) { false }

    , decltype(_impl_.isdirectsharedesktop_) { false }

  };
  _impl_.hdirectshareappwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customerkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartMeetingParams::~StartMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hdirectshareappwnd_.Destroy();
  _impl_.customerkey_.Destroy();
}

void StartMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hdirectshareappwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.customerkey_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.meetingnumber_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.isdirectsharedesktop_) -
        reinterpret_cast<char*>(&_impl_.meetingnumber_)) + sizeof(_impl_.isdirectsharedesktop_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          _impl_.meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hDirectShareAppWnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hdirectshareappwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string customerKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_customerkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isVideoOff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_isvideooff(&has_bits);
          _impl_.isvideooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isAudioOff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_isaudiooff(&has_bits);
          _impl_.isaudiooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isDirectShareDesktop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_isdirectsharedesktop(&has_bits);
          _impl_.isdirectsharedesktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_meetingnumber(), target);
  }

  // optional string hDirectShareAppWnd = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_hdirectshareappwnd();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string customerKey = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_customerkey();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool isVideoOff = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_isvideooff(), target);
  }

  // optional bool isAudioOff = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_isaudiooff(), target);
  }

  // optional bool isDirectShareDesktop = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_isdirectsharedesktop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartMeetingParams)
  return target;
}

::size_t StartMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string hDirectShareAppWnd = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hdirectshareappwnd());
    }

    // optional string customerKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_customerkey());
    }

    // optional uint64 meetingNumber = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_meetingnumber());
    }

    // optional bool isVideoOff = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool isAudioOff = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool isDirectShareDesktop = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartMeetingParams*>(
      &from));
}

void StartMeetingParams::MergeFrom(const StartMeetingParams& from) {
  StartMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hdirectshareappwnd(from._internal_hdirectshareappwnd());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_customerkey(from._internal_customerkey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.meetingnumber_ = from._impl_.meetingnumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.isvideooff_ = from._impl_.isvideooff_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.isaudiooff_ = from._impl_.isaudiooff_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.isdirectsharedesktop_ = from._impl_.isdirectsharedesktop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartMeetingParams::CopyFrom(const StartMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMeetingParams::IsInitialized() const {
  return true;
}

void StartMeetingParams::InternalSwap(StartMeetingParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hdirectshareappwnd_, lhs_arena,
                                       &other->_impl_.hdirectshareappwnd_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customerkey_, lhs_arena,
                                       &other->_impl_.customerkey_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartMeetingParams, _impl_.isdirectsharedesktop_)
      + sizeof(StartMeetingParams::_impl_.isdirectsharedesktop_)
      - PROTOBUF_FIELD_OFFSET(StartMeetingParams, _impl_.meetingnumber_)>(
          reinterpret_cast<char*>(&_impl_.meetingnumber_),
          reinterpret_cast<char*>(&other->_impl_.meetingnumber_));
}

std::string StartMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartMeetingParams";
}

// ===================================================================

class StartWithoutLoginParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartWithoutLoginParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartWithoutLoginParams, _impl_._has_bits_);
  static void set_has_userzak(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nodeusertype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sdkvanityid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hdirectshareappwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_customerkey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isdirectsharedesktop(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isvideooff(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_isaudiooff(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

StartWithoutLoginParams::StartWithoutLoginParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartWithoutLoginParams)
}
StartWithoutLoginParams::StartWithoutLoginParams(const StartWithoutLoginParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartWithoutLoginParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userzak_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.sdkvanityid_) {}

    , decltype(_impl_.hdirectshareappwnd_) {}

    , decltype(_impl_.customerkey_) {}

    , decltype(_impl_.meetingnumber_) {}

    , decltype(_impl_.nodeusertype_) {}

    , decltype(_impl_.isdirectsharedesktop_) {}

    , decltype(_impl_.isvideooff_) {}

    , decltype(_impl_.isaudiooff_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.userzak_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userzak_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.userzak_.Set(from._internal_userzak(), _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  _impl_.sdkvanityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sdkvanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.sdkvanityid_.Set(from._internal_sdkvanityid(), _this->GetArenaForAllocation());
  }
  _impl_.hdirectshareappwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.hdirectshareappwnd_.Set(from._internal_hdirectshareappwnd(), _this->GetArenaForAllocation());
  }
  _impl_.customerkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.customerkey_.Set(from._internal_customerkey(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.meetingnumber_, &from._impl_.meetingnumber_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isaudiooff_) -
    reinterpret_cast<char*>(&_impl_.meetingnumber_)) + sizeof(_impl_.isaudiooff_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartWithoutLoginParams)
}

inline void StartWithoutLoginParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userzak_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.sdkvanityid_) {}

    , decltype(_impl_.hdirectshareappwnd_) {}

    , decltype(_impl_.customerkey_) {}

    , decltype(_impl_.meetingnumber_) { ::uint64_t{0u} }

    , decltype(_impl_.nodeusertype_) { 0 }

    , decltype(_impl_.isdirectsharedesktop_) { false }

    , decltype(_impl_.isvideooff_) { false }

    , decltype(_impl_.isaudiooff_) { false }

  };
  _impl_.userzak_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userzak_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdkvanityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sdkvanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hdirectshareappwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customerkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartWithoutLoginParams::~StartWithoutLoginParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartWithoutLoginParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartWithoutLoginParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userzak_.Destroy();
  _impl_.username_.Destroy();
  _impl_.sdkvanityid_.Destroy();
  _impl_.hdirectshareappwnd_.Destroy();
  _impl_.customerkey_.Destroy();
}

void StartWithoutLoginParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartWithoutLoginParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartWithoutLoginParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.userzak_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sdkvanityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.hdirectshareappwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.customerkey_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.meetingnumber_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.isdirectsharedesktop_) -
        reinterpret_cast<char*>(&_impl_.meetingnumber_)) + sizeof(_impl_.isdirectsharedesktop_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.isvideooff_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.isaudiooff_) -
        reinterpret_cast<char*>(&_impl_.isvideooff_)) + sizeof(_impl_.isaudiooff_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartWithoutLoginParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string userZAK = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userzak();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 nodeUserType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nodeusertype(&has_bits);
          _impl_.nodeusertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 meetingNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_meetingnumber(&has_bits);
          _impl_.meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string sdkVanityID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sdkvanityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hDirectShareAppWnd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hdirectshareappwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string customerKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_customerkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isDirectShareDesktop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_isdirectsharedesktop(&has_bits);
          _impl_.isdirectsharedesktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isVideoOff = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_isvideooff(&has_bits);
          _impl_.isvideooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isAudioOff = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_isaudiooff(&has_bits);
          _impl_.isaudiooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartWithoutLoginParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartWithoutLoginParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string userZAK = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_userzak();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string userName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_username();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 nodeUserType = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_nodeusertype(), target);
  }

  // optional uint64 meetingNumber = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_meetingnumber(), target);
  }

  // optional string sdkVanityID = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_sdkvanityid();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string hDirectShareAppWnd = 6;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_hdirectshareappwnd();
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string customerKey = 7;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_customerkey();
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional bool isDirectShareDesktop = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_isdirectsharedesktop(), target);
  }

  // optional bool isVideoOff = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_isvideooff(), target);
  }

  // optional bool isAudioOff = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_isaudiooff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartWithoutLoginParams)
  return target;
}

::size_t StartWithoutLoginParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartWithoutLoginParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string userZAK = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_userzak());
    }

    // optional string userName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_username());
    }

    // optional string sdkVanityID = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_sdkvanityid());
    }

    // optional string hDirectShareAppWnd = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hdirectshareappwnd());
    }

    // optional string customerKey = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_customerkey());
    }

    // optional uint64 meetingNumber = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_meetingnumber());
    }

    // optional int32 nodeUserType = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nodeusertype());
    }

    // optional bool isDirectShareDesktop = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool isVideoOff = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional bool isAudioOff = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartWithoutLoginParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartWithoutLoginParams*>(
      &from));
}

void StartWithoutLoginParams::MergeFrom(const StartWithoutLoginParams& from) {
  StartWithoutLoginParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartWithoutLoginParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_userzak(from._internal_userzak());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_sdkvanityid(from._internal_sdkvanityid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_hdirectshareappwnd(from._internal_hdirectshareappwnd());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_customerkey(from._internal_customerkey());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.meetingnumber_ = from._impl_.meetingnumber_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.nodeusertype_ = from._impl_.nodeusertype_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.isdirectsharedesktop_ = from._impl_.isdirectsharedesktop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.isvideooff_ = from._impl_.isvideooff_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.isaudiooff_ = from._impl_.isaudiooff_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartWithoutLoginParams::CopyFrom(const StartWithoutLoginParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartWithoutLoginParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartWithoutLoginParams::IsInitialized() const {
  return true;
}

void StartWithoutLoginParams::InternalSwap(StartWithoutLoginParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userzak_, lhs_arena,
                                       &other->_impl_.userzak_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdkvanityid_, lhs_arena,
                                       &other->_impl_.sdkvanityid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hdirectshareappwnd_, lhs_arena,
                                       &other->_impl_.hdirectshareappwnd_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customerkey_, lhs_arena,
                                       &other->_impl_.customerkey_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartWithoutLoginParams, _impl_.isaudiooff_)
      + sizeof(StartWithoutLoginParams::_impl_.isaudiooff_)
      - PROTOBUF_FIELD_OFFSET(StartWithoutLoginParams, _impl_.meetingnumber_)>(
          reinterpret_cast<char*>(&_impl_.meetingnumber_),
          reinterpret_cast<char*>(&other->_impl_.meetingnumber_));
}

std::string StartWithoutLoginParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartWithoutLoginParams";
}

// ===================================================================

class JoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(JoinMeetingParams, _impl_._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vanityid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_psw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hdirectshareappwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_customerkey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_webinartoken(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isvideooff(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_isaudiooff(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_isdirectsharedesktop(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_appprivilegetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_join_token(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

JoinMeetingParams::JoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.JoinMeetingParams)
}
JoinMeetingParams::JoinMeetingParams(const JoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  JoinMeetingParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vanityid_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.psw_) {}

    , decltype(_impl_.hdirectshareappwnd_) {}

    , decltype(_impl_.customerkey_) {}

    , decltype(_impl_.webinartoken_) {}

    , decltype(_impl_.appprivilegetoken_) {}

    , decltype(_impl_.join_token_) {}

    , decltype(_impl_.meetingnumber_) {}

    , decltype(_impl_.isvideooff_) {}

    , decltype(_impl_.isaudiooff_) {}

    , decltype(_impl_.isdirectsharedesktop_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.vanityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vanityid_.Set(from._internal_vanityid(), _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  _impl_.psw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.psw_.Set(from._internal_psw(), _this->GetArenaForAllocation());
  }
  _impl_.hdirectshareappwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.hdirectshareappwnd_.Set(from._internal_hdirectshareappwnd(), _this->GetArenaForAllocation());
  }
  _impl_.customerkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.customerkey_.Set(from._internal_customerkey(), _this->GetArenaForAllocation());
  }
  _impl_.webinartoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.webinartoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.webinartoken_.Set(from._internal_webinartoken(), _this->GetArenaForAllocation());
  }
  _impl_.appprivilegetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.appprivilegetoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.appprivilegetoken_.Set(from._internal_appprivilegetoken(), _this->GetArenaForAllocation());
  }
  _impl_.join_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.join_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.join_token_.Set(from._internal_join_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.meetingnumber_, &from._impl_.meetingnumber_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isdirectsharedesktop_) -
    reinterpret_cast<char*>(&_impl_.meetingnumber_)) + sizeof(_impl_.isdirectsharedesktop_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.JoinMeetingParams)
}

inline void JoinMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vanityid_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.psw_) {}

    , decltype(_impl_.hdirectshareappwnd_) {}

    , decltype(_impl_.customerkey_) {}

    , decltype(_impl_.webinartoken_) {}

    , decltype(_impl_.appprivilegetoken_) {}

    , decltype(_impl_.join_token_) {}

    , decltype(_impl_.meetingnumber_) { ::uint64_t{0u} }

    , decltype(_impl_.isvideooff_) { false }

    , decltype(_impl_.isaudiooff_) { false }

    , decltype(_impl_.isdirectsharedesktop_) { false }

  };
  _impl_.vanityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.psw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hdirectshareappwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customerkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.webinartoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.webinartoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appprivilegetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.appprivilegetoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.join_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.join_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinMeetingParams::~JoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.JoinMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vanityid_.Destroy();
  _impl_.username_.Destroy();
  _impl_.psw_.Destroy();
  _impl_.hdirectshareappwnd_.Destroy();
  _impl_.customerkey_.Destroy();
  _impl_.webinartoken_.Destroy();
  _impl_.appprivilegetoken_.Destroy();
  _impl_.join_token_.Destroy();
}

void JoinMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.JoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vanityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.psw_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.hdirectshareappwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.customerkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.webinartoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.appprivilegetoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.join_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.meetingnumber_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.isdirectsharedesktop_) -
        reinterpret_cast<char*>(&_impl_.meetingnumber_)) + sizeof(_impl_.isdirectsharedesktop_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JoinMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          _impl_.meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string vanityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vanityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string psw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_psw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hDirectShareAppWnd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hdirectshareappwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string customerKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_customerkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string webinarToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_webinartoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isVideoOff = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_isvideooff(&has_bits);
          _impl_.isvideooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isAudioOff = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_isaudiooff(&has_bits);
          _impl_.isaudiooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isDirectShareDesktop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_isdirectsharedesktop(&has_bits);
          _impl_.isdirectsharedesktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string appPrivilegeToken = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_appprivilegetoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string join_token = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_join_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* JoinMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.JoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_meetingnumber(), target);
  }

  // optional string vanityID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_vanityid();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string userName = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_username();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string psw = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_psw();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string hDirectShareAppWnd = 5;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_hdirectshareappwnd();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string customerKey = 6;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_customerkey();
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string webinarToken = 7;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_webinartoken();
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional bool isVideoOff = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_isvideooff(), target);
  }

  // optional bool isAudioOff = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_isaudiooff(), target);
  }

  // optional bool isDirectShareDesktop = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_isdirectsharedesktop(), target);
  }

  // optional string appPrivilegeToken = 11;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_appprivilegetoken();
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional string join_token = 12;
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_join_token();
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.JoinMeetingParams)
  return target;
}

::size_t JoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.JoinMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string vanityID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_vanityid());
    }

    // optional string userName = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_username());
    }

    // optional string psw = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_psw());
    }

    // optional string hDirectShareAppWnd = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hdirectshareappwnd());
    }

    // optional string customerKey = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_customerkey());
    }

    // optional string webinarToken = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_webinartoken());
    }

    // optional string appPrivilegeToken = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_appprivilegetoken());
    }

    // optional string join_token = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_join_token());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 meetingNumber = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_meetingnumber());
    }

    // optional bool isVideoOff = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool isAudioOff = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool isDirectShareDesktop = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const JoinMeetingParams*>(
      &from));
}

void JoinMeetingParams::MergeFrom(const JoinMeetingParams& from) {
  JoinMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.JoinMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_vanityid(from._internal_vanityid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_psw(from._internal_psw());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_hdirectshareappwnd(from._internal_hdirectshareappwnd());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_customerkey(from._internal_customerkey());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_webinartoken(from._internal_webinartoken());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_appprivilegetoken(from._internal_appprivilegetoken());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_join_token(from._internal_join_token());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.meetingnumber_ = from._impl_.meetingnumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.isvideooff_ = from._impl_.isvideooff_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.isaudiooff_ = from._impl_.isaudiooff_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.isdirectsharedesktop_ = from._impl_.isdirectsharedesktop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void JoinMeetingParams::CopyFrom(const JoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.JoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinMeetingParams::IsInitialized() const {
  return true;
}

void JoinMeetingParams::InternalSwap(JoinMeetingParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vanityid_, lhs_arena,
                                       &other->_impl_.vanityid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.psw_, lhs_arena,
                                       &other->_impl_.psw_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hdirectshareappwnd_, lhs_arena,
                                       &other->_impl_.hdirectshareappwnd_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customerkey_, lhs_arena,
                                       &other->_impl_.customerkey_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.webinartoken_, lhs_arena,
                                       &other->_impl_.webinartoken_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.appprivilegetoken_, lhs_arena,
                                       &other->_impl_.appprivilegetoken_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.join_token_, lhs_arena,
                                       &other->_impl_.join_token_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinMeetingParams, _impl_.isdirectsharedesktop_)
      + sizeof(JoinMeetingParams::_impl_.isdirectsharedesktop_)
      - PROTOBUF_FIELD_OFFSET(JoinMeetingParams, _impl_.meetingnumber_)>(
          reinterpret_cast<char*>(&_impl_.meetingnumber_),
          reinterpret_cast<char*>(&other->_impl_.meetingnumber_));
}

std::string JoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.JoinMeetingParams";
}

// ===================================================================

class JoinWithoutLoginParams::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinWithoutLoginParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(JoinWithoutLoginParams, _impl_._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vanityid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_psw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hdirectshareappwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_userzak(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_customerkey(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_webinartoken(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isdirectsharedesktop(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_isvideooff(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_isaudiooff(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_appprivilegetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_join_token(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

JoinWithoutLoginParams::JoinWithoutLoginParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.JoinWithoutLoginParams)
}
JoinWithoutLoginParams::JoinWithoutLoginParams(const JoinWithoutLoginParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  JoinWithoutLoginParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vanityid_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.psw_) {}

    , decltype(_impl_.hdirectshareappwnd_) {}

    , decltype(_impl_.userzak_) {}

    , decltype(_impl_.customerkey_) {}

    , decltype(_impl_.webinartoken_) {}

    , decltype(_impl_.appprivilegetoken_) {}

    , decltype(_impl_.join_token_) {}

    , decltype(_impl_.meetingnumber_) {}

    , decltype(_impl_.isdirectsharedesktop_) {}

    , decltype(_impl_.isvideooff_) {}

    , decltype(_impl_.isaudiooff_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.vanityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vanityid_.Set(from._internal_vanityid(), _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  _impl_.psw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.psw_.Set(from._internal_psw(), _this->GetArenaForAllocation());
  }
  _impl_.hdirectshareappwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.hdirectshareappwnd_.Set(from._internal_hdirectshareappwnd(), _this->GetArenaForAllocation());
  }
  _impl_.userzak_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userzak_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.userzak_.Set(from._internal_userzak(), _this->GetArenaForAllocation());
  }
  _impl_.customerkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.customerkey_.Set(from._internal_customerkey(), _this->GetArenaForAllocation());
  }
  _impl_.webinartoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.webinartoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.webinartoken_.Set(from._internal_webinartoken(), _this->GetArenaForAllocation());
  }
  _impl_.appprivilegetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.appprivilegetoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.appprivilegetoken_.Set(from._internal_appprivilegetoken(), _this->GetArenaForAllocation());
  }
  _impl_.join_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.join_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.join_token_.Set(from._internal_join_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.meetingnumber_, &from._impl_.meetingnumber_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isaudiooff_) -
    reinterpret_cast<char*>(&_impl_.meetingnumber_)) + sizeof(_impl_.isaudiooff_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.JoinWithoutLoginParams)
}

inline void JoinWithoutLoginParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vanityid_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.psw_) {}

    , decltype(_impl_.hdirectshareappwnd_) {}

    , decltype(_impl_.userzak_) {}

    , decltype(_impl_.customerkey_) {}

    , decltype(_impl_.webinartoken_) {}

    , decltype(_impl_.appprivilegetoken_) {}

    , decltype(_impl_.join_token_) {}

    , decltype(_impl_.meetingnumber_) { ::uint64_t{0u} }

    , decltype(_impl_.isdirectsharedesktop_) { false }

    , decltype(_impl_.isvideooff_) { false }

    , decltype(_impl_.isaudiooff_) { false }

  };
  _impl_.vanityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.psw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hdirectshareappwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userzak_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userzak_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customerkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.webinartoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.webinartoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appprivilegetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.appprivilegetoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.join_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.join_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinWithoutLoginParams::~JoinWithoutLoginParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.JoinWithoutLoginParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinWithoutLoginParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vanityid_.Destroy();
  _impl_.username_.Destroy();
  _impl_.psw_.Destroy();
  _impl_.hdirectshareappwnd_.Destroy();
  _impl_.userzak_.Destroy();
  _impl_.customerkey_.Destroy();
  _impl_.webinartoken_.Destroy();
  _impl_.appprivilegetoken_.Destroy();
  _impl_.join_token_.Destroy();
}

void JoinWithoutLoginParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinWithoutLoginParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vanityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.psw_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.hdirectshareappwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.userzak_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.customerkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.webinartoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.appprivilegetoken_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _impl_.join_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00001e00u) {
    ::memset(&_impl_.meetingnumber_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.isaudiooff_) -
        reinterpret_cast<char*>(&_impl_.meetingnumber_)) + sizeof(_impl_.isaudiooff_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JoinWithoutLoginParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          _impl_.meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string vanityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vanityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string psw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_psw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hDirectShareAppWnd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hdirectshareappwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string userZAK = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_userzak();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string customerKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_customerkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string webinarToken = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_webinartoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isDirectShareDesktop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_isdirectsharedesktop(&has_bits);
          _impl_.isdirectsharedesktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isVideoOff = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_isvideooff(&has_bits);
          _impl_.isvideooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isAudioOff = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_isaudiooff(&has_bits);
          _impl_.isaudiooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string appPrivilegeToken = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_appprivilegetoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string join_token = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_join_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* JoinWithoutLoginParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_meetingnumber(), target);
  }

  // optional string vanityID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_vanityid();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string userName = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_username();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string psw = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_psw();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string hDirectShareAppWnd = 5;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_hdirectshareappwnd();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string userZAK = 6;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_userzak();
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string customerKey = 7;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_customerkey();
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional string webinarToken = 8;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_webinartoken();
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional bool isDirectShareDesktop = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_isdirectsharedesktop(), target);
  }

  // optional bool isVideoOff = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_isvideooff(), target);
  }

  // optional bool isAudioOff = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_isaudiooff(), target);
  }

  // optional string appPrivilegeToken = 12;
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_appprivilegetoken();
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string join_token = 13;
  if (cached_has_bits & 0x00000100u) {
    const std::string& _s = this->_internal_join_token();
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.JoinWithoutLoginParams)
  return target;
}

::size_t JoinWithoutLoginParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string vanityID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_vanityid());
    }

    // optional string userName = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_username());
    }

    // optional string psw = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_psw());
    }

    // optional string hDirectShareAppWnd = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hdirectshareappwnd());
    }

    // optional string userZAK = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_userzak());
    }

    // optional string customerKey = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_customerkey());
    }

    // optional string webinarToken = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_webinartoken());
    }

    // optional string appPrivilegeToken = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_appprivilegetoken());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional string join_token = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_join_token());
    }

    // optional uint64 meetingNumber = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_meetingnumber());
    }

    // optional bool isDirectShareDesktop = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool isVideoOff = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional bool isAudioOff = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinWithoutLoginParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const JoinWithoutLoginParams*>(
      &from));
}

void JoinWithoutLoginParams::MergeFrom(const JoinWithoutLoginParams& from) {
  JoinWithoutLoginParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_vanityid(from._internal_vanityid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_psw(from._internal_psw());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_hdirectshareappwnd(from._internal_hdirectshareappwnd());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_userzak(from._internal_userzak());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_customerkey(from._internal_customerkey());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_webinartoken(from._internal_webinartoken());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_appprivilegetoken(from._internal_appprivilegetoken());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_join_token(from._internal_join_token());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.meetingnumber_ = from._impl_.meetingnumber_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.isdirectsharedesktop_ = from._impl_.isdirectsharedesktop_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.isvideooff_ = from._impl_.isvideooff_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.isaudiooff_ = from._impl_.isaudiooff_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void JoinWithoutLoginParams::CopyFrom(const JoinWithoutLoginParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinWithoutLoginParams::IsInitialized() const {
  return true;
}

void JoinWithoutLoginParams::InternalSwap(JoinWithoutLoginParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vanityid_, lhs_arena,
                                       &other->_impl_.vanityid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.psw_, lhs_arena,
                                       &other->_impl_.psw_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hdirectshareappwnd_, lhs_arena,
                                       &other->_impl_.hdirectshareappwnd_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userzak_, lhs_arena,
                                       &other->_impl_.userzak_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customerkey_, lhs_arena,
                                       &other->_impl_.customerkey_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.webinartoken_, lhs_arena,
                                       &other->_impl_.webinartoken_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.appprivilegetoken_, lhs_arena,
                                       &other->_impl_.appprivilegetoken_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.join_token_, lhs_arena,
                                       &other->_impl_.join_token_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinWithoutLoginParams, _impl_.isaudiooff_)
      + sizeof(JoinWithoutLoginParams::_impl_.isaudiooff_)
      - PROTOBUF_FIELD_OFFSET(JoinWithoutLoginParams, _impl_.meetingnumber_)>(
          reinterpret_cast<char*>(&_impl_.meetingnumber_),
          reinterpret_cast<char*>(&other->_impl_.meetingnumber_));
}

std::string JoinWithoutLoginParams::GetTypeName() const {
  return "com.electron.sdk.proto.JoinWithoutLoginParams";
}

// ===================================================================

class LeaveMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LeaveMeetingParams, _impl_._has_bits_);
  static void set_has_bend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LeaveMeetingParams::LeaveMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.LeaveMeetingParams)
}
LeaveMeetingParams::LeaveMeetingParams(const LeaveMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.LeaveMeetingParams)
}

inline void LeaveMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bend_) { false }

  };
}

LeaveMeetingParams::~LeaveMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.LeaveMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.LeaveMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bend_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LeaveMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bend(&has_bits);
          _impl_.bend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LeaveMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.LeaveMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.LeaveMeetingParams)
  return target;
}

::size_t LeaveMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.LeaveMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LeaveMeetingParams*>(
      &from));
}

void LeaveMeetingParams::MergeFrom(const LeaveMeetingParams& from) {
  LeaveMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.LeaveMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bend(from._internal_bend());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LeaveMeetingParams::CopyFrom(const LeaveMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.LeaveMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveMeetingParams::IsInitialized() const {
  return true;
}

void LeaveMeetingParams::InternalSwap(LeaveMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bend_, other->_impl_.bend_);
}

std::string LeaveMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.LeaveMeetingParams";
}

// ===================================================================

class HandleZoomWebUriProtocolActionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HandleZoomWebUriProtocolActionParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HandleZoomWebUriProtocolActionParams, _impl_._has_bits_);
  static void set_has_protocolaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HandleZoomWebUriProtocolActionParams::HandleZoomWebUriProtocolActionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
}
HandleZoomWebUriProtocolActionParams::HandleZoomWebUriProtocolActionParams(const HandleZoomWebUriProtocolActionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HandleZoomWebUriProtocolActionParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.protocolaction_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.protocolaction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.protocolaction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.protocolaction_.Set(from._internal_protocolaction(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
}

inline void HandleZoomWebUriProtocolActionParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.protocolaction_) {}

  };
  _impl_.protocolaction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.protocolaction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandleZoomWebUriProtocolActionParams::~HandleZoomWebUriProtocolActionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandleZoomWebUriProtocolActionParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.protocolaction_.Destroy();
}

void HandleZoomWebUriProtocolActionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandleZoomWebUriProtocolActionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.protocolaction_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HandleZoomWebUriProtocolActionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string protocolAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protocolaction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HandleZoomWebUriProtocolActionParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string protocolAction = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_protocolaction();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  return target;
}

::size_t HandleZoomWebUriProtocolActionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string protocolAction = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_protocolaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandleZoomWebUriProtocolActionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HandleZoomWebUriProtocolActionParams*>(
      &from));
}

void HandleZoomWebUriProtocolActionParams::MergeFrom(const HandleZoomWebUriProtocolActionParams& from) {
  HandleZoomWebUriProtocolActionParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_protocolaction(from._internal_protocolaction());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HandleZoomWebUriProtocolActionParams::CopyFrom(const HandleZoomWebUriProtocolActionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandleZoomWebUriProtocolActionParams::IsInitialized() const {
  return true;
}

void HandleZoomWebUriProtocolActionParams::InternalSwap(HandleZoomWebUriProtocolActionParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocolaction_, lhs_arena,
                                       &other->_impl_.protocolaction_, rhs_arena);
}

std::string HandleZoomWebUriProtocolActionParams::GetTypeName() const {
  return "com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams";
}

// ===================================================================

class ShowChatDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowChatDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShowChatDlgParams, _impl_._has_bits_);
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rectleft(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recttop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rectright(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rectbottom(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ShowChatDlgParams::ShowChatDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowChatDlgParams)
}
ShowChatDlgParams::ShowChatDlgParams(const ShowChatDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ShowChatDlgParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hparent_) {}

    , decltype(_impl_.rectleft_) {}

    , decltype(_impl_.recttop_) {}

    , decltype(_impl_.rectright_) {}

    , decltype(_impl_.rectbottom_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.hparent_.Set(from._internal_hparent(), _this->GetArenaForAllocation());
  }
  _impl_.rectleft_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rectleft_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.rectleft_.Set(from._internal_rectleft(), _this->GetArenaForAllocation());
  }
  _impl_.recttop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recttop_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.recttop_.Set(from._internal_recttop(), _this->GetArenaForAllocation());
  }
  _impl_.rectright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rectright_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.rectright_.Set(from._internal_rectright(), _this->GetArenaForAllocation());
  }
  _impl_.rectbottom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rectbottom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.rectbottom_.Set(from._internal_rectbottom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowChatDlgParams)
}

inline void ShowChatDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hparent_) {}

    , decltype(_impl_.rectleft_) {}

    , decltype(_impl_.recttop_) {}

    , decltype(_impl_.rectright_) {}

    , decltype(_impl_.rectbottom_) {}

  };
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rectleft_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rectleft_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recttop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recttop_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rectright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rectright_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rectbottom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rectbottom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShowChatDlgParams::~ShowChatDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowChatDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowChatDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hparent_.Destroy();
  _impl_.rectleft_.Destroy();
  _impl_.recttop_.Destroy();
  _impl_.rectright_.Destroy();
  _impl_.rectbottom_.Destroy();
}

void ShowChatDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowChatDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowChatDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hparent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.rectleft_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.recttop_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.rectright_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rectbottom_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowChatDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string hParent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hparent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rectLeft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rectleft();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rectTop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_recttop();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rectRight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rectright();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rectBottom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rectbottom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShowChatDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowChatDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string hParent = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_hparent();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string rectLeft = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_rectleft();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string rectTop = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_recttop();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string rectRight = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_rectright();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string rectBottom = 5;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_rectbottom();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowChatDlgParams)
  return target;
}

::size_t ShowChatDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowChatDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hParent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hparent());
    }

    // optional string rectLeft = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rectleft());
    }

    // optional string rectTop = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_recttop());
    }

    // optional string rectRight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rectright());
    }

    // optional string rectBottom = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rectbottom());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowChatDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShowChatDlgParams*>(
      &from));
}

void ShowChatDlgParams::MergeFrom(const ShowChatDlgParams& from) {
  ShowChatDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowChatDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hparent(from._internal_hparent());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_rectleft(from._internal_rectleft());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_recttop(from._internal_recttop());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_rectright(from._internal_rectright());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_rectbottom(from._internal_rectbottom());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShowChatDlgParams::CopyFrom(const ShowChatDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowChatDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowChatDlgParams::IsInitialized() const {
  return true;
}

void ShowChatDlgParams::InternalSwap(ShowChatDlgParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hparent_, lhs_arena,
                                       &other->_impl_.hparent_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rectleft_, lhs_arena,
                                       &other->_impl_.rectleft_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recttop_, lhs_arena,
                                       &other->_impl_.recttop_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rectright_, lhs_arena,
                                       &other->_impl_.rectright_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rectbottom_, lhs_arena,
                                       &other->_impl_.rectbottom_, rhs_arena);
}

std::string ShowChatDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowChatDlgParams";
}

// ===================================================================

class EnterFullScreenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnterFullScreenParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnterFullScreenParams, _impl_._has_bits_);
  static void set_has_bfirstview(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bsecview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EnterFullScreenParams::EnterFullScreenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnterFullScreenParams)
}
EnterFullScreenParams::EnterFullScreenParams(const EnterFullScreenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnterFullScreenParams)
}

inline void EnterFullScreenParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bfirstview_) { false }

    , decltype(_impl_.bsecview_) { false }

  };
}

EnterFullScreenParams::~EnterFullScreenParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnterFullScreenParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterFullScreenParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterFullScreenParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterFullScreenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnterFullScreenParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bfirstview_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bsecview_) -
      reinterpret_cast<char*>(&_impl_.bfirstview_)) + sizeof(_impl_.bsecview_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnterFullScreenParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bFirstView = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bfirstview(&has_bits);
          _impl_.bfirstview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bSecView = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bsecview(&has_bits);
          _impl_.bsecview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnterFullScreenParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnterFullScreenParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bFirstView = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bfirstview(), target);
  }

  // optional bool bSecView = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_bsecview(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnterFullScreenParams)
  return target;
}

::size_t EnterFullScreenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnterFullScreenParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bFirstView = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool bSecView = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterFullScreenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnterFullScreenParams*>(
      &from));
}

void EnterFullScreenParams::MergeFrom(const EnterFullScreenParams& from) {
  EnterFullScreenParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnterFullScreenParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bfirstview_ = from._impl_.bfirstview_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bsecview_ = from._impl_.bsecview_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnterFullScreenParams::CopyFrom(const EnterFullScreenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnterFullScreenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterFullScreenParams::IsInitialized() const {
  return true;
}

void EnterFullScreenParams::InternalSwap(EnterFullScreenParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterFullScreenParams, _impl_.bsecview_)
      + sizeof(EnterFullScreenParams::_impl_.bsecview_)
      - PROTOBUF_FIELD_OFFSET(EnterFullScreenParams, _impl_.bfirstview_)>(
          reinterpret_cast<char*>(&_impl_.bfirstview_),
          reinterpret_cast<char*>(&other->_impl_.bfirstview_));
}

std::string EnterFullScreenParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnterFullScreenParams";
}

// ===================================================================

class ExitFullScreenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ExitFullScreenParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExitFullScreenParams, _impl_._has_bits_);
  static void set_has_bfirstview(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bsecview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExitFullScreenParams::ExitFullScreenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ExitFullScreenParams)
}
ExitFullScreenParams::ExitFullScreenParams(const ExitFullScreenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ExitFullScreenParams)
}

inline void ExitFullScreenParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bfirstview_) { false }

    , decltype(_impl_.bsecview_) { false }

  };
}

ExitFullScreenParams::~ExitFullScreenParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ExitFullScreenParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExitFullScreenParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExitFullScreenParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExitFullScreenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ExitFullScreenParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bfirstview_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bsecview_) -
      reinterpret_cast<char*>(&_impl_.bfirstview_)) + sizeof(_impl_.bsecview_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExitFullScreenParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bFirstView = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bfirstview(&has_bits);
          _impl_.bfirstview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bSecView = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bsecview(&has_bits);
          _impl_.bsecview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExitFullScreenParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ExitFullScreenParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bFirstView = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bfirstview(), target);
  }

  // optional bool bSecView = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_bsecview(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ExitFullScreenParams)
  return target;
}

::size_t ExitFullScreenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ExitFullScreenParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bFirstView = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool bSecView = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitFullScreenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExitFullScreenParams*>(
      &from));
}

void ExitFullScreenParams::MergeFrom(const ExitFullScreenParams& from) {
  ExitFullScreenParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ExitFullScreenParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bfirstview_ = from._impl_.bfirstview_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bsecview_ = from._impl_.bsecview_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExitFullScreenParams::CopyFrom(const ExitFullScreenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ExitFullScreenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitFullScreenParams::IsInitialized() const {
  return true;
}

void ExitFullScreenParams::InternalSwap(ExitFullScreenParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExitFullScreenParams, _impl_.bsecview_)
      + sizeof(ExitFullScreenParams::_impl_.bsecview_)
      - PROTOBUF_FIELD_OFFSET(ExitFullScreenParams, _impl_.bfirstview_)>(
          reinterpret_cast<char*>(&_impl_.bfirstview_),
          reinterpret_cast<char*>(&other->_impl_.bfirstview_));
}

std::string ExitFullScreenParams::GetTypeName() const {
  return "com.electron.sdk.proto.ExitFullScreenParams";
}

// ===================================================================

class MoveFloatVideoWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveFloatVideoWndParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveFloatVideoWndParams, _impl_._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MoveFloatVideoWndParams::MoveFloatVideoWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.MoveFloatVideoWndParams)
}
MoveFloatVideoWndParams::MoveFloatVideoWndParams(const MoveFloatVideoWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MoveFloatVideoWndParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.left_.Set(from._internal_left(), _this->GetArenaForAllocation());
  }
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.top_.Set(from._internal_top(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.MoveFloatVideoWndParams)
}

inline void MoveFloatVideoWndParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

  };
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveFloatVideoWndParams::~MoveFloatVideoWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.MoveFloatVideoWndParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveFloatVideoWndParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.left_.Destroy();
  _impl_.top_.Destroy();
}

void MoveFloatVideoWndParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveFloatVideoWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.top_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MoveFloatVideoWndParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_left();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_top();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MoveFloatVideoWndParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string left = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_left();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string top = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_top();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.MoveFloatVideoWndParams)
  return target;
}

::size_t MoveFloatVideoWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_left());
    }

    // optional string top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_top());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveFloatVideoWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MoveFloatVideoWndParams*>(
      &from));
}

void MoveFloatVideoWndParams::MergeFrom(const MoveFloatVideoWndParams& from) {
  MoveFloatVideoWndParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_top(from._internal_top());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MoveFloatVideoWndParams::CopyFrom(const MoveFloatVideoWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFloatVideoWndParams::IsInitialized() const {
  return true;
}

void MoveFloatVideoWndParams::InternalSwap(MoveFloatVideoWndParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_, lhs_arena,
                                       &other->_impl_.left_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.top_, lhs_arena,
                                       &other->_impl_.top_, rhs_arena);
}

std::string MoveFloatVideoWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.MoveFloatVideoWndParams";
}

// ===================================================================

class ShowSharingToolbarParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowSharingToolbarParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShowSharingToolbarParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowSharingToolbarParams::ShowSharingToolbarParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowSharingToolbarParams)
}
ShowSharingToolbarParams::ShowSharingToolbarParams(const ShowSharingToolbarParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowSharingToolbarParams)
}

inline void ShowSharingToolbarParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

ShowSharingToolbarParams::~ShowSharingToolbarParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowSharingToolbarParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowSharingToolbarParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShowSharingToolbarParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowSharingToolbarParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowSharingToolbarParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShowSharingToolbarParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowSharingToolbarParams)
  return target;
}

::size_t ShowSharingToolbarParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSharingToolbarParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShowSharingToolbarParams*>(
      &from));
}

void ShowSharingToolbarParams::MergeFrom(const ShowSharingToolbarParams& from) {
  ShowSharingToolbarParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShowSharingToolbarParams::CopyFrom(const ShowSharingToolbarParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSharingToolbarParams::IsInitialized() const {
  return true;
}

void ShowSharingToolbarParams::InternalSwap(ShowSharingToolbarParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string ShowSharingToolbarParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowSharingToolbarParams";
}

// ===================================================================

class ChangeFloatoActiveSpkVideoSizeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeFloatoActiveSpkVideoSizeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChangeFloatoActiveSpkVideoSizeParams, _impl_._has_bits_);
  static void set_has_floatvideotype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangeFloatoActiveSpkVideoSizeParams::ChangeFloatoActiveSpkVideoSizeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
}
ChangeFloatoActiveSpkVideoSizeParams::ChangeFloatoActiveSpkVideoSizeParams(const ChangeFloatoActiveSpkVideoSizeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
}

inline void ChangeFloatoActiveSpkVideoSizeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.floatvideotype_) { 0 }

  };
}

ChangeFloatoActiveSpkVideoSizeParams::~ChangeFloatoActiveSpkVideoSizeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeFloatoActiveSpkVideoSizeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangeFloatoActiveSpkVideoSizeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeFloatoActiveSpkVideoSizeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.floatvideotype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChangeFloatoActiveSpkVideoSizeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 floatVideoType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_floatvideotype(&has_bits);
          _impl_.floatvideotype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChangeFloatoActiveSpkVideoSizeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 floatVideoType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_floatvideotype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  return target;
}

::size_t ChangeFloatoActiveSpkVideoSizeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 floatVideoType = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_floatvideotype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeFloatoActiveSpkVideoSizeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChangeFloatoActiveSpkVideoSizeParams*>(
      &from));
}

void ChangeFloatoActiveSpkVideoSizeParams::MergeFrom(const ChangeFloatoActiveSpkVideoSizeParams& from) {
  ChangeFloatoActiveSpkVideoSizeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_floatvideotype(from._internal_floatvideotype());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChangeFloatoActiveSpkVideoSizeParams::CopyFrom(const ChangeFloatoActiveSpkVideoSizeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFloatoActiveSpkVideoSizeParams::IsInitialized() const {
  return true;
}

void ChangeFloatoActiveSpkVideoSizeParams::InternalSwap(ChangeFloatoActiveSpkVideoSizeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.floatvideotype_, other->_impl_.floatvideotype_);
}

std::string ChangeFloatoActiveSpkVideoSizeParams::GetTypeName() const {
  return "com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams";
}

// ===================================================================

class ShowParticipantsListWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowParticipantsListWndParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShowParticipantsListWndParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowParticipantsListWndParams::ShowParticipantsListWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowParticipantsListWndParams)
}
ShowParticipantsListWndParams::ShowParticipantsListWndParams(const ShowParticipantsListWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowParticipantsListWndParams)
}

inline void ShowParticipantsListWndParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

ShowParticipantsListWndParams::~ShowParticipantsListWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowParticipantsListWndParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowParticipantsListWndParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShowParticipantsListWndParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowParticipantsListWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowParticipantsListWndParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShowParticipantsListWndParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowParticipantsListWndParams)
  return target;
}

::size_t ShowParticipantsListWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowParticipantsListWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShowParticipantsListWndParams*>(
      &from));
}

void ShowParticipantsListWndParams::MergeFrom(const ShowParticipantsListWndParams& from) {
  ShowParticipantsListWndParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShowParticipantsListWndParams::CopyFrom(const ShowParticipantsListWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowParticipantsListWndParams::IsInitialized() const {
  return true;
}

void ShowParticipantsListWndParams::InternalSwap(ShowParticipantsListWndParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string ShowParticipantsListWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowParticipantsListWndParams";
}

// ===================================================================

class ShowBottomFloatToolbarWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowBottomFloatToolbarWndParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShowBottomFloatToolbarWndParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowBottomFloatToolbarWndParams::ShowBottomFloatToolbarWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
}
ShowBottomFloatToolbarWndParams::ShowBottomFloatToolbarWndParams(const ShowBottomFloatToolbarWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
}

inline void ShowBottomFloatToolbarWndParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

ShowBottomFloatToolbarWndParams::~ShowBottomFloatToolbarWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowBottomFloatToolbarWndParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShowBottomFloatToolbarWndParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowBottomFloatToolbarWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowBottomFloatToolbarWndParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShowBottomFloatToolbarWndParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  return target;
}

::size_t ShowBottomFloatToolbarWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowBottomFloatToolbarWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShowBottomFloatToolbarWndParams*>(
      &from));
}

void ShowBottomFloatToolbarWndParams::MergeFrom(const ShowBottomFloatToolbarWndParams& from) {
  ShowBottomFloatToolbarWndParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShowBottomFloatToolbarWndParams::CopyFrom(const ShowBottomFloatToolbarWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowBottomFloatToolbarWndParams::IsInitialized() const {
  return true;
}

void ShowBottomFloatToolbarWndParams::InternalSwap(ShowBottomFloatToolbarWndParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string ShowBottomFloatToolbarWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowBottomFloatToolbarWndParams";
}

// ===================================================================

class ShowPreOrNextPageVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowPreOrNextPageVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShowPreOrNextPageVideoParams, _impl_._has_bits_);
  static void set_has_bpageup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowPreOrNextPageVideoParams::ShowPreOrNextPageVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
}
ShowPreOrNextPageVideoParams::ShowPreOrNextPageVideoParams(const ShowPreOrNextPageVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
}

inline void ShowPreOrNextPageVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bpageup_) { false }

  };
}

ShowPreOrNextPageVideoParams::~ShowPreOrNextPageVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowPreOrNextPageVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShowPreOrNextPageVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowPreOrNextPageVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bpageup_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowPreOrNextPageVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bPageUp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bpageup(&has_bits);
          _impl_.bpageup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShowPreOrNextPageVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bPageUp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bpageup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  return target;
}

::size_t ShowPreOrNextPageVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bPageUp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowPreOrNextPageVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShowPreOrNextPageVideoParams*>(
      &from));
}

void ShowPreOrNextPageVideoParams::MergeFrom(const ShowPreOrNextPageVideoParams& from) {
  ShowPreOrNextPageVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bpageup(from._internal_bpageup());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShowPreOrNextPageVideoParams::CopyFrom(const ShowPreOrNextPageVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowPreOrNextPageVideoParams::IsInitialized() const {
  return true;
}

void ShowPreOrNextPageVideoParams::InternalSwap(ShowPreOrNextPageVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bpageup_, other->_impl_.bpageup_);
}

std::string ShowPreOrNextPageVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowPreOrNextPageVideoParams";
}

// ===================================================================

class ShowSharingFrameWindowsParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowSharingFrameWindowsParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShowSharingFrameWindowsParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowSharingFrameWindowsParams::ShowSharingFrameWindowsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
}
ShowSharingFrameWindowsParams::ShowSharingFrameWindowsParams(const ShowSharingFrameWindowsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
}

inline void ShowSharingFrameWindowsParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

ShowSharingFrameWindowsParams::~ShowSharingFrameWindowsParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowSharingFrameWindowsParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShowSharingFrameWindowsParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowSharingFrameWindowsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowSharingFrameWindowsParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShowSharingFrameWindowsParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  return target;
}

::size_t ShowSharingFrameWindowsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSharingFrameWindowsParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShowSharingFrameWindowsParams*>(
      &from));
}

void ShowSharingFrameWindowsParams::MergeFrom(const ShowSharingFrameWindowsParams& from) {
  ShowSharingFrameWindowsParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShowSharingFrameWindowsParams::CopyFrom(const ShowSharingFrameWindowsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSharingFrameWindowsParams::IsInitialized() const {
  return true;
}

void ShowSharingFrameWindowsParams::InternalSwap(ShowSharingFrameWindowsParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string ShowSharingFrameWindowsParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowSharingFrameWindowsParams";
}

// ===================================================================

class SwitchSplitScreenModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SwitchSplitScreenModeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SwitchSplitScreenModeParams, _impl_._has_bits_);
  static void set_has_bsplit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwitchSplitScreenModeParams::SwitchSplitScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SwitchSplitScreenModeParams)
}
SwitchSplitScreenModeParams::SwitchSplitScreenModeParams(const SwitchSplitScreenModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SwitchSplitScreenModeParams)
}

inline void SwitchSplitScreenModeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bsplit_) { false }

  };
}

SwitchSplitScreenModeParams::~SwitchSplitScreenModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchSplitScreenModeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SwitchSplitScreenModeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchSplitScreenModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bsplit_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SwitchSplitScreenModeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bSplit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bsplit(&has_bits);
          _impl_.bsplit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchSplitScreenModeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bSplit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bsplit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  return target;
}

::size_t SwitchSplitScreenModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bSplit = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchSplitScreenModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SwitchSplitScreenModeParams*>(
      &from));
}

void SwitchSplitScreenModeParams::MergeFrom(const SwitchSplitScreenModeParams& from) {
  SwitchSplitScreenModeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bsplit(from._internal_bsplit());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SwitchSplitScreenModeParams::CopyFrom(const SwitchSplitScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchSplitScreenModeParams::IsInitialized() const {
  return true;
}

void SwitchSplitScreenModeParams::InternalSwap(SwitchSplitScreenModeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bsplit_, other->_impl_.bsplit_);
}

std::string SwitchSplitScreenModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.SwitchSplitScreenModeParams";
}

// ===================================================================

class SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams, _impl_._has_bits_);
  static void set_has_minimizeuimode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
}
SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
}

inline void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.minimizeuimode_) { 0 }

  };
}

SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::~SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.minimizeuimode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 minimizeUIMOde = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_minimizeuimode(&has_bits);
          _impl_.minimizeuimode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 minimizeUIMOde = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_minimizeuimode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  return target;
}

::size_t SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 minimizeUIMOde = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_minimizeuimode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams*>(
      &from));
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::MergeFrom(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from) {
  SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_minimizeuimode(from._internal_minimizeuimode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::CopyFrom(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::IsInitialized() const {
  return true;
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::InternalSwap(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.minimizeuimode_, other->_impl_.minimizeuimode_);
}

std::string SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams";
}

// ===================================================================

class SwapToShowShareViewOrVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapToShowShareViewOrVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SwapToShowShareViewOrVideoParams, _impl_._has_bits_);
  static void set_has_btodisplayshare(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwapToShowShareViewOrVideoParams::SwapToShowShareViewOrVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
}
SwapToShowShareViewOrVideoParams::SwapToShowShareViewOrVideoParams(const SwapToShowShareViewOrVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
}

inline void SwapToShowShareViewOrVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.btodisplayshare_) { false }

  };
}

SwapToShowShareViewOrVideoParams::~SwapToShowShareViewOrVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwapToShowShareViewOrVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SwapToShowShareViewOrVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwapToShowShareViewOrVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.btodisplayshare_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SwapToShowShareViewOrVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bToDisplayShare = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_btodisplayshare(&has_bits);
          _impl_.btodisplayshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SwapToShowShareViewOrVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bToDisplayShare = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_btodisplayshare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  return target;
}

::size_t SwapToShowShareViewOrVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bToDisplayShare = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapToShowShareViewOrVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SwapToShowShareViewOrVideoParams*>(
      &from));
}

void SwapToShowShareViewOrVideoParams::MergeFrom(const SwapToShowShareViewOrVideoParams& from) {
  SwapToShowShareViewOrVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_btodisplayshare(from._internal_btodisplayshare());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SwapToShowShareViewOrVideoParams::CopyFrom(const SwapToShowShareViewOrVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapToShowShareViewOrVideoParams::IsInitialized() const {
  return true;
}

void SwapToShowShareViewOrVideoParams::InternalSwap(SwapToShowShareViewOrVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.btodisplayshare_, other->_impl_.btodisplayshare_);
}

std::string SwapToShowShareViewOrVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.SwapToShowShareViewOrVideoParams";
}

// ===================================================================

class ShowSettingDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowSettingDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShowSettingDlgParams, _impl_._has_bits_);
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hsettingwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ShowSettingDlgParams::ShowSettingDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowSettingDlgParams)
}
ShowSettingDlgParams::ShowSettingDlgParams(const ShowSettingDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ShowSettingDlgParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hparent_) {}

    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.hsettingwnd_) {}

    , decltype(_impl_.bshow_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.hparent_.Set(from._internal_hparent(), _this->GetArenaForAllocation());
  }
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.left_.Set(from._internal_left(), _this->GetArenaForAllocation());
  }
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.top_.Set(from._internal_top(), _this->GetArenaForAllocation());
  }
  _impl_.hsettingwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hsettingwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.hsettingwnd_.Set(from._internal_hsettingwnd(), _this->GetArenaForAllocation());
  }
  _this->_impl_.bshow_ = from._impl_.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowSettingDlgParams)
}

inline void ShowSettingDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hparent_) {}

    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.hsettingwnd_) {}

    , decltype(_impl_.bshow_) { false }

  };
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hsettingwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hsettingwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShowSettingDlgParams::~ShowSettingDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowSettingDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowSettingDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hparent_.Destroy();
  _impl_.left_.Destroy();
  _impl_.top_.Destroy();
  _impl_.hsettingwnd_.Destroy();
}

void ShowSettingDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowSettingDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowSettingDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hparent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.top_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.hsettingwnd_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowSettingDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string hParent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hparent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_left();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string top = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_top();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hSettingWnd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hsettingwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bShow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShowSettingDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowSettingDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string hParent = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_hparent();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string left = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_left();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string top = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_top();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string hSettingWnd = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_hsettingwnd();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool bShow = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowSettingDlgParams)
  return target;
}

::size_t ShowSettingDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowSettingDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hParent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hparent());
    }

    // optional string left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_left());
    }

    // optional string top = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_top());
    }

    // optional string hSettingWnd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hsettingwnd());
    }

    // optional bool bShow = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSettingDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShowSettingDlgParams*>(
      &from));
}

void ShowSettingDlgParams::MergeFrom(const ShowSettingDlgParams& from) {
  ShowSettingDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowSettingDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hparent(from._internal_hparent());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_hsettingwnd(from._internal_hsettingwnd());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bshow_ = from._impl_.bshow_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShowSettingDlgParams::CopyFrom(const ShowSettingDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowSettingDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSettingDlgParams::IsInitialized() const {
  return true;
}

void ShowSettingDlgParams::InternalSwap(ShowSettingDlgParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hparent_, lhs_arena,
                                       &other->_impl_.hparent_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_, lhs_arena,
                                       &other->_impl_.left_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.top_, lhs_arena,
                                       &other->_impl_.top_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hsettingwnd_, lhs_arena,
                                       &other->_impl_.hsettingwnd_, rhs_arena);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string ShowSettingDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowSettingDlgParams";
}

// ===================================================================

class ScheduleMeetingWithWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduleMeetingWithWndParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScheduleMeetingWithWndParams, _impl_._has_bits_);
  static void set_has_hselfwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ScheduleMeetingWithWndParams::ScheduleMeetingWithWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
}
ScheduleMeetingWithWndParams::ScheduleMeetingWithWndParams(const ScheduleMeetingWithWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ScheduleMeetingWithWndParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hselfwnd_) {}

    , decltype(_impl_.hparent_) {}

    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hselfwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.hselfwnd_.Set(from._internal_hselfwnd(), _this->GetArenaForAllocation());
  }
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.hparent_.Set(from._internal_hparent(), _this->GetArenaForAllocation());
  }
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.left_.Set(from._internal_left(), _this->GetArenaForAllocation());
  }
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.top_.Set(from._internal_top(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
}

inline void ScheduleMeetingWithWndParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hselfwnd_) {}

    , decltype(_impl_.hparent_) {}

    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

  };
  _impl_.hselfwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScheduleMeetingWithWndParams::~ScheduleMeetingWithWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleMeetingWithWndParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hselfwnd_.Destroy();
  _impl_.hparent_.Destroy();
  _impl_.left_.Destroy();
  _impl_.top_.Destroy();
}

void ScheduleMeetingWithWndParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleMeetingWithWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hselfwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hparent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.top_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ScheduleMeetingWithWndParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string hSelfWnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hselfwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hParent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hparent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_left();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string top = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_top();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScheduleMeetingWithWndParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string hSelfWnd = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_hselfwnd();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string hParent = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_hparent();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string left = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_left();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string top = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_top();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  return target;
}

::size_t ScheduleMeetingWithWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string hSelfWnd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hselfwnd());
    }

    // optional string hParent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hparent());
    }

    // optional string left = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_left());
    }

    // optional string top = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_top());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScheduleMeetingWithWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScheduleMeetingWithWndParams*>(
      &from));
}

void ScheduleMeetingWithWndParams::MergeFrom(const ScheduleMeetingWithWndParams& from) {
  ScheduleMeetingWithWndParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hselfwnd(from._internal_hselfwnd());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hparent(from._internal_hparent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_top(from._internal_top());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScheduleMeetingWithWndParams::CopyFrom(const ScheduleMeetingWithWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleMeetingWithWndParams::IsInitialized() const {
  return true;
}

void ScheduleMeetingWithWndParams::InternalSwap(ScheduleMeetingWithWndParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hselfwnd_, lhs_arena,
                                       &other->_impl_.hselfwnd_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hparent_, lhs_arena,
                                       &other->_impl_.hparent_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_, lhs_arena,
                                       &other->_impl_.left_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.top_, lhs_arena,
                                       &other->_impl_.top_, rhs_arena);
}

std::string ScheduleMeetingWithWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.ScheduleMeetingWithWndParams";
}

// ===================================================================

class EditMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EditMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EditMeetingParams, _impl_._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EditMeetingParams::EditMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EditMeetingParams)
}
EditMeetingParams::EditMeetingParams(const EditMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EditMeetingParams)
}

inline void EditMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meetingnumber_) { ::uint64_t{0u} }

  };
}

EditMeetingParams::~EditMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EditMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EditMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EditMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EditMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          _impl_.meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EditMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EditMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_meetingnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EditMeetingParams)
  return target;
}

::size_t EditMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EditMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 meetingNumber = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_meetingnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EditMeetingParams*>(
      &from));
}

void EditMeetingParams::MergeFrom(const EditMeetingParams& from) {
  EditMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EditMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_meetingnumber(from._internal_meetingnumber());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EditMeetingParams::CopyFrom(const EditMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EditMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMeetingParams::IsInitialized() const {
  return true;
}

void EditMeetingParams::InternalSwap(EditMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.meetingnumber_, other->_impl_.meetingnumber_);
}

std::string EditMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EditMeetingParams";
}

// ===================================================================

class EditMeetingWithWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EditMeetingWithWndParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EditMeetingWithWndParams, _impl_._has_bits_);
  static void set_has_hselfwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

EditMeetingWithWndParams::EditMeetingWithWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EditMeetingWithWndParams)
}
EditMeetingWithWndParams::EditMeetingWithWndParams(const EditMeetingWithWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EditMeetingWithWndParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hselfwnd_) {}

    , decltype(_impl_.hparent_) {}

    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.meetingnumber_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hselfwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.hselfwnd_.Set(from._internal_hselfwnd(), _this->GetArenaForAllocation());
  }
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.hparent_.Set(from._internal_hparent(), _this->GetArenaForAllocation());
  }
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.left_.Set(from._internal_left(), _this->GetArenaForAllocation());
  }
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.top_.Set(from._internal_top(), _this->GetArenaForAllocation());
  }
  _this->_impl_.meetingnumber_ = from._impl_.meetingnumber_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EditMeetingWithWndParams)
}

inline void EditMeetingWithWndParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hselfwnd_) {}

    , decltype(_impl_.hparent_) {}

    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.meetingnumber_) { ::uint64_t{0u} }

  };
  _impl_.hselfwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EditMeetingWithWndParams::~EditMeetingWithWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EditMeetingWithWndParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditMeetingWithWndParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hselfwnd_.Destroy();
  _impl_.hparent_.Destroy();
  _impl_.left_.Destroy();
  _impl_.top_.Destroy();
}

void EditMeetingWithWndParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditMeetingWithWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hselfwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hparent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.top_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EditMeetingWithWndParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string hSelfWnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hselfwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hParent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hparent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_left();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string top = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_top();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 meetingNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_meetingnumber(&has_bits);
          _impl_.meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EditMeetingWithWndParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string hSelfWnd = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_hselfwnd();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string hParent = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_hparent();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string left = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_left();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string top = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_top();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional uint64 meetingNumber = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_meetingnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EditMeetingWithWndParams)
  return target;
}

::size_t EditMeetingWithWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hSelfWnd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hselfwnd());
    }

    // optional string hParent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hparent());
    }

    // optional string left = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_left());
    }

    // optional string top = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_top());
    }

    // optional uint64 meetingNumber = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_meetingnumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditMeetingWithWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EditMeetingWithWndParams*>(
      &from));
}

void EditMeetingWithWndParams::MergeFrom(const EditMeetingWithWndParams& from) {
  EditMeetingWithWndParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hselfwnd(from._internal_hselfwnd());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hparent(from._internal_hparent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.meetingnumber_ = from._impl_.meetingnumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EditMeetingWithWndParams::CopyFrom(const EditMeetingWithWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMeetingWithWndParams::IsInitialized() const {
  return true;
}

void EditMeetingWithWndParams::InternalSwap(EditMeetingWithWndParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hselfwnd_, lhs_arena,
                                       &other->_impl_.hselfwnd_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hparent_, lhs_arena,
                                       &other->_impl_.hparent_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_, lhs_arena,
                                       &other->_impl_.left_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.top_, lhs_arena,
                                       &other->_impl_.top_, rhs_arena);

  swap(_impl_.meetingnumber_, other->_impl_.meetingnumber_);
}

std::string EditMeetingWithWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.EditMeetingWithWndParams";
}

// ===================================================================

class DeleteMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeleteMeetingParams, _impl_._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeleteMeetingParams::DeleteMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DeleteMeetingParams)
}
DeleteMeetingParams::DeleteMeetingParams(const DeleteMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DeleteMeetingParams)
}

inline void DeleteMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meetingnumber_) { ::uint64_t{0u} }

  };
}

DeleteMeetingParams::~DeleteMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DeleteMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DeleteMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          _impl_.meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeleteMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DeleteMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_meetingnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DeleteMeetingParams)
  return target;
}

::size_t DeleteMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DeleteMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 meetingNumber = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_meetingnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeleteMeetingParams*>(
      &from));
}

void DeleteMeetingParams::MergeFrom(const DeleteMeetingParams& from) {
  DeleteMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DeleteMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_meetingnumber(from._internal_meetingnumber());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeleteMeetingParams::CopyFrom(const DeleteMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DeleteMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMeetingParams::IsInitialized() const {
  return true;
}

void DeleteMeetingParams::InternalSwap(DeleteMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.meetingnumber_, other->_impl_.meetingnumber_);
}

std::string DeleteMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DeleteMeetingParams";
}

// ===================================================================

class AddCustomizedPictureResourceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AddCustomizedPictureResourceParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddCustomizedPictureResourceParams, _impl_._has_bits_);
  static void set_has_strpngid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strpngpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AddCustomizedPictureResourceParams::AddCustomizedPictureResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
}
AddCustomizedPictureResourceParams::AddCustomizedPictureResourceParams(const AddCustomizedPictureResourceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AddCustomizedPictureResourceParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strpngid_) {}

    , decltype(_impl_.strpngpath_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strpngid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strpngid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strpngid_.Set(from._internal_strpngid(), _this->GetArenaForAllocation());
  }
  _impl_.strpngpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strpngpath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.strpngpath_.Set(from._internal_strpngpath(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
}

inline void AddCustomizedPictureResourceParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strpngid_) {}

    , decltype(_impl_.strpngpath_) {}

  };
  _impl_.strpngid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strpngid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strpngpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strpngpath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddCustomizedPictureResourceParams::~AddCustomizedPictureResourceParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddCustomizedPictureResourceParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strpngid_.Destroy();
  _impl_.strpngpath_.Destroy();
}

void AddCustomizedPictureResourceParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddCustomizedPictureResourceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.strpngid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.strpngpath_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AddCustomizedPictureResourceParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string strPNGID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strpngid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strPNGPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strpngpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AddCustomizedPictureResourceParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string strPNGID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strpngid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string strPNGPath = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_strpngpath();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  return target;
}

::size_t AddCustomizedPictureResourceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strPNGID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strpngid());
    }

    // optional string strPNGPath = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strpngpath());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCustomizedPictureResourceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AddCustomizedPictureResourceParams*>(
      &from));
}

void AddCustomizedPictureResourceParams::MergeFrom(const AddCustomizedPictureResourceParams& from) {
  AddCustomizedPictureResourceParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strpngid(from._internal_strpngid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_strpngpath(from._internal_strpngpath());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AddCustomizedPictureResourceParams::CopyFrom(const AddCustomizedPictureResourceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCustomizedPictureResourceParams::IsInitialized() const {
  return true;
}

void AddCustomizedPictureResourceParams::InternalSwap(AddCustomizedPictureResourceParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strpngid_, lhs_arena,
                                       &other->_impl_.strpngid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strpngpath_, lhs_arena,
                                       &other->_impl_.strpngpath_, rhs_arena);
}

std::string AddCustomizedPictureResourceParams::GetTypeName() const {
  return "com.electron.sdk.proto.AddCustomizedPictureResourceParams";
}

// ===================================================================

class AddCustomizedStringResourceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AddCustomizedStringResourceParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddCustomizedStringResourceParams, _impl_._has_bits_);
  static void set_has_customizedstringtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strcustomizedstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AddCustomizedStringResourceParams::AddCustomizedStringResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AddCustomizedStringResourceParams)
}
AddCustomizedStringResourceParams::AddCustomizedStringResourceParams(const AddCustomizedStringResourceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AddCustomizedStringResourceParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strcustomizedstring_) {}

    , decltype(_impl_.customizedstringtype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strcustomizedstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strcustomizedstring_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strcustomizedstring_.Set(from._internal_strcustomizedstring(), _this->GetArenaForAllocation());
  }
  _this->_impl_.customizedstringtype_ = from._impl_.customizedstringtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AddCustomizedStringResourceParams)
}

inline void AddCustomizedStringResourceParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strcustomizedstring_) {}

    , decltype(_impl_.customizedstringtype_) { 0 }

  };
  _impl_.strcustomizedstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strcustomizedstring_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddCustomizedStringResourceParams::~AddCustomizedStringResourceParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddCustomizedStringResourceParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strcustomizedstring_.Destroy();
}

void AddCustomizedStringResourceParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddCustomizedStringResourceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strcustomizedstring_.ClearNonDefaultToEmpty();
  }
  _impl_.customizedstringtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AddCustomizedStringResourceParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 customizedStringType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_customizedstringtype(&has_bits);
          _impl_.customizedstringtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strCustomizedString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strcustomizedstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AddCustomizedStringResourceParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 customizedStringType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_customizedstringtype(), target);
  }

  // optional string strCustomizedString = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strcustomizedstring();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  return target;
}

::size_t AddCustomizedStringResourceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strCustomizedString = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strcustomizedstring());
    }

    // optional int32 customizedStringType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_customizedstringtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCustomizedStringResourceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AddCustomizedStringResourceParams*>(
      &from));
}

void AddCustomizedStringResourceParams::MergeFrom(const AddCustomizedStringResourceParams& from) {
  AddCustomizedStringResourceParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strcustomizedstring(from._internal_strcustomizedstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.customizedstringtype_ = from._impl_.customizedstringtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AddCustomizedStringResourceParams::CopyFrom(const AddCustomizedStringResourceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCustomizedStringResourceParams::IsInitialized() const {
  return true;
}

void AddCustomizedStringResourceParams::InternalSwap(AddCustomizedStringResourceParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strcustomizedstring_, lhs_arena,
                                       &other->_impl_.strcustomizedstring_, rhs_arena);

  swap(_impl_.customizedstringtype_, other->_impl_.customizedstringtype_);
}

std::string AddCustomizedStringResourceParams::GetTypeName() const {
  return "com.electron.sdk.proto.AddCustomizedStringResourceParams";
}

// ===================================================================

class AddCustomizedURLResourceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AddCustomizedURLResourceParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddCustomizedURLResourceParams, _impl_._has_bits_);
  static void set_has_customizedurltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strcustomizedurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AddCustomizedURLResourceParams::AddCustomizedURLResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AddCustomizedURLResourceParams)
}
AddCustomizedURLResourceParams::AddCustomizedURLResourceParams(const AddCustomizedURLResourceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AddCustomizedURLResourceParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strcustomizedurl_) {}

    , decltype(_impl_.customizedurltype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strcustomizedurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strcustomizedurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strcustomizedurl_.Set(from._internal_strcustomizedurl(), _this->GetArenaForAllocation());
  }
  _this->_impl_.customizedurltype_ = from._impl_.customizedurltype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AddCustomizedURLResourceParams)
}

inline void AddCustomizedURLResourceParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strcustomizedurl_) {}

    , decltype(_impl_.customizedurltype_) { 0 }

  };
  _impl_.strcustomizedurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strcustomizedurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddCustomizedURLResourceParams::~AddCustomizedURLResourceParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddCustomizedURLResourceParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strcustomizedurl_.Destroy();
}

void AddCustomizedURLResourceParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddCustomizedURLResourceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strcustomizedurl_.ClearNonDefaultToEmpty();
  }
  _impl_.customizedurltype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AddCustomizedURLResourceParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 customizedURLType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_customizedurltype(&has_bits);
          _impl_.customizedurltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strCustomizedURL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strcustomizedurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AddCustomizedURLResourceParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 customizedURLType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_customizedurltype(), target);
  }

  // optional string strCustomizedURL = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strcustomizedurl();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  return target;
}

::size_t AddCustomizedURLResourceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strCustomizedURL = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strcustomizedurl());
    }

    // optional int32 customizedURLType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_customizedurltype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCustomizedURLResourceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AddCustomizedURLResourceParams*>(
      &from));
}

void AddCustomizedURLResourceParams::MergeFrom(const AddCustomizedURLResourceParams& from) {
  AddCustomizedURLResourceParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strcustomizedurl(from._internal_strcustomizedurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.customizedurltype_ = from._impl_.customizedurltype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AddCustomizedURLResourceParams::CopyFrom(const AddCustomizedURLResourceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCustomizedURLResourceParams::IsInitialized() const {
  return true;
}

void AddCustomizedURLResourceParams::InternalSwap(AddCustomizedURLResourceParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strcustomizedurl_, lhs_arena,
                                       &other->_impl_.strcustomizedurl_, rhs_arena);

  swap(_impl_.customizedurltype_, other->_impl_.customizedurltype_);
}

std::string AddCustomizedURLResourceParams::GetTypeName() const {
  return "com.electron.sdk.proto.AddCustomizedURLResourceParams";
}

// ===================================================================

class TryWithMeetingNumberParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TryWithMeetingNumberParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TryWithMeetingNumberParams, _impl_._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TryWithMeetingNumberParams::TryWithMeetingNumberParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.TryWithMeetingNumberParams)
}
TryWithMeetingNumberParams::TryWithMeetingNumberParams(const TryWithMeetingNumberParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.TryWithMeetingNumberParams)
}

inline void TryWithMeetingNumberParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meetingnumber_) { ::uint64_t{0u} }

  };
}

TryWithMeetingNumberParams::~TryWithMeetingNumberParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.TryWithMeetingNumberParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TryWithMeetingNumberParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TryWithMeetingNumberParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TryWithMeetingNumberParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TryWithMeetingNumberParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          _impl_.meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TryWithMeetingNumberParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_meetingnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.TryWithMeetingNumberParams)
  return target;
}

::size_t TryWithMeetingNumberParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 meetingNumber = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_meetingnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryWithMeetingNumberParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TryWithMeetingNumberParams*>(
      &from));
}

void TryWithMeetingNumberParams::MergeFrom(const TryWithMeetingNumberParams& from) {
  TryWithMeetingNumberParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_meetingnumber(from._internal_meetingnumber());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TryWithMeetingNumberParams::CopyFrom(const TryWithMeetingNumberParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryWithMeetingNumberParams::IsInitialized() const {
  return true;
}

void TryWithMeetingNumberParams::InternalSwap(TryWithMeetingNumberParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.meetingnumber_, other->_impl_.meetingnumber_);
}

std::string TryWithMeetingNumberParams::GetTypeName() const {
  return "com.electron.sdk.proto.TryWithMeetingNumberParams";
}

// ===================================================================

class TryWithPairingCodeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TryWithPairingCodeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TryWithPairingCodeParams, _impl_._has_bits_);
  static void set_has_paringcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TryWithPairingCodeParams::TryWithPairingCodeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.TryWithPairingCodeParams)
}
TryWithPairingCodeParams::TryWithPairingCodeParams(const TryWithPairingCodeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TryWithPairingCodeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paringcode_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.paringcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.paringcode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paringcode_.Set(from._internal_paringcode(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.TryWithPairingCodeParams)
}

inline void TryWithPairingCodeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paringcode_) {}

  };
  _impl_.paringcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.paringcode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TryWithPairingCodeParams::~TryWithPairingCodeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.TryWithPairingCodeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TryWithPairingCodeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paringcode_.Destroy();
}

void TryWithPairingCodeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TryWithPairingCodeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.paringcode_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TryWithPairingCodeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string paringCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_paringcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TryWithPairingCodeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string paringCode = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_paringcode();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.TryWithPairingCodeParams)
  return target;
}

::size_t TryWithPairingCodeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string paringCode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_paringcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryWithPairingCodeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TryWithPairingCodeParams*>(
      &from));
}

void TryWithPairingCodeParams::MergeFrom(const TryWithPairingCodeParams& from) {
  TryWithPairingCodeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_paringcode(from._internal_paringcode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TryWithPairingCodeParams::CopyFrom(const TryWithPairingCodeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryWithPairingCodeParams::IsInitialized() const {
  return true;
}

void TryWithPairingCodeParams::InternalSwap(TryWithPairingCodeParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.paringcode_, lhs_arena,
                                       &other->_impl_.paringcode_, rhs_arena);
}

std::string TryWithPairingCodeParams::GetTypeName() const {
  return "com.electron.sdk.proto.TryWithPairingCodeParams";
}

// ===================================================================

class StartAnnotationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartAnnotationParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartAnnotationParams, _impl_._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StartAnnotationParams::StartAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartAnnotationParams)
}
StartAnnotationParams::StartAnnotationParams(const StartAnnotationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartAnnotationParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.viewtype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.left_.Set(from._internal_left(), _this->GetArenaForAllocation());
  }
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.top_.Set(from._internal_top(), _this->GetArenaForAllocation());
  }
  _this->_impl_.viewtype_ = from._impl_.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartAnnotationParams)
}

inline void StartAnnotationParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.viewtype_) { 0 }

  };
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartAnnotationParams::~StartAnnotationParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartAnnotationParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartAnnotationParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.left_.Destroy();
  _impl_.top_.Destroy();
}

void StartAnnotationParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartAnnotationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartAnnotationParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.top_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.viewtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartAnnotationParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          _impl_.viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_left();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string top = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_top();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartAnnotationParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartAnnotationParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_viewtype(), target);
  }

  // optional string left = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_left();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string top = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_top();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartAnnotationParams)
  return target;
}

::size_t StartAnnotationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartAnnotationParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string left = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_left());
    }

    // optional string top = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_top());
    }

    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_viewtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAnnotationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartAnnotationParams*>(
      &from));
}

void StartAnnotationParams::MergeFrom(const StartAnnotationParams& from) {
  StartAnnotationParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartAnnotationParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.viewtype_ = from._impl_.viewtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartAnnotationParams::CopyFrom(const StartAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartAnnotationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAnnotationParams::IsInitialized() const {
  return true;
}

void StartAnnotationParams::InternalSwap(StartAnnotationParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_, lhs_arena,
                                       &other->_impl_.left_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.top_, lhs_arena,
                                       &other->_impl_.top_, rhs_arena);

  swap(_impl_.viewtype_, other->_impl_.viewtype_);
}

std::string StartAnnotationParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartAnnotationParams";
}

// ===================================================================

class StopAnnotationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StopAnnotationParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StopAnnotationParams, _impl_._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopAnnotationParams::StopAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StopAnnotationParams)
}
StopAnnotationParams::StopAnnotationParams(const StopAnnotationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StopAnnotationParams)
}

inline void StopAnnotationParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewtype_) { 0 }

  };
}

StopAnnotationParams::~StopAnnotationParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StopAnnotationParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopAnnotationParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopAnnotationParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopAnnotationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StopAnnotationParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.viewtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StopAnnotationParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          _impl_.viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StopAnnotationParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StopAnnotationParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_viewtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StopAnnotationParams)
  return target;
}

::size_t StopAnnotationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StopAnnotationParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 viewType = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_viewtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopAnnotationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StopAnnotationParams*>(
      &from));
}

void StopAnnotationParams::MergeFrom(const StopAnnotationParams& from) {
  StopAnnotationParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StopAnnotationParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_viewtype(from._internal_viewtype());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StopAnnotationParams::CopyFrom(const StopAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StopAnnotationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAnnotationParams::IsInitialized() const {
  return true;
}

void StopAnnotationParams::InternalSwap(StopAnnotationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.viewtype_, other->_impl_.viewtype_);
}

std::string StopAnnotationParams::GetTypeName() const {
  return "com.electron.sdk.proto.StopAnnotationParams";
}

// ===================================================================

class SetToolParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetToolParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetToolParams, _impl_._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tooltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetToolParams::SetToolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetToolParams)
}
SetToolParams::SetToolParams(const SetToolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetToolParams)
}

inline void SetToolParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewtype_) { 0 }

    , decltype(_impl_.tooltype_) { 0 }

  };
}

SetToolParams::~SetToolParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetToolParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetToolParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetToolParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetToolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetToolParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.viewtype_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.tooltype_) -
        reinterpret_cast<char*>(&_impl_.viewtype_)) + sizeof(_impl_.tooltype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetToolParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          _impl_.viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 toolType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_tooltype(&has_bits);
          _impl_.tooltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetToolParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetToolParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_viewtype(), target);
  }

  // optional int32 toolType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_tooltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetToolParams)
  return target;
}

::size_t SetToolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetToolParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_viewtype());
    }

    // optional int32 toolType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_tooltype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetToolParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetToolParams*>(
      &from));
}

void SetToolParams::MergeFrom(const SetToolParams& from) {
  SetToolParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetToolParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.viewtype_ = from._impl_.viewtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tooltype_ = from._impl_.tooltype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetToolParams::CopyFrom(const SetToolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetToolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetToolParams::IsInitialized() const {
  return true;
}

void SetToolParams::InternalSwap(SetToolParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetToolParams, _impl_.tooltype_)
      + sizeof(SetToolParams::_impl_.tooltype_)
      - PROTOBUF_FIELD_OFFSET(SetToolParams, _impl_.viewtype_)>(
          reinterpret_cast<char*>(&_impl_.viewtype_),
          reinterpret_cast<char*>(&other->_impl_.viewtype_));
}

std::string SetToolParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetToolParams";
}

// ===================================================================

class ClearAnnotationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearAnnotationParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClearAnnotationParams, _impl_._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cleartype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClearAnnotationParams::ClearAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ClearAnnotationParams)
}
ClearAnnotationParams::ClearAnnotationParams(const ClearAnnotationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ClearAnnotationParams)
}

inline void ClearAnnotationParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewtype_) { 0 }

    , decltype(_impl_.cleartype_) { 0 }

  };
}

ClearAnnotationParams::~ClearAnnotationParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ClearAnnotationParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClearAnnotationParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearAnnotationParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClearAnnotationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ClearAnnotationParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.viewtype_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cleartype_) -
        reinterpret_cast<char*>(&_impl_.viewtype_)) + sizeof(_impl_.cleartype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClearAnnotationParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          _impl_.viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 clearType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_cleartype(&has_bits);
          _impl_.cleartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClearAnnotationParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ClearAnnotationParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_viewtype(), target);
  }

  // optional int32 clearType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_cleartype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ClearAnnotationParams)
  return target;
}

::size_t ClearAnnotationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ClearAnnotationParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_viewtype());
    }

    // optional int32 clearType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_cleartype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearAnnotationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClearAnnotationParams*>(
      &from));
}

void ClearAnnotationParams::MergeFrom(const ClearAnnotationParams& from) {
  ClearAnnotationParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ClearAnnotationParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.viewtype_ = from._impl_.viewtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cleartype_ = from._impl_.cleartype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClearAnnotationParams::CopyFrom(const ClearAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ClearAnnotationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearAnnotationParams::IsInitialized() const {
  return true;
}

void ClearAnnotationParams::InternalSwap(ClearAnnotationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearAnnotationParams, _impl_.cleartype_)
      + sizeof(ClearAnnotationParams::_impl_.cleartype_)
      - PROTOBUF_FIELD_OFFSET(ClearAnnotationParams, _impl_.viewtype_)>(
          reinterpret_cast<char*>(&_impl_.viewtype_),
          reinterpret_cast<char*>(&other->_impl_.viewtype_));
}

std::string ClearAnnotationParams::GetTypeName() const {
  return "com.electron.sdk.proto.ClearAnnotationParams";
}

// ===================================================================

class SetColorParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetColorParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetColorParams, _impl_._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetColorParams::SetColorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetColorParams)
}
SetColorParams::SetColorParams(const SetColorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetColorParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_) {}

    , decltype(_impl_.viewtype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.color_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.color_.Set(from._internal_color(), _this->GetArenaForAllocation());
  }
  _this->_impl_.viewtype_ = from._impl_.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetColorParams)
}

inline void SetColorParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_) {}

    , decltype(_impl_.viewtype_) { 0 }

  };
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.color_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetColorParams::~SetColorParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetColorParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetColorParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.color_.Destroy();
}

void SetColorParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetColorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetColorParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.color_.ClearNonDefaultToEmpty();
  }
  _impl_.viewtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetColorParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          _impl_.viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetColorParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetColorParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_viewtype(), target);
  }

  // optional string color = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_color();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetColorParams)
  return target;
}

::size_t SetColorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetColorParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string color = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_color());
    }

    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_viewtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetColorParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetColorParams*>(
      &from));
}

void SetColorParams::MergeFrom(const SetColorParams& from) {
  SetColorParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetColorParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_color(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.viewtype_ = from._impl_.viewtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetColorParams::CopyFrom(const SetColorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetColorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetColorParams::IsInitialized() const {
  return true;
}

void SetColorParams::InternalSwap(SetColorParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, lhs_arena,
                                       &other->_impl_.color_, rhs_arena);

  swap(_impl_.viewtype_, other->_impl_.viewtype_);
}

std::string SetColorParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetColorParams";
}

// ===================================================================

class SetLineWidthParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLineWidthParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetLineWidthParams, _impl_._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_linewidth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetLineWidthParams::SetLineWidthParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetLineWidthParams)
}
SetLineWidthParams::SetLineWidthParams(const SetLineWidthParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetLineWidthParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linewidth_) {}

    , decltype(_impl_.viewtype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.linewidth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.linewidth_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.linewidth_.Set(from._internal_linewidth(), _this->GetArenaForAllocation());
  }
  _this->_impl_.viewtype_ = from._impl_.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetLineWidthParams)
}

inline void SetLineWidthParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linewidth_) {}

    , decltype(_impl_.viewtype_) { 0 }

  };
  _impl_.linewidth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.linewidth_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetLineWidthParams::~SetLineWidthParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetLineWidthParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLineWidthParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.linewidth_.Destroy();
}

void SetLineWidthParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLineWidthParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetLineWidthParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.linewidth_.ClearNonDefaultToEmpty();
  }
  _impl_.viewtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetLineWidthParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          _impl_.viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string lineWidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_linewidth();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetLineWidthParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetLineWidthParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_viewtype(), target);
  }

  // optional string lineWidth = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_linewidth();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetLineWidthParams)
  return target;
}

::size_t SetLineWidthParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetLineWidthParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string lineWidth = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_linewidth());
    }

    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_viewtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLineWidthParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetLineWidthParams*>(
      &from));
}

void SetLineWidthParams::MergeFrom(const SetLineWidthParams& from) {
  SetLineWidthParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetLineWidthParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_linewidth(from._internal_linewidth());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.viewtype_ = from._impl_.viewtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetLineWidthParams::CopyFrom(const SetLineWidthParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetLineWidthParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLineWidthParams::IsInitialized() const {
  return true;
}

void SetLineWidthParams::InternalSwap(SetLineWidthParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.linewidth_, lhs_arena,
                                       &other->_impl_.linewidth_, rhs_arena);

  swap(_impl_.viewtype_, other->_impl_.viewtype_);
}

std::string SetLineWidthParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetLineWidthParams";
}

// ===================================================================

class UndoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UndoParams, _impl_._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UndoParams::UndoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.UndoParams)
}
UndoParams::UndoParams(const UndoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.UndoParams)
}

inline void UndoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewtype_) { 0 }

  };
}

UndoParams::~UndoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.UndoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.UndoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.viewtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UndoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          _impl_.viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UndoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.UndoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_viewtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.UndoParams)
  return target;
}

::size_t UndoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.UndoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 viewType = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_viewtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UndoParams*>(
      &from));
}

void UndoParams::MergeFrom(const UndoParams& from) {
  UndoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.UndoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_viewtype(from._internal_viewtype());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UndoParams::CopyFrom(const UndoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.UndoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoParams::IsInitialized() const {
  return true;
}

void UndoParams::InternalSwap(UndoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.viewtype_, other->_impl_.viewtype_);
}

std::string UndoParams::GetTypeName() const {
  return "com.electron.sdk.proto.UndoParams";
}

// ===================================================================

class RedoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedoParams, _impl_._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedoParams::RedoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedoParams)
}
RedoParams::RedoParams(const RedoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedoParams)
}

inline void RedoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewtype_) { 0 }

  };
}

RedoParams::~RedoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.viewtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          _impl_.viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_viewtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedoParams)
  return target;
}

::size_t RedoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 viewType = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_viewtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedoParams*>(
      &from));
}

void RedoParams::MergeFrom(const RedoParams& from) {
  RedoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_viewtype(from._internal_viewtype());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedoParams::CopyFrom(const RedoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedoParams::IsInitialized() const {
  return true;
}

void RedoParams::InternalSwap(RedoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.viewtype_, other->_impl_.viewtype_);
}

std::string RedoParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedoParams";
}

// ===================================================================

class MuteAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MuteAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MuteAudioParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowunmutebyself(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MuteAudioParams::MuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.MuteAudioParams)
}
MuteAudioParams::MuteAudioParams(const MuteAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.MuteAudioParams)
}

inline void MuteAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0 }

    , decltype(_impl_.allowunmutebyself_) { false }

  };
}

MuteAudioParams::~MuteAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.MuteAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MuteAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MuteAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.MuteAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.userid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.allowunmutebyself_) -
        reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.allowunmutebyself_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MuteAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool allowUnmuteBySelf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_allowunmutebyself(&has_bits);
          _impl_.allowunmutebyself_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MuteAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.MuteAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_userid(), target);
  }

  // optional bool allowUnmuteBySelf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_allowunmutebyself(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.MuteAudioParams)
  return target;
}

::size_t MuteAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.MuteAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_userid());
    }

    // optional bool allowUnmuteBySelf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MuteAudioParams*>(
      &from));
}

void MuteAudioParams::MergeFrom(const MuteAudioParams& from) {
  MuteAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.MuteAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.allowunmutebyself_ = from._impl_.allowunmutebyself_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MuteAudioParams::CopyFrom(const MuteAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.MuteAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteAudioParams::IsInitialized() const {
  return true;
}

void MuteAudioParams::InternalSwap(MuteAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MuteAudioParams, _impl_.allowunmutebyself_)
      + sizeof(MuteAudioParams::_impl_.allowunmutebyself_)
      - PROTOBUF_FIELD_OFFSET(MuteAudioParams, _impl_.userid_)>(
          reinterpret_cast<char*>(&_impl_.userid_),
          reinterpret_cast<char*>(&other->_impl_.userid_));
}

std::string MuteAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.MuteAudioParams";
}

// ===================================================================

class UnmuteAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnmuteAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnmuteAudioParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnmuteAudioParams::UnmuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.UnmuteAudioParams)
}
UnmuteAudioParams::UnmuteAudioParams(const UnmuteAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.UnmuteAudioParams)
}

inline void UnmuteAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0 }

  };
}

UnmuteAudioParams::~UnmuteAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.UnmuteAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnmuteAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnmuteAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnmuteAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.UnmuteAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnmuteAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnmuteAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.UnmuteAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.UnmuteAudioParams)
  return target;
}

::size_t UnmuteAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.UnmuteAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnmuteAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnmuteAudioParams*>(
      &from));
}

void UnmuteAudioParams::MergeFrom(const UnmuteAudioParams& from) {
  UnmuteAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.UnmuteAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnmuteAudioParams::CopyFrom(const UnmuteAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.UnmuteAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmuteAudioParams::IsInitialized() const {
  return true;
}

void UnmuteAudioParams::InternalSwap(UnmuteAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string UnmuteAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.UnmuteAudioParams";
}

// ===================================================================

class EnablePlayChimeWhenEnterOrExitParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnablePlayChimeWhenEnterOrExitParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnablePlayChimeWhenEnterOrExitParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnablePlayChimeWhenEnterOrExitParams::EnablePlayChimeWhenEnterOrExitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
}
EnablePlayChimeWhenEnterOrExitParams::EnablePlayChimeWhenEnterOrExitParams(const EnablePlayChimeWhenEnterOrExitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
}

inline void EnablePlayChimeWhenEnterOrExitParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnablePlayChimeWhenEnterOrExitParams::~EnablePlayChimeWhenEnterOrExitParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnablePlayChimeWhenEnterOrExitParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnablePlayChimeWhenEnterOrExitParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnablePlayChimeWhenEnterOrExitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnablePlayChimeWhenEnterOrExitParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnablePlayChimeWhenEnterOrExitParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  return target;
}

::size_t EnablePlayChimeWhenEnterOrExitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnablePlayChimeWhenEnterOrExitParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnablePlayChimeWhenEnterOrExitParams*>(
      &from));
}

void EnablePlayChimeWhenEnterOrExitParams::MergeFrom(const EnablePlayChimeWhenEnterOrExitParams& from) {
  EnablePlayChimeWhenEnterOrExitParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnablePlayChimeWhenEnterOrExitParams::CopyFrom(const EnablePlayChimeWhenEnterOrExitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnablePlayChimeWhenEnterOrExitParams::IsInitialized() const {
  return true;
}

void EnablePlayChimeWhenEnterOrExitParams::InternalSwap(EnablePlayChimeWhenEnterOrExitParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnablePlayChimeWhenEnterOrExitParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams";
}

// ===================================================================

class EnableInviteButtonOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableInviteButtonOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableInviteButtonOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableInviteButtonOnMeetingUIParams::EnableInviteButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
}
EnableInviteButtonOnMeetingUIParams::EnableInviteButtonOnMeetingUIParams(const EnableInviteButtonOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
}

inline void EnableInviteButtonOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableInviteButtonOnMeetingUIParams::~EnableInviteButtonOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableInviteButtonOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableInviteButtonOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableInviteButtonOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableInviteButtonOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableInviteButtonOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  return target;
}

::size_t EnableInviteButtonOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableInviteButtonOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableInviteButtonOnMeetingUIParams*>(
      &from));
}

void EnableInviteButtonOnMeetingUIParams::MergeFrom(const EnableInviteButtonOnMeetingUIParams& from) {
  EnableInviteButtonOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableInviteButtonOnMeetingUIParams::CopyFrom(const EnableInviteButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableInviteButtonOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableInviteButtonOnMeetingUIParams::InternalSwap(EnableInviteButtonOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableInviteButtonOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams";
}

// ===================================================================

class SetFloatVideoPosParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetFloatVideoPosParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetFloatVideoPosParams, _impl_._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hselfwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SetFloatVideoPosParams::SetFloatVideoPosParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetFloatVideoPosParams)
}
SetFloatVideoPosParams::SetFloatVideoPosParams(const SetFloatVideoPosParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetFloatVideoPosParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.hselfwnd_) {}

    , decltype(_impl_.hparent_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.left_.Set(from._internal_left(), _this->GetArenaForAllocation());
  }
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.top_.Set(from._internal_top(), _this->GetArenaForAllocation());
  }
  _impl_.hselfwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.hselfwnd_.Set(from._internal_hselfwnd(), _this->GetArenaForAllocation());
  }
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.hparent_.Set(from._internal_hparent(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetFloatVideoPosParams)
}

inline void SetFloatVideoPosParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.hselfwnd_) {}

    , decltype(_impl_.hparent_) {}

  };
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hselfwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetFloatVideoPosParams::~SetFloatVideoPosParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetFloatVideoPosParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetFloatVideoPosParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.left_.Destroy();
  _impl_.top_.Destroy();
  _impl_.hselfwnd_.Destroy();
  _impl_.hparent_.Destroy();
}

void SetFloatVideoPosParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetFloatVideoPosParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.top_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hselfwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.hparent_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetFloatVideoPosParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_left();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_top();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hSelfWnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hselfwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hParent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hparent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetFloatVideoPosParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string left = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_left();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string top = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_top();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string hSelfWnd = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_hselfwnd();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string hParent = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_hparent();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetFloatVideoPosParams)
  return target;
}

::size_t SetFloatVideoPosParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_left());
    }

    // optional string top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_top());
    }

    // optional string hSelfWnd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hselfwnd());
    }

    // optional string hParent = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hparent());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetFloatVideoPosParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetFloatVideoPosParams*>(
      &from));
}

void SetFloatVideoPosParams::MergeFrom(const SetFloatVideoPosParams& from) {
  SetFloatVideoPosParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_hselfwnd(from._internal_hselfwnd());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_hparent(from._internal_hparent());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetFloatVideoPosParams::CopyFrom(const SetFloatVideoPosParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFloatVideoPosParams::IsInitialized() const {
  return true;
}

void SetFloatVideoPosParams::InternalSwap(SetFloatVideoPosParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_, lhs_arena,
                                       &other->_impl_.left_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.top_, lhs_arena,
                                       &other->_impl_.top_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hselfwnd_, lhs_arena,
                                       &other->_impl_.hselfwnd_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hparent_, lhs_arena,
                                       &other->_impl_.hparent_, rhs_arena);
}

std::string SetFloatVideoPosParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetFloatVideoPosParams";
}

// ===================================================================

class SetBottomFloatToolBarWndVisibilityParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetBottomFloatToolBarWndVisibilityParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetBottomFloatToolBarWndVisibilityParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetBottomFloatToolBarWndVisibilityParams::SetBottomFloatToolBarWndVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
}
SetBottomFloatToolBarWndVisibilityParams::SetBottomFloatToolBarWndVisibilityParams(const SetBottomFloatToolBarWndVisibilityParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
}

inline void SetBottomFloatToolBarWndVisibilityParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

SetBottomFloatToolBarWndVisibilityParams::~SetBottomFloatToolBarWndVisibilityParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetBottomFloatToolBarWndVisibilityParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetBottomFloatToolBarWndVisibilityParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetBottomFloatToolBarWndVisibilityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetBottomFloatToolBarWndVisibilityParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetBottomFloatToolBarWndVisibilityParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  return target;
}

::size_t SetBottomFloatToolBarWndVisibilityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBottomFloatToolBarWndVisibilityParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetBottomFloatToolBarWndVisibilityParams*>(
      &from));
}

void SetBottomFloatToolBarWndVisibilityParams::MergeFrom(const SetBottomFloatToolBarWndVisibilityParams& from) {
  SetBottomFloatToolBarWndVisibilityParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetBottomFloatToolBarWndVisibilityParams::CopyFrom(const SetBottomFloatToolBarWndVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBottomFloatToolBarWndVisibilityParams::IsInitialized() const {
  return true;
}

void SetBottomFloatToolBarWndVisibilityParams::InternalSwap(SetBottomFloatToolBarWndVisibilityParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string SetBottomFloatToolBarWndVisibilityParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams";
}

// ===================================================================

class SetSharingToolBarVisibilityParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSharingToolBarVisibilityParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetSharingToolBarVisibilityParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetSharingToolBarVisibilityParams::SetSharingToolBarVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
}
SetSharingToolBarVisibilityParams::SetSharingToolBarVisibilityParams(const SetSharingToolBarVisibilityParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
}

inline void SetSharingToolBarVisibilityParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

SetSharingToolBarVisibilityParams::~SetSharingToolBarVisibilityParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSharingToolBarVisibilityParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSharingToolBarVisibilityParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSharingToolBarVisibilityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetSharingToolBarVisibilityParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetSharingToolBarVisibilityParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  return target;
}

::size_t SetSharingToolBarVisibilityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSharingToolBarVisibilityParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetSharingToolBarVisibilityParams*>(
      &from));
}

void SetSharingToolBarVisibilityParams::MergeFrom(const SetSharingToolBarVisibilityParams& from) {
  SetSharingToolBarVisibilityParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetSharingToolBarVisibilityParams::CopyFrom(const SetSharingToolBarVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSharingToolBarVisibilityParams::IsInitialized() const {
  return true;
}

void SetSharingToolBarVisibilityParams::InternalSwap(SetSharingToolBarVisibilityParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string SetSharingToolBarVisibilityParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetSharingToolBarVisibilityParams";
}

// ===================================================================

class SetDirectShareMonitorIDParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetDirectShareMonitorIDParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetDirectShareMonitorIDParams, _impl_._has_bits_);
  static void set_has_monitorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetDirectShareMonitorIDParams::SetDirectShareMonitorIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
}
SetDirectShareMonitorIDParams::SetDirectShareMonitorIDParams(const SetDirectShareMonitorIDParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetDirectShareMonitorIDParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.monitorid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.monitorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.monitorid_.Set(from._internal_monitorid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
}

inline void SetDirectShareMonitorIDParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.monitorid_) {}

  };
  _impl_.monitorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetDirectShareMonitorIDParams::~SetDirectShareMonitorIDParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetDirectShareMonitorIDParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.monitorid_.Destroy();
}

void SetDirectShareMonitorIDParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetDirectShareMonitorIDParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.monitorid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetDirectShareMonitorIDParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string monitorID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_monitorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetDirectShareMonitorIDParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string monitorID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_monitorid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  return target;
}

::size_t SetDirectShareMonitorIDParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string monitorID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_monitorid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDirectShareMonitorIDParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetDirectShareMonitorIDParams*>(
      &from));
}

void SetDirectShareMonitorIDParams::MergeFrom(const SetDirectShareMonitorIDParams& from) {
  SetDirectShareMonitorIDParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_monitorid(from._internal_monitorid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetDirectShareMonitorIDParams::CopyFrom(const SetDirectShareMonitorIDParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDirectShareMonitorIDParams::IsInitialized() const {
  return true;
}

void SetDirectShareMonitorIDParams::InternalSwap(SetDirectShareMonitorIDParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.monitorid_, lhs_arena,
                                       &other->_impl_.monitorid_, rhs_arena);
}

std::string SetDirectShareMonitorIDParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetDirectShareMonitorIDParams";
}

// ===================================================================

class SetMeetingUIPosParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMeetingUIPosParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetMeetingUIPosParams, _impl_._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hselfwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SetMeetingUIPosParams::SetMeetingUIPosParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetMeetingUIPosParams)
}
SetMeetingUIPosParams::SetMeetingUIPosParams(const SetMeetingUIPosParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetMeetingUIPosParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.hselfwnd_) {}

    , decltype(_impl_.hparent_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.left_.Set(from._internal_left(), _this->GetArenaForAllocation());
  }
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.top_.Set(from._internal_top(), _this->GetArenaForAllocation());
  }
  _impl_.hselfwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.hselfwnd_.Set(from._internal_hselfwnd(), _this->GetArenaForAllocation());
  }
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.hparent_.Set(from._internal_hparent(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetMeetingUIPosParams)
}

inline void SetMeetingUIPosParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) {}

    , decltype(_impl_.top_) {}

    , decltype(_impl_.hselfwnd_) {}

    , decltype(_impl_.hparent_) {}

  };
  _impl_.left_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hselfwnd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetMeetingUIPosParams::~SetMeetingUIPosParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetMeetingUIPosParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMeetingUIPosParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.left_.Destroy();
  _impl_.top_.Destroy();
  _impl_.hselfwnd_.Destroy();
  _impl_.hparent_.Destroy();
}

void SetMeetingUIPosParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetMeetingUIPosParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.top_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hselfwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.hparent_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetMeetingUIPosParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_left();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_top();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hSelfWnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hselfwnd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string hParent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hparent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetMeetingUIPosParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string left = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_left();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string top = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_top();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string hSelfWnd = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_hselfwnd();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string hParent = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_hparent();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetMeetingUIPosParams)
  return target;
}

::size_t SetMeetingUIPosParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_left());
    }

    // optional string top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_top());
    }

    // optional string hSelfWnd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hselfwnd());
    }

    // optional string hParent = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_hparent());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMeetingUIPosParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetMeetingUIPosParams*>(
      &from));
}

void SetMeetingUIPosParams::MergeFrom(const SetMeetingUIPosParams& from) {
  SetMeetingUIPosParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_hselfwnd(from._internal_hselfwnd());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_hparent(from._internal_hparent());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetMeetingUIPosParams::CopyFrom(const SetMeetingUIPosParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMeetingUIPosParams::IsInitialized() const {
  return true;
}

void SetMeetingUIPosParams::InternalSwap(SetMeetingUIPosParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_, lhs_arena,
                                       &other->_impl_.left_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.top_, lhs_arena,
                                       &other->_impl_.top_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hselfwnd_, lhs_arena,
                                       &other->_impl_.hselfwnd_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hparent_, lhs_arena,
                                       &other->_impl_.hparent_, rhs_arena);
}

std::string SetMeetingUIPosParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetMeetingUIPosParams";
}

// ===================================================================

class DisableWaitingForHostDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableWaitingForHostDialogParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableWaitingForHostDialogParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableWaitingForHostDialogParams::DisableWaitingForHostDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
}
DisableWaitingForHostDialogParams::DisableWaitingForHostDialogParams(const DisableWaitingForHostDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
}

inline void DisableWaitingForHostDialogParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableWaitingForHostDialogParams::~DisableWaitingForHostDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableWaitingForHostDialogParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableWaitingForHostDialogParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableWaitingForHostDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableWaitingForHostDialogParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableWaitingForHostDialogParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  return target;
}

::size_t DisableWaitingForHostDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableWaitingForHostDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableWaitingForHostDialogParams*>(
      &from));
}

void DisableWaitingForHostDialogParams::MergeFrom(const DisableWaitingForHostDialogParams& from) {
  DisableWaitingForHostDialogParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableWaitingForHostDialogParams::CopyFrom(const DisableWaitingForHostDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableWaitingForHostDialogParams::IsInitialized() const {
  return true;
}

void DisableWaitingForHostDialogParams::InternalSwap(DisableWaitingForHostDialogParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableWaitingForHostDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableWaitingForHostDialogParams";
}

// ===================================================================

class DisablePopupMeetingWrongPSWDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisablePopupMeetingWrongPSWDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisablePopupMeetingWrongPSWDlgParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisablePopupMeetingWrongPSWDlgParams::DisablePopupMeetingWrongPSWDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
}
DisablePopupMeetingWrongPSWDlgParams::DisablePopupMeetingWrongPSWDlgParams(const DisablePopupMeetingWrongPSWDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
}

inline void DisablePopupMeetingWrongPSWDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisablePopupMeetingWrongPSWDlgParams::~DisablePopupMeetingWrongPSWDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisablePopupMeetingWrongPSWDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisablePopupMeetingWrongPSWDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisablePopupMeetingWrongPSWDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisablePopupMeetingWrongPSWDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisablePopupMeetingWrongPSWDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  return target;
}

::size_t DisablePopupMeetingWrongPSWDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisablePopupMeetingWrongPSWDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisablePopupMeetingWrongPSWDlgParams*>(
      &from));
}

void DisablePopupMeetingWrongPSWDlgParams::MergeFrom(const DisablePopupMeetingWrongPSWDlgParams& from) {
  DisablePopupMeetingWrongPSWDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisablePopupMeetingWrongPSWDlgParams::CopyFrom(const DisablePopupMeetingWrongPSWDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisablePopupMeetingWrongPSWDlgParams::IsInitialized() const {
  return true;
}

void DisablePopupMeetingWrongPSWDlgParams::InternalSwap(DisablePopupMeetingWrongPSWDlgParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisablePopupMeetingWrongPSWDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams";
}

// ===================================================================

class EnableAutoEndOtherMeetingWhenStartMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoEndOtherMeetingWhenStartMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoEndOtherMeetingWhenStartMeetingParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoEndOtherMeetingWhenStartMeetingParams::EnableAutoEndOtherMeetingWhenStartMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
}
EnableAutoEndOtherMeetingWhenStartMeetingParams::EnableAutoEndOtherMeetingWhenStartMeetingParams(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
}

inline void EnableAutoEndOtherMeetingWhenStartMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoEndOtherMeetingWhenStartMeetingParams::~EnableAutoEndOtherMeetingWhenStartMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoEndOtherMeetingWhenStartMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoEndOtherMeetingWhenStartMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoEndOtherMeetingWhenStartMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  return target;
}

::size_t EnableAutoEndOtherMeetingWhenStartMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoEndOtherMeetingWhenStartMeetingParams*>(
      &from));
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::MergeFrom(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from) {
  EnableAutoEndOtherMeetingWhenStartMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::CopyFrom(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoEndOtherMeetingWhenStartMeetingParams::IsInitialized() const {
  return true;
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::InternalSwap(EnableAutoEndOtherMeetingWhenStartMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoEndOtherMeetingWhenStartMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams";
}

// ===================================================================

class EnableLButtonDBClick4SwitchFullScreenModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableLButtonDBClick4SwitchFullScreenModeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableLButtonDBClick4SwitchFullScreenModeParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableLButtonDBClick4SwitchFullScreenModeParams::EnableLButtonDBClick4SwitchFullScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
}
EnableLButtonDBClick4SwitchFullScreenModeParams::EnableLButtonDBClick4SwitchFullScreenModeParams(const EnableLButtonDBClick4SwitchFullScreenModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
}

inline void EnableLButtonDBClick4SwitchFullScreenModeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableLButtonDBClick4SwitchFullScreenModeParams::~EnableLButtonDBClick4SwitchFullScreenModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableLButtonDBClick4SwitchFullScreenModeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableLButtonDBClick4SwitchFullScreenModeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableLButtonDBClick4SwitchFullScreenModeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  return target;
}

::size_t EnableLButtonDBClick4SwitchFullScreenModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableLButtonDBClick4SwitchFullScreenModeParams*>(
      &from));
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::MergeFrom(const EnableLButtonDBClick4SwitchFullScreenModeParams& from) {
  EnableLButtonDBClick4SwitchFullScreenModeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::CopyFrom(const EnableLButtonDBClick4SwitchFullScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableLButtonDBClick4SwitchFullScreenModeParams::IsInitialized() const {
  return true;
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::InternalSwap(EnableLButtonDBClick4SwitchFullScreenModeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableLButtonDBClick4SwitchFullScreenModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams";
}

// ===================================================================

class SetFloatVideoWndVisibilityParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetFloatVideoWndVisibilityParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetFloatVideoWndVisibilityParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetFloatVideoWndVisibilityParams::SetFloatVideoWndVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
}
SetFloatVideoWndVisibilityParams::SetFloatVideoWndVisibilityParams(const SetFloatVideoWndVisibilityParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
}

inline void SetFloatVideoWndVisibilityParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

SetFloatVideoWndVisibilityParams::~SetFloatVideoWndVisibilityParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetFloatVideoWndVisibilityParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetFloatVideoWndVisibilityParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetFloatVideoWndVisibilityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetFloatVideoWndVisibilityParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetFloatVideoWndVisibilityParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  return target;
}

::size_t SetFloatVideoWndVisibilityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetFloatVideoWndVisibilityParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetFloatVideoWndVisibilityParams*>(
      &from));
}

void SetFloatVideoWndVisibilityParams::MergeFrom(const SetFloatVideoWndVisibilityParams& from) {
  SetFloatVideoWndVisibilityParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetFloatVideoWndVisibilityParams::CopyFrom(const SetFloatVideoWndVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFloatVideoWndVisibilityParams::IsInitialized() const {
  return true;
}

void SetFloatVideoWndVisibilityParams::InternalSwap(SetFloatVideoWndVisibilityParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string SetFloatVideoWndVisibilityParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetFloatVideoWndVisibilityParams";
}

// ===================================================================

class PrePopulateWebinarRegistrationInfoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PrePopulateWebinarRegistrationInfoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrePopulateWebinarRegistrationInfoParams, _impl_._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PrePopulateWebinarRegistrationInfoParams::PrePopulateWebinarRegistrationInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
}
PrePopulateWebinarRegistrationInfoParams::PrePopulateWebinarRegistrationInfoParams(const PrePopulateWebinarRegistrationInfoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrePopulateWebinarRegistrationInfoParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_) {}

    , decltype(_impl_.username_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.email_.Set(from._internal_email(), _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
}

inline void PrePopulateWebinarRegistrationInfoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_) {}

    , decltype(_impl_.username_) {}

  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrePopulateWebinarRegistrationInfoParams::~PrePopulateWebinarRegistrationInfoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrePopulateWebinarRegistrationInfoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.username_.Destroy();
}

void PrePopulateWebinarRegistrationInfoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrePopulateWebinarRegistrationInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PrePopulateWebinarRegistrationInfoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrePopulateWebinarRegistrationInfoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string email = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_email();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string userName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_username();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  return target;
}

::size_t PrePopulateWebinarRegistrationInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_email());
    }

    // optional string userName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_username());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrePopulateWebinarRegistrationInfoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrePopulateWebinarRegistrationInfoParams*>(
      &from));
}

void PrePopulateWebinarRegistrationInfoParams::MergeFrom(const PrePopulateWebinarRegistrationInfoParams& from) {
  PrePopulateWebinarRegistrationInfoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_username(from._internal_username());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrePopulateWebinarRegistrationInfoParams::CopyFrom(const PrePopulateWebinarRegistrationInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrePopulateWebinarRegistrationInfoParams::IsInitialized() const {
  return true;
}

void PrePopulateWebinarRegistrationInfoParams::InternalSwap(PrePopulateWebinarRegistrationInfoParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, lhs_arena,
                                       &other->_impl_.email_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
}

std::string PrePopulateWebinarRegistrationInfoParams::GetTypeName() const {
  return "com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams";
}

// ===================================================================

class EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
}
EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
}

inline void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::~EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  return target;
}

::size_t EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams*>(
      &from));
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::MergeFrom(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from) {
  EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::CopyFrom(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::IsInitialized() const {
  return true;
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::InternalSwap(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams";
}

// ===================================================================

class EnableAutoAdjustMicVolumeWhenJoinAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoAdjustMicVolumeWhenJoinAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoAdjustMicVolumeWhenJoinAudioParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoAdjustMicVolumeWhenJoinAudioParams::EnableAutoAdjustMicVolumeWhenJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
}
EnableAutoAdjustMicVolumeWhenJoinAudioParams::EnableAutoAdjustMicVolumeWhenJoinAudioParams(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
}

inline void EnableAutoAdjustMicVolumeWhenJoinAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoAdjustMicVolumeWhenJoinAudioParams::~EnableAutoAdjustMicVolumeWhenJoinAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoAdjustMicVolumeWhenJoinAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoAdjustMicVolumeWhenJoinAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoAdjustMicVolumeWhenJoinAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  return target;
}

::size_t EnableAutoAdjustMicVolumeWhenJoinAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoAdjustMicVolumeWhenJoinAudioParams*>(
      &from));
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::MergeFrom(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from) {
  EnableAutoAdjustMicVolumeWhenJoinAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::CopyFrom(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoAdjustMicVolumeWhenJoinAudioParams::IsInitialized() const {
  return true;
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::InternalSwap(EnableAutoAdjustMicVolumeWhenJoinAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoAdjustMicVolumeWhenJoinAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams";
}

// ===================================================================

class ConfigDSCPParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigDSCPParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConfigDSCPParams, _impl_._has_bits_);
  static void set_has_dscpaudio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dscpvideo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_breset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ConfigDSCPParams::ConfigDSCPParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ConfigDSCPParams)
}
ConfigDSCPParams::ConfigDSCPParams(const ConfigDSCPParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ConfigDSCPParams)
}

inline void ConfigDSCPParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dscpaudio_) { 0 }

    , decltype(_impl_.dscpvideo_) { 0 }

    , decltype(_impl_.breset_) { false }

  };
}

ConfigDSCPParams::~ConfigDSCPParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ConfigDSCPParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigDSCPParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigDSCPParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigDSCPParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ConfigDSCPParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.dscpaudio_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.breset_) -
        reinterpret_cast<char*>(&_impl_.dscpaudio_)) + sizeof(_impl_.breset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ConfigDSCPParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dscpAudio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dscpaudio(&has_bits);
          _impl_.dscpaudio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 dscpVideo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_dscpvideo(&has_bits);
          _impl_.dscpvideo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bReset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_breset(&has_bits);
          _impl_.breset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConfigDSCPParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ConfigDSCPParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dscpAudio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_dscpaudio(), target);
  }

  // optional int32 dscpVideo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_dscpvideo(), target);
  }

  // optional bool bReset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_breset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ConfigDSCPParams)
  return target;
}

::size_t ConfigDSCPParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ConfigDSCPParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 dscpAudio = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dscpaudio());
    }

    // optional int32 dscpVideo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dscpvideo());
    }

    // optional bool bReset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDSCPParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ConfigDSCPParams*>(
      &from));
}

void ConfigDSCPParams::MergeFrom(const ConfigDSCPParams& from) {
  ConfigDSCPParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ConfigDSCPParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dscpaudio_ = from._impl_.dscpaudio_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dscpvideo_ = from._impl_.dscpvideo_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.breset_ = from._impl_.breset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ConfigDSCPParams::CopyFrom(const ConfigDSCPParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ConfigDSCPParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDSCPParams::IsInitialized() const {
  return true;
}

void ConfigDSCPParams::InternalSwap(ConfigDSCPParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigDSCPParams, _impl_.breset_)
      + sizeof(ConfigDSCPParams::_impl_.breset_)
      - PROTOBUF_FIELD_OFFSET(ConfigDSCPParams, _impl_.dscpaudio_)>(
          reinterpret_cast<char*>(&_impl_.dscpaudio_),
          reinterpret_cast<char*>(&other->_impl_.dscpaudio_));
}

std::string ConfigDSCPParams::GetTypeName() const {
  return "com.electron.sdk.proto.ConfigDSCPParams";
}

// ===================================================================

class EnableHIdeFullPhoneNumber4PureCallinUserParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHIdeFullPhoneNumber4PureCallinUserParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableHIdeFullPhoneNumber4PureCallinUserParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHIdeFullPhoneNumber4PureCallinUserParams::EnableHIdeFullPhoneNumber4PureCallinUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
}
EnableHIdeFullPhoneNumber4PureCallinUserParams::EnableHIdeFullPhoneNumber4PureCallinUserParams(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
}

inline void EnableHIdeFullPhoneNumber4PureCallinUserParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableHIdeFullPhoneNumber4PureCallinUserParams::~EnableHIdeFullPhoneNumber4PureCallinUserParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableHIdeFullPhoneNumber4PureCallinUserParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHIdeFullPhoneNumber4PureCallinUserParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableHIdeFullPhoneNumber4PureCallinUserParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  return target;
}

::size_t EnableHIdeFullPhoneNumber4PureCallinUserParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableHIdeFullPhoneNumber4PureCallinUserParams*>(
      &from));
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::MergeFrom(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from) {
  EnableHIdeFullPhoneNumber4PureCallinUserParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::CopyFrom(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHIdeFullPhoneNumber4PureCallinUserParams::IsInitialized() const {
  return true;
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::InternalSwap(EnableHIdeFullPhoneNumber4PureCallinUserParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableHIdeFullPhoneNumber4PureCallinUserParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams";
}

// ===================================================================

class EnableShareIOSDeviceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShareIOSDeviceParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableShareIOSDeviceParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShareIOSDeviceParams::EnableShareIOSDeviceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShareIOSDeviceParams)
}
EnableShareIOSDeviceParams::EnableShareIOSDeviceParams(const EnableShareIOSDeviceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShareIOSDeviceParams)
}

inline void EnableShareIOSDeviceParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableShareIOSDeviceParams::~EnableShareIOSDeviceParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableShareIOSDeviceParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableShareIOSDeviceParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableShareIOSDeviceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShareIOSDeviceParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableShareIOSDeviceParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  return target;
}

::size_t EnableShareIOSDeviceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShareIOSDeviceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableShareIOSDeviceParams*>(
      &from));
}

void EnableShareIOSDeviceParams::MergeFrom(const EnableShareIOSDeviceParams& from) {
  EnableShareIOSDeviceParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableShareIOSDeviceParams::CopyFrom(const EnableShareIOSDeviceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShareIOSDeviceParams::IsInitialized() const {
  return true;
}

void EnableShareIOSDeviceParams::InternalSwap(EnableShareIOSDeviceParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableShareIOSDeviceParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShareIOSDeviceParams";
}

// ===================================================================

class EnableShareWhiteBoardParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShareWhiteBoardParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableShareWhiteBoardParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShareWhiteBoardParams::EnableShareWhiteBoardParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShareWhiteBoardParams)
}
EnableShareWhiteBoardParams::EnableShareWhiteBoardParams(const EnableShareWhiteBoardParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShareWhiteBoardParams)
}

inline void EnableShareWhiteBoardParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableShareWhiteBoardParams::~EnableShareWhiteBoardParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableShareWhiteBoardParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableShareWhiteBoardParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableShareWhiteBoardParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShareWhiteBoardParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableShareWhiteBoardParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  return target;
}

::size_t EnableShareWhiteBoardParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShareWhiteBoardParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableShareWhiteBoardParams*>(
      &from));
}

void EnableShareWhiteBoardParams::MergeFrom(const EnableShareWhiteBoardParams& from) {
  EnableShareWhiteBoardParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableShareWhiteBoardParams::CopyFrom(const EnableShareWhiteBoardParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShareWhiteBoardParams::IsInitialized() const {
  return true;
}

void EnableShareWhiteBoardParams::InternalSwap(EnableShareWhiteBoardParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableShareWhiteBoardParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShareWhiteBoardParams";
}

// ===================================================================

class EnableLengthLimitationOfMeetingNumberParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableLengthLimitationOfMeetingNumberParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableLengthLimitationOfMeetingNumberParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableLengthLimitationOfMeetingNumberParams::EnableLengthLimitationOfMeetingNumberParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
}
EnableLengthLimitationOfMeetingNumberParams::EnableLengthLimitationOfMeetingNumberParams(const EnableLengthLimitationOfMeetingNumberParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
}

inline void EnableLengthLimitationOfMeetingNumberParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableLengthLimitationOfMeetingNumberParams::~EnableLengthLimitationOfMeetingNumberParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableLengthLimitationOfMeetingNumberParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableLengthLimitationOfMeetingNumberParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableLengthLimitationOfMeetingNumberParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableLengthLimitationOfMeetingNumberParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableLengthLimitationOfMeetingNumberParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  return target;
}

::size_t EnableLengthLimitationOfMeetingNumberParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableLengthLimitationOfMeetingNumberParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableLengthLimitationOfMeetingNumberParams*>(
      &from));
}

void EnableLengthLimitationOfMeetingNumberParams::MergeFrom(const EnableLengthLimitationOfMeetingNumberParams& from) {
  EnableLengthLimitationOfMeetingNumberParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableLengthLimitationOfMeetingNumberParams::CopyFrom(const EnableLengthLimitationOfMeetingNumberParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableLengthLimitationOfMeetingNumberParams::IsInitialized() const {
  return true;
}

void EnableLengthLimitationOfMeetingNumberParams::InternalSwap(EnableLengthLimitationOfMeetingNumberParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableLengthLimitationOfMeetingNumberParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams";
}

// ===================================================================

class ForceDisableMultiShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ForceDisableMultiShareParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ForceDisableMultiShareParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ForceDisableMultiShareParams::ForceDisableMultiShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ForceDisableMultiShareParams)
}
ForceDisableMultiShareParams::ForceDisableMultiShareParams(const ForceDisableMultiShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ForceDisableMultiShareParams)
}

inline void ForceDisableMultiShareParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

ForceDisableMultiShareParams::~ForceDisableMultiShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ForceDisableMultiShareParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForceDisableMultiShareParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForceDisableMultiShareParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForceDisableMultiShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ForceDisableMultiShareParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ForceDisableMultiShareParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ForceDisableMultiShareParams)
  return target;
}

::size_t ForceDisableMultiShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForceDisableMultiShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ForceDisableMultiShareParams*>(
      &from));
}

void ForceDisableMultiShareParams::MergeFrom(const ForceDisableMultiShareParams& from) {
  ForceDisableMultiShareParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ForceDisableMultiShareParams::CopyFrom(const ForceDisableMultiShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceDisableMultiShareParams::IsInitialized() const {
  return true;
}

void ForceDisableMultiShareParams::InternalSwap(ForceDisableMultiShareParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string ForceDisableMultiShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.ForceDisableMultiShareParams";
}

// ===================================================================

class EnableLocalRecordingConverProgressBarDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableLocalRecordingConverProgressBarDialogParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableLocalRecordingConverProgressBarDialogParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableLocalRecordingConverProgressBarDialogParams::EnableLocalRecordingConverProgressBarDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
}
EnableLocalRecordingConverProgressBarDialogParams::EnableLocalRecordingConverProgressBarDialogParams(const EnableLocalRecordingConverProgressBarDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
}

inline void EnableLocalRecordingConverProgressBarDialogParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableLocalRecordingConverProgressBarDialogParams::~EnableLocalRecordingConverProgressBarDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableLocalRecordingConverProgressBarDialogParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableLocalRecordingConverProgressBarDialogParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableLocalRecordingConverProgressBarDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableLocalRecordingConverProgressBarDialogParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableLocalRecordingConverProgressBarDialogParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  return target;
}

::size_t EnableLocalRecordingConverProgressBarDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableLocalRecordingConverProgressBarDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableLocalRecordingConverProgressBarDialogParams*>(
      &from));
}

void EnableLocalRecordingConverProgressBarDialogParams::MergeFrom(const EnableLocalRecordingConverProgressBarDialogParams& from) {
  EnableLocalRecordingConverProgressBarDialogParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableLocalRecordingConverProgressBarDialogParams::CopyFrom(const EnableLocalRecordingConverProgressBarDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableLocalRecordingConverProgressBarDialogParams::IsInitialized() const {
  return true;
}

void EnableLocalRecordingConverProgressBarDialogParams::InternalSwap(EnableLocalRecordingConverProgressBarDialogParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableLocalRecordingConverProgressBarDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams";
}

// ===================================================================

class SetMaxDurationForOnlyHostInMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMaxDurationForOnlyHostInMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetMaxDurationForOnlyHostInMeetingParams, _impl_._has_bits_);
  static void set_has_nduration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetMaxDurationForOnlyHostInMeetingParams::SetMaxDurationForOnlyHostInMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
}
SetMaxDurationForOnlyHostInMeetingParams::SetMaxDurationForOnlyHostInMeetingParams(const SetMaxDurationForOnlyHostInMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
}

inline void SetMaxDurationForOnlyHostInMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nduration_) { 0 }

  };
}

SetMaxDurationForOnlyHostInMeetingParams::~SetMaxDurationForOnlyHostInMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMaxDurationForOnlyHostInMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetMaxDurationForOnlyHostInMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetMaxDurationForOnlyHostInMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nduration_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetMaxDurationForOnlyHostInMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nDuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nduration(&has_bits);
          _impl_.nduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetMaxDurationForOnlyHostInMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nDuration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  return target;
}

::size_t SetMaxDurationForOnlyHostInMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 nDuration = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_nduration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMaxDurationForOnlyHostInMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetMaxDurationForOnlyHostInMeetingParams*>(
      &from));
}

void SetMaxDurationForOnlyHostInMeetingParams::MergeFrom(const SetMaxDurationForOnlyHostInMeetingParams& from) {
  SetMaxDurationForOnlyHostInMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_nduration(from._internal_nduration());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetMaxDurationForOnlyHostInMeetingParams::CopyFrom(const SetMaxDurationForOnlyHostInMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaxDurationForOnlyHostInMeetingParams::IsInitialized() const {
  return true;
}

void SetMaxDurationForOnlyHostInMeetingParams::InternalSwap(SetMaxDurationForOnlyHostInMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.nduration_, other->_impl_.nduration_);
}

std::string SetMaxDurationForOnlyHostInMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams";
}

// ===================================================================

class EnableApproveRemoteControlDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableApproveRemoteControlDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableApproveRemoteControlDlgParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableApproveRemoteControlDlgParams::EnableApproveRemoteControlDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
}
EnableApproveRemoteControlDlgParams::EnableApproveRemoteControlDlgParams(const EnableApproveRemoteControlDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
}

inline void EnableApproveRemoteControlDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableApproveRemoteControlDlgParams::~EnableApproveRemoteControlDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableApproveRemoteControlDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableApproveRemoteControlDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableApproveRemoteControlDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableApproveRemoteControlDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableApproveRemoteControlDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  return target;
}

::size_t EnableApproveRemoteControlDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableApproveRemoteControlDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableApproveRemoteControlDlgParams*>(
      &from));
}

void EnableApproveRemoteControlDlgParams::MergeFrom(const EnableApproveRemoteControlDlgParams& from) {
  EnableApproveRemoteControlDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableApproveRemoteControlDlgParams::CopyFrom(const EnableApproveRemoteControlDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableApproveRemoteControlDlgParams::IsInitialized() const {
  return true;
}

void EnableApproveRemoteControlDlgParams::InternalSwap(EnableApproveRemoteControlDlgParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableApproveRemoteControlDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableApproveRemoteControlDlgParams";
}

// ===================================================================

class EnableDeclineRemoteControlResponseDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableDeclineRemoteControlResponseDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableDeclineRemoteControlResponseDlgParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableDeclineRemoteControlResponseDlgParams::EnableDeclineRemoteControlResponseDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
}
EnableDeclineRemoteControlResponseDlgParams::EnableDeclineRemoteControlResponseDlgParams(const EnableDeclineRemoteControlResponseDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
}

inline void EnableDeclineRemoteControlResponseDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableDeclineRemoteControlResponseDlgParams::~EnableDeclineRemoteControlResponseDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableDeclineRemoteControlResponseDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableDeclineRemoteControlResponseDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableDeclineRemoteControlResponseDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableDeclineRemoteControlResponseDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableDeclineRemoteControlResponseDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  return target;
}

::size_t EnableDeclineRemoteControlResponseDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableDeclineRemoteControlResponseDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableDeclineRemoteControlResponseDlgParams*>(
      &from));
}

void EnableDeclineRemoteControlResponseDlgParams::MergeFrom(const EnableDeclineRemoteControlResponseDlgParams& from) {
  EnableDeclineRemoteControlResponseDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableDeclineRemoteControlResponseDlgParams::CopyFrom(const EnableDeclineRemoteControlResponseDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableDeclineRemoteControlResponseDlgParams::IsInitialized() const {
  return true;
}

void EnableDeclineRemoteControlResponseDlgParams::InternalSwap(EnableDeclineRemoteControlResponseDlgParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableDeclineRemoteControlResponseDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams";
}

// ===================================================================

class EnableLeaveMeetingOptionForHostParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableLeaveMeetingOptionForHostParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableLeaveMeetingOptionForHostParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableLeaveMeetingOptionForHostParams::EnableLeaveMeetingOptionForHostParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
}
EnableLeaveMeetingOptionForHostParams::EnableLeaveMeetingOptionForHostParams(const EnableLeaveMeetingOptionForHostParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
}

inline void EnableLeaveMeetingOptionForHostParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableLeaveMeetingOptionForHostParams::~EnableLeaveMeetingOptionForHostParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableLeaveMeetingOptionForHostParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableLeaveMeetingOptionForHostParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableLeaveMeetingOptionForHostParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableLeaveMeetingOptionForHostParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableLeaveMeetingOptionForHostParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  return target;
}

::size_t EnableLeaveMeetingOptionForHostParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableLeaveMeetingOptionForHostParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableLeaveMeetingOptionForHostParams*>(
      &from));
}

void EnableLeaveMeetingOptionForHostParams::MergeFrom(const EnableLeaveMeetingOptionForHostParams& from) {
  EnableLeaveMeetingOptionForHostParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableLeaveMeetingOptionForHostParams::CopyFrom(const EnableLeaveMeetingOptionForHostParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableLeaveMeetingOptionForHostParams::IsInitialized() const {
  return true;
}

void EnableLeaveMeetingOptionForHostParams::InternalSwap(EnableLeaveMeetingOptionForHostParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableLeaveMeetingOptionForHostParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams";
}

// ===================================================================

class EnableVideoButtonOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableVideoButtonOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableVideoButtonOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableVideoButtonOnMeetingUIParams::EnableVideoButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
}
EnableVideoButtonOnMeetingUIParams::EnableVideoButtonOnMeetingUIParams(const EnableVideoButtonOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
}

inline void EnableVideoButtonOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableVideoButtonOnMeetingUIParams::~EnableVideoButtonOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableVideoButtonOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableVideoButtonOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableVideoButtonOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableVideoButtonOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableVideoButtonOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  return target;
}

::size_t EnableVideoButtonOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableVideoButtonOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableVideoButtonOnMeetingUIParams*>(
      &from));
}

void EnableVideoButtonOnMeetingUIParams::MergeFrom(const EnableVideoButtonOnMeetingUIParams& from) {
  EnableVideoButtonOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableVideoButtonOnMeetingUIParams::CopyFrom(const EnableVideoButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableVideoButtonOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableVideoButtonOnMeetingUIParams::InternalSwap(EnableVideoButtonOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableVideoButtonOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams";
}

// ===================================================================

class EnableAudioButtonOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAudioButtonOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAudioButtonOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAudioButtonOnMeetingUIParams::EnableAudioButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
}
EnableAudioButtonOnMeetingUIParams::EnableAudioButtonOnMeetingUIParams(const EnableAudioButtonOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
}

inline void EnableAudioButtonOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAudioButtonOnMeetingUIParams::~EnableAudioButtonOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAudioButtonOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAudioButtonOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAudioButtonOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAudioButtonOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAudioButtonOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  return target;
}

::size_t EnableAudioButtonOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAudioButtonOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAudioButtonOnMeetingUIParams*>(
      &from));
}

void EnableAudioButtonOnMeetingUIParams::MergeFrom(const EnableAudioButtonOnMeetingUIParams& from) {
  EnableAudioButtonOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAudioButtonOnMeetingUIParams::CopyFrom(const EnableAudioButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAudioButtonOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableAudioButtonOnMeetingUIParams::InternalSwap(EnableAudioButtonOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAudioButtonOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams";
}

// ===================================================================

class EnableEnterAndExitFullScreenButtonOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableEnterAndExitFullScreenButtonOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableEnterAndExitFullScreenButtonOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableEnterAndExitFullScreenButtonOnMeetingUIParams::EnableEnterAndExitFullScreenButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
}
EnableEnterAndExitFullScreenButtonOnMeetingUIParams::EnableEnterAndExitFullScreenButtonOnMeetingUIParams(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
}

inline void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableEnterAndExitFullScreenButtonOnMeetingUIParams::~EnableEnterAndExitFullScreenButtonOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableEnterAndExitFullScreenButtonOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableEnterAndExitFullScreenButtonOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  return target;
}

::size_t EnableEnterAndExitFullScreenButtonOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableEnterAndExitFullScreenButtonOnMeetingUIParams*>(
      &from));
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::MergeFrom(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from) {
  EnableEnterAndExitFullScreenButtonOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::CopyFrom(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableEnterAndExitFullScreenButtonOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::InternalSwap(EnableEnterAndExitFullScreenButtonOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableEnterAndExitFullScreenButtonOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams";
}

// ===================================================================

class RedirectClickShareBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickShareBTNEventParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectClickShareBTNEventParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickShareBTNEventParams::RedirectClickShareBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
}
RedirectClickShareBTNEventParams::RedirectClickShareBTNEventParams(const RedirectClickShareBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
}

inline void RedirectClickShareBTNEventParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectClickShareBTNEventParams::~RedirectClickShareBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectClickShareBTNEventParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectClickShareBTNEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectClickShareBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickShareBTNEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectClickShareBTNEventParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  return target;
}

::size_t RedirectClickShareBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickShareBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectClickShareBTNEventParams*>(
      &from));
}

void RedirectClickShareBTNEventParams::MergeFrom(const RedirectClickShareBTNEventParams& from) {
  RedirectClickShareBTNEventParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectClickShareBTNEventParams::CopyFrom(const RedirectClickShareBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickShareBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickShareBTNEventParams::InternalSwap(RedirectClickShareBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectClickShareBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickShareBTNEventParams";
}

// ===================================================================

class RedirectClickEndMeetingBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickEndMeetingBTNEventParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectClickEndMeetingBTNEventParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickEndMeetingBTNEventParams::RedirectClickEndMeetingBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
}
RedirectClickEndMeetingBTNEventParams::RedirectClickEndMeetingBTNEventParams(const RedirectClickEndMeetingBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
}

inline void RedirectClickEndMeetingBTNEventParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectClickEndMeetingBTNEventParams::~RedirectClickEndMeetingBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectClickEndMeetingBTNEventParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectClickEndMeetingBTNEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectClickEndMeetingBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickEndMeetingBTNEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectClickEndMeetingBTNEventParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  return target;
}

::size_t RedirectClickEndMeetingBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickEndMeetingBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectClickEndMeetingBTNEventParams*>(
      &from));
}

void RedirectClickEndMeetingBTNEventParams::MergeFrom(const RedirectClickEndMeetingBTNEventParams& from) {
  RedirectClickEndMeetingBTNEventParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectClickEndMeetingBTNEventParams::CopyFrom(const RedirectClickEndMeetingBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickEndMeetingBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickEndMeetingBTNEventParams::InternalSwap(RedirectClickEndMeetingBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectClickEndMeetingBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams";
}

// ===================================================================

class RedirectFreeMeetingEndingReminderDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectFreeMeetingEndingReminderDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectFreeMeetingEndingReminderDlgParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectFreeMeetingEndingReminderDlgParams::RedirectFreeMeetingEndingReminderDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
}
RedirectFreeMeetingEndingReminderDlgParams::RedirectFreeMeetingEndingReminderDlgParams(const RedirectFreeMeetingEndingReminderDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
}

inline void RedirectFreeMeetingEndingReminderDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectFreeMeetingEndingReminderDlgParams::~RedirectFreeMeetingEndingReminderDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectFreeMeetingEndingReminderDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectFreeMeetingEndingReminderDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectFreeMeetingEndingReminderDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectFreeMeetingEndingReminderDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectFreeMeetingEndingReminderDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  return target;
}

::size_t RedirectFreeMeetingEndingReminderDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectFreeMeetingEndingReminderDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectFreeMeetingEndingReminderDlgParams*>(
      &from));
}

void RedirectFreeMeetingEndingReminderDlgParams::MergeFrom(const RedirectFreeMeetingEndingReminderDlgParams& from) {
  RedirectFreeMeetingEndingReminderDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectFreeMeetingEndingReminderDlgParams::CopyFrom(const RedirectFreeMeetingEndingReminderDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectFreeMeetingEndingReminderDlgParams::IsInitialized() const {
  return true;
}

void RedirectFreeMeetingEndingReminderDlgParams::InternalSwap(RedirectFreeMeetingEndingReminderDlgParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectFreeMeetingEndingReminderDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams";
}

// ===================================================================

class RedirectClickCustomLiveStreamMenuEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickCustomLiveStreamMenuEventParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectClickCustomLiveStreamMenuEventParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickCustomLiveStreamMenuEventParams::RedirectClickCustomLiveStreamMenuEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
}
RedirectClickCustomLiveStreamMenuEventParams::RedirectClickCustomLiveStreamMenuEventParams(const RedirectClickCustomLiveStreamMenuEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
}

inline void RedirectClickCustomLiveStreamMenuEventParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectClickCustomLiveStreamMenuEventParams::~RedirectClickCustomLiveStreamMenuEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectClickCustomLiveStreamMenuEventParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectClickCustomLiveStreamMenuEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectClickCustomLiveStreamMenuEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickCustomLiveStreamMenuEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectClickCustomLiveStreamMenuEventParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  return target;
}

::size_t RedirectClickCustomLiveStreamMenuEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickCustomLiveStreamMenuEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectClickCustomLiveStreamMenuEventParams*>(
      &from));
}

void RedirectClickCustomLiveStreamMenuEventParams::MergeFrom(const RedirectClickCustomLiveStreamMenuEventParams& from) {
  RedirectClickCustomLiveStreamMenuEventParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectClickCustomLiveStreamMenuEventParams::CopyFrom(const RedirectClickCustomLiveStreamMenuEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickCustomLiveStreamMenuEventParams::IsInitialized() const {
  return true;
}

void RedirectClickCustomLiveStreamMenuEventParams::InternalSwap(RedirectClickCustomLiveStreamMenuEventParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectClickCustomLiveStreamMenuEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams";
}

// ===================================================================

class RedirectClickParticipantListBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickParticipantListBTNEventParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectClickParticipantListBTNEventParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickParticipantListBTNEventParams::RedirectClickParticipantListBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
}
RedirectClickParticipantListBTNEventParams::RedirectClickParticipantListBTNEventParams(const RedirectClickParticipantListBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
}

inline void RedirectClickParticipantListBTNEventParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectClickParticipantListBTNEventParams::~RedirectClickParticipantListBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectClickParticipantListBTNEventParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectClickParticipantListBTNEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectClickParticipantListBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickParticipantListBTNEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectClickParticipantListBTNEventParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  return target;
}

::size_t RedirectClickParticipantListBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickParticipantListBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectClickParticipantListBTNEventParams*>(
      &from));
}

void RedirectClickParticipantListBTNEventParams::MergeFrom(const RedirectClickParticipantListBTNEventParams& from) {
  RedirectClickParticipantListBTNEventParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectClickParticipantListBTNEventParams::CopyFrom(const RedirectClickParticipantListBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickParticipantListBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickParticipantListBTNEventParams::InternalSwap(RedirectClickParticipantListBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectClickParticipantListBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams";
}

// ===================================================================

class RedirectClickCCBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickCCBTNEventParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectClickCCBTNEventParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickCCBTNEventParams::RedirectClickCCBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
}
RedirectClickCCBTNEventParams::RedirectClickCCBTNEventParams(const RedirectClickCCBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
}

inline void RedirectClickCCBTNEventParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectClickCCBTNEventParams::~RedirectClickCCBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectClickCCBTNEventParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectClickCCBTNEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectClickCCBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickCCBTNEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectClickCCBTNEventParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  return target;
}

::size_t RedirectClickCCBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickCCBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectClickCCBTNEventParams*>(
      &from));
}

void RedirectClickCCBTNEventParams::MergeFrom(const RedirectClickCCBTNEventParams& from) {
  RedirectClickCCBTNEventParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectClickCCBTNEventParams::CopyFrom(const RedirectClickCCBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickCCBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickCCBTNEventParams::InternalSwap(RedirectClickCCBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectClickCCBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickCCBTNEventParams";
}

// ===================================================================

class RedirectClickAudioBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickAudioBTNEventParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectClickAudioBTNEventParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickAudioBTNEventParams::RedirectClickAudioBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
}
RedirectClickAudioBTNEventParams::RedirectClickAudioBTNEventParams(const RedirectClickAudioBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
}

inline void RedirectClickAudioBTNEventParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectClickAudioBTNEventParams::~RedirectClickAudioBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectClickAudioBTNEventParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectClickAudioBTNEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectClickAudioBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickAudioBTNEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectClickAudioBTNEventParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  return target;
}

::size_t RedirectClickAudioBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickAudioBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectClickAudioBTNEventParams*>(
      &from));
}

void RedirectClickAudioBTNEventParams::MergeFrom(const RedirectClickAudioBTNEventParams& from) {
  RedirectClickAudioBTNEventParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectClickAudioBTNEventParams::CopyFrom(const RedirectClickAudioBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickAudioBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickAudioBTNEventParams::InternalSwap(RedirectClickAudioBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectClickAudioBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickAudioBTNEventParams";
}

// ===================================================================

class RedirectClickAudioMenuBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickAudioMenuBTNEventParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectClickAudioMenuBTNEventParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickAudioMenuBTNEventParams::RedirectClickAudioMenuBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
}
RedirectClickAudioMenuBTNEventParams::RedirectClickAudioMenuBTNEventParams(const RedirectClickAudioMenuBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
}

inline void RedirectClickAudioMenuBTNEventParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectClickAudioMenuBTNEventParams::~RedirectClickAudioMenuBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectClickAudioMenuBTNEventParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectClickAudioMenuBTNEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectClickAudioMenuBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickAudioMenuBTNEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectClickAudioMenuBTNEventParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  return target;
}

::size_t RedirectClickAudioMenuBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickAudioMenuBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectClickAudioMenuBTNEventParams*>(
      &from));
}

void RedirectClickAudioMenuBTNEventParams::MergeFrom(const RedirectClickAudioMenuBTNEventParams& from) {
  RedirectClickAudioMenuBTNEventParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectClickAudioMenuBTNEventParams::CopyFrom(const RedirectClickAudioMenuBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickAudioMenuBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickAudioMenuBTNEventParams::InternalSwap(RedirectClickAudioMenuBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectClickAudioMenuBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams";
}

// ===================================================================

class RedirectMeetingWarningMsgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectMeetingWarningMsgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectMeetingWarningMsgParams, _impl_._has_bits_);
  static void set_has_bredirectbadnetwork(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bredirectwarnhighcpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RedirectMeetingWarningMsgParams::RedirectMeetingWarningMsgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
}
RedirectMeetingWarningMsgParams::RedirectMeetingWarningMsgParams(const RedirectMeetingWarningMsgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
}

inline void RedirectMeetingWarningMsgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirectbadnetwork_) { false }

    , decltype(_impl_.bredirectwarnhighcpu_) { false }

  };
}

RedirectMeetingWarningMsgParams::~RedirectMeetingWarningMsgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectMeetingWarningMsgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectMeetingWarningMsgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectMeetingWarningMsgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bredirectbadnetwork_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bredirectwarnhighcpu_) -
      reinterpret_cast<char*>(&_impl_.bredirectbadnetwork_)) + sizeof(_impl_.bredirectwarnhighcpu_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectMeetingWarningMsgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirectBadNetwork = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirectbadnetwork(&has_bits);
          _impl_.bredirectbadnetwork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bRedirectWarnHighCPU = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bredirectwarnhighcpu(&has_bits);
          _impl_.bredirectwarnhighcpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectMeetingWarningMsgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirectBadNetwork = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirectbadnetwork(), target);
  }

  // optional bool bRedirectWarnHighCPU = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_bredirectwarnhighcpu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  return target;
}

::size_t RedirectMeetingWarningMsgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bRedirectBadNetwork = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool bRedirectWarnHighCPU = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectMeetingWarningMsgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectMeetingWarningMsgParams*>(
      &from));
}

void RedirectMeetingWarningMsgParams::MergeFrom(const RedirectMeetingWarningMsgParams& from) {
  RedirectMeetingWarningMsgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bredirectbadnetwork_ = from._impl_.bredirectbadnetwork_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bredirectwarnhighcpu_ = from._impl_.bredirectwarnhighcpu_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectMeetingWarningMsgParams::CopyFrom(const RedirectMeetingWarningMsgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectMeetingWarningMsgParams::IsInitialized() const {
  return true;
}

void RedirectMeetingWarningMsgParams::InternalSwap(RedirectMeetingWarningMsgParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedirectMeetingWarningMsgParams, _impl_.bredirectwarnhighcpu_)
      + sizeof(RedirectMeetingWarningMsgParams::_impl_.bredirectwarnhighcpu_)
      - PROTOBUF_FIELD_OFFSET(RedirectMeetingWarningMsgParams, _impl_.bredirectbadnetwork_)>(
          reinterpret_cast<char*>(&_impl_.bredirectbadnetwork_),
          reinterpret_cast<char*>(&other->_impl_.bredirectbadnetwork_));
}

std::string RedirectMeetingWarningMsgParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectMeetingWarningMsgParams";
}

// ===================================================================

class EnableToolTipsShowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableToolTipsShowParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableToolTipsShowParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableToolTipsShowParams::EnableToolTipsShowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableToolTipsShowParams)
}
EnableToolTipsShowParams::EnableToolTipsShowParams(const EnableToolTipsShowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableToolTipsShowParams)
}

inline void EnableToolTipsShowParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableToolTipsShowParams::~EnableToolTipsShowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableToolTipsShowParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableToolTipsShowParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableToolTipsShowParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableToolTipsShowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableToolTipsShowParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableToolTipsShowParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableToolTipsShowParams)
  return target;
}

::size_t EnableToolTipsShowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableToolTipsShowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableToolTipsShowParams*>(
      &from));
}

void EnableToolTipsShowParams::MergeFrom(const EnableToolTipsShowParams& from) {
  EnableToolTipsShowParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableToolTipsShowParams::CopyFrom(const EnableToolTipsShowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableToolTipsShowParams::IsInitialized() const {
  return true;
}

void EnableToolTipsShowParams::InternalSwap(EnableToolTipsShowParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableToolTipsShowParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableToolTipsShowParams";
}

// ===================================================================

class EnableAirplayInstructionWindowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAirplayInstructionWindowParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAirplayInstructionWindowParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAirplayInstructionWindowParams::EnableAirplayInstructionWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
}
EnableAirplayInstructionWindowParams::EnableAirplayInstructionWindowParams(const EnableAirplayInstructionWindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
}

inline void EnableAirplayInstructionWindowParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAirplayInstructionWindowParams::~EnableAirplayInstructionWindowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAirplayInstructionWindowParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAirplayInstructionWindowParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAirplayInstructionWindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAirplayInstructionWindowParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAirplayInstructionWindowParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  return target;
}

::size_t EnableAirplayInstructionWindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAirplayInstructionWindowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAirplayInstructionWindowParams*>(
      &from));
}

void EnableAirplayInstructionWindowParams::MergeFrom(const EnableAirplayInstructionWindowParams& from) {
  EnableAirplayInstructionWindowParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAirplayInstructionWindowParams::CopyFrom(const EnableAirplayInstructionWindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAirplayInstructionWindowParams::IsInitialized() const {
  return true;
}

void EnableAirplayInstructionWindowParams::InternalSwap(EnableAirplayInstructionWindowParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAirplayInstructionWindowParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAirplayInstructionWindowParams";
}

// ===================================================================

class EnableClaimHostFeatureParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableClaimHostFeatureParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableClaimHostFeatureParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableClaimHostFeatureParams::EnableClaimHostFeatureParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableClaimHostFeatureParams)
}
EnableClaimHostFeatureParams::EnableClaimHostFeatureParams(const EnableClaimHostFeatureParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableClaimHostFeatureParams)
}

inline void EnableClaimHostFeatureParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableClaimHostFeatureParams::~EnableClaimHostFeatureParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableClaimHostFeatureParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableClaimHostFeatureParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableClaimHostFeatureParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableClaimHostFeatureParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableClaimHostFeatureParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  return target;
}

::size_t EnableClaimHostFeatureParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableClaimHostFeatureParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableClaimHostFeatureParams*>(
      &from));
}

void EnableClaimHostFeatureParams::MergeFrom(const EnableClaimHostFeatureParams& from) {
  EnableClaimHostFeatureParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableClaimHostFeatureParams::CopyFrom(const EnableClaimHostFeatureParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableClaimHostFeatureParams::IsInitialized() const {
  return true;
}

void EnableClaimHostFeatureParams::InternalSwap(EnableClaimHostFeatureParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableClaimHostFeatureParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableClaimHostFeatureParams";
}

// ===================================================================

class EnableAutoHideJoinAudioDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoHideJoinAudioDialogParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoHideJoinAudioDialogParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoHideJoinAudioDialogParams::EnableAutoHideJoinAudioDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
}
EnableAutoHideJoinAudioDialogParams::EnableAutoHideJoinAudioDialogParams(const EnableAutoHideJoinAudioDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
}

inline void EnableAutoHideJoinAudioDialogParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoHideJoinAudioDialogParams::~EnableAutoHideJoinAudioDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoHideJoinAudioDialogParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoHideJoinAudioDialogParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoHideJoinAudioDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoHideJoinAudioDialogParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoHideJoinAudioDialogParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  return target;
}

::size_t EnableAutoHideJoinAudioDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoHideJoinAudioDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoHideJoinAudioDialogParams*>(
      &from));
}

void EnableAutoHideJoinAudioDialogParams::MergeFrom(const EnableAutoHideJoinAudioDialogParams& from) {
  EnableAutoHideJoinAudioDialogParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoHideJoinAudioDialogParams::CopyFrom(const EnableAutoHideJoinAudioDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoHideJoinAudioDialogParams::IsInitialized() const {
  return true;
}

void EnableAutoHideJoinAudioDialogParams::InternalSwap(EnableAutoHideJoinAudioDialogParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoHideJoinAudioDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams";
}

// ===================================================================

class AlwaysShowIconOnTaskBarParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AlwaysShowIconOnTaskBarParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AlwaysShowIconOnTaskBarParams, _impl_._has_bits_);
  static void set_has_balwaysshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AlwaysShowIconOnTaskBarParams::AlwaysShowIconOnTaskBarParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
}
AlwaysShowIconOnTaskBarParams::AlwaysShowIconOnTaskBarParams(const AlwaysShowIconOnTaskBarParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
}

inline void AlwaysShowIconOnTaskBarParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balwaysshow_) { false }

  };
}

AlwaysShowIconOnTaskBarParams::~AlwaysShowIconOnTaskBarParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlwaysShowIconOnTaskBarParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlwaysShowIconOnTaskBarParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlwaysShowIconOnTaskBarParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.balwaysshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AlwaysShowIconOnTaskBarParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bAlwaysShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_balwaysshow(&has_bits);
          _impl_.balwaysshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AlwaysShowIconOnTaskBarParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bAlwaysShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_balwaysshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  return target;
}

::size_t AlwaysShowIconOnTaskBarParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bAlwaysShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlwaysShowIconOnTaskBarParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AlwaysShowIconOnTaskBarParams*>(
      &from));
}

void AlwaysShowIconOnTaskBarParams::MergeFrom(const AlwaysShowIconOnTaskBarParams& from) {
  AlwaysShowIconOnTaskBarParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_balwaysshow(from._internal_balwaysshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AlwaysShowIconOnTaskBarParams::CopyFrom(const AlwaysShowIconOnTaskBarParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlwaysShowIconOnTaskBarParams::IsInitialized() const {
  return true;
}

void AlwaysShowIconOnTaskBarParams::InternalSwap(AlwaysShowIconOnTaskBarParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.balwaysshow_, other->_impl_.balwaysshow_);
}

std::string AlwaysShowIconOnTaskBarParams::GetTypeName() const {
  return "com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams";
}

// ===================================================================

class DisableSplitScreenModeUIElementsParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableSplitScreenModeUIElementsParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableSplitScreenModeUIElementsParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableSplitScreenModeUIElementsParams::DisableSplitScreenModeUIElementsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
}
DisableSplitScreenModeUIElementsParams::DisableSplitScreenModeUIElementsParams(const DisableSplitScreenModeUIElementsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
}

inline void DisableSplitScreenModeUIElementsParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableSplitScreenModeUIElementsParams::~DisableSplitScreenModeUIElementsParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableSplitScreenModeUIElementsParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableSplitScreenModeUIElementsParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableSplitScreenModeUIElementsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableSplitScreenModeUIElementsParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableSplitScreenModeUIElementsParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  return target;
}

::size_t DisableSplitScreenModeUIElementsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableSplitScreenModeUIElementsParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableSplitScreenModeUIElementsParams*>(
      &from));
}

void DisableSplitScreenModeUIElementsParams::MergeFrom(const DisableSplitScreenModeUIElementsParams& from) {
  DisableSplitScreenModeUIElementsParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableSplitScreenModeUIElementsParams::CopyFrom(const DisableSplitScreenModeUIElementsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableSplitScreenModeUIElementsParams::IsInitialized() const {
  return true;
}

void DisableSplitScreenModeUIElementsParams::InternalSwap(DisableSplitScreenModeUIElementsParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableSplitScreenModeUIElementsParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams";
}

// ===================================================================

class SetShowAudioUseComputerSoundChkboxParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowAudioUseComputerSoundChkboxParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetShowAudioUseComputerSoundChkboxParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetShowAudioUseComputerSoundChkboxParams::SetShowAudioUseComputerSoundChkboxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
}
SetShowAudioUseComputerSoundChkboxParams::SetShowAudioUseComputerSoundChkboxParams(const SetShowAudioUseComputerSoundChkboxParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
}

inline void SetShowAudioUseComputerSoundChkboxParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

SetShowAudioUseComputerSoundChkboxParams::~SetShowAudioUseComputerSoundChkboxParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetShowAudioUseComputerSoundChkboxParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetShowAudioUseComputerSoundChkboxParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetShowAudioUseComputerSoundChkboxParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowAudioUseComputerSoundChkboxParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetShowAudioUseComputerSoundChkboxParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  return target;
}

::size_t SetShowAudioUseComputerSoundChkboxParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowAudioUseComputerSoundChkboxParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetShowAudioUseComputerSoundChkboxParams*>(
      &from));
}

void SetShowAudioUseComputerSoundChkboxParams::MergeFrom(const SetShowAudioUseComputerSoundChkboxParams& from) {
  SetShowAudioUseComputerSoundChkboxParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetShowAudioUseComputerSoundChkboxParams::CopyFrom(const SetShowAudioUseComputerSoundChkboxParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowAudioUseComputerSoundChkboxParams::IsInitialized() const {
  return true;
}

void SetShowAudioUseComputerSoundChkboxParams::InternalSwap(SetShowAudioUseComputerSoundChkboxParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string SetShowAudioUseComputerSoundChkboxParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams";
}

// ===================================================================

class SetShowCallInTabParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowCallInTabParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetShowCallInTabParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetShowCallInTabParams::SetShowCallInTabParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowCallInTabParams)
}
SetShowCallInTabParams::SetShowCallInTabParams(const SetShowCallInTabParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowCallInTabParams)
}

inline void SetShowCallInTabParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

SetShowCallInTabParams::~SetShowCallInTabParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowCallInTabParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetShowCallInTabParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetShowCallInTabParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetShowCallInTabParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowCallInTabParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowCallInTabParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetShowCallInTabParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowCallInTabParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowCallInTabParams)
  return target;
}

::size_t SetShowCallInTabParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowCallInTabParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowCallInTabParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetShowCallInTabParams*>(
      &from));
}

void SetShowCallInTabParams::MergeFrom(const SetShowCallInTabParams& from) {
  SetShowCallInTabParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowCallInTabParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetShowCallInTabParams::CopyFrom(const SetShowCallInTabParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowCallInTabParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowCallInTabParams::IsInitialized() const {
  return true;
}

void SetShowCallInTabParams::InternalSwap(SetShowCallInTabParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string SetShowCallInTabParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowCallInTabParams";
}

// ===================================================================

class SetShowCallMeTabParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowCallMeTabParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetShowCallMeTabParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetShowCallMeTabParams::SetShowCallMeTabParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowCallMeTabParams)
}
SetShowCallMeTabParams::SetShowCallMeTabParams(const SetShowCallMeTabParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowCallMeTabParams)
}

inline void SetShowCallMeTabParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

SetShowCallMeTabParams::~SetShowCallMeTabParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowCallMeTabParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetShowCallMeTabParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetShowCallMeTabParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetShowCallMeTabParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowCallMeTabParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetShowCallMeTabParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowCallMeTabParams)
  return target;
}

::size_t SetShowCallMeTabParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowCallMeTabParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetShowCallMeTabParams*>(
      &from));
}

void SetShowCallMeTabParams::MergeFrom(const SetShowCallMeTabParams& from) {
  SetShowCallMeTabParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetShowCallMeTabParams::CopyFrom(const SetShowCallMeTabParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowCallMeTabParams::IsInitialized() const {
  return true;
}

void SetShowCallMeTabParams::InternalSwap(SetShowCallMeTabParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string SetShowCallMeTabParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowCallMeTabParams";
}

// ===================================================================

class DisableTopMostAttr4SettingDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableTopMostAttr4SettingDialogParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableTopMostAttr4SettingDialogParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableTopMostAttr4SettingDialogParams::DisableTopMostAttr4SettingDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
}
DisableTopMostAttr4SettingDialogParams::DisableTopMostAttr4SettingDialogParams(const DisableTopMostAttr4SettingDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
}

inline void DisableTopMostAttr4SettingDialogParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableTopMostAttr4SettingDialogParams::~DisableTopMostAttr4SettingDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableTopMostAttr4SettingDialogParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableTopMostAttr4SettingDialogParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableTopMostAttr4SettingDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableTopMostAttr4SettingDialogParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableTopMostAttr4SettingDialogParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  return target;
}

::size_t DisableTopMostAttr4SettingDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableTopMostAttr4SettingDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableTopMostAttr4SettingDialogParams*>(
      &from));
}

void DisableTopMostAttr4SettingDialogParams::MergeFrom(const DisableTopMostAttr4SettingDialogParams& from) {
  DisableTopMostAttr4SettingDialogParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableTopMostAttr4SettingDialogParams::CopyFrom(const DisableTopMostAttr4SettingDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableTopMostAttr4SettingDialogParams::IsInitialized() const {
  return true;
}

void DisableTopMostAttr4SettingDialogParams::InternalSwap(DisableTopMostAttr4SettingDialogParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableTopMostAttr4SettingDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams";
}

// ===================================================================

class EnableGrabShareWithoutReminderParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableGrabShareWithoutReminderParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableGrabShareWithoutReminderParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableGrabShareWithoutReminderParams::EnableGrabShareWithoutReminderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
}
EnableGrabShareWithoutReminderParams::EnableGrabShareWithoutReminderParams(const EnableGrabShareWithoutReminderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
}

inline void EnableGrabShareWithoutReminderParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableGrabShareWithoutReminderParams::~EnableGrabShareWithoutReminderParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableGrabShareWithoutReminderParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableGrabShareWithoutReminderParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableGrabShareWithoutReminderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableGrabShareWithoutReminderParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableGrabShareWithoutReminderParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  return target;
}

::size_t EnableGrabShareWithoutReminderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableGrabShareWithoutReminderParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableGrabShareWithoutReminderParams*>(
      &from));
}

void EnableGrabShareWithoutReminderParams::MergeFrom(const EnableGrabShareWithoutReminderParams& from) {
  EnableGrabShareWithoutReminderParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableGrabShareWithoutReminderParams::CopyFrom(const EnableGrabShareWithoutReminderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableGrabShareWithoutReminderParams::IsInitialized() const {
  return true;
}

void EnableGrabShareWithoutReminderParams::InternalSwap(EnableGrabShareWithoutReminderParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableGrabShareWithoutReminderParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableGrabShareWithoutReminderParams";
}

// ===================================================================

class EnableShowShareSwitchMultiToSingleConfirmDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShowShareSwitchMultiToSingleConfirmDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableShowShareSwitchMultiToSingleConfirmDlgParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShowShareSwitchMultiToSingleConfirmDlgParams::EnableShowShareSwitchMultiToSingleConfirmDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
}
EnableShowShareSwitchMultiToSingleConfirmDlgParams::EnableShowShareSwitchMultiToSingleConfirmDlgParams(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
}

inline void EnableShowShareSwitchMultiToSingleConfirmDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableShowShareSwitchMultiToSingleConfirmDlgParams::~EnableShowShareSwitchMultiToSingleConfirmDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableShowShareSwitchMultiToSingleConfirmDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShowShareSwitchMultiToSingleConfirmDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableShowShareSwitchMultiToSingleConfirmDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  return target;
}

::size_t EnableShowShareSwitchMultiToSingleConfirmDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableShowShareSwitchMultiToSingleConfirmDlgParams*>(
      &from));
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::MergeFrom(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from) {
  EnableShowShareSwitchMultiToSingleConfirmDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::CopyFrom(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShowShareSwitchMultiToSingleConfirmDlgParams::IsInitialized() const {
  return true;
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::InternalSwap(EnableShowShareSwitchMultiToSingleConfirmDlgParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableShowShareSwitchMultiToSingleConfirmDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams";
}

// ===================================================================

class DisableFreeMeetingRemainTimeNotifyParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableFreeMeetingRemainTimeNotifyParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableFreeMeetingRemainTimeNotifyParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableFreeMeetingRemainTimeNotifyParams::DisableFreeMeetingRemainTimeNotifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
}
DisableFreeMeetingRemainTimeNotifyParams::DisableFreeMeetingRemainTimeNotifyParams(const DisableFreeMeetingRemainTimeNotifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
}

inline void DisableFreeMeetingRemainTimeNotifyParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableFreeMeetingRemainTimeNotifyParams::~DisableFreeMeetingRemainTimeNotifyParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableFreeMeetingRemainTimeNotifyParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableFreeMeetingRemainTimeNotifyParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableFreeMeetingRemainTimeNotifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableFreeMeetingRemainTimeNotifyParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableFreeMeetingRemainTimeNotifyParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  return target;
}

::size_t DisableFreeMeetingRemainTimeNotifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableFreeMeetingRemainTimeNotifyParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableFreeMeetingRemainTimeNotifyParams*>(
      &from));
}

void DisableFreeMeetingRemainTimeNotifyParams::MergeFrom(const DisableFreeMeetingRemainTimeNotifyParams& from) {
  DisableFreeMeetingRemainTimeNotifyParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableFreeMeetingRemainTimeNotifyParams::CopyFrom(const DisableFreeMeetingRemainTimeNotifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableFreeMeetingRemainTimeNotifyParams::IsInitialized() const {
  return true;
}

void DisableFreeMeetingRemainTimeNotifyParams::InternalSwap(DisableFreeMeetingRemainTimeNotifyParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableFreeMeetingRemainTimeNotifyParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams";
}

// ===================================================================

class HideChatItemOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideChatItemOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideChatItemOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideChatItemOnMeetingUIParams::HideChatItemOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
}
HideChatItemOnMeetingUIParams::HideChatItemOnMeetingUIParams(const HideChatItemOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
}

inline void HideChatItemOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideChatItemOnMeetingUIParams::~HideChatItemOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideChatItemOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideChatItemOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideChatItemOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideChatItemOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideChatItemOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  return target;
}

::size_t HideChatItemOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideChatItemOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideChatItemOnMeetingUIParams*>(
      &from));
}

void HideChatItemOnMeetingUIParams::MergeFrom(const HideChatItemOnMeetingUIParams& from) {
  HideChatItemOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideChatItemOnMeetingUIParams::CopyFrom(const HideChatItemOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideChatItemOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HideChatItemOnMeetingUIParams::InternalSwap(HideChatItemOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideChatItemOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideChatItemOnMeetingUIParams";
}

// ===================================================================

class HideRecordItemOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideRecordItemOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideRecordItemOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideRecordItemOnMeetingUIParams::HideRecordItemOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
}
HideRecordItemOnMeetingUIParams::HideRecordItemOnMeetingUIParams(const HideRecordItemOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
}

inline void HideRecordItemOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideRecordItemOnMeetingUIParams::~HideRecordItemOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideRecordItemOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideRecordItemOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideRecordItemOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideRecordItemOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideRecordItemOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  return target;
}

::size_t HideRecordItemOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideRecordItemOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideRecordItemOnMeetingUIParams*>(
      &from));
}

void HideRecordItemOnMeetingUIParams::MergeFrom(const HideRecordItemOnMeetingUIParams& from) {
  HideRecordItemOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideRecordItemOnMeetingUIParams::CopyFrom(const HideRecordItemOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideRecordItemOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HideRecordItemOnMeetingUIParams::InternalSwap(HideRecordItemOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideRecordItemOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideRecordItemOnMeetingUIParams";
}

// ===================================================================

class HideUpgradeFreeMeetingButtonParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideUpgradeFreeMeetingButtonParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideUpgradeFreeMeetingButtonParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideUpgradeFreeMeetingButtonParams::HideUpgradeFreeMeetingButtonParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
}
HideUpgradeFreeMeetingButtonParams::HideUpgradeFreeMeetingButtonParams(const HideUpgradeFreeMeetingButtonParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
}

inline void HideUpgradeFreeMeetingButtonParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideUpgradeFreeMeetingButtonParams::~HideUpgradeFreeMeetingButtonParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideUpgradeFreeMeetingButtonParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideUpgradeFreeMeetingButtonParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideUpgradeFreeMeetingButtonParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideUpgradeFreeMeetingButtonParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideUpgradeFreeMeetingButtonParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  return target;
}

::size_t HideUpgradeFreeMeetingButtonParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideUpgradeFreeMeetingButtonParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideUpgradeFreeMeetingButtonParams*>(
      &from));
}

void HideUpgradeFreeMeetingButtonParams::MergeFrom(const HideUpgradeFreeMeetingButtonParams& from) {
  HideUpgradeFreeMeetingButtonParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideUpgradeFreeMeetingButtonParams::CopyFrom(const HideUpgradeFreeMeetingButtonParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideUpgradeFreeMeetingButtonParams::IsInitialized() const {
  return true;
}

void HideUpgradeFreeMeetingButtonParams::InternalSwap(HideUpgradeFreeMeetingButtonParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideUpgradeFreeMeetingButtonParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams";
}

// ===================================================================

class SetShowInviteDlgTabPageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowInviteDlgTabPageParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetShowInviteDlgTabPageParams, _impl_._has_bits_);
  static void set_has_tabpage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetShowInviteDlgTabPageParams::SetShowInviteDlgTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
}
SetShowInviteDlgTabPageParams::SetShowInviteDlgTabPageParams(const SetShowInviteDlgTabPageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
}

inline void SetShowInviteDlgTabPageParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tabpage_) { 0 }

    , decltype(_impl_.bshow_) { false }

  };
}

SetShowInviteDlgTabPageParams::~SetShowInviteDlgTabPageParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetShowInviteDlgTabPageParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetShowInviteDlgTabPageParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetShowInviteDlgTabPageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.tabpage_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bshow_) -
        reinterpret_cast<char*>(&_impl_.tabpage_)) + sizeof(_impl_.bshow_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowInviteDlgTabPageParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tabPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_tabpage(&has_bits);
          _impl_.tabpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bShow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetShowInviteDlgTabPageParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tabPage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_tabpage(), target);
  }

  // optional bool bShow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  return target;
}

::size_t SetShowInviteDlgTabPageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tabPage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_tabpage());
    }

    // optional bool bShow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowInviteDlgTabPageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetShowInviteDlgTabPageParams*>(
      &from));
}

void SetShowInviteDlgTabPageParams::MergeFrom(const SetShowInviteDlgTabPageParams& from) {
  SetShowInviteDlgTabPageParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tabpage_ = from._impl_.tabpage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bshow_ = from._impl_.bshow_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetShowInviteDlgTabPageParams::CopyFrom(const SetShowInviteDlgTabPageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowInviteDlgTabPageParams::IsInitialized() const {
  return true;
}

void SetShowInviteDlgTabPageParams::InternalSwap(SetShowInviteDlgTabPageParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetShowInviteDlgTabPageParams, _impl_.bshow_)
      + sizeof(SetShowInviteDlgTabPageParams::_impl_.bshow_)
      - PROTOBUF_FIELD_OFFSET(SetShowInviteDlgTabPageParams, _impl_.tabpage_)>(
          reinterpret_cast<char*>(&_impl_.tabpage_),
          reinterpret_cast<char*>(&other->_impl_.tabpage_));
}

std::string SetShowInviteDlgTabPageParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowInviteDlgTabPageParams";
}

// ===================================================================

class SetShowH323SubTabPageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowH323SubTabPageParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetShowH323SubTabPageParams, _impl_._has_bits_);
  static void set_has_tabpage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetShowH323SubTabPageParams::SetShowH323SubTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowH323SubTabPageParams)
}
SetShowH323SubTabPageParams::SetShowH323SubTabPageParams(const SetShowH323SubTabPageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowH323SubTabPageParams)
}

inline void SetShowH323SubTabPageParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tabpage_) { 0 }

    , decltype(_impl_.bshow_) { false }

  };
}

SetShowH323SubTabPageParams::~SetShowH323SubTabPageParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetShowH323SubTabPageParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetShowH323SubTabPageParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetShowH323SubTabPageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.tabpage_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bshow_) -
        reinterpret_cast<char*>(&_impl_.tabpage_)) + sizeof(_impl_.bshow_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowH323SubTabPageParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tabPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_tabpage(&has_bits);
          _impl_.tabpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bShow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetShowH323SubTabPageParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tabPage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_tabpage(), target);
  }

  // optional bool bShow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  return target;
}

::size_t SetShowH323SubTabPageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tabPage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_tabpage());
    }

    // optional bool bShow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowH323SubTabPageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetShowH323SubTabPageParams*>(
      &from));
}

void SetShowH323SubTabPageParams::MergeFrom(const SetShowH323SubTabPageParams& from) {
  SetShowH323SubTabPageParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tabpage_ = from._impl_.tabpage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bshow_ = from._impl_.bshow_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetShowH323SubTabPageParams::CopyFrom(const SetShowH323SubTabPageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowH323SubTabPageParams::IsInitialized() const {
  return true;
}

void SetShowH323SubTabPageParams::InternalSwap(SetShowH323SubTabPageParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetShowH323SubTabPageParams, _impl_.bshow_)
      + sizeof(SetShowH323SubTabPageParams::_impl_.bshow_)
      - PROTOBUF_FIELD_OFFSET(SetShowH323SubTabPageParams, _impl_.tabpage_)>(
          reinterpret_cast<char*>(&_impl_.tabpage_),
          reinterpret_cast<char*>(&other->_impl_.tabpage_));
}

std::string SetShowH323SubTabPageParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowH323SubTabPageParams";
}

// ===================================================================

class HideSwitchCameraButtonParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideSwitchCameraButtonParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideSwitchCameraButtonParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideSwitchCameraButtonParams::HideSwitchCameraButtonParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideSwitchCameraButtonParams)
}
HideSwitchCameraButtonParams::HideSwitchCameraButtonParams(const HideSwitchCameraButtonParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideSwitchCameraButtonParams)
}

inline void HideSwitchCameraButtonParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideSwitchCameraButtonParams::~HideSwitchCameraButtonParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideSwitchCameraButtonParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideSwitchCameraButtonParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideSwitchCameraButtonParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideSwitchCameraButtonParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideSwitchCameraButtonParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  return target;
}

::size_t HideSwitchCameraButtonParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideSwitchCameraButtonParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideSwitchCameraButtonParams*>(
      &from));
}

void HideSwitchCameraButtonParams::MergeFrom(const HideSwitchCameraButtonParams& from) {
  HideSwitchCameraButtonParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideSwitchCameraButtonParams::CopyFrom(const HideSwitchCameraButtonParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideSwitchCameraButtonParams::IsInitialized() const {
  return true;
}

void HideSwitchCameraButtonParams::InternalSwap(HideSwitchCameraButtonParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideSwitchCameraButtonParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideSwitchCameraButtonParams";
}

// ===================================================================

class HideCopyUrlOnInviteWindowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideCopyUrlOnInviteWindowParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideCopyUrlOnInviteWindowParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideCopyUrlOnInviteWindowParams::HideCopyUrlOnInviteWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
}
HideCopyUrlOnInviteWindowParams::HideCopyUrlOnInviteWindowParams(const HideCopyUrlOnInviteWindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
}

inline void HideCopyUrlOnInviteWindowParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideCopyUrlOnInviteWindowParams::~HideCopyUrlOnInviteWindowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideCopyUrlOnInviteWindowParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideCopyUrlOnInviteWindowParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideCopyUrlOnInviteWindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideCopyUrlOnInviteWindowParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideCopyUrlOnInviteWindowParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  return target;
}

::size_t HideCopyUrlOnInviteWindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideCopyUrlOnInviteWindowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideCopyUrlOnInviteWindowParams*>(
      &from));
}

void HideCopyUrlOnInviteWindowParams::MergeFrom(const HideCopyUrlOnInviteWindowParams& from) {
  HideCopyUrlOnInviteWindowParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideCopyUrlOnInviteWindowParams::CopyFrom(const HideCopyUrlOnInviteWindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideCopyUrlOnInviteWindowParams::IsInitialized() const {
  return true;
}

void HideCopyUrlOnInviteWindowParams::InternalSwap(HideCopyUrlOnInviteWindowParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideCopyUrlOnInviteWindowParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams";
}

// ===================================================================

class HideCopyInvitationOnInviteWindowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideCopyInvitationOnInviteWindowParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideCopyInvitationOnInviteWindowParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideCopyInvitationOnInviteWindowParams::HideCopyInvitationOnInviteWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
}
HideCopyInvitationOnInviteWindowParams::HideCopyInvitationOnInviteWindowParams(const HideCopyInvitationOnInviteWindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
}

inline void HideCopyInvitationOnInviteWindowParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideCopyInvitationOnInviteWindowParams::~HideCopyInvitationOnInviteWindowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideCopyInvitationOnInviteWindowParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideCopyInvitationOnInviteWindowParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideCopyInvitationOnInviteWindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideCopyInvitationOnInviteWindowParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideCopyInvitationOnInviteWindowParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  return target;
}

::size_t HideCopyInvitationOnInviteWindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideCopyInvitationOnInviteWindowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideCopyInvitationOnInviteWindowParams*>(
      &from));
}

void HideCopyInvitationOnInviteWindowParams::MergeFrom(const HideCopyInvitationOnInviteWindowParams& from) {
  HideCopyInvitationOnInviteWindowParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideCopyInvitationOnInviteWindowParams::CopyFrom(const HideCopyInvitationOnInviteWindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideCopyInvitationOnInviteWindowParams::IsInitialized() const {
  return true;
}

void HideCopyInvitationOnInviteWindowParams::InternalSwap(HideCopyInvitationOnInviteWindowParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideCopyInvitationOnInviteWindowParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams";
}

// ===================================================================

class HideKeypadButtonOnMeetingWindowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideKeypadButtonOnMeetingWindowParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideKeypadButtonOnMeetingWindowParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideKeypadButtonOnMeetingWindowParams::HideKeypadButtonOnMeetingWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
}
HideKeypadButtonOnMeetingWindowParams::HideKeypadButtonOnMeetingWindowParams(const HideKeypadButtonOnMeetingWindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
}

inline void HideKeypadButtonOnMeetingWindowParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideKeypadButtonOnMeetingWindowParams::~HideKeypadButtonOnMeetingWindowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideKeypadButtonOnMeetingWindowParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideKeypadButtonOnMeetingWindowParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideKeypadButtonOnMeetingWindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideKeypadButtonOnMeetingWindowParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideKeypadButtonOnMeetingWindowParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  return target;
}

::size_t HideKeypadButtonOnMeetingWindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideKeypadButtonOnMeetingWindowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideKeypadButtonOnMeetingWindowParams*>(
      &from));
}

void HideKeypadButtonOnMeetingWindowParams::MergeFrom(const HideKeypadButtonOnMeetingWindowParams& from) {
  HideKeypadButtonOnMeetingWindowParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideKeypadButtonOnMeetingWindowParams::CopyFrom(const HideKeypadButtonOnMeetingWindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideKeypadButtonOnMeetingWindowParams::IsInitialized() const {
  return true;
}

void HideKeypadButtonOnMeetingWindowParams::InternalSwap(HideKeypadButtonOnMeetingWindowParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideKeypadButtonOnMeetingWindowParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams";
}

// ===================================================================

class HideRemoteControlOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideRemoteControlOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideRemoteControlOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideRemoteControlOnMeetingUIParams::HideRemoteControlOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
}
HideRemoteControlOnMeetingUIParams::HideRemoteControlOnMeetingUIParams(const HideRemoteControlOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
}

inline void HideRemoteControlOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideRemoteControlOnMeetingUIParams::~HideRemoteControlOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideRemoteControlOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideRemoteControlOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideRemoteControlOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideRemoteControlOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideRemoteControlOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  return target;
}

::size_t HideRemoteControlOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideRemoteControlOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideRemoteControlOnMeetingUIParams*>(
      &from));
}

void HideRemoteControlOnMeetingUIParams::MergeFrom(const HideRemoteControlOnMeetingUIParams& from) {
  HideRemoteControlOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideRemoteControlOnMeetingUIParams::CopyFrom(const HideRemoteControlOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideRemoteControlOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HideRemoteControlOnMeetingUIParams::InternalSwap(HideRemoteControlOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideRemoteControlOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams";
}

// ===================================================================

class HideQAOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideQAOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideQAOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideQAOnMeetingUIParams::HideQAOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideQAOnMeetingUIParams)
}
HideQAOnMeetingUIParams::HideQAOnMeetingUIParams(const HideQAOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideQAOnMeetingUIParams)
}

inline void HideQAOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideQAOnMeetingUIParams::~HideQAOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideQAOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideQAOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideQAOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideQAOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideQAOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  return target;
}

::size_t HideQAOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideQAOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideQAOnMeetingUIParams*>(
      &from));
}

void HideQAOnMeetingUIParams::MergeFrom(const HideQAOnMeetingUIParams& from) {
  HideQAOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideQAOnMeetingUIParams::CopyFrom(const HideQAOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideQAOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HideQAOnMeetingUIParams::InternalSwap(HideQAOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideQAOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideQAOnMeetingUIParams";
}

// ===================================================================

class HidePollOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HidePollOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HidePollOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HidePollOnMeetingUIParams::HidePollOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HidePollOnMeetingUIParams)
}
HidePollOnMeetingUIParams::HidePollOnMeetingUIParams(const HidePollOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HidePollOnMeetingUIParams)
}

inline void HidePollOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HidePollOnMeetingUIParams::~HidePollOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HidePollOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HidePollOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HidePollOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HidePollOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HidePollOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  return target;
}

::size_t HidePollOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HidePollOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HidePollOnMeetingUIParams*>(
      &from));
}

void HidePollOnMeetingUIParams::MergeFrom(const HidePollOnMeetingUIParams& from) {
  HidePollOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HidePollOnMeetingUIParams::CopyFrom(const HidePollOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HidePollOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HidePollOnMeetingUIParams::InternalSwap(HidePollOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HidePollOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HidePollOnMeetingUIParams";
}

// ===================================================================

class EnableInputMeetingPasswordDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableInputMeetingPasswordDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableInputMeetingPasswordDlgParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableInputMeetingPasswordDlgParams::EnableInputMeetingPasswordDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
}
EnableInputMeetingPasswordDlgParams::EnableInputMeetingPasswordDlgParams(const EnableInputMeetingPasswordDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
}

inline void EnableInputMeetingPasswordDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableInputMeetingPasswordDlgParams::~EnableInputMeetingPasswordDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableInputMeetingPasswordDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableInputMeetingPasswordDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableInputMeetingPasswordDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableInputMeetingPasswordDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableInputMeetingPasswordDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  return target;
}

::size_t EnableInputMeetingPasswordDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableInputMeetingPasswordDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableInputMeetingPasswordDlgParams*>(
      &from));
}

void EnableInputMeetingPasswordDlgParams::MergeFrom(const EnableInputMeetingPasswordDlgParams& from) {
  EnableInputMeetingPasswordDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableInputMeetingPasswordDlgParams::CopyFrom(const EnableInputMeetingPasswordDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableInputMeetingPasswordDlgParams::IsInitialized() const {
  return true;
}

void EnableInputMeetingPasswordDlgParams::InternalSwap(EnableInputMeetingPasswordDlgParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableInputMeetingPasswordDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams";
}

// ===================================================================

class EnableInputMeetingScreenNameDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableInputMeetingScreenNameDlgParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableInputMeetingScreenNameDlgParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableInputMeetingScreenNameDlgParams::EnableInputMeetingScreenNameDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
}
EnableInputMeetingScreenNameDlgParams::EnableInputMeetingScreenNameDlgParams(const EnableInputMeetingScreenNameDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
}

inline void EnableInputMeetingScreenNameDlgParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableInputMeetingScreenNameDlgParams::~EnableInputMeetingScreenNameDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableInputMeetingScreenNameDlgParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableInputMeetingScreenNameDlgParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableInputMeetingScreenNameDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableInputMeetingScreenNameDlgParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableInputMeetingScreenNameDlgParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  return target;
}

::size_t EnableInputMeetingScreenNameDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableInputMeetingScreenNameDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableInputMeetingScreenNameDlgParams*>(
      &from));
}

void EnableInputMeetingScreenNameDlgParams::MergeFrom(const EnableInputMeetingScreenNameDlgParams& from) {
  EnableInputMeetingScreenNameDlgParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableInputMeetingScreenNameDlgParams::CopyFrom(const EnableInputMeetingScreenNameDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableInputMeetingScreenNameDlgParams::IsInitialized() const {
  return true;
}

void EnableInputMeetingScreenNameDlgParams::InternalSwap(EnableInputMeetingScreenNameDlgParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableInputMeetingScreenNameDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams";
}

// ===================================================================

class RedirectWebinarNeedRegisterParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectWebinarNeedRegisterParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectWebinarNeedRegisterParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectWebinarNeedRegisterParams::RedirectWebinarNeedRegisterParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
}
RedirectWebinarNeedRegisterParams::RedirectWebinarNeedRegisterParams(const RedirectWebinarNeedRegisterParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
}

inline void RedirectWebinarNeedRegisterParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectWebinarNeedRegisterParams::~RedirectWebinarNeedRegisterParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectWebinarNeedRegisterParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectWebinarNeedRegisterParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectWebinarNeedRegisterParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectWebinarNeedRegisterParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectWebinarNeedRegisterParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  return target;
}

::size_t RedirectWebinarNeedRegisterParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectWebinarNeedRegisterParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectWebinarNeedRegisterParams*>(
      &from));
}

void RedirectWebinarNeedRegisterParams::MergeFrom(const RedirectWebinarNeedRegisterParams& from) {
  RedirectWebinarNeedRegisterParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectWebinarNeedRegisterParams::CopyFrom(const RedirectWebinarNeedRegisterParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectWebinarNeedRegisterParams::IsInitialized() const {
  return true;
}

void RedirectWebinarNeedRegisterParams::InternalSwap(RedirectWebinarNeedRegisterParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectWebinarNeedRegisterParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectWebinarNeedRegisterParams";
}

// ===================================================================

class RedirectEndOtherMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectEndOtherMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedirectEndOtherMeetingParams, _impl_._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectEndOtherMeetingParams::RedirectEndOtherMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
}
RedirectEndOtherMeetingParams::RedirectEndOtherMeetingParams(const RedirectEndOtherMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
}

inline void RedirectEndOtherMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bredirect_) { false }

  };
}

RedirectEndOtherMeetingParams::~RedirectEndOtherMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectEndOtherMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedirectEndOtherMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedirectEndOtherMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bredirect_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectEndOtherMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          _impl_.bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedirectEndOtherMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  return target;
}

::size_t RedirectEndOtherMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectEndOtherMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectEndOtherMeetingParams*>(
      &from));
}

void RedirectEndOtherMeetingParams::MergeFrom(const RedirectEndOtherMeetingParams& from) {
  RedirectEndOtherMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bredirect(from._internal_bredirect());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectEndOtherMeetingParams::CopyFrom(const RedirectEndOtherMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectEndOtherMeetingParams::IsInitialized() const {
  return true;
}

void RedirectEndOtherMeetingParams::InternalSwap(RedirectEndOtherMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bredirect_, other->_impl_.bredirect_);
}

std::string RedirectEndOtherMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectEndOtherMeetingParams";
}

// ===================================================================

class EnableForceAutoStartMyVideoWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableForceAutoStartMyVideoWhenJoinMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableForceAutoStartMyVideoWhenJoinMeetingParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableForceAutoStartMyVideoWhenJoinMeetingParams::EnableForceAutoStartMyVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
}
EnableForceAutoStartMyVideoWhenJoinMeetingParams::EnableForceAutoStartMyVideoWhenJoinMeetingParams(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
}

inline void EnableForceAutoStartMyVideoWhenJoinMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableForceAutoStartMyVideoWhenJoinMeetingParams::~EnableForceAutoStartMyVideoWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableForceAutoStartMyVideoWhenJoinMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableForceAutoStartMyVideoWhenJoinMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableForceAutoStartMyVideoWhenJoinMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  return target;
}

::size_t EnableForceAutoStartMyVideoWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableForceAutoStartMyVideoWhenJoinMeetingParams*>(
      &from));
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::MergeFrom(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from) {
  EnableForceAutoStartMyVideoWhenJoinMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::CopyFrom(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableForceAutoStartMyVideoWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::InternalSwap(EnableForceAutoStartMyVideoWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableForceAutoStartMyVideoWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams";
}

// ===================================================================

class EnableForceAutoStopMyVideoWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableForceAutoStopMyVideoWhenJoinMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableForceAutoStopMyVideoWhenJoinMeetingParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableForceAutoStopMyVideoWhenJoinMeetingParams::EnableForceAutoStopMyVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
}
EnableForceAutoStopMyVideoWhenJoinMeetingParams::EnableForceAutoStopMyVideoWhenJoinMeetingParams(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
}

inline void EnableForceAutoStopMyVideoWhenJoinMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableForceAutoStopMyVideoWhenJoinMeetingParams::~EnableForceAutoStopMyVideoWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableForceAutoStopMyVideoWhenJoinMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableForceAutoStopMyVideoWhenJoinMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableForceAutoStopMyVideoWhenJoinMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  return target;
}

::size_t EnableForceAutoStopMyVideoWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableForceAutoStopMyVideoWhenJoinMeetingParams*>(
      &from));
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::MergeFrom(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from) {
  EnableForceAutoStopMyVideoWhenJoinMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::CopyFrom(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableForceAutoStopMyVideoWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::InternalSwap(EnableForceAutoStopMyVideoWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableForceAutoStopMyVideoWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams";
}

// ===================================================================

class DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
}
DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
}

inline void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::~DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  return target;
}

::size_t DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams*>(
      &from));
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::MergeFrom(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from) {
  DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::CopyFrom(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::InternalSwap(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams";
}

// ===================================================================

class DisableShowJoinMeetingWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableShowJoinMeetingWndParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableShowJoinMeetingWndParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableShowJoinMeetingWndParams::DisableShowJoinMeetingWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
}
DisableShowJoinMeetingWndParams::DisableShowJoinMeetingWndParams(const DisableShowJoinMeetingWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
}

inline void DisableShowJoinMeetingWndParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableShowJoinMeetingWndParams::~DisableShowJoinMeetingWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableShowJoinMeetingWndParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableShowJoinMeetingWndParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableShowJoinMeetingWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableShowJoinMeetingWndParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableShowJoinMeetingWndParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  return target;
}

::size_t DisableShowJoinMeetingWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableShowJoinMeetingWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableShowJoinMeetingWndParams*>(
      &from));
}

void DisableShowJoinMeetingWndParams::MergeFrom(const DisableShowJoinMeetingWndParams& from) {
  DisableShowJoinMeetingWndParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableShowJoinMeetingWndParams::CopyFrom(const DisableShowJoinMeetingWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableShowJoinMeetingWndParams::IsInitialized() const {
  return true;
}

void DisableShowJoinMeetingWndParams::InternalSwap(DisableShowJoinMeetingWndParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableShowJoinMeetingWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableShowJoinMeetingWndParams";
}

// ===================================================================

class DisableToolbarInviteButtonClickOriginActionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableToolbarInviteButtonClickOriginActionParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableToolbarInviteButtonClickOriginActionParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableToolbarInviteButtonClickOriginActionParams::DisableToolbarInviteButtonClickOriginActionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
}
DisableToolbarInviteButtonClickOriginActionParams::DisableToolbarInviteButtonClickOriginActionParams(const DisableToolbarInviteButtonClickOriginActionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
}

inline void DisableToolbarInviteButtonClickOriginActionParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableToolbarInviteButtonClickOriginActionParams::~DisableToolbarInviteButtonClickOriginActionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableToolbarInviteButtonClickOriginActionParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableToolbarInviteButtonClickOriginActionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableToolbarInviteButtonClickOriginActionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableToolbarInviteButtonClickOriginActionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableToolbarInviteButtonClickOriginActionParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  return target;
}

::size_t DisableToolbarInviteButtonClickOriginActionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableToolbarInviteButtonClickOriginActionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableToolbarInviteButtonClickOriginActionParams*>(
      &from));
}

void DisableToolbarInviteButtonClickOriginActionParams::MergeFrom(const DisableToolbarInviteButtonClickOriginActionParams& from) {
  DisableToolbarInviteButtonClickOriginActionParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableToolbarInviteButtonClickOriginActionParams::CopyFrom(const DisableToolbarInviteButtonClickOriginActionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableToolbarInviteButtonClickOriginActionParams::IsInitialized() const {
  return true;
}

void DisableToolbarInviteButtonClickOriginActionParams::InternalSwap(DisableToolbarInviteButtonClickOriginActionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableToolbarInviteButtonClickOriginActionParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams";
}

// ===================================================================

class SetShowVideoOptimizeChkboxParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowVideoOptimizeChkboxParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetShowVideoOptimizeChkboxParams, _impl_._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetShowVideoOptimizeChkboxParams::SetShowVideoOptimizeChkboxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
}
SetShowVideoOptimizeChkboxParams::SetShowVideoOptimizeChkboxParams(const SetShowVideoOptimizeChkboxParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
}

inline void SetShowVideoOptimizeChkboxParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bshow_) { false }

  };
}

SetShowVideoOptimizeChkboxParams::~SetShowVideoOptimizeChkboxParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetShowVideoOptimizeChkboxParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetShowVideoOptimizeChkboxParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetShowVideoOptimizeChkboxParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bshow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowVideoOptimizeChkboxParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          _impl_.bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetShowVideoOptimizeChkboxParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  return target;
}

::size_t SetShowVideoOptimizeChkboxParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowVideoOptimizeChkboxParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetShowVideoOptimizeChkboxParams*>(
      &from));
}

void SetShowVideoOptimizeChkboxParams::MergeFrom(const SetShowVideoOptimizeChkboxParams& from) {
  SetShowVideoOptimizeChkboxParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bshow(from._internal_bshow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetShowVideoOptimizeChkboxParams::CopyFrom(const SetShowVideoOptimizeChkboxParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowVideoOptimizeChkboxParams::IsInitialized() const {
  return true;
}

void SetShowVideoOptimizeChkboxParams::InternalSwap(SetShowVideoOptimizeChkboxParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bshow_, other->_impl_.bshow_);
}

std::string SetShowVideoOptimizeChkboxParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams";
}

// ===================================================================

class InputMeetingPasswordAndScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputMeetingPasswordAndScreenNameParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InputMeetingPasswordAndScreenNameParams, _impl_._has_bits_);
  static void set_has_psw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputMeetingPasswordAndScreenNameParams::InputMeetingPasswordAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
}
InputMeetingPasswordAndScreenNameParams::InputMeetingPasswordAndScreenNameParams(const InputMeetingPasswordAndScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InputMeetingPasswordAndScreenNameParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.psw_) {}

    , decltype(_impl_.screenname_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.psw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.psw_.Set(from._internal_psw(), _this->GetArenaForAllocation());
  }
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.screenname_.Set(from._internal_screenname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
}

inline void InputMeetingPasswordAndScreenNameParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.psw_) {}

    , decltype(_impl_.screenname_) {}

  };
  _impl_.psw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputMeetingPasswordAndScreenNameParams::~InputMeetingPasswordAndScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputMeetingPasswordAndScreenNameParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.psw_.Destroy();
  _impl_.screenname_.Destroy();
}

void InputMeetingPasswordAndScreenNameParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputMeetingPasswordAndScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.psw_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.screenname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputMeetingPasswordAndScreenNameParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string psw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_psw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string screenName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_screenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InputMeetingPasswordAndScreenNameParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string psw = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_psw();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string screenName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_screenname();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  return target;
}

::size_t InputMeetingPasswordAndScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string psw = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_psw());
    }

    // optional string screenName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_screenname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputMeetingPasswordAndScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InputMeetingPasswordAndScreenNameParams*>(
      &from));
}

void InputMeetingPasswordAndScreenNameParams::MergeFrom(const InputMeetingPasswordAndScreenNameParams& from) {
  InputMeetingPasswordAndScreenNameParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_psw(from._internal_psw());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_screenname(from._internal_screenname());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InputMeetingPasswordAndScreenNameParams::CopyFrom(const InputMeetingPasswordAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMeetingPasswordAndScreenNameParams::IsInitialized() const {
  return true;
}

void InputMeetingPasswordAndScreenNameParams::InternalSwap(InputMeetingPasswordAndScreenNameParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.psw_, lhs_arena,
                                       &other->_impl_.psw_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.screenname_, lhs_arena,
                                       &other->_impl_.screenname_, rhs_arena);
}

std::string InputMeetingPasswordAndScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams";
}

// ===================================================================

class InputMeetingIDAndScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputMeetingIDAndScreenNameParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InputMeetingIDAndScreenNameParams, _impl_._has_bits_);
  static void set_has_meetingid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputMeetingIDAndScreenNameParams::InputMeetingIDAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
}
InputMeetingIDAndScreenNameParams::InputMeetingIDAndScreenNameParams(const InputMeetingIDAndScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InputMeetingIDAndScreenNameParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meetingid_) {}

    , decltype(_impl_.screenname_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.meetingid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.meetingid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.meetingid_.Set(from._internal_meetingid(), _this->GetArenaForAllocation());
  }
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.screenname_.Set(from._internal_screenname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
}

inline void InputMeetingIDAndScreenNameParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meetingid_) {}

    , decltype(_impl_.screenname_) {}

  };
  _impl_.meetingid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.meetingid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputMeetingIDAndScreenNameParams::~InputMeetingIDAndScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputMeetingIDAndScreenNameParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.meetingid_.Destroy();
  _impl_.screenname_.Destroy();
}

void InputMeetingIDAndScreenNameParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputMeetingIDAndScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.meetingid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.screenname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputMeetingIDAndScreenNameParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string meetingID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_meetingid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string screenName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_screenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InputMeetingIDAndScreenNameParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string meetingID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_meetingid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string screenName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_screenname();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  return target;
}

::size_t InputMeetingIDAndScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string meetingID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_meetingid());
    }

    // optional string screenName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_screenname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputMeetingIDAndScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InputMeetingIDAndScreenNameParams*>(
      &from));
}

void InputMeetingIDAndScreenNameParams::MergeFrom(const InputMeetingIDAndScreenNameParams& from) {
  InputMeetingIDAndScreenNameParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_meetingid(from._internal_meetingid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_screenname(from._internal_screenname());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InputMeetingIDAndScreenNameParams::CopyFrom(const InputMeetingIDAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMeetingIDAndScreenNameParams::IsInitialized() const {
  return true;
}

void InputMeetingIDAndScreenNameParams::InternalSwap(InputMeetingIDAndScreenNameParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.meetingid_, lhs_arena,
                                       &other->_impl_.meetingid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.screenname_, lhs_arena,
                                       &other->_impl_.screenname_, rhs_arena);
}

std::string InputMeetingIDAndScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputMeetingIDAndScreenNameParams";
}

// ===================================================================

class InputMeetingScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputMeetingScreenNameParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InputMeetingScreenNameParams, _impl_._has_bits_);
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InputMeetingScreenNameParams::InputMeetingScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputMeetingScreenNameParams)
}
InputMeetingScreenNameParams::InputMeetingScreenNameParams(const InputMeetingScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InputMeetingScreenNameParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.screenname_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.screenname_.Set(from._internal_screenname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputMeetingScreenNameParams)
}

inline void InputMeetingScreenNameParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.screenname_) {}

  };
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputMeetingScreenNameParams::~InputMeetingScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputMeetingScreenNameParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputMeetingScreenNameParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.screenname_.Destroy();
}

void InputMeetingScreenNameParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputMeetingScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.screenname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputMeetingScreenNameParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string screenName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_screenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InputMeetingScreenNameParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string screenName = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_screenname();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputMeetingScreenNameParams)
  return target;
}

::size_t InputMeetingScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string screenName = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_screenname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputMeetingScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InputMeetingScreenNameParams*>(
      &from));
}

void InputMeetingScreenNameParams::MergeFrom(const InputMeetingScreenNameParams& from) {
  InputMeetingScreenNameParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_screenname(from._internal_screenname());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InputMeetingScreenNameParams::CopyFrom(const InputMeetingScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMeetingScreenNameParams::IsInitialized() const {
  return true;
}

void InputMeetingScreenNameParams::InternalSwap(InputMeetingScreenNameParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.screenname_, lhs_arena,
                                       &other->_impl_.screenname_, rhs_arena);
}

std::string InputMeetingScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputMeetingScreenNameParams";
}

// ===================================================================

class InputWebinarRegisterEmailAndScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputWebinarRegisterEmailAndScreenNameParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InputWebinarRegisterEmailAndScreenNameParams, _impl_._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputWebinarRegisterEmailAndScreenNameParams::InputWebinarRegisterEmailAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
}
InputWebinarRegisterEmailAndScreenNameParams::InputWebinarRegisterEmailAndScreenNameParams(const InputWebinarRegisterEmailAndScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InputWebinarRegisterEmailAndScreenNameParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_) {}

    , decltype(_impl_.screenname_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.email_.Set(from._internal_email(), _this->GetArenaForAllocation());
  }
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.screenname_.Set(from._internal_screenname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
}

inline void InputWebinarRegisterEmailAndScreenNameParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_) {}

    , decltype(_impl_.screenname_) {}

  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputWebinarRegisterEmailAndScreenNameParams::~InputWebinarRegisterEmailAndScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputWebinarRegisterEmailAndScreenNameParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.screenname_.Destroy();
}

void InputWebinarRegisterEmailAndScreenNameParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputWebinarRegisterEmailAndScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.screenname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputWebinarRegisterEmailAndScreenNameParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string screenName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_screenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InputWebinarRegisterEmailAndScreenNameParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string email = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_email();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string screenName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_screenname();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  return target;
}

::size_t InputWebinarRegisterEmailAndScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_email());
    }

    // optional string screenName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_screenname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputWebinarRegisterEmailAndScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InputWebinarRegisterEmailAndScreenNameParams*>(
      &from));
}

void InputWebinarRegisterEmailAndScreenNameParams::MergeFrom(const InputWebinarRegisterEmailAndScreenNameParams& from) {
  InputWebinarRegisterEmailAndScreenNameParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_screenname(from._internal_screenname());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InputWebinarRegisterEmailAndScreenNameParams::CopyFrom(const InputWebinarRegisterEmailAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputWebinarRegisterEmailAndScreenNameParams::IsInitialized() const {
  return true;
}

void InputWebinarRegisterEmailAndScreenNameParams::InternalSwap(InputWebinarRegisterEmailAndScreenNameParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, lhs_arena,
                                       &other->_impl_.email_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.screenname_, lhs_arena,
                                       &other->_impl_.screenname_, rhs_arena);
}

std::string InputWebinarRegisterEmailAndScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams";
}

// ===================================================================

class CallOutH323Params::_Internal {
 public:
  using HasBits = decltype(std::declval<CallOutH323Params>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallOutH323Params, _impl_._has_bits_);
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deviceip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_devicee164num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h323devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CallOutH323Params::CallOutH323Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.CallOutH323Params)
}
CallOutH323Params::CallOutH323Params(const CallOutH323Params& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallOutH323Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.devicename_) {}

    , decltype(_impl_.deviceip_) {}

    , decltype(_impl_.devicee164num_) {}

    , decltype(_impl_.h323devicetype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), _this->GetArenaForAllocation());
  }
  _impl_.deviceip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.deviceip_.Set(from._internal_deviceip(), _this->GetArenaForAllocation());
  }
  _impl_.devicee164num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicee164num_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.devicee164num_.Set(from._internal_devicee164num(), _this->GetArenaForAllocation());
  }
  _this->_impl_.h323devicetype_ = from._impl_.h323devicetype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.CallOutH323Params)
}

inline void CallOutH323Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.devicename_) {}

    , decltype(_impl_.deviceip_) {}

    , decltype(_impl_.devicee164num_) {}

    , decltype(_impl_.h323devicetype_) { 0 }

  };
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicee164num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicee164num_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallOutH323Params::~CallOutH323Params() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.CallOutH323Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallOutH323Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devicename_.Destroy();
  _impl_.deviceip_.Destroy();
  _impl_.devicee164num_.Destroy();
}

void CallOutH323Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallOutH323Params::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.CallOutH323Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.devicename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.deviceip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.devicee164num_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.h323devicetype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallOutH323Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string deviceIP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string deviceE164num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_devicee164num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 h323DeviceType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_h323devicetype(&has_bits);
          _impl_.h323devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallOutH323Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.CallOutH323Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceName = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_devicename();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string deviceIP = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_deviceip();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string deviceE164num = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_devicee164num();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 h323DeviceType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_h323devicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.CallOutH323Params)
  return target;
}

::size_t CallOutH323Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.CallOutH323Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string deviceName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_devicename());
    }

    // optional string deviceIP = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_deviceip());
    }

    // optional string deviceE164num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_devicee164num());
    }

    // optional int32 h323DeviceType = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_h323devicetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallOutH323Params::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallOutH323Params*>(
      &from));
}

void CallOutH323Params::MergeFrom(const CallOutH323Params& from) {
  CallOutH323Params* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.CallOutH323Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_devicename(from._internal_devicename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_deviceip(from._internal_deviceip());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_devicee164num(from._internal_devicee164num());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.h323devicetype_ = from._impl_.h323devicetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallOutH323Params::CopyFrom(const CallOutH323Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.CallOutH323Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallOutH323Params::IsInitialized() const {
  return true;
}

void CallOutH323Params::InternalSwap(CallOutH323Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.devicename_, lhs_arena,
                                       &other->_impl_.devicename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceip_, lhs_arena,
                                       &other->_impl_.deviceip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.devicee164num_, lhs_arena,
                                       &other->_impl_.devicee164num_, rhs_arena);

  swap(_impl_.h323devicetype_, other->_impl_.h323devicetype_);
}

std::string CallOutH323Params::GetTypeName() const {
  return "com.electron.sdk.proto.CallOutH323Params";
}

// ===================================================================

class GetUserInfoByUserIDParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserInfoByUserIDParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetUserInfoByUserIDParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetUserInfoByUserIDParams::GetUserInfoByUserIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetUserInfoByUserIDParams)
}
GetUserInfoByUserIDParams::GetUserInfoByUserIDParams(const GetUserInfoByUserIDParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetUserInfoByUserIDParams)
}

inline void GetUserInfoByUserIDParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

GetUserInfoByUserIDParams::~GetUserInfoByUserIDParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserInfoByUserIDParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetUserInfoByUserIDParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserInfoByUserIDParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetUserInfoByUserIDParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetUserInfoByUserIDParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  return target;
}

::size_t GetUserInfoByUserIDParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserInfoByUserIDParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetUserInfoByUserIDParams*>(
      &from));
}

void GetUserInfoByUserIDParams::MergeFrom(const GetUserInfoByUserIDParams& from) {
  GetUserInfoByUserIDParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetUserInfoByUserIDParams::CopyFrom(const GetUserInfoByUserIDParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoByUserIDParams::IsInitialized() const {
  return true;
}

void GetUserInfoByUserIDParams::InternalSwap(GetUserInfoByUserIDParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string GetUserInfoByUserIDParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetUserInfoByUserIDParams";
}

// ===================================================================

class CanStartRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CanStartRecordingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CanStartRecordingParams, _impl_._has_bits_);
  static void set_has_bcloudrecording(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CanStartRecordingParams::CanStartRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.CanStartRecordingParams)
}
CanStartRecordingParams::CanStartRecordingParams(const CanStartRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.CanStartRecordingParams)
}

inline void CanStartRecordingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bcloudrecording_) { false }

    , decltype(_impl_.userid_) { 0u }

  };
}

CanStartRecordingParams::~CanStartRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.CanStartRecordingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanStartRecordingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CanStartRecordingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanStartRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.CanStartRecordingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.bcloudrecording_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.userid_) -
        reinterpret_cast<char*>(&_impl_.bcloudrecording_)) + sizeof(_impl_.userid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CanStartRecordingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bCloudRecording = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bcloudrecording(&has_bits);
          _impl_.bcloudrecording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 userID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CanStartRecordingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.CanStartRecordingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bCloudRecording = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bcloudrecording(), target);
  }

  // optional uint32 userID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.CanStartRecordingParams)
  return target;
}

::size_t CanStartRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.CanStartRecordingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bCloudRecording = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional uint32 userID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanStartRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CanStartRecordingParams*>(
      &from));
}

void CanStartRecordingParams::MergeFrom(const CanStartRecordingParams& from) {
  CanStartRecordingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.CanStartRecordingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bcloudrecording_ = from._impl_.bcloudrecording_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CanStartRecordingParams::CopyFrom(const CanStartRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.CanStartRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanStartRecordingParams::IsInitialized() const {
  return true;
}

void CanStartRecordingParams::InternalSwap(CanStartRecordingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanStartRecordingParams, _impl_.userid_)
      + sizeof(CanStartRecordingParams::_impl_.userid_)
      - PROTOBUF_FIELD_OFFSET(CanStartRecordingParams, _impl_.bcloudrecording_)>(
          reinterpret_cast<char*>(&_impl_.bcloudrecording_),
          reinterpret_cast<char*>(&other->_impl_.bcloudrecording_));
}

std::string CanStartRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.CanStartRecordingParams";
}

// ===================================================================

class IsSupportLocalRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<IsSupportLocalRecordingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IsSupportLocalRecordingParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IsSupportLocalRecordingParams::IsSupportLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.IsSupportLocalRecordingParams)
}
IsSupportLocalRecordingParams::IsSupportLocalRecordingParams(const IsSupportLocalRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.IsSupportLocalRecordingParams)
}

inline void IsSupportLocalRecordingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

IsSupportLocalRecordingParams::~IsSupportLocalRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsSupportLocalRecordingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsSupportLocalRecordingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsSupportLocalRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IsSupportLocalRecordingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IsSupportLocalRecordingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  return target;
}

::size_t IsSupportLocalRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsSupportLocalRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IsSupportLocalRecordingParams*>(
      &from));
}

void IsSupportLocalRecordingParams::MergeFrom(const IsSupportLocalRecordingParams& from) {
  IsSupportLocalRecordingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IsSupportLocalRecordingParams::CopyFrom(const IsSupportLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsSupportLocalRecordingParams::IsInitialized() const {
  return true;
}

void IsSupportLocalRecordingParams::InternalSwap(IsSupportLocalRecordingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string IsSupportLocalRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.IsSupportLocalRecordingParams";
}

// ===================================================================

class AllowLocalRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowLocalRecordingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AllowLocalRecordingParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowLocalRecordingParams::AllowLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AllowLocalRecordingParams)
}
AllowLocalRecordingParams::AllowLocalRecordingParams(const AllowLocalRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AllowLocalRecordingParams)
}

inline void AllowLocalRecordingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0 }

  };
}

AllowLocalRecordingParams::~AllowLocalRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AllowLocalRecordingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowLocalRecordingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllowLocalRecordingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllowLocalRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllowLocalRecordingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AllowLocalRecordingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AllowLocalRecordingParams)
  return target;
}

::size_t AllowLocalRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowLocalRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AllowLocalRecordingParams*>(
      &from));
}

void AllowLocalRecordingParams::MergeFrom(const AllowLocalRecordingParams& from) {
  AllowLocalRecordingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AllowLocalRecordingParams::CopyFrom(const AllowLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowLocalRecordingParams::IsInitialized() const {
  return true;
}

void AllowLocalRecordingParams::InternalSwap(AllowLocalRecordingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string AllowLocalRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.AllowLocalRecordingParams";
}

// ===================================================================

class DisAllowLocalRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisAllowLocalRecordingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisAllowLocalRecordingParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisAllowLocalRecordingParams::DisAllowLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisAllowLocalRecordingParams)
}
DisAllowLocalRecordingParams::DisAllowLocalRecordingParams(const DisAllowLocalRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisAllowLocalRecordingParams)
}

inline void DisAllowLocalRecordingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

DisAllowLocalRecordingParams::~DisAllowLocalRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisAllowLocalRecordingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisAllowLocalRecordingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisAllowLocalRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisAllowLocalRecordingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisAllowLocalRecordingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  return target;
}

::size_t DisAllowLocalRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisAllowLocalRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisAllowLocalRecordingParams*>(
      &from));
}

void DisAllowLocalRecordingParams::MergeFrom(const DisAllowLocalRecordingParams& from) {
  DisAllowLocalRecordingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisAllowLocalRecordingParams::CopyFrom(const DisAllowLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisAllowLocalRecordingParams::IsInitialized() const {
  return true;
}

void DisAllowLocalRecordingParams::InternalSwap(DisAllowLocalRecordingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string DisAllowLocalRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisAllowLocalRecordingParams";
}

// ===================================================================

class StartAppShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartAppShareParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartAppShareParams, _impl_._has_bits_);
  static void set_has_hshareapp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartAppShareParams::StartAppShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartAppShareParams)
}
StartAppShareParams::StartAppShareParams(const StartAppShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartAppShareParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hshareapp_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hshareapp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hshareapp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.hshareapp_.Set(from._internal_hshareapp(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartAppShareParams)
}

inline void StartAppShareParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hshareapp_) {}

  };
  _impl_.hshareapp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hshareapp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartAppShareParams::~StartAppShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartAppShareParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartAppShareParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hshareapp_.Destroy();
}

void StartAppShareParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartAppShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartAppShareParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.hshareapp_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartAppShareParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string hShareApp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hshareapp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartAppShareParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartAppShareParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string hShareApp = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_hshareapp();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartAppShareParams)
  return target;
}

::size_t StartAppShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartAppShareParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hShareApp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hshareapp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAppShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartAppShareParams*>(
      &from));
}

void StartAppShareParams::MergeFrom(const StartAppShareParams& from) {
  StartAppShareParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartAppShareParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_hshareapp(from._internal_hshareapp());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartAppShareParams::CopyFrom(const StartAppShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartAppShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAppShareParams::IsInitialized() const {
  return true;
}

void StartAppShareParams::InternalSwap(StartAppShareParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hshareapp_, lhs_arena,
                                       &other->_impl_.hshareapp_, rhs_arena);
}

std::string StartAppShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartAppShareParams";
}

// ===================================================================

class StartMonitorShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartMonitorShareParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartMonitorShareParams, _impl_._has_bits_);
  static void set_has_monitorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartMonitorShareParams::StartMonitorShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartMonitorShareParams)
}
StartMonitorShareParams::StartMonitorShareParams(const StartMonitorShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartMonitorShareParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.monitorid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.monitorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.monitorid_.Set(from._internal_monitorid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartMonitorShareParams)
}

inline void StartMonitorShareParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.monitorid_) {}

  };
  _impl_.monitorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartMonitorShareParams::~StartMonitorShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartMonitorShareParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartMonitorShareParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.monitorid_.Destroy();
}

void StartMonitorShareParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartMonitorShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartMonitorShareParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.monitorid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartMonitorShareParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string monitorID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_monitorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartMonitorShareParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartMonitorShareParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string monitorID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_monitorid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartMonitorShareParams)
  return target;
}

::size_t StartMonitorShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartMonitorShareParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string monitorID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_monitorid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartMonitorShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartMonitorShareParams*>(
      &from));
}

void StartMonitorShareParams::MergeFrom(const StartMonitorShareParams& from) {
  StartMonitorShareParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartMonitorShareParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_monitorid(from._internal_monitorid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartMonitorShareParams::CopyFrom(const StartMonitorShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartMonitorShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMonitorShareParams::IsInitialized() const {
  return true;
}

void StartMonitorShareParams::InternalSwap(StartMonitorShareParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.monitorid_, lhs_arena,
                                       &other->_impl_.monitorid_, rhs_arena);
}

std::string StartMonitorShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartMonitorShareParams";
}

// ===================================================================

class MuteVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MuteVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MuteVideoParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MuteVideoParams::MuteVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.MuteVideoParams)
}
MuteVideoParams::MuteVideoParams(const MuteVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.MuteVideoParams)
}

inline void MuteVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

MuteVideoParams::~MuteVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.MuteVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MuteVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MuteVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.MuteVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MuteVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MuteVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.MuteVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.MuteVideoParams)
  return target;
}

::size_t MuteVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.MuteVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MuteVideoParams*>(
      &from));
}

void MuteVideoParams::MergeFrom(const MuteVideoParams& from) {
  MuteVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.MuteVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MuteVideoParams::CopyFrom(const MuteVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.MuteVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteVideoParams::IsInitialized() const {
  return true;
}

void MuteVideoParams::InternalSwap(MuteVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string MuteVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.MuteVideoParams";
}

// ===================================================================

class UnMuteVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnMuteVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnMuteVideoParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnMuteVideoParams::UnMuteVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.UnMuteVideoParams)
}
UnMuteVideoParams::UnMuteVideoParams(const UnMuteVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.UnMuteVideoParams)
}

inline void UnMuteVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

UnMuteVideoParams::~UnMuteVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.UnMuteVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnMuteVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnMuteVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnMuteVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.UnMuteVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnMuteVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnMuteVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.UnMuteVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.UnMuteVideoParams)
  return target;
}

::size_t UnMuteVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.UnMuteVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnMuteVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnMuteVideoParams*>(
      &from));
}

void UnMuteVideoParams::MergeFrom(const UnMuteVideoParams& from) {
  UnMuteVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.UnMuteVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnMuteVideoParams::CopyFrom(const UnMuteVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.UnMuteVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnMuteVideoParams::IsInitialized() const {
  return true;
}

void UnMuteVideoParams::InternalSwap(UnMuteVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string UnMuteVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.UnMuteVideoParams";
}

// ===================================================================

class PinVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PinVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PinVideoParams, _impl_._has_bits_);
  static void set_has_bpin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bfirstview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PinVideoParams::PinVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.PinVideoParams)
}
PinVideoParams::PinVideoParams(const PinVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.PinVideoParams)
}

inline void PinVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bpin_) { false }

    , decltype(_impl_.bfirstview_) { false }

    , decltype(_impl_.userid_) { 0u }

  };
}

PinVideoParams::~PinVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.PinVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PinVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PinVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PinVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.PinVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.bpin_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.userid_) -
        reinterpret_cast<char*>(&_impl_.bpin_)) + sizeof(_impl_.userid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PinVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bPin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bpin(&has_bits);
          _impl_.bpin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bFirstView = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bfirstview(&has_bits);
          _impl_.bfirstview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 userID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PinVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.PinVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bPin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bpin(), target);
  }

  // optional bool bFirstView = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_bfirstview(), target);
  }

  // optional uint32 userID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.PinVideoParams)
  return target;
}

::size_t PinVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.PinVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool bPin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool bFirstView = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional uint32 userID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PinVideoParams*>(
      &from));
}

void PinVideoParams::MergeFrom(const PinVideoParams& from) {
  PinVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.PinVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bpin_ = from._impl_.bpin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bfirstview_ = from._impl_.bfirstview_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PinVideoParams::CopyFrom(const PinVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.PinVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinVideoParams::IsInitialized() const {
  return true;
}

void PinVideoParams::InternalSwap(PinVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PinVideoParams, _impl_.userid_)
      + sizeof(PinVideoParams::_impl_.userid_)
      - PROTOBUF_FIELD_OFFSET(PinVideoParams, _impl_.bpin_)>(
          reinterpret_cast<char*>(&_impl_.bpin_),
          reinterpret_cast<char*>(&other->_impl_.bpin_));
}

std::string PinVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.PinVideoParams";
}

// ===================================================================

class SpotlightVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SpotlightVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SpotlightVideoParams, _impl_._has_bits_);
  static void set_has_bspotlight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpotlightVideoParams::SpotlightVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SpotlightVideoParams)
}
SpotlightVideoParams::SpotlightVideoParams(const SpotlightVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SpotlightVideoParams)
}

inline void SpotlightVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bspotlight_) { false }

    , decltype(_impl_.userid_) { 0u }

  };
}

SpotlightVideoParams::~SpotlightVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SpotlightVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotlightVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpotlightVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotlightVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SpotlightVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.bspotlight_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.userid_) -
        reinterpret_cast<char*>(&_impl_.bspotlight_)) + sizeof(_impl_.userid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SpotlightVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bSpotlight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bspotlight(&has_bits);
          _impl_.bspotlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 userID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpotlightVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SpotlightVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bSpotlight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bspotlight(), target);
  }

  // optional uint32 userID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SpotlightVideoParams)
  return target;
}

::size_t SpotlightVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SpotlightVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bSpotlight = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional uint32 userID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotlightVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SpotlightVideoParams*>(
      &from));
}

void SpotlightVideoParams::MergeFrom(const SpotlightVideoParams& from) {
  SpotlightVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SpotlightVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bspotlight_ = from._impl_.bspotlight_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SpotlightVideoParams::CopyFrom(const SpotlightVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SpotlightVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotlightVideoParams::IsInitialized() const {
  return true;
}

void SpotlightVideoParams::InternalSwap(SpotlightVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotlightVideoParams, _impl_.userid_)
      + sizeof(SpotlightVideoParams::_impl_.userid_)
      - PROTOBUF_FIELD_OFFSET(SpotlightVideoParams, _impl_.bspotlight_)>(
          reinterpret_cast<char*>(&_impl_.bspotlight_),
          reinterpret_cast<char*>(&other->_impl_.bspotlight_));
}

std::string SpotlightVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.SpotlightVideoParams";
}

// ===================================================================

class HideOrShowNoVideoUserOnVideoWallParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideOrShowNoVideoUserOnVideoWallParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideOrShowNoVideoUserOnVideoWallParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideOrShowNoVideoUserOnVideoWallParams::HideOrShowNoVideoUserOnVideoWallParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
}
HideOrShowNoVideoUserOnVideoWallParams::HideOrShowNoVideoUserOnVideoWallParams(const HideOrShowNoVideoUserOnVideoWallParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
}

inline void HideOrShowNoVideoUserOnVideoWallParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideOrShowNoVideoUserOnVideoWallParams::~HideOrShowNoVideoUserOnVideoWallParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideOrShowNoVideoUserOnVideoWallParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideOrShowNoVideoUserOnVideoWallParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideOrShowNoVideoUserOnVideoWallParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideOrShowNoVideoUserOnVideoWallParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideOrShowNoVideoUserOnVideoWallParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  return target;
}

::size_t HideOrShowNoVideoUserOnVideoWallParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideOrShowNoVideoUserOnVideoWallParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideOrShowNoVideoUserOnVideoWallParams*>(
      &from));
}

void HideOrShowNoVideoUserOnVideoWallParams::MergeFrom(const HideOrShowNoVideoUserOnVideoWallParams& from) {
  HideOrShowNoVideoUserOnVideoWallParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideOrShowNoVideoUserOnVideoWallParams::CopyFrom(const HideOrShowNoVideoUserOnVideoWallParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideOrShowNoVideoUserOnVideoWallParams::IsInitialized() const {
  return true;
}

void HideOrShowNoVideoUserOnVideoWallParams::InternalSwap(HideOrShowNoVideoUserOnVideoWallParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideOrShowNoVideoUserOnVideoWallParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams";
}

// ===================================================================

class CreateRendererParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateRendererParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CreateRendererParams, _impl_._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreateRendererParams::CreateRendererParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.CreateRendererParams)
}
CreateRendererParams::CreateRendererParams(const CreateRendererParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.CreateRendererParams)
}

inline void CreateRendererParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recvhandle_) { ::uint64_t{0u} }

  };
}

CreateRendererParams::~CreateRendererParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.CreateRendererParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRendererParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateRendererParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRendererParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.CreateRendererParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CreateRendererParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          _impl_.recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateRendererParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.CreateRendererParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.CreateRendererParams)
  return target;
}

::size_t CreateRendererParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.CreateRendererParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRendererParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CreateRendererParams*>(
      &from));
}

void CreateRendererParams::MergeFrom(const CreateRendererParams& from) {
  CreateRendererParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.CreateRendererParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_recvhandle(from._internal_recvhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CreateRendererParams::CopyFrom(const CreateRendererParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.CreateRendererParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRendererParams::IsInitialized() const {
  return true;
}

void CreateRendererParams::InternalSwap(CreateRendererParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.recvhandle_, other->_impl_.recvhandle_);
}

std::string CreateRendererParams::GetTypeName() const {
  return "com.electron.sdk.proto.CreateRendererParams";
}

// ===================================================================

class DestroyRendererParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyRendererParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DestroyRendererParams, _impl_._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DestroyRendererParams::DestroyRendererParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DestroyRendererParams)
}
DestroyRendererParams::DestroyRendererParams(const DestroyRendererParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DestroyRendererParams)
}

inline void DestroyRendererParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recvhandle_) { ::uint64_t{0u} }

  };
}

DestroyRendererParams::~DestroyRendererParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DestroyRendererParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestroyRendererParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DestroyRendererParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestroyRendererParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DestroyRendererParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DestroyRendererParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          _impl_.recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DestroyRendererParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DestroyRendererParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DestroyRendererParams)
  return target;
}

::size_t DestroyRendererParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DestroyRendererParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyRendererParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DestroyRendererParams*>(
      &from));
}

void DestroyRendererParams::MergeFrom(const DestroyRendererParams& from) {
  DestroyRendererParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DestroyRendererParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_recvhandle(from._internal_recvhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DestroyRendererParams::CopyFrom(const DestroyRendererParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DestroyRendererParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyRendererParams::IsInitialized() const {
  return true;
}

void DestroyRendererParams::InternalSwap(DestroyRendererParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.recvhandle_, other->_impl_.recvhandle_);
}

std::string DestroyRendererParams::GetTypeName() const {
  return "com.electron.sdk.proto.DestroyRendererParams";
}

// ===================================================================

class SubscribeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SubscribeParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rawdatatype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SubscribeParams::SubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SubscribeParams)
}
SubscribeParams::SubscribeParams(const SubscribeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SubscribeParams)
}

inline void SubscribeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

    , decltype(_impl_.rawdatatype_) { 0 }

    , decltype(_impl_.recvhandle_) { ::uint64_t{0u} }

  };
}

SubscribeParams::~SubscribeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SubscribeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscribeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SubscribeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.userid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.recvhandle_) -
        reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.recvhandle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SubscribeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 rawDataType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_rawdatatype(&has_bits);
          _impl_.rawdatatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 recvHandle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_recvhandle(&has_bits);
          _impl_.recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubscribeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SubscribeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  // optional int32 rawDataType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_rawdatatype(), target);
  }

  // optional uint64 recvHandle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SubscribeParams)
  return target;
}

::size_t SubscribeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SubscribeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 userID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_userid());
    }

    // optional int32 rawDataType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_rawdatatype());
    }

    // optional uint64 recvHandle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_recvhandle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SubscribeParams*>(
      &from));
}

void SubscribeParams::MergeFrom(const SubscribeParams& from) {
  SubscribeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SubscribeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rawdatatype_ = from._impl_.rawdatatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.recvhandle_ = from._impl_.recvhandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SubscribeParams::CopyFrom(const SubscribeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SubscribeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeParams::IsInitialized() const {
  return true;
}

void SubscribeParams::InternalSwap(SubscribeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeParams, _impl_.recvhandle_)
      + sizeof(SubscribeParams::_impl_.recvhandle_)
      - PROTOBUF_FIELD_OFFSET(SubscribeParams, _impl_.userid_)>(
          reinterpret_cast<char*>(&_impl_.userid_),
          reinterpret_cast<char*>(&other->_impl_.userid_));
}

std::string SubscribeParams::GetTypeName() const {
  return "com.electron.sdk.proto.SubscribeParams";
}

// ===================================================================

class UnSubscribeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnSubscribeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnSubscribeParams, _impl_._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnSubscribeParams::UnSubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.UnSubscribeParams)
}
UnSubscribeParams::UnSubscribeParams(const UnSubscribeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.UnSubscribeParams)
}

inline void UnSubscribeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recvhandle_) { ::uint64_t{0u} }

  };
}

UnSubscribeParams::~UnSubscribeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.UnSubscribeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnSubscribeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnSubscribeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnSubscribeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.UnSubscribeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnSubscribeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          _impl_.recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnSubscribeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.UnSubscribeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.UnSubscribeParams)
  return target;
}

::size_t UnSubscribeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.UnSubscribeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnSubscribeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnSubscribeParams*>(
      &from));
}

void UnSubscribeParams::MergeFrom(const UnSubscribeParams& from) {
  UnSubscribeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.UnSubscribeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_recvhandle(from._internal_recvhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnSubscribeParams::CopyFrom(const UnSubscribeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.UnSubscribeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnSubscribeParams::IsInitialized() const {
  return true;
}

void UnSubscribeParams::InternalSwap(UnSubscribeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.recvhandle_, other->_impl_.recvhandle_);
}

std::string UnSubscribeParams::GetTypeName() const {
  return "com.electron.sdk.proto.UnSubscribeParams";
}

// ===================================================================

class SetRawDataResolutionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRawDataResolutionParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRawDataResolutionParams, _impl_._has_bits_);
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetRawDataResolutionParams::SetRawDataResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetRawDataResolutionParams)
}
SetRawDataResolutionParams::SetRawDataResolutionParams(const SetRawDataResolutionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetRawDataResolutionParams)
}

inline void SetRawDataResolutionParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recvhandle_) { ::uint64_t{0u} }

    , decltype(_impl_.resolution_) { 0 }

  };
}

SetRawDataResolutionParams::~SetRawDataResolutionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetRawDataResolutionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRawDataResolutionParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetRawDataResolutionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRawDataResolutionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.recvhandle_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.resolution_) -
        reinterpret_cast<char*>(&_impl_.recvhandle_)) + sizeof(_impl_.resolution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetRawDataResolutionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_resolution(&has_bits);
          _impl_.resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 recvHandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_recvhandle(&has_bits);
          _impl_.recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetRawDataResolutionParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 resolution = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_resolution(), target);
  }

  // optional uint64 recvHandle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetRawDataResolutionParams)
  return target;
}

::size_t SetRawDataResolutionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 recvHandle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_recvhandle());
    }

    // optional int32 resolution = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_resolution());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRawDataResolutionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetRawDataResolutionParams*>(
      &from));
}

void SetRawDataResolutionParams::MergeFrom(const SetRawDataResolutionParams& from) {
  SetRawDataResolutionParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.recvhandle_ = from._impl_.recvhandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.resolution_ = from._impl_.resolution_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetRawDataResolutionParams::CopyFrom(const SetRawDataResolutionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRawDataResolutionParams::IsInitialized() const {
  return true;
}

void SetRawDataResolutionParams::InternalSwap(SetRawDataResolutionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRawDataResolutionParams, _impl_.resolution_)
      + sizeof(SetRawDataResolutionParams::_impl_.resolution_)
      - PROTOBUF_FIELD_OFFSET(SetRawDataResolutionParams, _impl_.recvhandle_)>(
          reinterpret_cast<char*>(&_impl_.recvhandle_),
          reinterpret_cast<char*>(&other->_impl_.recvhandle_));
}

std::string SetRawDataResolutionParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetRawDataResolutionParams";
}

// ===================================================================

class GetResolutionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResolutionParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetResolutionParams, _impl_._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetResolutionParams::GetResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetResolutionParams)
}
GetResolutionParams::GetResolutionParams(const GetResolutionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetResolutionParams)
}

inline void GetResolutionParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recvhandle_) { ::uint64_t{0u} }

  };
}

GetResolutionParams::~GetResolutionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetResolutionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetResolutionParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetResolutionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetResolutionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetResolutionParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetResolutionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          _impl_.recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetResolutionParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetResolutionParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetResolutionParams)
  return target;
}

::size_t GetResolutionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetResolutionParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResolutionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetResolutionParams*>(
      &from));
}

void GetResolutionParams::MergeFrom(const GetResolutionParams& from) {
  GetResolutionParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetResolutionParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_recvhandle(from._internal_recvhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetResolutionParams::CopyFrom(const GetResolutionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetResolutionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResolutionParams::IsInitialized() const {
  return true;
}

void GetResolutionParams::InternalSwap(GetResolutionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.recvhandle_, other->_impl_.recvhandle_);
}

std::string GetResolutionParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetResolutionParams";
}

// ===================================================================

class GetRawDataTypeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRawDataTypeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetRawDataTypeParams, _impl_._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetRawDataTypeParams::GetRawDataTypeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetRawDataTypeParams)
}
GetRawDataTypeParams::GetRawDataTypeParams(const GetRawDataTypeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetRawDataTypeParams)
}

inline void GetRawDataTypeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recvhandle_) { ::uint64_t{0u} }

  };
}

GetRawDataTypeParams::~GetRawDataTypeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetRawDataTypeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRawDataTypeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRawDataTypeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRawDataTypeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetRawDataTypeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetRawDataTypeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          _impl_.recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetRawDataTypeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetRawDataTypeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetRawDataTypeParams)
  return target;
}

::size_t GetRawDataTypeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetRawDataTypeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawDataTypeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetRawDataTypeParams*>(
      &from));
}

void GetRawDataTypeParams::MergeFrom(const GetRawDataTypeParams& from) {
  GetRawDataTypeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetRawDataTypeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_recvhandle(from._internal_recvhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetRawDataTypeParams::CopyFrom(const GetRawDataTypeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetRawDataTypeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawDataTypeParams::IsInitialized() const {
  return true;
}

void GetRawDataTypeParams::InternalSwap(GetRawDataTypeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.recvhandle_, other->_impl_.recvhandle_);
}

std::string GetRawDataTypeParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetRawDataTypeParams";
}

// ===================================================================

class GetUserIdParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserIdParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetUserIdParams, _impl_._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetUserIdParams::GetUserIdParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetUserIdParams)
}
GetUserIdParams::GetUserIdParams(const GetUserIdParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetUserIdParams)
}

inline void GetUserIdParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recvhandle_) { ::uint64_t{0u} }

  };
}

GetUserIdParams::~GetUserIdParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetUserIdParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserIdParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetUserIdParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserIdParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetUserIdParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetUserIdParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          _impl_.recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetUserIdParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetUserIdParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetUserIdParams)
  return target;
}

::size_t GetUserIdParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetUserIdParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserIdParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetUserIdParams*>(
      &from));
}

void GetUserIdParams::MergeFrom(const GetUserIdParams& from) {
  GetUserIdParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetUserIdParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_recvhandle(from._internal_recvhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetUserIdParams::CopyFrom(const GetUserIdParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetUserIdParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIdParams::IsInitialized() const {
  return true;
}

void GetUserIdParams::InternalSwap(GetUserIdParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.recvhandle_, other->_impl_.recvhandle_);
}

std::string GetUserIdParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetUserIdParams";
}

// ===================================================================

class EnableZoomAuthRealNameMeetingUIShownParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableZoomAuthRealNameMeetingUIShownParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableZoomAuthRealNameMeetingUIShownParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableZoomAuthRealNameMeetingUIShownParams::EnableZoomAuthRealNameMeetingUIShownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
}
EnableZoomAuthRealNameMeetingUIShownParams::EnableZoomAuthRealNameMeetingUIShownParams(const EnableZoomAuthRealNameMeetingUIShownParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
}

inline void EnableZoomAuthRealNameMeetingUIShownParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableZoomAuthRealNameMeetingUIShownParams::~EnableZoomAuthRealNameMeetingUIShownParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableZoomAuthRealNameMeetingUIShownParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableZoomAuthRealNameMeetingUIShownParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableZoomAuthRealNameMeetingUIShownParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableZoomAuthRealNameMeetingUIShownParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableZoomAuthRealNameMeetingUIShownParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  return target;
}

::size_t EnableZoomAuthRealNameMeetingUIShownParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableZoomAuthRealNameMeetingUIShownParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableZoomAuthRealNameMeetingUIShownParams*>(
      &from));
}

void EnableZoomAuthRealNameMeetingUIShownParams::MergeFrom(const EnableZoomAuthRealNameMeetingUIShownParams& from) {
  EnableZoomAuthRealNameMeetingUIShownParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableZoomAuthRealNameMeetingUIShownParams::CopyFrom(const EnableZoomAuthRealNameMeetingUIShownParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableZoomAuthRealNameMeetingUIShownParams::IsInitialized() const {
  return true;
}

void EnableZoomAuthRealNameMeetingUIShownParams::InternalSwap(EnableZoomAuthRealNameMeetingUIShownParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableZoomAuthRealNameMeetingUIShownParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams";
}

// ===================================================================

class RetrieveParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RetrieveParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RetrieveParams, _impl_._has_bits_);
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RetrieveParams::RetrieveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RetrieveParams)
}
RetrieveParams::RetrieveParams(const RetrieveParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RetrieveParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenum_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), _this->GetArenaForAllocation());
  }
  _impl_.phonenum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.phonenum_.Set(from._internal_phonenum(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RetrieveParams)
}

inline void RetrieveParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenum_) {}

  };
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RetrieveParams::~RetrieveParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RetrieveParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetrieveParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countrycode_.Destroy();
  _impl_.phonenum_.Destroy();
}

void RetrieveParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RetrieveParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RetrieveParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phonenum_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RetrieveParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string countryCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string phoneNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phonenum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RetrieveParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RetrieveParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string countryCode = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_countrycode();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string phoneNum = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_phonenum();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RetrieveParams)
  return target;
}

::size_t RetrieveParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RetrieveParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string countryCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_countrycode());
    }

    // optional string phoneNum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_phonenum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RetrieveParams*>(
      &from));
}

void RetrieveParams::MergeFrom(const RetrieveParams& from) {
  RetrieveParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RetrieveParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phonenum(from._internal_phonenum());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RetrieveParams::CopyFrom(const RetrieveParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RetrieveParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveParams::IsInitialized() const {
  return true;
}

void RetrieveParams::InternalSwap(RetrieveParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.countrycode_, lhs_arena,
                                       &other->_impl_.countrycode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phonenum_, lhs_arena,
                                       &other->_impl_.phonenum_, rhs_arena);
}

std::string RetrieveParams::GetTypeName() const {
  return "com.electron.sdk.proto.RetrieveParams";
}

// ===================================================================

class VerifyParams::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VerifyParams, _impl_._has_bits_);
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verificationcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VerifyParams::VerifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.VerifyParams)
}
VerifyParams::VerifyParams(const VerifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VerifyParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenum_) {}

    , decltype(_impl_.verificationcode_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), _this->GetArenaForAllocation());
  }
  _impl_.phonenum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.phonenum_.Set(from._internal_phonenum(), _this->GetArenaForAllocation());
  }
  _impl_.verificationcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.verificationcode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.verificationcode_.Set(from._internal_verificationcode(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.VerifyParams)
}

inline void VerifyParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenum_) {}

    , decltype(_impl_.verificationcode_) {}

  };
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verificationcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.verificationcode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyParams::~VerifyParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.VerifyParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countrycode_.Destroy();
  _impl_.phonenum_.Destroy();
  _impl_.verificationcode_.Destroy();
}

void VerifyParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.VerifyParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phonenum_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.verificationcode_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VerifyParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string countryCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string phoneNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phonenum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string verificationCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_verificationcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VerifyParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.VerifyParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string countryCode = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_countrycode();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string phoneNum = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_phonenum();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string verificationCode = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_verificationcode();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.VerifyParams)
  return target;
}

::size_t VerifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.VerifyParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string countryCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_countrycode());
    }

    // optional string phoneNum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_phonenum());
    }

    // optional string verificationCode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_verificationcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VerifyParams*>(
      &from));
}

void VerifyParams::MergeFrom(const VerifyParams& from) {
  VerifyParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.VerifyParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phonenum(from._internal_phonenum());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_verificationcode(from._internal_verificationcode());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VerifyParams::CopyFrom(const VerifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.VerifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyParams::IsInitialized() const {
  return true;
}

void VerifyParams::InternalSwap(VerifyParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.countrycode_, lhs_arena,
                                       &other->_impl_.countrycode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phonenum_, lhs_arena,
                                       &other->_impl_.phonenum_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.verificationcode_, lhs_arena,
                                       &other->_impl_.verificationcode_, rhs_arena);
}

std::string VerifyParams::GetTypeName() const {
  return "com.electron.sdk.proto.VerifyParams";
}

// ===================================================================

class SetDefaultCellPhoneInfoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetDefaultCellPhoneInfoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetDefaultCellPhoneInfoParams, _impl_._has_bits_);
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetDefaultCellPhoneInfoParams::SetDefaultCellPhoneInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
}
SetDefaultCellPhoneInfoParams::SetDefaultCellPhoneInfoParams(const SetDefaultCellPhoneInfoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetDefaultCellPhoneInfoParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenum_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), _this->GetArenaForAllocation());
  }
  _impl_.phonenum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.phonenum_.Set(from._internal_phonenum(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
}

inline void SetDefaultCellPhoneInfoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenum_) {}

  };
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetDefaultCellPhoneInfoParams::~SetDefaultCellPhoneInfoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetDefaultCellPhoneInfoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countrycode_.Destroy();
  _impl_.phonenum_.Destroy();
}

void SetDefaultCellPhoneInfoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetDefaultCellPhoneInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phonenum_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetDefaultCellPhoneInfoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string countryCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string phoneNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phonenum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetDefaultCellPhoneInfoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string countryCode = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_countrycode();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string phoneNum = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_phonenum();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  return target;
}

::size_t SetDefaultCellPhoneInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string countryCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_countrycode());
    }

    // optional string phoneNum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_phonenum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDefaultCellPhoneInfoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetDefaultCellPhoneInfoParams*>(
      &from));
}

void SetDefaultCellPhoneInfoParams::MergeFrom(const SetDefaultCellPhoneInfoParams& from) {
  SetDefaultCellPhoneInfoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phonenum(from._internal_phonenum());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetDefaultCellPhoneInfoParams::CopyFrom(const SetDefaultCellPhoneInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDefaultCellPhoneInfoParams::IsInitialized() const {
  return true;
}

void SetDefaultCellPhoneInfoParams::InternalSwap(SetDefaultCellPhoneInfoParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.countrycode_, lhs_arena,
                                       &other->_impl_.countrycode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phonenum_, lhs_arena,
                                       &other->_impl_.phonenum_, rhs_arena);
}

std::string SetDefaultCellPhoneInfoParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetDefaultCellPhoneInfoParams";
}

// ===================================================================

class EnableAlwaysShowMeetingControlsParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAlwaysShowMeetingControlsParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAlwaysShowMeetingControlsParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAlwaysShowMeetingControlsParams::EnableAlwaysShowMeetingControlsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
}
EnableAlwaysShowMeetingControlsParams::EnableAlwaysShowMeetingControlsParams(const EnableAlwaysShowMeetingControlsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
}

inline void EnableAlwaysShowMeetingControlsParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAlwaysShowMeetingControlsParams::~EnableAlwaysShowMeetingControlsParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAlwaysShowMeetingControlsParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAlwaysShowMeetingControlsParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAlwaysShowMeetingControlsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAlwaysShowMeetingControlsParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAlwaysShowMeetingControlsParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  return target;
}

::size_t EnableAlwaysShowMeetingControlsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAlwaysShowMeetingControlsParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAlwaysShowMeetingControlsParams*>(
      &from));
}

void EnableAlwaysShowMeetingControlsParams::MergeFrom(const EnableAlwaysShowMeetingControlsParams& from) {
  EnableAlwaysShowMeetingControlsParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAlwaysShowMeetingControlsParams::CopyFrom(const EnableAlwaysShowMeetingControlsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAlwaysShowMeetingControlsParams::IsInitialized() const {
  return true;
}

void EnableAlwaysShowMeetingControlsParams::InternalSwap(EnableAlwaysShowMeetingControlsParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAlwaysShowMeetingControlsParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams";
}

// ===================================================================

class SelectMicParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectMicParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SelectMicParams, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SelectMicParams::SelectMicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SelectMicParams)
}
SelectMicParams::SelectMicParams(const SelectMicParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelectMicParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SelectMicParams)
}

inline void SelectMicParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectMicParams::~SelectMicParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SelectMicParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectMicParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.devicename_.Destroy();
}

void SelectMicParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectMicParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SelectMicParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.devicename_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectMicParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string deviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SelectMicParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SelectMicParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string deviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_devicename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SelectMicParams)
  return target;
}

::size_t SelectMicParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SelectMicParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string deviceID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_deviceid());
    }

    // optional string deviceName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_devicename());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectMicParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectMicParams*>(
      &from));
}

void SelectMicParams::MergeFrom(const SelectMicParams& from) {
  SelectMicParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SelectMicParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_devicename(from._internal_devicename());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectMicParams::CopyFrom(const SelectMicParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SelectMicParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectMicParams::IsInitialized() const {
  return true;
}

void SelectMicParams::InternalSwap(SelectMicParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.devicename_, lhs_arena,
                                       &other->_impl_.devicename_, rhs_arena);
}

std::string SelectMicParams::GetTypeName() const {
  return "com.electron.sdk.proto.SelectMicParams";
}

// ===================================================================

class SelectSpeakerParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectSpeakerParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SelectSpeakerParams, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SelectSpeakerParams::SelectSpeakerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SelectSpeakerParams)
}
SelectSpeakerParams::SelectSpeakerParams(const SelectSpeakerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelectSpeakerParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SelectSpeakerParams)
}

inline void SelectSpeakerParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectSpeakerParams::~SelectSpeakerParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SelectSpeakerParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectSpeakerParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.devicename_.Destroy();
}

void SelectSpeakerParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectSpeakerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SelectSpeakerParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.devicename_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectSpeakerParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string deviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SelectSpeakerParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SelectSpeakerParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string deviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_devicename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SelectSpeakerParams)
  return target;
}

::size_t SelectSpeakerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SelectSpeakerParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string deviceID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_deviceid());
    }

    // optional string deviceName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_devicename());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectSpeakerParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectSpeakerParams*>(
      &from));
}

void SelectSpeakerParams::MergeFrom(const SelectSpeakerParams& from) {
  SelectSpeakerParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SelectSpeakerParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_devicename(from._internal_devicename());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectSpeakerParams::CopyFrom(const SelectSpeakerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SelectSpeakerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectSpeakerParams::IsInitialized() const {
  return true;
}

void SelectSpeakerParams::InternalSwap(SelectSpeakerParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.devicename_, lhs_arena,
                                       &other->_impl_.devicename_, rhs_arena);
}

std::string SelectSpeakerParams::GetTypeName() const {
  return "com.electron.sdk.proto.SelectSpeakerParams";
}

// ===================================================================

class EnableAutoJoinAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoJoinAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoJoinAudioParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoJoinAudioParams::EnableAutoJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoJoinAudioParams)
}
EnableAutoJoinAudioParams::EnableAutoJoinAudioParams(const EnableAutoJoinAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoJoinAudioParams)
}

inline void EnableAutoJoinAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoJoinAudioParams::~EnableAutoJoinAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoJoinAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoJoinAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoJoinAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoJoinAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoJoinAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  return target;
}

::size_t EnableAutoJoinAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoJoinAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoJoinAudioParams*>(
      &from));
}

void EnableAutoJoinAudioParams::MergeFrom(const EnableAutoJoinAudioParams& from) {
  EnableAutoJoinAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoJoinAudioParams::CopyFrom(const EnableAutoJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoJoinAudioParams::IsInitialized() const {
  return true;
}

void EnableAutoJoinAudioParams::InternalSwap(EnableAutoJoinAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoJoinAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoJoinAudioParams";
}

// ===================================================================

class EnableAutoAdjustMicParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoAdjustMicParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoAdjustMicParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoAdjustMicParams::EnableAutoAdjustMicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoAdjustMicParams)
}
EnableAutoAdjustMicParams::EnableAutoAdjustMicParams(const EnableAutoAdjustMicParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoAdjustMicParams)
}

inline void EnableAutoAdjustMicParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoAdjustMicParams::~EnableAutoAdjustMicParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoAdjustMicParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoAdjustMicParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoAdjustMicParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoAdjustMicParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoAdjustMicParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  return target;
}

::size_t EnableAutoAdjustMicParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoAdjustMicParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoAdjustMicParams*>(
      &from));
}

void EnableAutoAdjustMicParams::MergeFrom(const EnableAutoAdjustMicParams& from) {
  EnableAutoAdjustMicParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoAdjustMicParams::CopyFrom(const EnableAutoAdjustMicParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoAdjustMicParams::IsInitialized() const {
  return true;
}

void EnableAutoAdjustMicParams::InternalSwap(EnableAutoAdjustMicParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoAdjustMicParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoAdjustMicParams";
}

// ===================================================================

class EnableStereoAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableStereoAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableStereoAudioParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableStereoAudioParams::EnableStereoAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableStereoAudioParams)
}
EnableStereoAudioParams::EnableStereoAudioParams(const EnableStereoAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableStereoAudioParams)
}

inline void EnableStereoAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableStereoAudioParams::~EnableStereoAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableStereoAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableStereoAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableStereoAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableStereoAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableStereoAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableStereoAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableStereoAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableStereoAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableStereoAudioParams)
  return target;
}

::size_t EnableStereoAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableStereoAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableStereoAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableStereoAudioParams*>(
      &from));
}

void EnableStereoAudioParams::MergeFrom(const EnableStereoAudioParams& from) {
  EnableStereoAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableStereoAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableStereoAudioParams::CopyFrom(const EnableStereoAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableStereoAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableStereoAudioParams::IsInitialized() const {
  return true;
}

void EnableStereoAudioParams::InternalSwap(EnableStereoAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableStereoAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableStereoAudioParams";
}

// ===================================================================

class EnableMicOriginalInputParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableMicOriginalInputParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableMicOriginalInputParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableMicOriginalInputParams::EnableMicOriginalInputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableMicOriginalInputParams)
}
EnableMicOriginalInputParams::EnableMicOriginalInputParams(const EnableMicOriginalInputParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableMicOriginalInputParams)
}

inline void EnableMicOriginalInputParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableMicOriginalInputParams::~EnableMicOriginalInputParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableMicOriginalInputParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableMicOriginalInputParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableMicOriginalInputParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableMicOriginalInputParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableMicOriginalInputParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableMicOriginalInputParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableMicOriginalInputParams)
  return target;
}

::size_t EnableMicOriginalInputParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableMicOriginalInputParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableMicOriginalInputParams*>(
      &from));
}

void EnableMicOriginalInputParams::MergeFrom(const EnableMicOriginalInputParams& from) {
  EnableMicOriginalInputParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableMicOriginalInputParams::CopyFrom(const EnableMicOriginalInputParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMicOriginalInputParams::IsInitialized() const {
  return true;
}

void EnableMicOriginalInputParams::InternalSwap(EnableMicOriginalInputParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableMicOriginalInputParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableMicOriginalInputParams";
}

// ===================================================================

class EnableHoldSpaceKeyToSpeakParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHoldSpaceKeyToSpeakParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableHoldSpaceKeyToSpeakParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHoldSpaceKeyToSpeakParams::EnableHoldSpaceKeyToSpeakParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
}
EnableHoldSpaceKeyToSpeakParams::EnableHoldSpaceKeyToSpeakParams(const EnableHoldSpaceKeyToSpeakParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
}

inline void EnableHoldSpaceKeyToSpeakParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableHoldSpaceKeyToSpeakParams::~EnableHoldSpaceKeyToSpeakParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableHoldSpaceKeyToSpeakParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableHoldSpaceKeyToSpeakParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableHoldSpaceKeyToSpeakParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHoldSpaceKeyToSpeakParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableHoldSpaceKeyToSpeakParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  return target;
}

::size_t EnableHoldSpaceKeyToSpeakParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHoldSpaceKeyToSpeakParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableHoldSpaceKeyToSpeakParams*>(
      &from));
}

void EnableHoldSpaceKeyToSpeakParams::MergeFrom(const EnableHoldSpaceKeyToSpeakParams& from) {
  EnableHoldSpaceKeyToSpeakParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableHoldSpaceKeyToSpeakParams::CopyFrom(const EnableHoldSpaceKeyToSpeakParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHoldSpaceKeyToSpeakParams::IsInitialized() const {
  return true;
}

void EnableHoldSpaceKeyToSpeakParams::InternalSwap(EnableHoldSpaceKeyToSpeakParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableHoldSpaceKeyToSpeakParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams";
}

// ===================================================================

class EnableAlwaysMuteMicWhenJoinVoipParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAlwaysMuteMicWhenJoinVoipParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAlwaysMuteMicWhenJoinVoipParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAlwaysMuteMicWhenJoinVoipParams::EnableAlwaysMuteMicWhenJoinVoipParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
}
EnableAlwaysMuteMicWhenJoinVoipParams::EnableAlwaysMuteMicWhenJoinVoipParams(const EnableAlwaysMuteMicWhenJoinVoipParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
}

inline void EnableAlwaysMuteMicWhenJoinVoipParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAlwaysMuteMicWhenJoinVoipParams::~EnableAlwaysMuteMicWhenJoinVoipParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAlwaysMuteMicWhenJoinVoipParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAlwaysMuteMicWhenJoinVoipParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAlwaysMuteMicWhenJoinVoipParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAlwaysMuteMicWhenJoinVoipParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAlwaysMuteMicWhenJoinVoipParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  return target;
}

::size_t EnableAlwaysMuteMicWhenJoinVoipParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAlwaysMuteMicWhenJoinVoipParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAlwaysMuteMicWhenJoinVoipParams*>(
      &from));
}

void EnableAlwaysMuteMicWhenJoinVoipParams::MergeFrom(const EnableAlwaysMuteMicWhenJoinVoipParams& from) {
  EnableAlwaysMuteMicWhenJoinVoipParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAlwaysMuteMicWhenJoinVoipParams::CopyFrom(const EnableAlwaysMuteMicWhenJoinVoipParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAlwaysMuteMicWhenJoinVoipParams::IsInitialized() const {
  return true;
}

void EnableAlwaysMuteMicWhenJoinVoipParams::InternalSwap(EnableAlwaysMuteMicWhenJoinVoipParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAlwaysMuteMicWhenJoinVoipParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams";
}

// ===================================================================

class EnableSuppressAudioNotifyParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableSuppressAudioNotifyParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableSuppressAudioNotifyParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableSuppressAudioNotifyParams::EnableSuppressAudioNotifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
}
EnableSuppressAudioNotifyParams::EnableSuppressAudioNotifyParams(const EnableSuppressAudioNotifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
}

inline void EnableSuppressAudioNotifyParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableSuppressAudioNotifyParams::~EnableSuppressAudioNotifyParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableSuppressAudioNotifyParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableSuppressAudioNotifyParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableSuppressAudioNotifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableSuppressAudioNotifyParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableSuppressAudioNotifyParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  return target;
}

::size_t EnableSuppressAudioNotifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableSuppressAudioNotifyParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableSuppressAudioNotifyParams*>(
      &from));
}

void EnableSuppressAudioNotifyParams::MergeFrom(const EnableSuppressAudioNotifyParams& from) {
  EnableSuppressAudioNotifyParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableSuppressAudioNotifyParams::CopyFrom(const EnableSuppressAudioNotifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableSuppressAudioNotifyParams::IsInitialized() const {
  return true;
}

void EnableSuppressAudioNotifyParams::InternalSwap(EnableSuppressAudioNotifyParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableSuppressAudioNotifyParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableSuppressAudioNotifyParams";
}

// ===================================================================

class SetEchoCancellationLevelParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetEchoCancellationLevelParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetEchoCancellationLevelParams, _impl_._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetEchoCancellationLevelParams::SetEchoCancellationLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetEchoCancellationLevelParams)
}
SetEchoCancellationLevelParams::SetEchoCancellationLevelParams(const SetEchoCancellationLevelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetEchoCancellationLevelParams)
}

inline void SetEchoCancellationLevelParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.level_) { 0 }

  };
}

SetEchoCancellationLevelParams::~SetEchoCancellationLevelParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetEchoCancellationLevelParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetEchoCancellationLevelParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetEchoCancellationLevelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetEchoCancellationLevelParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetEchoCancellationLevelParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  return target;
}

::size_t SetEchoCancellationLevelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 level = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEchoCancellationLevelParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetEchoCancellationLevelParams*>(
      &from));
}

void SetEchoCancellationLevelParams::MergeFrom(const SetEchoCancellationLevelParams& from) {
  SetEchoCancellationLevelParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetEchoCancellationLevelParams::CopyFrom(const SetEchoCancellationLevelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEchoCancellationLevelParams::IsInitialized() const {
  return true;
}

void SetEchoCancellationLevelParams::InternalSwap(SetEchoCancellationLevelParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.level_, other->_impl_.level_);
}

std::string SetEchoCancellationLevelParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetEchoCancellationLevelParams";
}

// ===================================================================

class SetMicVolParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMicVolParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetMicVolParams, _impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetMicVolParams::SetMicVolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetMicVolParams)
}
SetMicVolParams::SetMicVolParams(const SetMicVolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetMicVolParams)
}

inline void SetMicVolParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) { 0 }

  };
}

SetMicVolParams::~SetMicVolParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetMicVolParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMicVolParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetMicVolParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetMicVolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetMicVolParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetMicVolParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetMicVolParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetMicVolParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetMicVolParams)
  return target;
}

::size_t SetMicVolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetMicVolParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMicVolParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetMicVolParams*>(
      &from));
}

void SetMicVolParams::MergeFrom(const SetMicVolParams& from) {
  SetMicVolParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetMicVolParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetMicVolParams::CopyFrom(const SetMicVolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetMicVolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMicVolParams::IsInitialized() const {
  return true;
}

void SetMicVolParams::InternalSwap(SetMicVolParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.value_, other->_impl_.value_);
}

std::string SetMicVolParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetMicVolParams";
}

// ===================================================================

class SetSpeakerVolParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSpeakerVolParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetSpeakerVolParams, _impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetSpeakerVolParams::SetSpeakerVolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetSpeakerVolParams)
}
SetSpeakerVolParams::SetSpeakerVolParams(const SetSpeakerVolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetSpeakerVolParams)
}

inline void SetSpeakerVolParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) { 0 }

  };
}

SetSpeakerVolParams::~SetSpeakerVolParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetSpeakerVolParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSpeakerVolParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSpeakerVolParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSpeakerVolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetSpeakerVolParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetSpeakerVolParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetSpeakerVolParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetSpeakerVolParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetSpeakerVolParams)
  return target;
}

::size_t SetSpeakerVolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetSpeakerVolParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpeakerVolParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetSpeakerVolParams*>(
      &from));
}

void SetSpeakerVolParams::MergeFrom(const SetSpeakerVolParams& from) {
  SetSpeakerVolParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetSpeakerVolParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetSpeakerVolParams::CopyFrom(const SetSpeakerVolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetSpeakerVolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpeakerVolParams::IsInitialized() const {
  return true;
}

void SetSpeakerVolParams::InternalSwap(SetSpeakerVolParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.value_, other->_impl_.value_);
}

std::string SetSpeakerVolParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetSpeakerVolParams";
}

// ===================================================================

class EnableDualScreenModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableDualScreenModeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableDualScreenModeParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableDualScreenModeParams::EnableDualScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableDualScreenModeParams)
}
EnableDualScreenModeParams::EnableDualScreenModeParams(const EnableDualScreenModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableDualScreenModeParams)
}

inline void EnableDualScreenModeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableDualScreenModeParams::~EnableDualScreenModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableDualScreenModeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableDualScreenModeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableDualScreenModeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableDualScreenModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableDualScreenModeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableDualScreenModeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableDualScreenModeParams)
  return target;
}

::size_t EnableDualScreenModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableDualScreenModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableDualScreenModeParams*>(
      &from));
}

void EnableDualScreenModeParams::MergeFrom(const EnableDualScreenModeParams& from) {
  EnableDualScreenModeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableDualScreenModeParams::CopyFrom(const EnableDualScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableDualScreenModeParams::IsInitialized() const {
  return true;
}

void EnableDualScreenModeParams::InternalSwap(EnableDualScreenModeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableDualScreenModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableDualScreenModeParams";
}

// ===================================================================

class TurnOffAeroModeInSharingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TurnOffAeroModeInSharingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TurnOffAeroModeInSharingParams, _impl_._has_bits_);
  static void set_has_bturnoff(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TurnOffAeroModeInSharingParams::TurnOffAeroModeInSharingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
}
TurnOffAeroModeInSharingParams::TurnOffAeroModeInSharingParams(const TurnOffAeroModeInSharingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
}

inline void TurnOffAeroModeInSharingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bturnoff_) { false }

  };
}

TurnOffAeroModeInSharingParams::~TurnOffAeroModeInSharingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TurnOffAeroModeInSharingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TurnOffAeroModeInSharingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TurnOffAeroModeInSharingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bturnoff_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TurnOffAeroModeInSharingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bTurnOff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bturnoff(&has_bits);
          _impl_.bturnoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TurnOffAeroModeInSharingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bTurnOff = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bturnoff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  return target;
}

::size_t TurnOffAeroModeInSharingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bTurnOff = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurnOffAeroModeInSharingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TurnOffAeroModeInSharingParams*>(
      &from));
}

void TurnOffAeroModeInSharingParams::MergeFrom(const TurnOffAeroModeInSharingParams& from) {
  TurnOffAeroModeInSharingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bturnoff(from._internal_bturnoff());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TurnOffAeroModeInSharingParams::CopyFrom(const TurnOffAeroModeInSharingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnOffAeroModeInSharingParams::IsInitialized() const {
  return true;
}

void TurnOffAeroModeInSharingParams::InternalSwap(TurnOffAeroModeInSharingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bturnoff_, other->_impl_.bturnoff_);
}

std::string TurnOffAeroModeInSharingParams::GetTypeName() const {
  return "com.electron.sdk.proto.TurnOffAeroModeInSharingParams";
}

// ===================================================================

class EnableAutoFitToWindowWhenViewSharingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoFitToWindowWhenViewSharingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoFitToWindowWhenViewSharingParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoFitToWindowWhenViewSharingParams::EnableAutoFitToWindowWhenViewSharingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
}
EnableAutoFitToWindowWhenViewSharingParams::EnableAutoFitToWindowWhenViewSharingParams(const EnableAutoFitToWindowWhenViewSharingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
}

inline void EnableAutoFitToWindowWhenViewSharingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoFitToWindowWhenViewSharingParams::~EnableAutoFitToWindowWhenViewSharingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoFitToWindowWhenViewSharingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoFitToWindowWhenViewSharingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoFitToWindowWhenViewSharingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoFitToWindowWhenViewSharingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoFitToWindowWhenViewSharingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  return target;
}

::size_t EnableAutoFitToWindowWhenViewSharingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoFitToWindowWhenViewSharingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoFitToWindowWhenViewSharingParams*>(
      &from));
}

void EnableAutoFitToWindowWhenViewSharingParams::MergeFrom(const EnableAutoFitToWindowWhenViewSharingParams& from) {
  EnableAutoFitToWindowWhenViewSharingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoFitToWindowWhenViewSharingParams::CopyFrom(const EnableAutoFitToWindowWhenViewSharingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoFitToWindowWhenViewSharingParams::IsInitialized() const {
  return true;
}

void EnableAutoFitToWindowWhenViewSharingParams::InternalSwap(EnableAutoFitToWindowWhenViewSharingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoFitToWindowWhenViewSharingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams";
}

// ===================================================================

class EnableAutoFullScreenVideoWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoFullScreenVideoWhenJoinMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoFullScreenVideoWhenJoinMeetingParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoFullScreenVideoWhenJoinMeetingParams::EnableAutoFullScreenVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
}
EnableAutoFullScreenVideoWhenJoinMeetingParams::EnableAutoFullScreenVideoWhenJoinMeetingParams(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
}

inline void EnableAutoFullScreenVideoWhenJoinMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoFullScreenVideoWhenJoinMeetingParams::~EnableAutoFullScreenVideoWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoFullScreenVideoWhenJoinMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoFullScreenVideoWhenJoinMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoFullScreenVideoWhenJoinMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  return target;
}

::size_t EnableAutoFullScreenVideoWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoFullScreenVideoWhenJoinMeetingParams*>(
      &from));
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::MergeFrom(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from) {
  EnableAutoFullScreenVideoWhenJoinMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::CopyFrom(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoFullScreenVideoWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::InternalSwap(EnableAutoFullScreenVideoWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoFullScreenVideoWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams";
}

// ===================================================================

class EnableSplitScreenModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableSplitScreenModeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableSplitScreenModeParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableSplitScreenModeParams::EnableSplitScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableSplitScreenModeParams)
}
EnableSplitScreenModeParams::EnableSplitScreenModeParams(const EnableSplitScreenModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableSplitScreenModeParams)
}

inline void EnableSplitScreenModeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableSplitScreenModeParams::~EnableSplitScreenModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableSplitScreenModeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableSplitScreenModeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableSplitScreenModeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableSplitScreenModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableSplitScreenModeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableSplitScreenModeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableSplitScreenModeParams)
  return target;
}

::size_t EnableSplitScreenModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableSplitScreenModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableSplitScreenModeParams*>(
      &from));
}

void EnableSplitScreenModeParams::MergeFrom(const EnableSplitScreenModeParams& from) {
  EnableSplitScreenModeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableSplitScreenModeParams::CopyFrom(const EnableSplitScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableSplitScreenModeParams::IsInitialized() const {
  return true;
}

void EnableSplitScreenModeParams::InternalSwap(EnableSplitScreenModeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableSplitScreenModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableSplitScreenModeParams";
}

// ===================================================================

class EnableAutoFullScreenVideoWhenViewShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoFullScreenVideoWhenViewShareParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoFullScreenVideoWhenViewShareParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoFullScreenVideoWhenViewShareParams::EnableAutoFullScreenVideoWhenViewShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
}
EnableAutoFullScreenVideoWhenViewShareParams::EnableAutoFullScreenVideoWhenViewShareParams(const EnableAutoFullScreenVideoWhenViewShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
}

inline void EnableAutoFullScreenVideoWhenViewShareParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoFullScreenVideoWhenViewShareParams::~EnableAutoFullScreenVideoWhenViewShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoFullScreenVideoWhenViewShareParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoFullScreenVideoWhenViewShareParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoFullScreenVideoWhenViewShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoFullScreenVideoWhenViewShareParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoFullScreenVideoWhenViewShareParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  return target;
}

::size_t EnableAutoFullScreenVideoWhenViewShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoFullScreenVideoWhenViewShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoFullScreenVideoWhenViewShareParams*>(
      &from));
}

void EnableAutoFullScreenVideoWhenViewShareParams::MergeFrom(const EnableAutoFullScreenVideoWhenViewShareParams& from) {
  EnableAutoFullScreenVideoWhenViewShareParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoFullScreenVideoWhenViewShareParams::CopyFrom(const EnableAutoFullScreenVideoWhenViewShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoFullScreenVideoWhenViewShareParams::IsInitialized() const {
  return true;
}

void EnableAutoFullScreenVideoWhenViewShareParams::InternalSwap(EnableAutoFullScreenVideoWhenViewShareParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoFullScreenVideoWhenViewShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams";
}

// ===================================================================

class EnableDisplayReminderWindowWhenExitParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableDisplayReminderWindowWhenExitParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableDisplayReminderWindowWhenExitParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableDisplayReminderWindowWhenExitParams::EnableDisplayReminderWindowWhenExitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
}
EnableDisplayReminderWindowWhenExitParams::EnableDisplayReminderWindowWhenExitParams(const EnableDisplayReminderWindowWhenExitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
}

inline void EnableDisplayReminderWindowWhenExitParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableDisplayReminderWindowWhenExitParams::~EnableDisplayReminderWindowWhenExitParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableDisplayReminderWindowWhenExitParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableDisplayReminderWindowWhenExitParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableDisplayReminderWindowWhenExitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableDisplayReminderWindowWhenExitParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableDisplayReminderWindowWhenExitParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  return target;
}

::size_t EnableDisplayReminderWindowWhenExitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableDisplayReminderWindowWhenExitParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableDisplayReminderWindowWhenExitParams*>(
      &from));
}

void EnableDisplayReminderWindowWhenExitParams::MergeFrom(const EnableDisplayReminderWindowWhenExitParams& from) {
  EnableDisplayReminderWindowWhenExitParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableDisplayReminderWindowWhenExitParams::CopyFrom(const EnableDisplayReminderWindowWhenExitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableDisplayReminderWindowWhenExitParams::IsInitialized() const {
  return true;
}

void EnableDisplayReminderWindowWhenExitParams::InternalSwap(EnableDisplayReminderWindowWhenExitParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableDisplayReminderWindowWhenExitParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams";
}

// ===================================================================

class EnableShowMyMeetingElapseTimeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShowMyMeetingElapseTimeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableShowMyMeetingElapseTimeParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShowMyMeetingElapseTimeParams::EnableShowMyMeetingElapseTimeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
}
EnableShowMyMeetingElapseTimeParams::EnableShowMyMeetingElapseTimeParams(const EnableShowMyMeetingElapseTimeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
}

inline void EnableShowMyMeetingElapseTimeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableShowMyMeetingElapseTimeParams::~EnableShowMyMeetingElapseTimeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableShowMyMeetingElapseTimeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableShowMyMeetingElapseTimeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableShowMyMeetingElapseTimeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShowMyMeetingElapseTimeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableShowMyMeetingElapseTimeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  return target;
}

::size_t EnableShowMyMeetingElapseTimeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShowMyMeetingElapseTimeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableShowMyMeetingElapseTimeParams*>(
      &from));
}

void EnableShowMyMeetingElapseTimeParams::MergeFrom(const EnableShowMyMeetingElapseTimeParams& from) {
  EnableShowMyMeetingElapseTimeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableShowMyMeetingElapseTimeParams::CopyFrom(const EnableShowMyMeetingElapseTimeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShowMyMeetingElapseTimeParams::IsInitialized() const {
  return true;
}

void EnableShowMyMeetingElapseTimeParams::InternalSwap(EnableShowMyMeetingElapseTimeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableShowMyMeetingElapseTimeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams";
}

// ===================================================================

class EnableAccelerateGPUWhenShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAccelerateGPUWhenShareParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAccelerateGPUWhenShareParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAccelerateGPUWhenShareParams::EnableAccelerateGPUWhenShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
}
EnableAccelerateGPUWhenShareParams::EnableAccelerateGPUWhenShareParams(const EnableAccelerateGPUWhenShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
}

inline void EnableAccelerateGPUWhenShareParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAccelerateGPUWhenShareParams::~EnableAccelerateGPUWhenShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAccelerateGPUWhenShareParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAccelerateGPUWhenShareParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAccelerateGPUWhenShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAccelerateGPUWhenShareParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAccelerateGPUWhenShareParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  return target;
}

::size_t EnableAccelerateGPUWhenShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAccelerateGPUWhenShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAccelerateGPUWhenShareParams*>(
      &from));
}

void EnableAccelerateGPUWhenShareParams::MergeFrom(const EnableAccelerateGPUWhenShareParams& from) {
  EnableAccelerateGPUWhenShareParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAccelerateGPUWhenShareParams::CopyFrom(const EnableAccelerateGPUWhenShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAccelerateGPUWhenShareParams::IsInitialized() const {
  return true;
}

void EnableAccelerateGPUWhenShareParams::InternalSwap(EnableAccelerateGPUWhenShareParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAccelerateGPUWhenShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams";
}

// ===================================================================

class EnableRemoteControlAllApplicationsParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableRemoteControlAllApplicationsParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableRemoteControlAllApplicationsParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableRemoteControlAllApplicationsParams::EnableRemoteControlAllApplicationsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
}
EnableRemoteControlAllApplicationsParams::EnableRemoteControlAllApplicationsParams(const EnableRemoteControlAllApplicationsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
}

inline void EnableRemoteControlAllApplicationsParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableRemoteControlAllApplicationsParams::~EnableRemoteControlAllApplicationsParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableRemoteControlAllApplicationsParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableRemoteControlAllApplicationsParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableRemoteControlAllApplicationsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableRemoteControlAllApplicationsParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableRemoteControlAllApplicationsParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  return target;
}

::size_t EnableRemoteControlAllApplicationsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableRemoteControlAllApplicationsParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableRemoteControlAllApplicationsParams*>(
      &from));
}

void EnableRemoteControlAllApplicationsParams::MergeFrom(const EnableRemoteControlAllApplicationsParams& from) {
  EnableRemoteControlAllApplicationsParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableRemoteControlAllApplicationsParams::CopyFrom(const EnableRemoteControlAllApplicationsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableRemoteControlAllApplicationsParams::IsInitialized() const {
  return true;
}

void EnableRemoteControlAllApplicationsParams::InternalSwap(EnableRemoteControlAllApplicationsParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableRemoteControlAllApplicationsParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams";
}

// ===================================================================

class SetRecordingPathParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRecordingPathParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRecordingPathParams, _impl_._has_bits_);
  static void set_has_recpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetRecordingPathParams::SetRecordingPathParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetRecordingPathParams)
}
SetRecordingPathParams::SetRecordingPathParams(const SetRecordingPathParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetRecordingPathParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recpath_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.recpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recpath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.recpath_.Set(from._internal_recpath(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetRecordingPathParams)
}

inline void SetRecordingPathParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recpath_) {}

  };
  _impl_.recpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recpath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetRecordingPathParams::~SetRecordingPathParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetRecordingPathParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRecordingPathParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recpath_.Destroy();
}

void SetRecordingPathParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRecordingPathParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetRecordingPathParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.recpath_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetRecordingPathParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string recPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetRecordingPathParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetRecordingPathParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string recPath = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_recpath();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetRecordingPathParams)
  return target;
}

::size_t SetRecordingPathParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetRecordingPathParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string recPath = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recpath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRecordingPathParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetRecordingPathParams*>(
      &from));
}

void SetRecordingPathParams::MergeFrom(const SetRecordingPathParams& from) {
  SetRecordingPathParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetRecordingPathParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_recpath(from._internal_recpath());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetRecordingPathParams::CopyFrom(const SetRecordingPathParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetRecordingPathParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRecordingPathParams::IsInitialized() const {
  return true;
}

void SetRecordingPathParams::InternalSwap(SetRecordingPathParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recpath_, lhs_arena,
                                       &other->_impl_.recpath_, rhs_arena);
}

std::string SetRecordingPathParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetRecordingPathParams";
}

// ===================================================================

class EnableSelectRecordFileLocationAfterMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableSelectRecordFileLocationAfterMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableSelectRecordFileLocationAfterMeetingParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableSelectRecordFileLocationAfterMeetingParams::EnableSelectRecordFileLocationAfterMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
}
EnableSelectRecordFileLocationAfterMeetingParams::EnableSelectRecordFileLocationAfterMeetingParams(const EnableSelectRecordFileLocationAfterMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
}

inline void EnableSelectRecordFileLocationAfterMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableSelectRecordFileLocationAfterMeetingParams::~EnableSelectRecordFileLocationAfterMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableSelectRecordFileLocationAfterMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableSelectRecordFileLocationAfterMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableSelectRecordFileLocationAfterMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableSelectRecordFileLocationAfterMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableSelectRecordFileLocationAfterMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  return target;
}

::size_t EnableSelectRecordFileLocationAfterMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableSelectRecordFileLocationAfterMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableSelectRecordFileLocationAfterMeetingParams*>(
      &from));
}

void EnableSelectRecordFileLocationAfterMeetingParams::MergeFrom(const EnableSelectRecordFileLocationAfterMeetingParams& from) {
  EnableSelectRecordFileLocationAfterMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableSelectRecordFileLocationAfterMeetingParams::CopyFrom(const EnableSelectRecordFileLocationAfterMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableSelectRecordFileLocationAfterMeetingParams::IsInitialized() const {
  return true;
}

void EnableSelectRecordFileLocationAfterMeetingParams::InternalSwap(EnableSelectRecordFileLocationAfterMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableSelectRecordFileLocationAfterMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams";
}

// ===================================================================

class EnableMultiAudioStreamRecordParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableMultiAudioStreamRecordParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableMultiAudioStreamRecordParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableMultiAudioStreamRecordParams::EnableMultiAudioStreamRecordParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
}
EnableMultiAudioStreamRecordParams::EnableMultiAudioStreamRecordParams(const EnableMultiAudioStreamRecordParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
}

inline void EnableMultiAudioStreamRecordParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableMultiAudioStreamRecordParams::~EnableMultiAudioStreamRecordParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableMultiAudioStreamRecordParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableMultiAudioStreamRecordParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableMultiAudioStreamRecordParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableMultiAudioStreamRecordParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableMultiAudioStreamRecordParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  return target;
}

::size_t EnableMultiAudioStreamRecordParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableMultiAudioStreamRecordParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableMultiAudioStreamRecordParams*>(
      &from));
}

void EnableMultiAudioStreamRecordParams::MergeFrom(const EnableMultiAudioStreamRecordParams& from) {
  EnableMultiAudioStreamRecordParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableMultiAudioStreamRecordParams::CopyFrom(const EnableMultiAudioStreamRecordParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMultiAudioStreamRecordParams::IsInitialized() const {
  return true;
}

void EnableMultiAudioStreamRecordParams::InternalSwap(EnableMultiAudioStreamRecordParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableMultiAudioStreamRecordParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableMultiAudioStreamRecordParams";
}

// ===================================================================

class EnableAddTimestampWatermarkParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAddTimestampWatermarkParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAddTimestampWatermarkParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAddTimestampWatermarkParams::EnableAddTimestampWatermarkParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
}
EnableAddTimestampWatermarkParams::EnableAddTimestampWatermarkParams(const EnableAddTimestampWatermarkParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
}

inline void EnableAddTimestampWatermarkParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAddTimestampWatermarkParams::~EnableAddTimestampWatermarkParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAddTimestampWatermarkParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAddTimestampWatermarkParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAddTimestampWatermarkParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAddTimestampWatermarkParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAddTimestampWatermarkParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  return target;
}

::size_t EnableAddTimestampWatermarkParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAddTimestampWatermarkParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAddTimestampWatermarkParams*>(
      &from));
}

void EnableAddTimestampWatermarkParams::MergeFrom(const EnableAddTimestampWatermarkParams& from) {
  EnableAddTimestampWatermarkParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAddTimestampWatermarkParams::CopyFrom(const EnableAddTimestampWatermarkParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAddTimestampWatermarkParams::IsInitialized() const {
  return true;
}

void EnableAddTimestampWatermarkParams::InternalSwap(EnableAddTimestampWatermarkParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAddTimestampWatermarkParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAddTimestampWatermarkParams";
}

// ===================================================================

class EnableOptimizeFor3rdPartyVideoEditorParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableOptimizeFor3rdPartyVideoEditorParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableOptimizeFor3rdPartyVideoEditorParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableOptimizeFor3rdPartyVideoEditorParams::EnableOptimizeFor3rdPartyVideoEditorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
}
EnableOptimizeFor3rdPartyVideoEditorParams::EnableOptimizeFor3rdPartyVideoEditorParams(const EnableOptimizeFor3rdPartyVideoEditorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
}

inline void EnableOptimizeFor3rdPartyVideoEditorParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableOptimizeFor3rdPartyVideoEditorParams::~EnableOptimizeFor3rdPartyVideoEditorParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableOptimizeFor3rdPartyVideoEditorParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableOptimizeFor3rdPartyVideoEditorParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableOptimizeFor3rdPartyVideoEditorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableOptimizeFor3rdPartyVideoEditorParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableOptimizeFor3rdPartyVideoEditorParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  return target;
}

::size_t EnableOptimizeFor3rdPartyVideoEditorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableOptimizeFor3rdPartyVideoEditorParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableOptimizeFor3rdPartyVideoEditorParams*>(
      &from));
}

void EnableOptimizeFor3rdPartyVideoEditorParams::MergeFrom(const EnableOptimizeFor3rdPartyVideoEditorParams& from) {
  EnableOptimizeFor3rdPartyVideoEditorParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableOptimizeFor3rdPartyVideoEditorParams::CopyFrom(const EnableOptimizeFor3rdPartyVideoEditorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableOptimizeFor3rdPartyVideoEditorParams::IsInitialized() const {
  return true;
}

void EnableOptimizeFor3rdPartyVideoEditorParams::InternalSwap(EnableOptimizeFor3rdPartyVideoEditorParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableOptimizeFor3rdPartyVideoEditorParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams";
}

// ===================================================================

class EnableShowVideoThumbnailWhenShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShowVideoThumbnailWhenShareParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableShowVideoThumbnailWhenShareParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShowVideoThumbnailWhenShareParams::EnableShowVideoThumbnailWhenShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
}
EnableShowVideoThumbnailWhenShareParams::EnableShowVideoThumbnailWhenShareParams(const EnableShowVideoThumbnailWhenShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
}

inline void EnableShowVideoThumbnailWhenShareParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableShowVideoThumbnailWhenShareParams::~EnableShowVideoThumbnailWhenShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableShowVideoThumbnailWhenShareParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableShowVideoThumbnailWhenShareParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableShowVideoThumbnailWhenShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShowVideoThumbnailWhenShareParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableShowVideoThumbnailWhenShareParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  return target;
}

::size_t EnableShowVideoThumbnailWhenShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShowVideoThumbnailWhenShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableShowVideoThumbnailWhenShareParams*>(
      &from));
}

void EnableShowVideoThumbnailWhenShareParams::MergeFrom(const EnableShowVideoThumbnailWhenShareParams& from) {
  EnableShowVideoThumbnailWhenShareParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableShowVideoThumbnailWhenShareParams::CopyFrom(const EnableShowVideoThumbnailWhenShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShowVideoThumbnailWhenShareParams::IsInitialized() const {
  return true;
}

void EnableShowVideoThumbnailWhenShareParams::InternalSwap(EnableShowVideoThumbnailWhenShareParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableShowVideoThumbnailWhenShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams";
}

// ===================================================================

class EnablePlaceVideoNextToShareInRecordParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnablePlaceVideoNextToShareInRecordParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnablePlaceVideoNextToShareInRecordParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnablePlaceVideoNextToShareInRecordParams::EnablePlaceVideoNextToShareInRecordParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
}
EnablePlaceVideoNextToShareInRecordParams::EnablePlaceVideoNextToShareInRecordParams(const EnablePlaceVideoNextToShareInRecordParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
}

inline void EnablePlaceVideoNextToShareInRecordParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnablePlaceVideoNextToShareInRecordParams::~EnablePlaceVideoNextToShareInRecordParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnablePlaceVideoNextToShareInRecordParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnablePlaceVideoNextToShareInRecordParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnablePlaceVideoNextToShareInRecordParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnablePlaceVideoNextToShareInRecordParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnablePlaceVideoNextToShareInRecordParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  return target;
}

::size_t EnablePlaceVideoNextToShareInRecordParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnablePlaceVideoNextToShareInRecordParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnablePlaceVideoNextToShareInRecordParams*>(
      &from));
}

void EnablePlaceVideoNextToShareInRecordParams::MergeFrom(const EnablePlaceVideoNextToShareInRecordParams& from) {
  EnablePlaceVideoNextToShareInRecordParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnablePlaceVideoNextToShareInRecordParams::CopyFrom(const EnablePlaceVideoNextToShareInRecordParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnablePlaceVideoNextToShareInRecordParams::IsInitialized() const {
  return true;
}

void EnablePlaceVideoNextToShareInRecordParams::InternalSwap(EnablePlaceVideoNextToShareInRecordParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnablePlaceVideoNextToShareInRecordParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams";
}

// ===================================================================

class DisableAdvancedFeatures4GeneralSettingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableAdvancedFeatures4GeneralSettingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableAdvancedFeatures4GeneralSettingParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableAdvancedFeatures4GeneralSettingParams::DisableAdvancedFeatures4GeneralSettingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
}
DisableAdvancedFeatures4GeneralSettingParams::DisableAdvancedFeatures4GeneralSettingParams(const DisableAdvancedFeatures4GeneralSettingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
}

inline void DisableAdvancedFeatures4GeneralSettingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableAdvancedFeatures4GeneralSettingParams::~DisableAdvancedFeatures4GeneralSettingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableAdvancedFeatures4GeneralSettingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableAdvancedFeatures4GeneralSettingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableAdvancedFeatures4GeneralSettingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableAdvancedFeatures4GeneralSettingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableAdvancedFeatures4GeneralSettingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  return target;
}

::size_t DisableAdvancedFeatures4GeneralSettingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableAdvancedFeatures4GeneralSettingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableAdvancedFeatures4GeneralSettingParams*>(
      &from));
}

void DisableAdvancedFeatures4GeneralSettingParams::MergeFrom(const DisableAdvancedFeatures4GeneralSettingParams& from) {
  DisableAdvancedFeatures4GeneralSettingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableAdvancedFeatures4GeneralSettingParams::CopyFrom(const DisableAdvancedFeatures4GeneralSettingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableAdvancedFeatures4GeneralSettingParams::IsInitialized() const {
  return true;
}

void DisableAdvancedFeatures4GeneralSettingParams::InternalSwap(DisableAdvancedFeatures4GeneralSettingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableAdvancedFeatures4GeneralSettingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams";
}

// ===================================================================

class DisableAccountSettingTabPageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableAccountSettingTabPageParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableAccountSettingTabPageParams, _impl_._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableAccountSettingTabPageParams::DisableAccountSettingTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
}
DisableAccountSettingTabPageParams::DisableAccountSettingTabPageParams(const DisableAccountSettingTabPageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
}

inline void DisableAccountSettingTabPageParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdisable_) { false }

  };
}

DisableAccountSettingTabPageParams::~DisableAccountSettingTabPageParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableAccountSettingTabPageParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisableAccountSettingTabPageParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableAccountSettingTabPageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdisable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableAccountSettingTabPageParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          _impl_.bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableAccountSettingTabPageParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  return target;
}

::size_t DisableAccountSettingTabPageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableAccountSettingTabPageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableAccountSettingTabPageParams*>(
      &from));
}

void DisableAccountSettingTabPageParams::MergeFrom(const DisableAccountSettingTabPageParams& from) {
  DisableAccountSettingTabPageParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdisable(from._internal_bdisable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableAccountSettingTabPageParams::CopyFrom(const DisableAccountSettingTabPageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableAccountSettingTabPageParams::IsInitialized() const {
  return true;
}

void DisableAccountSettingTabPageParams::InternalSwap(DisableAccountSettingTabPageParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdisable_, other->_impl_.bdisable_);
}

std::string DisableAccountSettingTabPageParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableAccountSettingTabPageParams";
}

// ===================================================================

class HideAutoCopyInviteLinkCheckBoxParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideAutoCopyInviteLinkCheckBoxParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HideAutoCopyInviteLinkCheckBoxParams, _impl_._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideAutoCopyInviteLinkCheckBoxParams::HideAutoCopyInviteLinkCheckBoxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
}
HideAutoCopyInviteLinkCheckBoxParams::HideAutoCopyInviteLinkCheckBoxParams(const HideAutoCopyInviteLinkCheckBoxParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
}

inline void HideAutoCopyInviteLinkCheckBoxParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bhide_) { false }

  };
}

HideAutoCopyInviteLinkCheckBoxParams::~HideAutoCopyInviteLinkCheckBoxParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HideAutoCopyInviteLinkCheckBoxParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HideAutoCopyInviteLinkCheckBoxParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HideAutoCopyInviteLinkCheckBoxParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bhide_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideAutoCopyInviteLinkCheckBoxParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          _impl_.bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HideAutoCopyInviteLinkCheckBoxParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  return target;
}

::size_t HideAutoCopyInviteLinkCheckBoxParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideAutoCopyInviteLinkCheckBoxParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HideAutoCopyInviteLinkCheckBoxParams*>(
      &from));
}

void HideAutoCopyInviteLinkCheckBoxParams::MergeFrom(const HideAutoCopyInviteLinkCheckBoxParams& from) {
  HideAutoCopyInviteLinkCheckBoxParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bhide(from._internal_bhide());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HideAutoCopyInviteLinkCheckBoxParams::CopyFrom(const HideAutoCopyInviteLinkCheckBoxParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAutoCopyInviteLinkCheckBoxParams::IsInitialized() const {
  return true;
}

void HideAutoCopyInviteLinkCheckBoxParams::InternalSwap(HideAutoCopyInviteLinkCheckBoxParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bhide_, other->_impl_.bhide_);
}

std::string HideAutoCopyInviteLinkCheckBoxParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams";
}

// ===================================================================

class ConfigToShowUrlLinksInSettingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigToShowUrlLinksInSettingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConfigToShowUrlLinksInSettingParams, _impl_._has_bits_);
  static void set_has_showoption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConfigToShowUrlLinksInSettingParams::ConfigToShowUrlLinksInSettingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
}
ConfigToShowUrlLinksInSettingParams::ConfigToShowUrlLinksInSettingParams(const ConfigToShowUrlLinksInSettingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
}

inline void ConfigToShowUrlLinksInSettingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showoption_) { ::uint64_t{0u} }

  };
}

ConfigToShowUrlLinksInSettingParams::~ConfigToShowUrlLinksInSettingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigToShowUrlLinksInSettingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigToShowUrlLinksInSettingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigToShowUrlLinksInSettingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.showoption_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ConfigToShowUrlLinksInSettingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 showOption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_showoption(&has_bits);
          _impl_.showoption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConfigToShowUrlLinksInSettingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 showOption = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_showoption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  return target;
}

::size_t ConfigToShowUrlLinksInSettingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 showOption = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_showoption());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigToShowUrlLinksInSettingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ConfigToShowUrlLinksInSettingParams*>(
      &from));
}

void ConfigToShowUrlLinksInSettingParams::MergeFrom(const ConfigToShowUrlLinksInSettingParams& from) {
  ConfigToShowUrlLinksInSettingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_showoption(from._internal_showoption());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ConfigToShowUrlLinksInSettingParams::CopyFrom(const ConfigToShowUrlLinksInSettingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigToShowUrlLinksInSettingParams::IsInitialized() const {
  return true;
}

void ConfigToShowUrlLinksInSettingParams::InternalSwap(ConfigToShowUrlLinksInSettingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.showoption_, other->_impl_.showoption_);
}

std::string ConfigToShowUrlLinksInSettingParams::GetTypeName() const {
  return "com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams";
}

// ===================================================================

class ConfSettingDialogShownTabPageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfSettingDialogShownTabPageParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConfSettingDialogShownTabPageParams, _impl_._has_bits_);
  static void set_has_showoption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConfSettingDialogShownTabPageParams::ConfSettingDialogShownTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
}
ConfSettingDialogShownTabPageParams::ConfSettingDialogShownTabPageParams(const ConfSettingDialogShownTabPageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
}

inline void ConfSettingDialogShownTabPageParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showoption_) { ::uint64_t{0u} }

  };
}

ConfSettingDialogShownTabPageParams::~ConfSettingDialogShownTabPageParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfSettingDialogShownTabPageParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfSettingDialogShownTabPageParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfSettingDialogShownTabPageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.showoption_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ConfSettingDialogShownTabPageParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 showOption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_showoption(&has_bits);
          _impl_.showoption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConfSettingDialogShownTabPageParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 showOption = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_showoption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  return target;
}

::size_t ConfSettingDialogShownTabPageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 showOption = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_showoption());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfSettingDialogShownTabPageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ConfSettingDialogShownTabPageParams*>(
      &from));
}

void ConfSettingDialogShownTabPageParams::MergeFrom(const ConfSettingDialogShownTabPageParams& from) {
  ConfSettingDialogShownTabPageParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_showoption(from._internal_showoption());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ConfSettingDialogShownTabPageParams::CopyFrom(const ConfSettingDialogShownTabPageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfSettingDialogShownTabPageParams::IsInitialized() const {
  return true;
}

void ConfSettingDialogShownTabPageParams::InternalSwap(ConfSettingDialogShownTabPageParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.showoption_, other->_impl_.showoption_);
}

std::string ConfSettingDialogShownTabPageParams::GetTypeName() const {
  return "com.electron.sdk.proto.ConfSettingDialogShownTabPageParams";
}

// ===================================================================

class SelectVideoCameraParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectVideoCameraParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SelectVideoCameraParams, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SelectVideoCameraParams::SelectVideoCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SelectVideoCameraParams)
}
SelectVideoCameraParams::SelectVideoCameraParams(const SelectVideoCameraParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelectVideoCameraParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SelectVideoCameraParams)
}

inline void SelectVideoCameraParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectVideoCameraParams::~SelectVideoCameraParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SelectVideoCameraParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectVideoCameraParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
}

void SelectVideoCameraParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectVideoCameraParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SelectVideoCameraParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.deviceid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectVideoCameraParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SelectVideoCameraParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SelectVideoCameraParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SelectVideoCameraParams)
  return target;
}

::size_t SelectVideoCameraParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SelectVideoCameraParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string deviceID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectVideoCameraParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectVideoCameraParams*>(
      &from));
}

void SelectVideoCameraParams::MergeFrom(const SelectVideoCameraParams& from) {
  SelectVideoCameraParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SelectVideoCameraParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectVideoCameraParams::CopyFrom(const SelectVideoCameraParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SelectVideoCameraParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectVideoCameraParams::IsInitialized() const {
  return true;
}

void SelectVideoCameraParams::InternalSwap(SelectVideoCameraParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
}

std::string SelectVideoCameraParams::GetTypeName() const {
  return "com.electron.sdk.proto.SelectVideoCameraParams";
}

// ===================================================================

class EnableVideoMirrorEffectParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableVideoMirrorEffectParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableVideoMirrorEffectParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableVideoMirrorEffectParams::EnableVideoMirrorEffectParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
}
EnableVideoMirrorEffectParams::EnableVideoMirrorEffectParams(const EnableVideoMirrorEffectParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
}

inline void EnableVideoMirrorEffectParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableVideoMirrorEffectParams::~EnableVideoMirrorEffectParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableVideoMirrorEffectParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableVideoMirrorEffectParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableVideoMirrorEffectParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableVideoMirrorEffectParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableVideoMirrorEffectParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  return target;
}

::size_t EnableVideoMirrorEffectParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableVideoMirrorEffectParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableVideoMirrorEffectParams*>(
      &from));
}

void EnableVideoMirrorEffectParams::MergeFrom(const EnableVideoMirrorEffectParams& from) {
  EnableVideoMirrorEffectParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableVideoMirrorEffectParams::CopyFrom(const EnableVideoMirrorEffectParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableVideoMirrorEffectParams::IsInitialized() const {
  return true;
}

void EnableVideoMirrorEffectParams::InternalSwap(EnableVideoMirrorEffectParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableVideoMirrorEffectParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableVideoMirrorEffectParams";
}

// ===================================================================

class EnableFaceBeautyEffectParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableFaceBeautyEffectParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableFaceBeautyEffectParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableFaceBeautyEffectParams::EnableFaceBeautyEffectParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
}
EnableFaceBeautyEffectParams::EnableFaceBeautyEffectParams(const EnableFaceBeautyEffectParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
}

inline void EnableFaceBeautyEffectParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableFaceBeautyEffectParams::~EnableFaceBeautyEffectParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableFaceBeautyEffectParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableFaceBeautyEffectParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableFaceBeautyEffectParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableFaceBeautyEffectParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableFaceBeautyEffectParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  return target;
}

::size_t EnableFaceBeautyEffectParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableFaceBeautyEffectParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableFaceBeautyEffectParams*>(
      &from));
}

void EnableFaceBeautyEffectParams::MergeFrom(const EnableFaceBeautyEffectParams& from) {
  EnableFaceBeautyEffectParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableFaceBeautyEffectParams::CopyFrom(const EnableFaceBeautyEffectParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableFaceBeautyEffectParams::IsInitialized() const {
  return true;
}

void EnableFaceBeautyEffectParams::InternalSwap(EnableFaceBeautyEffectParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableFaceBeautyEffectParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableFaceBeautyEffectParams";
}

// ===================================================================

class EnableHDVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHDVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableHDVideoParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHDVideoParams::EnableHDVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHDVideoParams)
}
EnableHDVideoParams::EnableHDVideoParams(const EnableHDVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHDVideoParams)
}

inline void EnableHDVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableHDVideoParams::~EnableHDVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHDVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableHDVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableHDVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableHDVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHDVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHDVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableHDVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHDVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHDVideoParams)
  return target;
}

::size_t EnableHDVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHDVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHDVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableHDVideoParams*>(
      &from));
}

void EnableHDVideoParams::MergeFrom(const EnableHDVideoParams& from) {
  EnableHDVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHDVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableHDVideoParams::CopyFrom(const EnableHDVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHDVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHDVideoParams::IsInitialized() const {
  return true;
}

void EnableHDVideoParams::InternalSwap(EnableHDVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableHDVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHDVideoParams";
}

// ===================================================================

class EnableAlwaysShowNameOnVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAlwaysShowNameOnVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAlwaysShowNameOnVideoParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAlwaysShowNameOnVideoParams::EnableAlwaysShowNameOnVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
}
EnableAlwaysShowNameOnVideoParams::EnableAlwaysShowNameOnVideoParams(const EnableAlwaysShowNameOnVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
}

inline void EnableAlwaysShowNameOnVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAlwaysShowNameOnVideoParams::~EnableAlwaysShowNameOnVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAlwaysShowNameOnVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAlwaysShowNameOnVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAlwaysShowNameOnVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAlwaysShowNameOnVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAlwaysShowNameOnVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  return target;
}

::size_t EnableAlwaysShowNameOnVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAlwaysShowNameOnVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAlwaysShowNameOnVideoParams*>(
      &from));
}

void EnableAlwaysShowNameOnVideoParams::MergeFrom(const EnableAlwaysShowNameOnVideoParams& from) {
  EnableAlwaysShowNameOnVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAlwaysShowNameOnVideoParams::CopyFrom(const EnableAlwaysShowNameOnVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAlwaysShowNameOnVideoParams::IsInitialized() const {
  return true;
}

void EnableAlwaysShowNameOnVideoParams::InternalSwap(EnableAlwaysShowNameOnVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAlwaysShowNameOnVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams";
}

// ===================================================================

class EnableVideoPreviewDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableVideoPreviewDialogParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableVideoPreviewDialogParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableVideoPreviewDialogParams::EnableVideoPreviewDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
}
EnableVideoPreviewDialogParams::EnableVideoPreviewDialogParams(const EnableVideoPreviewDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
}

inline void EnableVideoPreviewDialogParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableVideoPreviewDialogParams::~EnableVideoPreviewDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableVideoPreviewDialogParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableVideoPreviewDialogParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableVideoPreviewDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableVideoPreviewDialogParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableVideoPreviewDialogParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  return target;
}

::size_t EnableVideoPreviewDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableVideoPreviewDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableVideoPreviewDialogParams*>(
      &from));
}

void EnableVideoPreviewDialogParams::MergeFrom(const EnableVideoPreviewDialogParams& from) {
  EnableVideoPreviewDialogParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableVideoPreviewDialogParams::CopyFrom(const EnableVideoPreviewDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableVideoPreviewDialogParams::IsInitialized() const {
  return true;
}

void EnableVideoPreviewDialogParams::InternalSwap(EnableVideoPreviewDialogParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableVideoPreviewDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableVideoPreviewDialogParams";
}

// ===================================================================

class EnableAutoTurnOffVideoWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoTurnOffVideoWhenJoinMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAutoTurnOffVideoWhenJoinMeetingParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoTurnOffVideoWhenJoinMeetingParams::EnableAutoTurnOffVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
}
EnableAutoTurnOffVideoWhenJoinMeetingParams::EnableAutoTurnOffVideoWhenJoinMeetingParams(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
}

inline void EnableAutoTurnOffVideoWhenJoinMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAutoTurnOffVideoWhenJoinMeetingParams::~EnableAutoTurnOffVideoWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAutoTurnOffVideoWhenJoinMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoTurnOffVideoWhenJoinMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAutoTurnOffVideoWhenJoinMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  return target;
}

::size_t EnableAutoTurnOffVideoWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAutoTurnOffVideoWhenJoinMeetingParams*>(
      &from));
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::MergeFrom(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from) {
  EnableAutoTurnOffVideoWhenJoinMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::CopyFrom(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoTurnOffVideoWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::InternalSwap(EnableAutoTurnOffVideoWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAutoTurnOffVideoWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams";
}

// ===================================================================

class EnableSpotlightSelfParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableSpotlightSelfParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableSpotlightSelfParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableSpotlightSelfParams::EnableSpotlightSelfParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableSpotlightSelfParams)
}
EnableSpotlightSelfParams::EnableSpotlightSelfParams(const EnableSpotlightSelfParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableSpotlightSelfParams)
}

inline void EnableSpotlightSelfParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableSpotlightSelfParams::~EnableSpotlightSelfParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableSpotlightSelfParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableSpotlightSelfParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableSpotlightSelfParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableSpotlightSelfParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableSpotlightSelfParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableSpotlightSelfParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableSpotlightSelfParams)
  return target;
}

::size_t EnableSpotlightSelfParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableSpotlightSelfParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableSpotlightSelfParams*>(
      &from));
}

void EnableSpotlightSelfParams::MergeFrom(const EnableSpotlightSelfParams& from) {
  EnableSpotlightSelfParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableSpotlightSelfParams::CopyFrom(const EnableSpotlightSelfParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableSpotlightSelfParams::IsInitialized() const {
  return true;
}

void EnableSpotlightSelfParams::InternalSwap(EnableSpotlightSelfParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableSpotlightSelfParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableSpotlightSelfParams";
}

// ===================================================================

class EnableHardwareEncodeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHardwareEncodeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableHardwareEncodeParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encodetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EnableHardwareEncodeParams::EnableHardwareEncodeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHardwareEncodeParams)
}
EnableHardwareEncodeParams::EnableHardwareEncodeParams(const EnableHardwareEncodeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHardwareEncodeParams)
}

inline void EnableHardwareEncodeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

    , decltype(_impl_.encodetype_) { 0 }

  };
}

EnableHardwareEncodeParams::~EnableHardwareEncodeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHardwareEncodeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableHardwareEncodeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableHardwareEncodeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableHardwareEncodeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.benable_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.encodetype_) -
        reinterpret_cast<char*>(&_impl_.benable_)) + sizeof(_impl_.encodetype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHardwareEncodeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 encodeType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_encodetype(&has_bits);
          _impl_.encodetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableHardwareEncodeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  // optional int32 encodeType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_encodetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHardwareEncodeParams)
  return target;
}

::size_t EnableHardwareEncodeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bEnable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional int32 encodeType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_encodetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHardwareEncodeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableHardwareEncodeParams*>(
      &from));
}

void EnableHardwareEncodeParams::MergeFrom(const EnableHardwareEncodeParams& from) {
  EnableHardwareEncodeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.benable_ = from._impl_.benable_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.encodetype_ = from._impl_.encodetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableHardwareEncodeParams::CopyFrom(const EnableHardwareEncodeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHardwareEncodeParams::IsInitialized() const {
  return true;
}

void EnableHardwareEncodeParams::InternalSwap(EnableHardwareEncodeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnableHardwareEncodeParams, _impl_.encodetype_)
      + sizeof(EnableHardwareEncodeParams::_impl_.encodetype_)
      - PROTOBUF_FIELD_OFFSET(EnableHardwareEncodeParams, _impl_.benable_)>(
          reinterpret_cast<char*>(&_impl_.benable_),
          reinterpret_cast<char*>(&other->_impl_.benable_));
}

std::string EnableHardwareEncodeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHardwareEncodeParams";
}

// ===================================================================

class IsHardwareEncodeEnabledParams::_Internal {
 public:
  using HasBits = decltype(std::declval<IsHardwareEncodeEnabledParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IsHardwareEncodeEnabledParams, _impl_._has_bits_);
  static void set_has_encodetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IsHardwareEncodeEnabledParams::IsHardwareEncodeEnabledParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
}
IsHardwareEncodeEnabledParams::IsHardwareEncodeEnabledParams(const IsHardwareEncodeEnabledParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
}

inline void IsHardwareEncodeEnabledParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encodetype_) { 0 }

  };
}

IsHardwareEncodeEnabledParams::~IsHardwareEncodeEnabledParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsHardwareEncodeEnabledParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsHardwareEncodeEnabledParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsHardwareEncodeEnabledParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encodetype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IsHardwareEncodeEnabledParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 encodeType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_encodetype(&has_bits);
          _impl_.encodetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IsHardwareEncodeEnabledParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 encodeType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_encodetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  return target;
}

::size_t IsHardwareEncodeEnabledParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 encodeType = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_encodetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsHardwareEncodeEnabledParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IsHardwareEncodeEnabledParams*>(
      &from));
}

void IsHardwareEncodeEnabledParams::MergeFrom(const IsHardwareEncodeEnabledParams& from) {
  IsHardwareEncodeEnabledParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_encodetype(from._internal_encodetype());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IsHardwareEncodeEnabledParams::CopyFrom(const IsHardwareEncodeEnabledParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsHardwareEncodeEnabledParams::IsInitialized() const {
  return true;
}

void IsHardwareEncodeEnabledParams::InternalSwap(IsHardwareEncodeEnabledParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.encodetype_, other->_impl_.encodetype_);
}

std::string IsHardwareEncodeEnabledParams::GetTypeName() const {
  return "com.electron.sdk.proto.IsHardwareEncodeEnabledParams";
}

// ===================================================================

class Enable49VideoesInGallaryViewParams::_Internal {
 public:
  using HasBits = decltype(std::declval<Enable49VideoesInGallaryViewParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Enable49VideoesInGallaryViewParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Enable49VideoesInGallaryViewParams::Enable49VideoesInGallaryViewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
}
Enable49VideoesInGallaryViewParams::Enable49VideoesInGallaryViewParams(const Enable49VideoesInGallaryViewParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
}

inline void Enable49VideoesInGallaryViewParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

Enable49VideoesInGallaryViewParams::~Enable49VideoesInGallaryViewParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Enable49VideoesInGallaryViewParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Enable49VideoesInGallaryViewParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Enable49VideoesInGallaryViewParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Enable49VideoesInGallaryViewParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Enable49VideoesInGallaryViewParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  return target;
}

::size_t Enable49VideoesInGallaryViewParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Enable49VideoesInGallaryViewParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Enable49VideoesInGallaryViewParams*>(
      &from));
}

void Enable49VideoesInGallaryViewParams::MergeFrom(const Enable49VideoesInGallaryViewParams& from) {
  Enable49VideoesInGallaryViewParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Enable49VideoesInGallaryViewParams::CopyFrom(const Enable49VideoesInGallaryViewParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enable49VideoesInGallaryViewParams::IsInitialized() const {
  return true;
}

void Enable49VideoesInGallaryViewParams::InternalSwap(Enable49VideoesInGallaryViewParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string Enable49VideoesInGallaryViewParams::GetTypeName() const {
  return "com.electron.sdk.proto.Enable49VideoesInGallaryViewParams";
}

// ===================================================================

class EnableHideNoVideoUsersOnWallViewParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHideNoVideoUsersOnWallViewParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableHideNoVideoUsersOnWallViewParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHideNoVideoUsersOnWallViewParams::EnableHideNoVideoUsersOnWallViewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
}
EnableHideNoVideoUsersOnWallViewParams::EnableHideNoVideoUsersOnWallViewParams(const EnableHideNoVideoUsersOnWallViewParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
}

inline void EnableHideNoVideoUsersOnWallViewParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableHideNoVideoUsersOnWallViewParams::~EnableHideNoVideoUsersOnWallViewParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableHideNoVideoUsersOnWallViewParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableHideNoVideoUsersOnWallViewParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableHideNoVideoUsersOnWallViewParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHideNoVideoUsersOnWallViewParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableHideNoVideoUsersOnWallViewParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  return target;
}

::size_t EnableHideNoVideoUsersOnWallViewParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHideNoVideoUsersOnWallViewParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableHideNoVideoUsersOnWallViewParams*>(
      &from));
}

void EnableHideNoVideoUsersOnWallViewParams::MergeFrom(const EnableHideNoVideoUsersOnWallViewParams& from) {
  EnableHideNoVideoUsersOnWallViewParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableHideNoVideoUsersOnWallViewParams::CopyFrom(const EnableHideNoVideoUsersOnWallViewParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHideNoVideoUsersOnWallViewParams::IsInitialized() const {
  return true;
}

void EnableHideNoVideoUsersOnWallViewParams::InternalSwap(EnableHideNoVideoUsersOnWallViewParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableHideNoVideoUsersOnWallViewParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams";
}

// ===================================================================

class GenerateSSOLoginWebURLParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GenerateSSOLoginWebURLParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenerateSSOLoginWebURLParams, _impl_._has_bits_);
  static void set_has_prefixofvanityurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GenerateSSOLoginWebURLParams::GenerateSSOLoginWebURLParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
}
GenerateSSOLoginWebURLParams::GenerateSSOLoginWebURLParams(const GenerateSSOLoginWebURLParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GenerateSSOLoginWebURLParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prefixofvanityurl_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.prefixofvanityurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prefixofvanityurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.prefixofvanityurl_.Set(from._internal_prefixofvanityurl(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
}

inline void GenerateSSOLoginWebURLParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prefixofvanityurl_) {}

  };
  _impl_.prefixofvanityurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prefixofvanityurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateSSOLoginWebURLParams::~GenerateSSOLoginWebURLParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateSSOLoginWebURLParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prefixofvanityurl_.Destroy();
}

void GenerateSSOLoginWebURLParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateSSOLoginWebURLParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.prefixofvanityurl_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GenerateSSOLoginWebURLParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string prefixOfVanityUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefixofvanityurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenerateSSOLoginWebURLParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string prefixOfVanityUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_prefixofvanityurl();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  return target;
}

::size_t GenerateSSOLoginWebURLParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string prefixOfVanityUrl = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_prefixofvanityurl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateSSOLoginWebURLParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenerateSSOLoginWebURLParams*>(
      &from));
}

void GenerateSSOLoginWebURLParams::MergeFrom(const GenerateSSOLoginWebURLParams& from) {
  GenerateSSOLoginWebURLParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_prefixofvanityurl(from._internal_prefixofvanityurl());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenerateSSOLoginWebURLParams::CopyFrom(const GenerateSSOLoginWebURLParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateSSOLoginWebURLParams::IsInitialized() const {
  return true;
}

void GenerateSSOLoginWebURLParams::InternalSwap(GenerateSSOLoginWebURLParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prefixofvanityurl_, lhs_arena,
                                       &other->_impl_.prefixofvanityurl_, rhs_arena);
}

std::string GenerateSSOLoginWebURLParams::GetTypeName() const {
  return "com.electron.sdk.proto.GenerateSSOLoginWebURLParams";
}

// ===================================================================

class SSOLoginWithWebUriProtocolParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SSOLoginWithWebUriProtocolParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SSOLoginWithWebUriProtocolParams, _impl_._has_bits_);
  static void set_has_uriprotocol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SSOLoginWithWebUriProtocolParams::SSOLoginWithWebUriProtocolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
}
SSOLoginWithWebUriProtocolParams::SSOLoginWithWebUriProtocolParams(const SSOLoginWithWebUriProtocolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SSOLoginWithWebUriProtocolParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uriprotocol_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.uriprotocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uriprotocol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.uriprotocol_.Set(from._internal_uriprotocol(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
}

inline void SSOLoginWithWebUriProtocolParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uriprotocol_) {}

  };
  _impl_.uriprotocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uriprotocol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSOLoginWithWebUriProtocolParams::~SSOLoginWithWebUriProtocolParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSOLoginWithWebUriProtocolParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uriprotocol_.Destroy();
}

void SSOLoginWithWebUriProtocolParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSOLoginWithWebUriProtocolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uriprotocol_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SSOLoginWithWebUriProtocolParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string uriProtocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uriprotocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SSOLoginWithWebUriProtocolParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string uriProtocol = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_uriprotocol();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  return target;
}

::size_t SSOLoginWithWebUriProtocolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string uriProtocol = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_uriprotocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSOLoginWithWebUriProtocolParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SSOLoginWithWebUriProtocolParams*>(
      &from));
}

void SSOLoginWithWebUriProtocolParams::MergeFrom(const SSOLoginWithWebUriProtocolParams& from) {
  SSOLoginWithWebUriProtocolParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_uriprotocol(from._internal_uriprotocol());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SSOLoginWithWebUriProtocolParams::CopyFrom(const SSOLoginWithWebUriProtocolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSOLoginWithWebUriProtocolParams::IsInitialized() const {
  return true;
}

void SSOLoginWithWebUriProtocolParams::InternalSwap(SSOLoginWithWebUriProtocolParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uriprotocol_, lhs_arena,
                                       &other->_impl_.uriprotocol_, rhs_arena);
}

std::string SSOLoginWithWebUriProtocolParams::GetTypeName() const {
  return "com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams";
}

// ===================================================================

class ShowAANPanelParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowAANPanelParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShowAANPanelParams, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_windowid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ShowAANPanelParams::ShowAANPanelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowAANPanelParams)
}
ShowAANPanelParams::ShowAANPanelParams(const ShowAANPanelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowAANPanelParams)
}

inline void ShowAANPanelParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_) { 0u }

    , decltype(_impl_.y_) { 0u }

    , decltype(_impl_.windowid_) { ::uint64_t{0u} }

  };
}

ShowAANPanelParams::~ShowAANPanelParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowAANPanelParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowAANPanelParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShowAANPanelParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowAANPanelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowAANPanelParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.windowid_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.windowid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowAANPanelParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 WindowID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_windowid(&has_bits);
          _impl_.windowid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShowAANPanelParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowAANPanelParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_y(), target);
  }

  // optional uint64 WindowID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_windowid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowAANPanelParams)
  return target;
}

::size_t ShowAANPanelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowAANPanelParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_y());
    }

    // optional uint64 WindowID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_windowid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowAANPanelParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShowAANPanelParams*>(
      &from));
}

void ShowAANPanelParams::MergeFrom(const ShowAANPanelParams& from) {
  ShowAANPanelParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowAANPanelParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.windowid_ = from._impl_.windowid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShowAANPanelParams::CopyFrom(const ShowAANPanelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowAANPanelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowAANPanelParams::IsInitialized() const {
  return true;
}

void ShowAANPanelParams::InternalSwap(ShowAANPanelParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowAANPanelParams, _impl_.windowid_)
      + sizeof(ShowAANPanelParams::_impl_.windowid_)
      - PROTOBUF_FIELD_OFFSET(ShowAANPanelParams, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string ShowAANPanelParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowAANPanelParams";
}

// ===================================================================

class EnableInviteLinkOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableInviteLinkOnMeetingUIParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableInviteLinkOnMeetingUIParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableInviteLinkOnMeetingUIParams::EnableInviteLinkOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
}
EnableInviteLinkOnMeetingUIParams::EnableInviteLinkOnMeetingUIParams(const EnableInviteLinkOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
}

inline void EnableInviteLinkOnMeetingUIParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableInviteLinkOnMeetingUIParams::~EnableInviteLinkOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableInviteLinkOnMeetingUIParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableInviteLinkOnMeetingUIParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableInviteLinkOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableInviteLinkOnMeetingUIParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableInviteLinkOnMeetingUIParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  return target;
}

::size_t EnableInviteLinkOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableInviteLinkOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableInviteLinkOnMeetingUIParams*>(
      &from));
}

void EnableInviteLinkOnMeetingUIParams::MergeFrom(const EnableInviteLinkOnMeetingUIParams& from) {
  EnableInviteLinkOnMeetingUIParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableInviteLinkOnMeetingUIParams::CopyFrom(const EnableInviteLinkOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableInviteLinkOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableInviteLinkOnMeetingUIParams::InternalSwap(EnableInviteLinkOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableInviteLinkOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams";
}

// ===================================================================

class SetMeetingTopicParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMeetingTopicParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetMeetingTopicParams, _impl_._has_bits_);
  static void set_has_meetingtopic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetMeetingTopicParams::SetMeetingTopicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetMeetingTopicParams)
}
SetMeetingTopicParams::SetMeetingTopicParams(const SetMeetingTopicParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetMeetingTopicParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meetingtopic_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.meetingtopic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.meetingtopic_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.meetingtopic_.Set(from._internal_meetingtopic(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetMeetingTopicParams)
}

inline void SetMeetingTopicParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meetingtopic_) {}

  };
  _impl_.meetingtopic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.meetingtopic_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetMeetingTopicParams::~SetMeetingTopicParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetMeetingTopicParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMeetingTopicParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.meetingtopic_.Destroy();
}

void SetMeetingTopicParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetMeetingTopicParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetMeetingTopicParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.meetingtopic_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetMeetingTopicParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string meetingTopic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_meetingtopic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetMeetingTopicParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetMeetingTopicParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string meetingTopic = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_meetingtopic();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetMeetingTopicParams)
  return target;
}

::size_t SetMeetingTopicParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetMeetingTopicParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string meetingTopic = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_meetingtopic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMeetingTopicParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetMeetingTopicParams*>(
      &from));
}

void SetMeetingTopicParams::MergeFrom(const SetMeetingTopicParams& from) {
  SetMeetingTopicParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetMeetingTopicParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_meetingtopic(from._internal_meetingtopic());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetMeetingTopicParams::CopyFrom(const SetMeetingTopicParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetMeetingTopicParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMeetingTopicParams::IsInitialized() const {
  return true;
}

void SetMeetingTopicParams::InternalSwap(SetMeetingTopicParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.meetingtopic_, lhs_arena,
                                       &other->_impl_.meetingtopic_, rhs_arena);
}

std::string SetMeetingTopicParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetMeetingTopicParams";
}

// ===================================================================

class SetCustomizedCloudRecordingMgrUrlParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetCustomizedCloudRecordingMgrUrlParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetCustomizedCloudRecordingMgrUrlParams, _impl_._has_bits_);
  static void set_has_crmurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetCustomizedCloudRecordingMgrUrlParams::SetCustomizedCloudRecordingMgrUrlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
}
SetCustomizedCloudRecordingMgrUrlParams::SetCustomizedCloudRecordingMgrUrlParams(const SetCustomizedCloudRecordingMgrUrlParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetCustomizedCloudRecordingMgrUrlParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crmurl_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.crmurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.crmurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.crmurl_.Set(from._internal_crmurl(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
}

inline void SetCustomizedCloudRecordingMgrUrlParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crmurl_) {}

  };
  _impl_.crmurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.crmurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetCustomizedCloudRecordingMgrUrlParams::~SetCustomizedCloudRecordingMgrUrlParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCustomizedCloudRecordingMgrUrlParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crmurl_.Destroy();
}

void SetCustomizedCloudRecordingMgrUrlParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetCustomizedCloudRecordingMgrUrlParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.crmurl_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetCustomizedCloudRecordingMgrUrlParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string crmURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_crmurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetCustomizedCloudRecordingMgrUrlParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string crmURL = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_crmurl();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
  return target;
}

::size_t SetCustomizedCloudRecordingMgrUrlParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string crmURL = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_crmurl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCustomizedCloudRecordingMgrUrlParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetCustomizedCloudRecordingMgrUrlParams*>(
      &from));
}

void SetCustomizedCloudRecordingMgrUrlParams::MergeFrom(const SetCustomizedCloudRecordingMgrUrlParams& from) {
  SetCustomizedCloudRecordingMgrUrlParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_crmurl(from._internal_crmurl());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetCustomizedCloudRecordingMgrUrlParams::CopyFrom(const SetCustomizedCloudRecordingMgrUrlParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCustomizedCloudRecordingMgrUrlParams::IsInitialized() const {
  return true;
}

void SetCustomizedCloudRecordingMgrUrlParams::InternalSwap(SetCustomizedCloudRecordingMgrUrlParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.crmurl_, lhs_arena,
                                       &other->_impl_.crmurl_, rhs_arena);
}

std::string SetCustomizedCloudRecordingMgrUrlParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams";
}

// ===================================================================

class SetCustomizedInvitationDomainParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetCustomizedInvitationDomainParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetCustomizedInvitationDomainParams, _impl_._has_bits_);
  static void set_has_invitation_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetCustomizedInvitationDomainParams::SetCustomizedInvitationDomainParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
}
SetCustomizedInvitationDomainParams::SetCustomizedInvitationDomainParams(const SetCustomizedInvitationDomainParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetCustomizedInvitationDomainParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invitation_domain_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.invitation_domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.invitation_domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.invitation_domain_.Set(from._internal_invitation_domain(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
}

inline void SetCustomizedInvitationDomainParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invitation_domain_) {}

  };
  _impl_.invitation_domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.invitation_domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetCustomizedInvitationDomainParams::~SetCustomizedInvitationDomainParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCustomizedInvitationDomainParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.invitation_domain_.Destroy();
}

void SetCustomizedInvitationDomainParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetCustomizedInvitationDomainParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.invitation_domain_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetCustomizedInvitationDomainParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string invitation_domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_invitation_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetCustomizedInvitationDomainParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string invitation_domain = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_invitation_domain();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
  return target;
}

::size_t SetCustomizedInvitationDomainParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_domain = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_invitation_domain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCustomizedInvitationDomainParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetCustomizedInvitationDomainParams*>(
      &from));
}

void SetCustomizedInvitationDomainParams::MergeFrom(const SetCustomizedInvitationDomainParams& from) {
  SetCustomizedInvitationDomainParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_invitation_domain(from._internal_invitation_domain());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetCustomizedInvitationDomainParams::CopyFrom(const SetCustomizedInvitationDomainParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCustomizedInvitationDomainParams::IsInitialized() const {
  return true;
}

void SetCustomizedInvitationDomainParams::InternalSwap(SetCustomizedInvitationDomainParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.invitation_domain_, lhs_arena,
                                       &other->_impl_.invitation_domain_, rhs_arena);
}

std::string SetCustomizedInvitationDomainParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetCustomizedInvitationDomainParams";
}

// ===================================================================

class SetCustomizedPollingUrlParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetCustomizedPollingUrlParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetCustomizedPollingUrlParams, _impl_._has_bits_);
  static void set_has_pollingurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bcreate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetCustomizedPollingUrlParams::SetCustomizedPollingUrlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
}
SetCustomizedPollingUrlParams::SetCustomizedPollingUrlParams(const SetCustomizedPollingUrlParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetCustomizedPollingUrlParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pollingurl_) {}

    , decltype(_impl_.bcreate_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.pollingurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pollingurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pollingurl_.Set(from._internal_pollingurl(), _this->GetArenaForAllocation());
  }
  _this->_impl_.bcreate_ = from._impl_.bcreate_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
}

inline void SetCustomizedPollingUrlParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pollingurl_) {}

    , decltype(_impl_.bcreate_) { false }

  };
  _impl_.pollingurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pollingurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetCustomizedPollingUrlParams::~SetCustomizedPollingUrlParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCustomizedPollingUrlParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pollingurl_.Destroy();
}

void SetCustomizedPollingUrlParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetCustomizedPollingUrlParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pollingurl_.ClearNonDefaultToEmpty();
  }
  _impl_.bcreate_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetCustomizedPollingUrlParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pollingURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pollingurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bCreate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bcreate(&has_bits);
          _impl_.bcreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetCustomizedPollingUrlParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string pollingURL = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_pollingurl();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool bCreate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_bcreate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
  return target;
}

::size_t SetCustomizedPollingUrlParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pollingURL = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_pollingurl());
    }

    // optional bool bCreate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCustomizedPollingUrlParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetCustomizedPollingUrlParams*>(
      &from));
}

void SetCustomizedPollingUrlParams::MergeFrom(const SetCustomizedPollingUrlParams& from) {
  SetCustomizedPollingUrlParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pollingurl(from._internal_pollingurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bcreate_ = from._impl_.bcreate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetCustomizedPollingUrlParams::CopyFrom(const SetCustomizedPollingUrlParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCustomizedPollingUrlParams::IsInitialized() const {
  return true;
}

void SetCustomizedPollingUrlParams::InternalSwap(SetCustomizedPollingUrlParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pollingurl_, lhs_arena,
                                       &other->_impl_.pollingurl_, rhs_arena);

  swap(_impl_.bcreate_, other->_impl_.bcreate_);
}

std::string SetCustomizedPollingUrlParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetCustomizedPollingUrlParams";
}

// ===================================================================

class SetAudioShareModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetAudioShareModeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetAudioShareModeParams, _impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetAudioShareModeParams::SetAudioShareModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetAudioShareModeParams)
}
SetAudioShareModeParams::SetAudioShareModeParams(const SetAudioShareModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetAudioShareModeParams)
}

inline void SetAudioShareModeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_) { 0 }

  };
}

SetAudioShareModeParams::~SetAudioShareModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetAudioShareModeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetAudioShareModeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetAudioShareModeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetAudioShareModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetAudioShareModeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetAudioShareModeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_mode(&has_bits);
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetAudioShareModeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetAudioShareModeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetAudioShareModeParams)
  return target;
}

::size_t SetAudioShareModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetAudioShareModeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAudioShareModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetAudioShareModeParams*>(
      &from));
}

void SetAudioShareModeParams::MergeFrom(const SetAudioShareModeParams& from) {
  SetAudioShareModeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetAudioShareModeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetAudioShareModeParams::CopyFrom(const SetAudioShareModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetAudioShareModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAudioShareModeParams::IsInitialized() const {
  return true;
}

void SetAudioShareModeParams::InternalSwap(SetAudioShareModeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.mode_, other->_impl_.mode_);
}

std::string SetAudioShareModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetAudioShareModeParams";
}

// ===================================================================

class StartLiveStreamParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartLiveStreamParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartLiveStreamParams, _impl_._has_bits_);
  static void set_has_livestreamhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartLiveStreamParams::StartLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartLiveStreamParams)
}
StartLiveStreamParams::StartLiveStreamParams(const StartLiveStreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartLiveStreamParams)
}

inline void StartLiveStreamParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.livestreamhandle_) { ::int64_t{0} }

  };
}

StartLiveStreamParams::~StartLiveStreamParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartLiveStreamParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartLiveStreamParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartLiveStreamParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartLiveStreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.livestreamhandle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartLiveStreamParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 liveStreamHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_livestreamhandle(&has_bits);
          _impl_.livestreamhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartLiveStreamParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 liveStreamHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_livestreamhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartLiveStreamParams)
  return target;
}

::size_t StartLiveStreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartLiveStreamParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 liveStreamHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_livestreamhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartLiveStreamParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartLiveStreamParams*>(
      &from));
}

void StartLiveStreamParams::MergeFrom(const StartLiveStreamParams& from) {
  StartLiveStreamParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartLiveStreamParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_livestreamhandle(from._internal_livestreamhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartLiveStreamParams::CopyFrom(const StartLiveStreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartLiveStreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartLiveStreamParams::IsInitialized() const {
  return true;
}

void StartLiveStreamParams::InternalSwap(StartLiveStreamParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.livestreamhandle_, other->_impl_.livestreamhandle_);
}

std::string StartLiveStreamParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartLiveStreamParams";
}

// ===================================================================

class StartLiveStreamWithSteamingURLParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartLiveStreamWithSteamingURLParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartLiveStreamWithSteamingURLParams, _impl_._has_bits_);
  static void set_has_streamingurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_streamingkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcasturl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StartLiveStreamWithSteamingURLParams::StartLiveStreamWithSteamingURLParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
}
StartLiveStreamWithSteamingURLParams::StartLiveStreamWithSteamingURLParams(const StartLiveStreamWithSteamingURLParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartLiveStreamWithSteamingURLParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.streamingurl_) {}

    , decltype(_impl_.streamingkey_) {}

    , decltype(_impl_.broadcasturl_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.streamingurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.streamingurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.streamingurl_.Set(from._internal_streamingurl(), _this->GetArenaForAllocation());
  }
  _impl_.streamingkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.streamingkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.streamingkey_.Set(from._internal_streamingkey(), _this->GetArenaForAllocation());
  }
  _impl_.broadcasturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.broadcasturl_.Set(from._internal_broadcasturl(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
}

inline void StartLiveStreamWithSteamingURLParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.streamingurl_) {}

    , decltype(_impl_.streamingkey_) {}

    , decltype(_impl_.broadcasturl_) {}

  };
  _impl_.streamingurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.streamingurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.streamingkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.streamingkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcasturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartLiveStreamWithSteamingURLParams::~StartLiveStreamWithSteamingURLParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartLiveStreamWithSteamingURLParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.streamingurl_.Destroy();
  _impl_.streamingkey_.Destroy();
  _impl_.broadcasturl_.Destroy();
}

void StartLiveStreamWithSteamingURLParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartLiveStreamWithSteamingURLParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.streamingurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.streamingkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.broadcasturl_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartLiveStreamWithSteamingURLParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string streamingURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_streamingurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string streamingKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_streamingkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string broadcastURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_broadcasturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartLiveStreamWithSteamingURLParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string streamingURL = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_streamingurl();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string streamingKey = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_streamingkey();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string broadcastURL = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_broadcasturl();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
  return target;
}

::size_t StartLiveStreamWithSteamingURLParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string streamingURL = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_streamingurl());
    }

    // optional string streamingKey = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_streamingkey());
    }

    // optional string broadcastURL = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_broadcasturl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartLiveStreamWithSteamingURLParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartLiveStreamWithSteamingURLParams*>(
      &from));
}

void StartLiveStreamWithSteamingURLParams::MergeFrom(const StartLiveStreamWithSteamingURLParams& from) {
  StartLiveStreamWithSteamingURLParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_streamingurl(from._internal_streamingurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_streamingkey(from._internal_streamingkey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_broadcasturl(from._internal_broadcasturl());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartLiveStreamWithSteamingURLParams::CopyFrom(const StartLiveStreamWithSteamingURLParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartLiveStreamWithSteamingURLParams::IsInitialized() const {
  return true;
}

void StartLiveStreamWithSteamingURLParams::InternalSwap(StartLiveStreamWithSteamingURLParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.streamingurl_, lhs_arena,
                                       &other->_impl_.streamingurl_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.streamingkey_, lhs_arena,
                                       &other->_impl_.streamingkey_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.broadcasturl_, lhs_arena,
                                       &other->_impl_.broadcasturl_, rhs_arena);
}

std::string StartLiveStreamWithSteamingURLParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams";
}

// ===================================================================

class StartRawLiveStreamParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartRawLiveStreamParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartRawLiveStreamParams, _impl_._has_bits_);
  static void set_has_broadcasturl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartRawLiveStreamParams::StartRawLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartRawLiveStreamParams)
}
StartRawLiveStreamParams::StartRawLiveStreamParams(const StartRawLiveStreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartRawLiveStreamParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcasturl_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.broadcasturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.broadcasturl_.Set(from._internal_broadcasturl(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartRawLiveStreamParams)
}

inline void StartRawLiveStreamParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcasturl_) {}

  };
  _impl_.broadcasturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartRawLiveStreamParams::~StartRawLiveStreamParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartRawLiveStreamParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartRawLiveStreamParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.broadcasturl_.Destroy();
}

void StartRawLiveStreamParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartRawLiveStreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartRawLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.broadcasturl_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartRawLiveStreamParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string broadcastURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_broadcasturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartRawLiveStreamParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartRawLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string broadcastURL = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_broadcasturl();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartRawLiveStreamParams)
  return target;
}

::size_t StartRawLiveStreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartRawLiveStreamParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string broadcastURL = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_broadcasturl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRawLiveStreamParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartRawLiveStreamParams*>(
      &from));
}

void StartRawLiveStreamParams::MergeFrom(const StartRawLiveStreamParams& from) {
  StartRawLiveStreamParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartRawLiveStreamParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_broadcasturl(from._internal_broadcasturl());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartRawLiveStreamParams::CopyFrom(const StartRawLiveStreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartRawLiveStreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRawLiveStreamParams::IsInitialized() const {
  return true;
}

void StartRawLiveStreamParams::InternalSwap(StartRawLiveStreamParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.broadcasturl_, lhs_arena,
                                       &other->_impl_.broadcasturl_, rhs_arena);
}

std::string StartRawLiveStreamParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartRawLiveStreamParams";
}

// ===================================================================

class GetLiveStreamItemInfoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetLiveStreamItemInfoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetLiveStreamItemInfoParams, _impl_._has_bits_);
  static void set_has_livestreamhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetLiveStreamItemInfoParams::GetLiveStreamItemInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
}
GetLiveStreamItemInfoParams::GetLiveStreamItemInfoParams(const GetLiveStreamItemInfoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
}

inline void GetLiveStreamItemInfoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.livestreamhandle_) { ::int64_t{0} }

  };
}

GetLiveStreamItemInfoParams::~GetLiveStreamItemInfoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLiveStreamItemInfoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLiveStreamItemInfoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLiveStreamItemInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.livestreamhandle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetLiveStreamItemInfoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 liveStreamHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_livestreamhandle(&has_bits);
          _impl_.livestreamhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetLiveStreamItemInfoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 liveStreamHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_livestreamhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
  return target;
}

::size_t GetLiveStreamItemInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 liveStreamHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_livestreamhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLiveStreamItemInfoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetLiveStreamItemInfoParams*>(
      &from));
}

void GetLiveStreamItemInfoParams::MergeFrom(const GetLiveStreamItemInfoParams& from) {
  GetLiveStreamItemInfoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_livestreamhandle(from._internal_livestreamhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetLiveStreamItemInfoParams::CopyFrom(const GetLiveStreamItemInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveStreamItemInfoParams::IsInitialized() const {
  return true;
}

void GetLiveStreamItemInfoParams::InternalSwap(GetLiveStreamItemInfoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.livestreamhandle_, other->_impl_.livestreamhandle_);
}

std::string GetLiveStreamItemInfoParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetLiveStreamItemInfoParams";
}

// ===================================================================

class RequestRawLiveStreamParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestRawLiveStreamParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RequestRawLiveStreamParams, _impl_._has_bits_);
  static void set_has_broadcasturl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestRawLiveStreamParams::RequestRawLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RequestRawLiveStreamParams)
}
RequestRawLiveStreamParams::RequestRawLiveStreamParams(const RequestRawLiveStreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RequestRawLiveStreamParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcasturl_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.broadcasturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.broadcasturl_.Set(from._internal_broadcasturl(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RequestRawLiveStreamParams)
}

inline void RequestRawLiveStreamParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcasturl_) {}

  };
  _impl_.broadcasturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestRawLiveStreamParams::~RequestRawLiveStreamParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RequestRawLiveStreamParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestRawLiveStreamParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.broadcasturl_.Destroy();
}

void RequestRawLiveStreamParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestRawLiveStreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RequestRawLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.broadcasturl_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RequestRawLiveStreamParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string broadcastURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_broadcasturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestRawLiveStreamParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RequestRawLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string broadcastURL = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_broadcasturl();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RequestRawLiveStreamParams)
  return target;
}

::size_t RequestRawLiveStreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RequestRawLiveStreamParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string broadcastURL = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_broadcasturl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRawLiveStreamParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RequestRawLiveStreamParams*>(
      &from));
}

void RequestRawLiveStreamParams::MergeFrom(const RequestRawLiveStreamParams& from) {
  RequestRawLiveStreamParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RequestRawLiveStreamParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_broadcasturl(from._internal_broadcasturl());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RequestRawLiveStreamParams::CopyFrom(const RequestRawLiveStreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RequestRawLiveStreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRawLiveStreamParams::IsInitialized() const {
  return true;
}

void RequestRawLiveStreamParams::InternalSwap(RequestRawLiveStreamParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.broadcasturl_, lhs_arena,
                                       &other->_impl_.broadcasturl_, rhs_arena);
}

std::string RequestRawLiveStreamParams::GetTypeName() const {
  return "com.electron.sdk.proto.RequestRawLiveStreamParams";
}

// ===================================================================

class RemoveRawLiveStreamPrivilegeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveRawLiveStreamPrivilegeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoveRawLiveStreamPrivilegeParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RemoveRawLiveStreamPrivilegeParams::RemoveRawLiveStreamPrivilegeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
}
RemoveRawLiveStreamPrivilegeParams::RemoveRawLiveStreamPrivilegeParams(const RemoveRawLiveStreamPrivilegeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
}

inline void RemoveRawLiveStreamPrivilegeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

RemoveRawLiveStreamPrivilegeParams::~RemoveRawLiveStreamPrivilegeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveRawLiveStreamPrivilegeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveRawLiveStreamPrivilegeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveRawLiveStreamPrivilegeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoveRawLiveStreamPrivilegeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoveRawLiveStreamPrivilegeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
  return target;
}

::size_t RemoveRawLiveStreamPrivilegeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveRawLiveStreamPrivilegeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoveRawLiveStreamPrivilegeParams*>(
      &from));
}

void RemoveRawLiveStreamPrivilegeParams::MergeFrom(const RemoveRawLiveStreamPrivilegeParams& from) {
  RemoveRawLiveStreamPrivilegeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoveRawLiveStreamPrivilegeParams::CopyFrom(const RemoveRawLiveStreamPrivilegeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRawLiveStreamPrivilegeParams::IsInitialized() const {
  return true;
}

void RemoveRawLiveStreamPrivilegeParams::InternalSwap(RemoveRawLiveStreamPrivilegeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string RemoveRawLiveStreamPrivilegeParams::GetTypeName() const {
  return "com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams";
}

// ===================================================================

class SetSupportDarkModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSupportDarkModeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetSupportDarkModeParams, _impl_._has_bits_);
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetSupportDarkModeParams::SetSupportDarkModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetSupportDarkModeParams)
}
SetSupportDarkModeParams::SetSupportDarkModeParams(const SetSupportDarkModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetSupportDarkModeParams)
}

inline void SetSupportDarkModeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.support_) { false }

  };
}

SetSupportDarkModeParams::~SetSupportDarkModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetSupportDarkModeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSupportDarkModeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSupportDarkModeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSupportDarkModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetSupportDarkModeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.support_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetSupportDarkModeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool support = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_support(&has_bits);
          _impl_.support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetSupportDarkModeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetSupportDarkModeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool support = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_support(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetSupportDarkModeParams)
  return target;
}

::size_t SetSupportDarkModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetSupportDarkModeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool support = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSupportDarkModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetSupportDarkModeParams*>(
      &from));
}

void SetSupportDarkModeParams::MergeFrom(const SetSupportDarkModeParams& from) {
  SetSupportDarkModeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetSupportDarkModeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_support(from._internal_support());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetSupportDarkModeParams::CopyFrom(const SetSupportDarkModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetSupportDarkModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSupportDarkModeParams::IsInitialized() const {
  return true;
}

void SetSupportDarkModeParams::InternalSwap(SetSupportDarkModeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.support_, other->_impl_.support_);
}

std::string SetSupportDarkModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetSupportDarkModeParams";
}

// ===================================================================

class SetPipeInitParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetPipeInitParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetPipeInitParams, _impl_._has_bits_);
  static void set_has_videopipename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sharepipename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audiopipename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maxreadlength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SetPipeInitParams::SetPipeInitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetPipeInitParams)
}
SetPipeInitParams::SetPipeInitParams(const SetPipeInitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetPipeInitParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.videopipename_) {}

    , decltype(_impl_.sharepipename_) {}

    , decltype(_impl_.audiopipename_) {}

    , decltype(_impl_.maxreadlength_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.videopipename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.videopipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.videopipename_.Set(from._internal_videopipename(), _this->GetArenaForAllocation());
  }
  _impl_.sharepipename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sharepipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.sharepipename_.Set(from._internal_sharepipename(), _this->GetArenaForAllocation());
  }
  _impl_.audiopipename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audiopipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.audiopipename_.Set(from._internal_audiopipename(), _this->GetArenaForAllocation());
  }
  _this->_impl_.maxreadlength_ = from._impl_.maxreadlength_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetPipeInitParams)
}

inline void SetPipeInitParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.videopipename_) {}

    , decltype(_impl_.sharepipename_) {}

    , decltype(_impl_.audiopipename_) {}

    , decltype(_impl_.maxreadlength_) { ::uint64_t{0u} }

  };
  _impl_.videopipename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.videopipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sharepipename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sharepipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audiopipename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audiopipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetPipeInitParams::~SetPipeInitParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetPipeInitParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPipeInitParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.videopipename_.Destroy();
  _impl_.sharepipename_.Destroy();
  _impl_.audiopipename_.Destroy();
}

void SetPipeInitParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPipeInitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetPipeInitParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.videopipename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sharepipename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.audiopipename_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.maxreadlength_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetPipeInitParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string videoPipeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_videopipename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string sharePipeName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sharepipename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string audioPipeName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_audiopipename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 maxReadLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_maxreadlength(&has_bits);
          _impl_.maxreadlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetPipeInitParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetPipeInitParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string videoPipeName = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_videopipename();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string sharePipeName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_sharepipename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string audioPipeName = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_audiopipename();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional uint64 maxReadLength = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_maxreadlength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetPipeInitParams)
  return target;
}

::size_t SetPipeInitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetPipeInitParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string videoPipeName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_videopipename());
    }

    // optional string sharePipeName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_sharepipename());
    }

    // optional string audioPipeName = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_audiopipename());
    }

    // optional uint64 maxReadLength = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_maxreadlength());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPipeInitParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetPipeInitParams*>(
      &from));
}

void SetPipeInitParams::MergeFrom(const SetPipeInitParams& from) {
  SetPipeInitParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetPipeInitParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_videopipename(from._internal_videopipename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sharepipename(from._internal_sharepipename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_audiopipename(from._internal_audiopipename());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.maxreadlength_ = from._impl_.maxreadlength_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetPipeInitParams::CopyFrom(const SetPipeInitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetPipeInitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPipeInitParams::IsInitialized() const {
  return true;
}

void SetPipeInitParams::InternalSwap(SetPipeInitParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.videopipename_, lhs_arena,
                                       &other->_impl_.videopipename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sharepipename_, lhs_arena,
                                       &other->_impl_.sharepipename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audiopipename_, lhs_arena,
                                       &other->_impl_.audiopipename_, rhs_arena);

  swap(_impl_.maxreadlength_, other->_impl_.maxreadlength_);
}

std::string SetPipeInitParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetPipeInitParams";
}

// ===================================================================

class SetParticipantsChatPrivilegeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetParticipantsChatPrivilegeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetParticipantsChatPrivilegeParams, _impl_._has_bits_);
  static void set_has_privilege(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetParticipantsChatPrivilegeParams::SetParticipantsChatPrivilegeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
}
SetParticipantsChatPrivilegeParams::SetParticipantsChatPrivilegeParams(const SetParticipantsChatPrivilegeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
}

inline void SetParticipantsChatPrivilegeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_) { 0 }

  };
}

SetParticipantsChatPrivilegeParams::~SetParticipantsChatPrivilegeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetParticipantsChatPrivilegeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetParticipantsChatPrivilegeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetParticipantsChatPrivilegeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.privilege_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetParticipantsChatPrivilegeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 privilege = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_privilege(&has_bits);
          _impl_.privilege_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetParticipantsChatPrivilegeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 privilege = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_privilege(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
  return target;
}

::size_t SetParticipantsChatPrivilegeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 privilege = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_privilege());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetParticipantsChatPrivilegeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetParticipantsChatPrivilegeParams*>(
      &from));
}

void SetParticipantsChatPrivilegeParams::MergeFrom(const SetParticipantsChatPrivilegeParams& from) {
  SetParticipantsChatPrivilegeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_privilege(from._internal_privilege());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetParticipantsChatPrivilegeParams::CopyFrom(const SetParticipantsChatPrivilegeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetParticipantsChatPrivilegeParams::IsInitialized() const {
  return true;
}

void SetParticipantsChatPrivilegeParams::InternalSwap(SetParticipantsChatPrivilegeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.privilege_, other->_impl_.privilege_);
}

std::string SetParticipantsChatPrivilegeParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetParticipantsChatPrivilegeParams";
}

// ===================================================================

class ChatMessageIDParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatMessageIDParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChatMessageIDParams, _impl_._has_bits_);
  static void set_has_msgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatMessageIDParams::ChatMessageIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ChatMessageIDParams)
}
ChatMessageIDParams::ChatMessageIDParams(const ChatMessageIDParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChatMessageIDParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ChatMessageIDParams)
}

inline void ChatMessageIDParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgid_) {}

  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessageIDParams::~ChatMessageIDParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ChatMessageIDParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessageIDParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
}

void ChatMessageIDParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessageIDParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ChatMessageIDParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msgid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChatMessageIDParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string msgID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatMessageIDParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ChatMessageIDParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string msgID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_msgid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ChatMessageIDParams)
  return target;
}

::size_t ChatMessageIDParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ChatMessageIDParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string msgID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_msgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessageIDParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChatMessageIDParams*>(
      &from));
}

void ChatMessageIDParams::MergeFrom(const ChatMessageIDParams& from) {
  ChatMessageIDParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ChatMessageIDParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChatMessageIDParams::CopyFrom(const ChatMessageIDParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ChatMessageIDParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageIDParams::IsInitialized() const {
  return true;
}

void ChatMessageIDParams::InternalSwap(ChatMessageIDParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msgid_, lhs_arena,
                                       &other->_impl_.msgid_, rhs_arena);
}

std::string ChatMessageIDParams::GetTypeName() const {
  return "com.electron.sdk.proto.ChatMessageIDParams";
}

// ===================================================================

class SetChatMessageBuilderParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetChatMessageBuilderParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetChatMessageBuilderParams, _impl_._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_threadid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_positionstart(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_positionend(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bclearstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bclear(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SetChatMessageBuilderParams::SetChatMessageBuilderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetChatMessageBuilderParams)
}
SetChatMessageBuilderParams::SetChatMessageBuilderParams(const SetChatMessageBuilderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SetChatMessageBuilderParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_) {}

    , decltype(_impl_.threadid_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.positionstart_) {}

    , decltype(_impl_.positionend_) {}

    , decltype(_impl_.bclearstyles_) {}

    , decltype(_impl_.bclear_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.content_.Set(from._internal_content(), _this->GetArenaForAllocation());
  }
  _impl_.threadid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.threadid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.threadid_.Set(from._internal_threadid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.receiver_, &from._impl_.receiver_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.bclear_) -
    reinterpret_cast<char*>(&_impl_.receiver_)) + sizeof(_impl_.bclear_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetChatMessageBuilderParams)
}

inline void SetChatMessageBuilderParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_) {}

    , decltype(_impl_.threadid_) {}

    , decltype(_impl_.receiver_) { 0u }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.positionstart_) { 0 }

    , decltype(_impl_.positionend_) { 0 }

    , decltype(_impl_.bclearstyles_) { false }

    , decltype(_impl_.bclear_) { false }

  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.threadid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.threadid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetChatMessageBuilderParams::~SetChatMessageBuilderParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetChatMessageBuilderParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetChatMessageBuilderParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  _impl_.threadid_.Destroy();
}

void SetChatMessageBuilderParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetChatMessageBuilderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetChatMessageBuilderParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.threadid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.receiver_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bclear_) -
        reinterpret_cast<char*>(&_impl_.receiver_)) + sizeof(_impl_.bclear_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetChatMessageBuilderParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 receiver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_receiver(&has_bits);
          _impl_.receiver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string threadId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_threadid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 positionStart = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_positionstart(&has_bits);
          _impl_.positionstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 positionEnd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_positionend(&has_bits);
          _impl_.positionend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bClearStyles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_bclearstyles(&has_bits);
          _impl_.bclearstyles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bClear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_bclear(&has_bits);
          _impl_.bclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetChatMessageBuilderParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetChatMessageBuilderParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string content = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_content();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 receiver = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_receiver(), target);
  }

  // optional string threadId = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_threadid();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_type(), target);
  }

  // optional int32 positionStart = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_positionstart(), target);
  }

  // optional int32 positionEnd = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_positionend(), target);
  }

  // optional bool bClearStyles = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_bclearstyles(), target);
  }

  // optional bool bClear = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_bclear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetChatMessageBuilderParams)
  return target;
}

::size_t SetChatMessageBuilderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetChatMessageBuilderParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string content = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_content());
    }

    // optional string threadId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_threadid());
    }

    // optional uint32 receiver = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_receiver());
    }

    // optional int32 type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_type());
    }

    // optional int32 positionStart = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_positionstart());
    }

    // optional int32 positionEnd = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_positionend());
    }

    // optional bool bClearStyles = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool bClear = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetChatMessageBuilderParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetChatMessageBuilderParams*>(
      &from));
}

void SetChatMessageBuilderParams::MergeFrom(const SetChatMessageBuilderParams& from) {
  SetChatMessageBuilderParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetChatMessageBuilderParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_threadid(from._internal_threadid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.receiver_ = from._impl_.receiver_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.positionstart_ = from._impl_.positionstart_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.positionend_ = from._impl_.positionend_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bclearstyles_ = from._impl_.bclearstyles_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bclear_ = from._impl_.bclear_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetChatMessageBuilderParams::CopyFrom(const SetChatMessageBuilderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetChatMessageBuilderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetChatMessageBuilderParams::IsInitialized() const {
  return true;
}

void SetChatMessageBuilderParams::InternalSwap(SetChatMessageBuilderParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, lhs_arena,
                                       &other->_impl_.content_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.threadid_, lhs_arena,
                                       &other->_impl_.threadid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetChatMessageBuilderParams, _impl_.bclear_)
      + sizeof(SetChatMessageBuilderParams::_impl_.bclear_)
      - PROTOBUF_FIELD_OFFSET(SetChatMessageBuilderParams, _impl_.receiver_)>(
          reinterpret_cast<char*>(&_impl_.receiver_),
          reinterpret_cast<char*>(&other->_impl_.receiver_));
}

std::string SetChatMessageBuilderParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetChatMessageBuilderParams";
}

// ===================================================================

class EnableWaitingRoomOnEntryParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableWaitingRoomOnEntryParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableWaitingRoomOnEntryParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableWaitingRoomOnEntryParams::EnableWaitingRoomOnEntryParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
}
EnableWaitingRoomOnEntryParams::EnableWaitingRoomOnEntryParams(const EnableWaitingRoomOnEntryParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
}

inline void EnableWaitingRoomOnEntryParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableWaitingRoomOnEntryParams::~EnableWaitingRoomOnEntryParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableWaitingRoomOnEntryParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableWaitingRoomOnEntryParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableWaitingRoomOnEntryParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableWaitingRoomOnEntryParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableWaitingRoomOnEntryParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
  return target;
}

::size_t EnableWaitingRoomOnEntryParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableWaitingRoomOnEntryParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableWaitingRoomOnEntryParams*>(
      &from));
}

void EnableWaitingRoomOnEntryParams::MergeFrom(const EnableWaitingRoomOnEntryParams& from) {
  EnableWaitingRoomOnEntryParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableWaitingRoomOnEntryParams::CopyFrom(const EnableWaitingRoomOnEntryParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableWaitingRoomOnEntryParams::IsInitialized() const {
  return true;
}

void EnableWaitingRoomOnEntryParams::InternalSwap(EnableWaitingRoomOnEntryParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableWaitingRoomOnEntryParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableWaitingRoomOnEntryParams";
}

// ===================================================================

class GetWaitingRoomUserInfoByIDParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWaitingRoomUserInfoByIDParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWaitingRoomUserInfoByIDParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetWaitingRoomUserInfoByIDParams::GetWaitingRoomUserInfoByIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
}
GetWaitingRoomUserInfoByIDParams::GetWaitingRoomUserInfoByIDParams(const GetWaitingRoomUserInfoByIDParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
}

inline void GetWaitingRoomUserInfoByIDParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

GetWaitingRoomUserInfoByIDParams::~GetWaitingRoomUserInfoByIDParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWaitingRoomUserInfoByIDParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetWaitingRoomUserInfoByIDParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWaitingRoomUserInfoByIDParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetWaitingRoomUserInfoByIDParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWaitingRoomUserInfoByIDParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
  return target;
}

::size_t GetWaitingRoomUserInfoByIDParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWaitingRoomUserInfoByIDParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetWaitingRoomUserInfoByIDParams*>(
      &from));
}

void GetWaitingRoomUserInfoByIDParams::MergeFrom(const GetWaitingRoomUserInfoByIDParams& from) {
  GetWaitingRoomUserInfoByIDParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetWaitingRoomUserInfoByIDParams::CopyFrom(const GetWaitingRoomUserInfoByIDParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWaitingRoomUserInfoByIDParams::IsInitialized() const {
  return true;
}

void GetWaitingRoomUserInfoByIDParams::InternalSwap(GetWaitingRoomUserInfoByIDParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string GetWaitingRoomUserInfoByIDParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams";
}

// ===================================================================

class AdmitToMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AdmitToMeetingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AdmitToMeetingParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdmitToMeetingParams::AdmitToMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AdmitToMeetingParams)
}
AdmitToMeetingParams::AdmitToMeetingParams(const AdmitToMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AdmitToMeetingParams)
}

inline void AdmitToMeetingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

AdmitToMeetingParams::~AdmitToMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AdmitToMeetingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdmitToMeetingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdmitToMeetingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdmitToMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AdmitToMeetingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AdmitToMeetingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AdmitToMeetingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AdmitToMeetingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AdmitToMeetingParams)
  return target;
}

::size_t AdmitToMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AdmitToMeetingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdmitToMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AdmitToMeetingParams*>(
      &from));
}

void AdmitToMeetingParams::MergeFrom(const AdmitToMeetingParams& from) {
  AdmitToMeetingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AdmitToMeetingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AdmitToMeetingParams::CopyFrom(const AdmitToMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AdmitToMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdmitToMeetingParams::IsInitialized() const {
  return true;
}

void AdmitToMeetingParams::InternalSwap(AdmitToMeetingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string AdmitToMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.AdmitToMeetingParams";
}

// ===================================================================

class PutInWaitingRoomParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PutInWaitingRoomParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PutInWaitingRoomParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PutInWaitingRoomParams::PutInWaitingRoomParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.PutInWaitingRoomParams)
}
PutInWaitingRoomParams::PutInWaitingRoomParams(const PutInWaitingRoomParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.PutInWaitingRoomParams)
}

inline void PutInWaitingRoomParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

PutInWaitingRoomParams::~PutInWaitingRoomParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.PutInWaitingRoomParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutInWaitingRoomParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PutInWaitingRoomParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutInWaitingRoomParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.PutInWaitingRoomParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PutInWaitingRoomParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PutInWaitingRoomParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.PutInWaitingRoomParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.PutInWaitingRoomParams)
  return target;
}

::size_t PutInWaitingRoomParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.PutInWaitingRoomParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutInWaitingRoomParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PutInWaitingRoomParams*>(
      &from));
}

void PutInWaitingRoomParams::MergeFrom(const PutInWaitingRoomParams& from) {
  PutInWaitingRoomParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.PutInWaitingRoomParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PutInWaitingRoomParams::CopyFrom(const PutInWaitingRoomParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.PutInWaitingRoomParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutInWaitingRoomParams::IsInitialized() const {
  return true;
}

void PutInWaitingRoomParams::InternalSwap(PutInWaitingRoomParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string PutInWaitingRoomParams::GetTypeName() const {
  return "com.electron.sdk.proto.PutInWaitingRoomParams";
}

// ===================================================================

class RenameUserParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RenameUserParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RenameUserParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RenameUserParams::RenameUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RenameUserParams)
}
RenameUserParams::RenameUserParams(const RenameUserParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RenameUserParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newname_) {}

    , decltype(_impl_.userid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.newname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.newname_.Set(from._internal_newname(), _this->GetArenaForAllocation());
  }
  _this->_impl_.userid_ = from._impl_.userid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RenameUserParams)
}

inline void RenameUserParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newname_) {}

    , decltype(_impl_.userid_) { 0u }

  };
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.newname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenameUserParams::~RenameUserParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RenameUserParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenameUserParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newname_.Destroy();
}

void RenameUserParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenameUserParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RenameUserParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.newname_.ClearNonDefaultToEmpty();
  }
  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RenameUserParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string newName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_newname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RenameUserParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RenameUserParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  // optional string newName = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_newname();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RenameUserParams)
  return target;
}

::size_t RenameUserParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RenameUserParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string newName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_newname());
    }

    // optional uint32 userid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameUserParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RenameUserParams*>(
      &from));
}

void RenameUserParams::MergeFrom(const RenameUserParams& from) {
  RenameUserParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RenameUserParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_newname(from._internal_newname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RenameUserParams::CopyFrom(const RenameUserParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RenameUserParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameUserParams::IsInitialized() const {
  return true;
}

void RenameUserParams::InternalSwap(RenameUserParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.newname_, lhs_arena,
                                       &other->_impl_.newname_, rhs_arena);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string RenameUserParams::GetTypeName() const {
  return "com.electron.sdk.proto.RenameUserParams";
}

// ===================================================================

class ExpelUserParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpelUserParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExpelUserParams, _impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExpelUserParams::ExpelUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ExpelUserParams)
}
ExpelUserParams::ExpelUserParams(const ExpelUserParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ExpelUserParams)
}

inline void ExpelUserParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userid_) { 0u }

  };
}

ExpelUserParams::~ExpelUserParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ExpelUserParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpelUserParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpelUserParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpelUserParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ExpelUserParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExpelUserParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExpelUserParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ExpelUserParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ExpelUserParams)
  return target;
}

::size_t ExpelUserParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ExpelUserParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpelUserParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExpelUserParams*>(
      &from));
}

void ExpelUserParams::MergeFrom(const ExpelUserParams& from) {
  ExpelUserParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ExpelUserParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExpelUserParams::CopyFrom(const ExpelUserParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ExpelUserParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpelUserParams::IsInitialized() const {
  return true;
}

void ExpelUserParams::InternalSwap(ExpelUserParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.userid_, other->_impl_.userid_);
}

std::string ExpelUserParams::GetTypeName() const {
  return "com.electron.sdk.proto.ExpelUserParams";
}

// ===================================================================

class AllowParticipantsToRequestCloudRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowParticipantsToRequestCloudRecordingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AllowParticipantsToRequestCloudRecordingParams, _impl_._has_bits_);
  static void set_has_ballow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowParticipantsToRequestCloudRecordingParams::AllowParticipantsToRequestCloudRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
}
AllowParticipantsToRequestCloudRecordingParams::AllowParticipantsToRequestCloudRecordingParams(const AllowParticipantsToRequestCloudRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
}

inline void AllowParticipantsToRequestCloudRecordingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ballow_) { false }

  };
}

AllowParticipantsToRequestCloudRecordingParams::~AllowParticipantsToRequestCloudRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowParticipantsToRequestCloudRecordingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllowParticipantsToRequestCloudRecordingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllowParticipantsToRequestCloudRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ballow_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllowParticipantsToRequestCloudRecordingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bAllow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_ballow(&has_bits);
          _impl_.ballow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AllowParticipantsToRequestCloudRecordingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bAllow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_ballow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
  return target;
}

::size_t AllowParticipantsToRequestCloudRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bAllow = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowParticipantsToRequestCloudRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AllowParticipantsToRequestCloudRecordingParams*>(
      &from));
}

void AllowParticipantsToRequestCloudRecordingParams::MergeFrom(const AllowParticipantsToRequestCloudRecordingParams& from) {
  AllowParticipantsToRequestCloudRecordingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_ballow(from._internal_ballow());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AllowParticipantsToRequestCloudRecordingParams::CopyFrom(const AllowParticipantsToRequestCloudRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowParticipantsToRequestCloudRecordingParams::IsInitialized() const {
  return true;
}

void AllowParticipantsToRequestCloudRecordingParams::InternalSwap(AllowParticipantsToRequestCloudRecordingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.ballow_, other->_impl_.ballow_);
}

std::string AllowParticipantsToRequestCloudRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams";
}

// ===================================================================

class DenyRequestStartCloudRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DenyRequestStartCloudRecordingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DenyRequestStartCloudRecordingParams, _impl_._has_bits_);
  static void set_has_bdenyall(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DenyRequestStartCloudRecordingParams::DenyRequestStartCloudRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
}
DenyRequestStartCloudRecordingParams::DenyRequestStartCloudRecordingParams(const DenyRequestStartCloudRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
}

inline void DenyRequestStartCloudRecordingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdenyall_) { false }

  };
}

DenyRequestStartCloudRecordingParams::~DenyRequestStartCloudRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenyRequestStartCloudRecordingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DenyRequestStartCloudRecordingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenyRequestStartCloudRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdenyall_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DenyRequestStartCloudRecordingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDenyAll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdenyall(&has_bits);
          _impl_.bdenyall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DenyRequestStartCloudRecordingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDenyAll = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdenyall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
  return target;
}

::size_t DenyRequestStartCloudRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDenyAll = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DenyRequestStartCloudRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DenyRequestStartCloudRecordingParams*>(
      &from));
}

void DenyRequestStartCloudRecordingParams::MergeFrom(const DenyRequestStartCloudRecordingParams& from) {
  DenyRequestStartCloudRecordingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdenyall(from._internal_bdenyall());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DenyRequestStartCloudRecordingParams::CopyFrom(const DenyRequestStartCloudRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenyRequestStartCloudRecordingParams::IsInitialized() const {
  return true;
}

void DenyRequestStartCloudRecordingParams::InternalSwap(DenyRequestStartCloudRecordingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdenyall_, other->_impl_.bdenyall_);
}

std::string DenyRequestStartCloudRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DenyRequestStartCloudRecordingParams";
}

// ===================================================================

class SetEnableOptionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetEnableOptionParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetEnableOptionParams, _impl_._has_bits_);
  static void set_has_option(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetEnableOptionParams::SetEnableOptionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetEnableOptionParams)
}
SetEnableOptionParams::SetEnableOptionParams(const SetEnableOptionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetEnableOptionParams)
}

inline void SetEnableOptionParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_) { 0u }

  };
}

SetEnableOptionParams::~SetEnableOptionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetEnableOptionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetEnableOptionParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetEnableOptionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetEnableOptionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetEnableOptionParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.option_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetEnableOptionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_option(&has_bits);
          _impl_.option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetEnableOptionParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetEnableOptionParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 option = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetEnableOptionParams)
  return target;
}

::size_t SetEnableOptionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetEnableOptionParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 option = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_option());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEnableOptionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetEnableOptionParams*>(
      &from));
}

void SetEnableOptionParams::MergeFrom(const SetEnableOptionParams& from) {
  SetEnableOptionParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetEnableOptionParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_option(from._internal_option());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetEnableOptionParams::CopyFrom(const SetEnableOptionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetEnableOptionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEnableOptionParams::IsInitialized() const {
  return true;
}

void SetEnableOptionParams::InternalSwap(SetEnableOptionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.option_, other->_impl_.option_);
}

std::string SetEnableOptionParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetEnableOptionParams";
}

// ===================================================================

class DeclineEnableParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DeclineEnableParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeclineEnableParams, _impl_._has_bits_);
  static void set_has_bdeclineall(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeclineEnableParams::DeclineEnableParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DeclineEnableParams)
}
DeclineEnableParams::DeclineEnableParams(const DeclineEnableParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DeclineEnableParams)
}

inline void DeclineEnableParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bdeclineall_) { false }

  };
}

DeclineEnableParams::~DeclineEnableParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DeclineEnableParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeclineEnableParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeclineEnableParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeclineEnableParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DeclineEnableParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bdeclineall_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeclineEnableParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bDeclineAll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bdeclineall(&has_bits);
          _impl_.bdeclineall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeclineEnableParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DeclineEnableParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bDeclineAll = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bdeclineall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DeclineEnableParams)
  return target;
}

::size_t DeclineEnableParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DeclineEnableParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDeclineAll = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeclineEnableParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeclineEnableParams*>(
      &from));
}

void DeclineEnableParams::MergeFrom(const DeclineEnableParams& from) {
  DeclineEnableParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DeclineEnableParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bdeclineall(from._internal_bdeclineall());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeclineEnableParams::CopyFrom(const DeclineEnableParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DeclineEnableParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclineEnableParams::IsInitialized() const {
  return true;
}

void DeclineEnableParams::InternalSwap(DeclineEnableParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bdeclineall_, other->_impl_.bdeclineall_);
}

std::string DeclineEnableParams::GetTypeName() const {
  return "com.electron.sdk.proto.DeclineEnableParams";
}

// ===================================================================

class InputScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputScreenNameParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InputScreenNameParams, _impl_._has_bits_);
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InputScreenNameParams::InputScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputScreenNameParams)
}
InputScreenNameParams::InputScreenNameParams(const InputScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InputScreenNameParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.screenname_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.screenname_.Set(from._internal_screenname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputScreenNameParams)
}

inline void InputScreenNameParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.screenname_) {}

  };
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputScreenNameParams::~InputScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputScreenNameParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputScreenNameParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.screenname_.Destroy();
}

void InputScreenNameParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.screenname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputScreenNameParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string screenName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_screenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InputScreenNameParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputScreenNameParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string screenName = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_screenname();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputScreenNameParams)
  return target;
}

::size_t InputScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputScreenNameParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string screenName = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_screenname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InputScreenNameParams*>(
      &from));
}

void InputScreenNameParams::MergeFrom(const InputScreenNameParams& from) {
  InputScreenNameParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputScreenNameParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_screenname(from._internal_screenname());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InputScreenNameParams::CopyFrom(const InputScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputScreenNameParams::IsInitialized() const {
  return true;
}

void InputScreenNameParams::InternalSwap(InputScreenNameParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.screenname_, lhs_arena,
                                       &other->_impl_.screenname_, rhs_arena);
}

std::string InputScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputScreenNameParams";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sdk
}  // namespace electron
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InitSDKParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InitSDKParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InitSDKParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AuthWithJwtTokenParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AuthWithJwtTokenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AuthWithJwtTokenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::LoginWithSSOTokenParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::LoginWithSSOTokenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::LoginWithSSOTokenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartWithoutLoginParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartWithoutLoginParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartWithoutLoginParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::JoinMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::JoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::JoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::JoinWithoutLoginParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::JoinWithoutLoginParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::JoinWithoutLoginParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::LeaveMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::LeaveMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::LeaveMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowChatDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowChatDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowChatDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnterFullScreenParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnterFullScreenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnterFullScreenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ExitFullScreenParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ExitFullScreenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ExitFullScreenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::MoveFloatVideoWndParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::MoveFloatVideoWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::MoveFloatVideoWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowSharingToolbarParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowSharingToolbarParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowSharingToolbarParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowParticipantsListWndParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowParticipantsListWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowParticipantsListWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowPreOrNextPageVideoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowPreOrNextPageVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowPreOrNextPageVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowSharingFrameWindowsParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowSharingFrameWindowsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowSharingFrameWindowsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SwitchSplitScreenModeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SwitchSplitScreenModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SwitchSplitScreenModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowSettingDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowSettingDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowSettingDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ScheduleMeetingWithWndParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ScheduleMeetingWithWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ScheduleMeetingWithWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EditMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EditMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EditMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EditMeetingWithWndParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EditMeetingWithWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EditMeetingWithWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DeleteMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DeleteMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DeleteMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AddCustomizedPictureResourceParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AddCustomizedPictureResourceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AddCustomizedPictureResourceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AddCustomizedStringResourceParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AddCustomizedStringResourceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AddCustomizedStringResourceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AddCustomizedURLResourceParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AddCustomizedURLResourceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AddCustomizedURLResourceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::TryWithMeetingNumberParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::TryWithMeetingNumberParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::TryWithMeetingNumberParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::TryWithPairingCodeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::TryWithPairingCodeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::TryWithPairingCodeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartAnnotationParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartAnnotationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartAnnotationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StopAnnotationParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StopAnnotationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StopAnnotationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetToolParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetToolParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetToolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ClearAnnotationParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ClearAnnotationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ClearAnnotationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetColorParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetColorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetColorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetLineWidthParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetLineWidthParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetLineWidthParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::UndoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::UndoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::UndoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::MuteAudioParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::MuteAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::MuteAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::UnmuteAudioParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::UnmuteAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::UnmuteAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetFloatVideoPosParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetFloatVideoPosParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetFloatVideoPosParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetSharingToolBarVisibilityParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetSharingToolBarVisibilityParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetSharingToolBarVisibilityParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetDirectShareMonitorIDParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetDirectShareMonitorIDParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetDirectShareMonitorIDParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetMeetingUIPosParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetMeetingUIPosParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetMeetingUIPosParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableWaitingForHostDialogParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableWaitingForHostDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableWaitingForHostDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ConfigDSCPParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ConfigDSCPParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ConfigDSCPParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShareIOSDeviceParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShareIOSDeviceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShareIOSDeviceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShareWhiteBoardParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShareWhiteBoardParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShareWhiteBoardParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ForceDisableMultiShareParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ForceDisableMultiShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ForceDisableMultiShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickShareBTNEventParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickShareBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickShareBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickCCBTNEventParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickCCBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickCCBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickAudioBTNEventParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickAudioBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickAudioBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectMeetingWarningMsgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectMeetingWarningMsgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectMeetingWarningMsgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableToolTipsShowParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableToolTipsShowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableToolTipsShowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAirplayInstructionWindowParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAirplayInstructionWindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAirplayInstructionWindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableClaimHostFeatureParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableClaimHostFeatureParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableClaimHostFeatureParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowCallInTabParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowCallInTabParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowCallInTabParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowCallMeTabParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowCallMeTabParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowCallMeTabParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideChatItemOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideChatItemOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideChatItemOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowInviteDlgTabPageParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowInviteDlgTabPageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowInviteDlgTabPageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowH323SubTabPageParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowH323SubTabPageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowH323SubTabPageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideSwitchCameraButtonParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideSwitchCameraButtonParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideSwitchCameraButtonParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideQAOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideQAOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideQAOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HidePollOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HidePollOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HidePollOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectEndOtherMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectEndOtherMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectEndOtherMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableShowJoinMeetingWndParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableShowJoinMeetingWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableShowJoinMeetingWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputMeetingScreenNameParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputMeetingScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputMeetingScreenNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::CallOutH323Params*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::CallOutH323Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::CallOutH323Params >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetUserInfoByUserIDParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetUserInfoByUserIDParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetUserInfoByUserIDParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::CanStartRecordingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::CanStartRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::CanStartRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::IsSupportLocalRecordingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::IsSupportLocalRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::IsSupportLocalRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AllowLocalRecordingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AllowLocalRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AllowLocalRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisAllowLocalRecordingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisAllowLocalRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisAllowLocalRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartAppShareParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartAppShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartAppShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartMonitorShareParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartMonitorShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartMonitorShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::MuteVideoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::MuteVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::MuteVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::UnMuteVideoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::UnMuteVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::UnMuteVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::PinVideoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::PinVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::PinVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SpotlightVideoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SpotlightVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SpotlightVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::CreateRendererParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::CreateRendererParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::CreateRendererParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DestroyRendererParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DestroyRendererParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DestroyRendererParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SubscribeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SubscribeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SubscribeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::UnSubscribeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::UnSubscribeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::UnSubscribeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetRawDataResolutionParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetRawDataResolutionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetRawDataResolutionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetResolutionParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetResolutionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetResolutionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetRawDataTypeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetRawDataTypeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetRawDataTypeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetUserIdParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetUserIdParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetUserIdParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RetrieveParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RetrieveParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RetrieveParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::VerifyParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::VerifyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::VerifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SelectMicParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SelectMicParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SelectMicParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SelectSpeakerParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SelectSpeakerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SelectSpeakerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoJoinAudioParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoJoinAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoJoinAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoAdjustMicParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoAdjustMicParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoAdjustMicParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableStereoAudioParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableStereoAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableStereoAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableMicOriginalInputParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableMicOriginalInputParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableMicOriginalInputParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableSuppressAudioNotifyParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableSuppressAudioNotifyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableSuppressAudioNotifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetEchoCancellationLevelParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetEchoCancellationLevelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetEchoCancellationLevelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetMicVolParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetMicVolParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetMicVolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetSpeakerVolParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetSpeakerVolParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetSpeakerVolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableDualScreenModeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableDualScreenModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableDualScreenModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::TurnOffAeroModeInSharingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::TurnOffAeroModeInSharingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::TurnOffAeroModeInSharingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableSplitScreenModeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableSplitScreenModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableSplitScreenModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetRecordingPathParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetRecordingPathParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetRecordingPathParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAddTimestampWatermarkParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAddTimestampWatermarkParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAddTimestampWatermarkParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableAccountSettingTabPageParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableAccountSettingTabPageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableAccountSettingTabPageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SelectVideoCameraParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SelectVideoCameraParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SelectVideoCameraParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableVideoMirrorEffectParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableVideoMirrorEffectParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableVideoMirrorEffectParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableFaceBeautyEffectParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableFaceBeautyEffectParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableFaceBeautyEffectParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHDVideoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHDVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHDVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableVideoPreviewDialogParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableVideoPreviewDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableVideoPreviewDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableSpotlightSelfParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableSpotlightSelfParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableSpotlightSelfParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHardwareEncodeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHardwareEncodeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHardwareEncodeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::IsHardwareEncodeEnabledParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::IsHardwareEncodeEnabledParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::IsHardwareEncodeEnabledParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GenerateSSOLoginWebURLParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GenerateSSOLoginWebURLParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GenerateSSOLoginWebURLParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowAANPanelParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowAANPanelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowAANPanelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetMeetingTopicParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetMeetingTopicParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetMeetingTopicParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetCustomizedCloudRecordingMgrUrlParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetCustomizedCloudRecordingMgrUrlParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetCustomizedCloudRecordingMgrUrlParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetCustomizedInvitationDomainParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetCustomizedInvitationDomainParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetCustomizedInvitationDomainParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetCustomizedPollingUrlParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetCustomizedPollingUrlParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetCustomizedPollingUrlParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetAudioShareModeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetAudioShareModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetAudioShareModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartLiveStreamParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartLiveStreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartLiveStreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartLiveStreamWithSteamingURLParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartLiveStreamWithSteamingURLParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartLiveStreamWithSteamingURLParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartRawLiveStreamParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartRawLiveStreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartRawLiveStreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetLiveStreamItemInfoParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetLiveStreamItemInfoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetLiveStreamItemInfoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RequestRawLiveStreamParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RequestRawLiveStreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RequestRawLiveStreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RemoveRawLiveStreamPrivilegeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RemoveRawLiveStreamPrivilegeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RemoveRawLiveStreamPrivilegeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetSupportDarkModeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetSupportDarkModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetSupportDarkModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetPipeInitParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetPipeInitParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetPipeInitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetParticipantsChatPrivilegeParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetParticipantsChatPrivilegeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetParticipantsChatPrivilegeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ChatMessageIDParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ChatMessageIDParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ChatMessageIDParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetChatMessageBuilderParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetChatMessageBuilderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetChatMessageBuilderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableWaitingRoomOnEntryParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableWaitingRoomOnEntryParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableWaitingRoomOnEntryParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetWaitingRoomUserInfoByIDParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetWaitingRoomUserInfoByIDParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetWaitingRoomUserInfoByIDParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AdmitToMeetingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AdmitToMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AdmitToMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::PutInWaitingRoomParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::PutInWaitingRoomParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::PutInWaitingRoomParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RenameUserParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RenameUserParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RenameUserParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ExpelUserParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ExpelUserParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ExpelUserParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AllowParticipantsToRequestCloudRecordingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AllowParticipantsToRequestCloudRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AllowParticipantsToRequestCloudRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DenyRequestStartCloudRecordingParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DenyRequestStartCloudRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DenyRequestStartCloudRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetEnableOptionParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetEnableOptionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetEnableOptionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DeclineEnableParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DeclineEnableParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DeclineEnableParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputScreenNameParams*
Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputScreenNameParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
