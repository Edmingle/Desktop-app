// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: electron_sdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_electron_5fsdk_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_electron_5fsdk_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_electron_5fsdk_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_electron_5fsdk_2eproto {
  static const ::uint32_t offsets[];
};
namespace com {
namespace electron {
namespace sdk {
namespace proto {
class AddCustomizedPictureResourceParams;
struct AddCustomizedPictureResourceParamsDefaultTypeInternal;
extern AddCustomizedPictureResourceParamsDefaultTypeInternal _AddCustomizedPictureResourceParams_default_instance_;
class AddCustomizedStringResourceParams;
struct AddCustomizedStringResourceParamsDefaultTypeInternal;
extern AddCustomizedStringResourceParamsDefaultTypeInternal _AddCustomizedStringResourceParams_default_instance_;
class AddCustomizedURLResourceParams;
struct AddCustomizedURLResourceParamsDefaultTypeInternal;
extern AddCustomizedURLResourceParamsDefaultTypeInternal _AddCustomizedURLResourceParams_default_instance_;
class AdmitToMeetingParams;
struct AdmitToMeetingParamsDefaultTypeInternal;
extern AdmitToMeetingParamsDefaultTypeInternal _AdmitToMeetingParams_default_instance_;
class AllowLocalRecordingParams;
struct AllowLocalRecordingParamsDefaultTypeInternal;
extern AllowLocalRecordingParamsDefaultTypeInternal _AllowLocalRecordingParams_default_instance_;
class AllowParticipantsToRequestCloudRecordingParams;
struct AllowParticipantsToRequestCloudRecordingParamsDefaultTypeInternal;
extern AllowParticipantsToRequestCloudRecordingParamsDefaultTypeInternal _AllowParticipantsToRequestCloudRecordingParams_default_instance_;
class AlwaysShowIconOnTaskBarParams;
struct AlwaysShowIconOnTaskBarParamsDefaultTypeInternal;
extern AlwaysShowIconOnTaskBarParamsDefaultTypeInternal _AlwaysShowIconOnTaskBarParams_default_instance_;
class AuthWithJwtTokenParams;
struct AuthWithJwtTokenParamsDefaultTypeInternal;
extern AuthWithJwtTokenParamsDefaultTypeInternal _AuthWithJwtTokenParams_default_instance_;
class CallOutH323Params;
struct CallOutH323ParamsDefaultTypeInternal;
extern CallOutH323ParamsDefaultTypeInternal _CallOutH323Params_default_instance_;
class CanStartRecordingParams;
struct CanStartRecordingParamsDefaultTypeInternal;
extern CanStartRecordingParamsDefaultTypeInternal _CanStartRecordingParams_default_instance_;
class ChangeFloatoActiveSpkVideoSizeParams;
struct ChangeFloatoActiveSpkVideoSizeParamsDefaultTypeInternal;
extern ChangeFloatoActiveSpkVideoSizeParamsDefaultTypeInternal _ChangeFloatoActiveSpkVideoSizeParams_default_instance_;
class ChatMessageIDParams;
struct ChatMessageIDParamsDefaultTypeInternal;
extern ChatMessageIDParamsDefaultTypeInternal _ChatMessageIDParams_default_instance_;
class ClearAnnotationParams;
struct ClearAnnotationParamsDefaultTypeInternal;
extern ClearAnnotationParamsDefaultTypeInternal _ClearAnnotationParams_default_instance_;
class ConfSettingDialogShownTabPageParams;
struct ConfSettingDialogShownTabPageParamsDefaultTypeInternal;
extern ConfSettingDialogShownTabPageParamsDefaultTypeInternal _ConfSettingDialogShownTabPageParams_default_instance_;
class ConfigDSCPParams;
struct ConfigDSCPParamsDefaultTypeInternal;
extern ConfigDSCPParamsDefaultTypeInternal _ConfigDSCPParams_default_instance_;
class ConfigToShowUrlLinksInSettingParams;
struct ConfigToShowUrlLinksInSettingParamsDefaultTypeInternal;
extern ConfigToShowUrlLinksInSettingParamsDefaultTypeInternal _ConfigToShowUrlLinksInSettingParams_default_instance_;
class CreateRendererParams;
struct CreateRendererParamsDefaultTypeInternal;
extern CreateRendererParamsDefaultTypeInternal _CreateRendererParams_default_instance_;
class DeclineEnableParams;
struct DeclineEnableParamsDefaultTypeInternal;
extern DeclineEnableParamsDefaultTypeInternal _DeclineEnableParams_default_instance_;
class DeleteMeetingParams;
struct DeleteMeetingParamsDefaultTypeInternal;
extern DeleteMeetingParamsDefaultTypeInternal _DeleteMeetingParams_default_instance_;
class DenyRequestStartCloudRecordingParams;
struct DenyRequestStartCloudRecordingParamsDefaultTypeInternal;
extern DenyRequestStartCloudRecordingParamsDefaultTypeInternal _DenyRequestStartCloudRecordingParams_default_instance_;
class DestroyRendererParams;
struct DestroyRendererParamsDefaultTypeInternal;
extern DestroyRendererParamsDefaultTypeInternal _DestroyRendererParams_default_instance_;
class DisAllowLocalRecordingParams;
struct DisAllowLocalRecordingParamsDefaultTypeInternal;
extern DisAllowLocalRecordingParamsDefaultTypeInternal _DisAllowLocalRecordingParams_default_instance_;
class DisableAccountSettingTabPageParams;
struct DisableAccountSettingTabPageParamsDefaultTypeInternal;
extern DisableAccountSettingTabPageParamsDefaultTypeInternal _DisableAccountSettingTabPageParams_default_instance_;
class DisableAdvancedFeatures4GeneralSettingParams;
struct DisableAdvancedFeatures4GeneralSettingParamsDefaultTypeInternal;
extern DisableAdvancedFeatures4GeneralSettingParamsDefaultTypeInternal _DisableAdvancedFeatures4GeneralSettingParams_default_instance_;
class DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams;
struct DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParamsDefaultTypeInternal;
extern DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParamsDefaultTypeInternal _DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_default_instance_;
class DisableFreeMeetingRemainTimeNotifyParams;
struct DisableFreeMeetingRemainTimeNotifyParamsDefaultTypeInternal;
extern DisableFreeMeetingRemainTimeNotifyParamsDefaultTypeInternal _DisableFreeMeetingRemainTimeNotifyParams_default_instance_;
class DisablePopupMeetingWrongPSWDlgParams;
struct DisablePopupMeetingWrongPSWDlgParamsDefaultTypeInternal;
extern DisablePopupMeetingWrongPSWDlgParamsDefaultTypeInternal _DisablePopupMeetingWrongPSWDlgParams_default_instance_;
class DisableShowJoinMeetingWndParams;
struct DisableShowJoinMeetingWndParamsDefaultTypeInternal;
extern DisableShowJoinMeetingWndParamsDefaultTypeInternal _DisableShowJoinMeetingWndParams_default_instance_;
class DisableSplitScreenModeUIElementsParams;
struct DisableSplitScreenModeUIElementsParamsDefaultTypeInternal;
extern DisableSplitScreenModeUIElementsParamsDefaultTypeInternal _DisableSplitScreenModeUIElementsParams_default_instance_;
class DisableToolbarInviteButtonClickOriginActionParams;
struct DisableToolbarInviteButtonClickOriginActionParamsDefaultTypeInternal;
extern DisableToolbarInviteButtonClickOriginActionParamsDefaultTypeInternal _DisableToolbarInviteButtonClickOriginActionParams_default_instance_;
class DisableTopMostAttr4SettingDialogParams;
struct DisableTopMostAttr4SettingDialogParamsDefaultTypeInternal;
extern DisableTopMostAttr4SettingDialogParamsDefaultTypeInternal _DisableTopMostAttr4SettingDialogParams_default_instance_;
class DisableWaitingForHostDialogParams;
struct DisableWaitingForHostDialogParamsDefaultTypeInternal;
extern DisableWaitingForHostDialogParamsDefaultTypeInternal _DisableWaitingForHostDialogParams_default_instance_;
class EditMeetingParams;
struct EditMeetingParamsDefaultTypeInternal;
extern EditMeetingParamsDefaultTypeInternal _EditMeetingParams_default_instance_;
class EditMeetingWithWndParams;
struct EditMeetingWithWndParamsDefaultTypeInternal;
extern EditMeetingWithWndParamsDefaultTypeInternal _EditMeetingWithWndParams_default_instance_;
class Enable49VideoesInGallaryViewParams;
struct Enable49VideoesInGallaryViewParamsDefaultTypeInternal;
extern Enable49VideoesInGallaryViewParamsDefaultTypeInternal _Enable49VideoesInGallaryViewParams_default_instance_;
class EnableAccelerateGPUWhenShareParams;
struct EnableAccelerateGPUWhenShareParamsDefaultTypeInternal;
extern EnableAccelerateGPUWhenShareParamsDefaultTypeInternal _EnableAccelerateGPUWhenShareParams_default_instance_;
class EnableAddTimestampWatermarkParams;
struct EnableAddTimestampWatermarkParamsDefaultTypeInternal;
extern EnableAddTimestampWatermarkParamsDefaultTypeInternal _EnableAddTimestampWatermarkParams_default_instance_;
class EnableAirplayInstructionWindowParams;
struct EnableAirplayInstructionWindowParamsDefaultTypeInternal;
extern EnableAirplayInstructionWindowParamsDefaultTypeInternal _EnableAirplayInstructionWindowParams_default_instance_;
class EnableAlwaysMuteMicWhenJoinVoipParams;
struct EnableAlwaysMuteMicWhenJoinVoipParamsDefaultTypeInternal;
extern EnableAlwaysMuteMicWhenJoinVoipParamsDefaultTypeInternal _EnableAlwaysMuteMicWhenJoinVoipParams_default_instance_;
class EnableAlwaysShowMeetingControlsParams;
struct EnableAlwaysShowMeetingControlsParamsDefaultTypeInternal;
extern EnableAlwaysShowMeetingControlsParamsDefaultTypeInternal _EnableAlwaysShowMeetingControlsParams_default_instance_;
class EnableAlwaysShowNameOnVideoParams;
struct EnableAlwaysShowNameOnVideoParamsDefaultTypeInternal;
extern EnableAlwaysShowNameOnVideoParamsDefaultTypeInternal _EnableAlwaysShowNameOnVideoParams_default_instance_;
class EnableApproveRemoteControlDlgParams;
struct EnableApproveRemoteControlDlgParamsDefaultTypeInternal;
extern EnableApproveRemoteControlDlgParamsDefaultTypeInternal _EnableApproveRemoteControlDlgParams_default_instance_;
class EnableAudioButtonOnMeetingUIParams;
struct EnableAudioButtonOnMeetingUIParamsDefaultTypeInternal;
extern EnableAudioButtonOnMeetingUIParamsDefaultTypeInternal _EnableAudioButtonOnMeetingUIParams_default_instance_;
class EnableAutoAdjustMicParams;
struct EnableAutoAdjustMicParamsDefaultTypeInternal;
extern EnableAutoAdjustMicParamsDefaultTypeInternal _EnableAutoAdjustMicParams_default_instance_;
class EnableAutoAdjustMicVolumeWhenJoinAudioParams;
struct EnableAutoAdjustMicVolumeWhenJoinAudioParamsDefaultTypeInternal;
extern EnableAutoAdjustMicVolumeWhenJoinAudioParamsDefaultTypeInternal _EnableAutoAdjustMicVolumeWhenJoinAudioParams_default_instance_;
class EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams;
struct EnableAutoAdjustSpeakerVolumeWhenJoinAudioParamsDefaultTypeInternal;
extern EnableAutoAdjustSpeakerVolumeWhenJoinAudioParamsDefaultTypeInternal _EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_default_instance_;
class EnableAutoEndOtherMeetingWhenStartMeetingParams;
struct EnableAutoEndOtherMeetingWhenStartMeetingParamsDefaultTypeInternal;
extern EnableAutoEndOtherMeetingWhenStartMeetingParamsDefaultTypeInternal _EnableAutoEndOtherMeetingWhenStartMeetingParams_default_instance_;
class EnableAutoFitToWindowWhenViewSharingParams;
struct EnableAutoFitToWindowWhenViewSharingParamsDefaultTypeInternal;
extern EnableAutoFitToWindowWhenViewSharingParamsDefaultTypeInternal _EnableAutoFitToWindowWhenViewSharingParams_default_instance_;
class EnableAutoFullScreenVideoWhenJoinMeetingParams;
struct EnableAutoFullScreenVideoWhenJoinMeetingParamsDefaultTypeInternal;
extern EnableAutoFullScreenVideoWhenJoinMeetingParamsDefaultTypeInternal _EnableAutoFullScreenVideoWhenJoinMeetingParams_default_instance_;
class EnableAutoFullScreenVideoWhenViewShareParams;
struct EnableAutoFullScreenVideoWhenViewShareParamsDefaultTypeInternal;
extern EnableAutoFullScreenVideoWhenViewShareParamsDefaultTypeInternal _EnableAutoFullScreenVideoWhenViewShareParams_default_instance_;
class EnableAutoHideJoinAudioDialogParams;
struct EnableAutoHideJoinAudioDialogParamsDefaultTypeInternal;
extern EnableAutoHideJoinAudioDialogParamsDefaultTypeInternal _EnableAutoHideJoinAudioDialogParams_default_instance_;
class EnableAutoJoinAudioParams;
struct EnableAutoJoinAudioParamsDefaultTypeInternal;
extern EnableAutoJoinAudioParamsDefaultTypeInternal _EnableAutoJoinAudioParams_default_instance_;
class EnableAutoTurnOffVideoWhenJoinMeetingParams;
struct EnableAutoTurnOffVideoWhenJoinMeetingParamsDefaultTypeInternal;
extern EnableAutoTurnOffVideoWhenJoinMeetingParamsDefaultTypeInternal _EnableAutoTurnOffVideoWhenJoinMeetingParams_default_instance_;
class EnableClaimHostFeatureParams;
struct EnableClaimHostFeatureParamsDefaultTypeInternal;
extern EnableClaimHostFeatureParamsDefaultTypeInternal _EnableClaimHostFeatureParams_default_instance_;
class EnableDeclineRemoteControlResponseDlgParams;
struct EnableDeclineRemoteControlResponseDlgParamsDefaultTypeInternal;
extern EnableDeclineRemoteControlResponseDlgParamsDefaultTypeInternal _EnableDeclineRemoteControlResponseDlgParams_default_instance_;
class EnableDisplayReminderWindowWhenExitParams;
struct EnableDisplayReminderWindowWhenExitParamsDefaultTypeInternal;
extern EnableDisplayReminderWindowWhenExitParamsDefaultTypeInternal _EnableDisplayReminderWindowWhenExitParams_default_instance_;
class EnableDualScreenModeParams;
struct EnableDualScreenModeParamsDefaultTypeInternal;
extern EnableDualScreenModeParamsDefaultTypeInternal _EnableDualScreenModeParams_default_instance_;
class EnableEnterAndExitFullScreenButtonOnMeetingUIParams;
struct EnableEnterAndExitFullScreenButtonOnMeetingUIParamsDefaultTypeInternal;
extern EnableEnterAndExitFullScreenButtonOnMeetingUIParamsDefaultTypeInternal _EnableEnterAndExitFullScreenButtonOnMeetingUIParams_default_instance_;
class EnableFaceBeautyEffectParams;
struct EnableFaceBeautyEffectParamsDefaultTypeInternal;
extern EnableFaceBeautyEffectParamsDefaultTypeInternal _EnableFaceBeautyEffectParams_default_instance_;
class EnableForceAutoStartMyVideoWhenJoinMeetingParams;
struct EnableForceAutoStartMyVideoWhenJoinMeetingParamsDefaultTypeInternal;
extern EnableForceAutoStartMyVideoWhenJoinMeetingParamsDefaultTypeInternal _EnableForceAutoStartMyVideoWhenJoinMeetingParams_default_instance_;
class EnableForceAutoStopMyVideoWhenJoinMeetingParams;
struct EnableForceAutoStopMyVideoWhenJoinMeetingParamsDefaultTypeInternal;
extern EnableForceAutoStopMyVideoWhenJoinMeetingParamsDefaultTypeInternal _EnableForceAutoStopMyVideoWhenJoinMeetingParams_default_instance_;
class EnableGrabShareWithoutReminderParams;
struct EnableGrabShareWithoutReminderParamsDefaultTypeInternal;
extern EnableGrabShareWithoutReminderParamsDefaultTypeInternal _EnableGrabShareWithoutReminderParams_default_instance_;
class EnableHDVideoParams;
struct EnableHDVideoParamsDefaultTypeInternal;
extern EnableHDVideoParamsDefaultTypeInternal _EnableHDVideoParams_default_instance_;
class EnableHIdeFullPhoneNumber4PureCallinUserParams;
struct EnableHIdeFullPhoneNumber4PureCallinUserParamsDefaultTypeInternal;
extern EnableHIdeFullPhoneNumber4PureCallinUserParamsDefaultTypeInternal _EnableHIdeFullPhoneNumber4PureCallinUserParams_default_instance_;
class EnableHardwareEncodeParams;
struct EnableHardwareEncodeParamsDefaultTypeInternal;
extern EnableHardwareEncodeParamsDefaultTypeInternal _EnableHardwareEncodeParams_default_instance_;
class EnableHideNoVideoUsersOnWallViewParams;
struct EnableHideNoVideoUsersOnWallViewParamsDefaultTypeInternal;
extern EnableHideNoVideoUsersOnWallViewParamsDefaultTypeInternal _EnableHideNoVideoUsersOnWallViewParams_default_instance_;
class EnableHoldSpaceKeyToSpeakParams;
struct EnableHoldSpaceKeyToSpeakParamsDefaultTypeInternal;
extern EnableHoldSpaceKeyToSpeakParamsDefaultTypeInternal _EnableHoldSpaceKeyToSpeakParams_default_instance_;
class EnableInputMeetingPasswordDlgParams;
struct EnableInputMeetingPasswordDlgParamsDefaultTypeInternal;
extern EnableInputMeetingPasswordDlgParamsDefaultTypeInternal _EnableInputMeetingPasswordDlgParams_default_instance_;
class EnableInputMeetingScreenNameDlgParams;
struct EnableInputMeetingScreenNameDlgParamsDefaultTypeInternal;
extern EnableInputMeetingScreenNameDlgParamsDefaultTypeInternal _EnableInputMeetingScreenNameDlgParams_default_instance_;
class EnableInviteButtonOnMeetingUIParams;
struct EnableInviteButtonOnMeetingUIParamsDefaultTypeInternal;
extern EnableInviteButtonOnMeetingUIParamsDefaultTypeInternal _EnableInviteButtonOnMeetingUIParams_default_instance_;
class EnableInviteLinkOnMeetingUIParams;
struct EnableInviteLinkOnMeetingUIParamsDefaultTypeInternal;
extern EnableInviteLinkOnMeetingUIParamsDefaultTypeInternal _EnableInviteLinkOnMeetingUIParams_default_instance_;
class EnableLButtonDBClick4SwitchFullScreenModeParams;
struct EnableLButtonDBClick4SwitchFullScreenModeParamsDefaultTypeInternal;
extern EnableLButtonDBClick4SwitchFullScreenModeParamsDefaultTypeInternal _EnableLButtonDBClick4SwitchFullScreenModeParams_default_instance_;
class EnableLeaveMeetingOptionForHostParams;
struct EnableLeaveMeetingOptionForHostParamsDefaultTypeInternal;
extern EnableLeaveMeetingOptionForHostParamsDefaultTypeInternal _EnableLeaveMeetingOptionForHostParams_default_instance_;
class EnableLengthLimitationOfMeetingNumberParams;
struct EnableLengthLimitationOfMeetingNumberParamsDefaultTypeInternal;
extern EnableLengthLimitationOfMeetingNumberParamsDefaultTypeInternal _EnableLengthLimitationOfMeetingNumberParams_default_instance_;
class EnableLocalRecordingConverProgressBarDialogParams;
struct EnableLocalRecordingConverProgressBarDialogParamsDefaultTypeInternal;
extern EnableLocalRecordingConverProgressBarDialogParamsDefaultTypeInternal _EnableLocalRecordingConverProgressBarDialogParams_default_instance_;
class EnableMicOriginalInputParams;
struct EnableMicOriginalInputParamsDefaultTypeInternal;
extern EnableMicOriginalInputParamsDefaultTypeInternal _EnableMicOriginalInputParams_default_instance_;
class EnableMultiAudioStreamRecordParams;
struct EnableMultiAudioStreamRecordParamsDefaultTypeInternal;
extern EnableMultiAudioStreamRecordParamsDefaultTypeInternal _EnableMultiAudioStreamRecordParams_default_instance_;
class EnableOptimizeFor3rdPartyVideoEditorParams;
struct EnableOptimizeFor3rdPartyVideoEditorParamsDefaultTypeInternal;
extern EnableOptimizeFor3rdPartyVideoEditorParamsDefaultTypeInternal _EnableOptimizeFor3rdPartyVideoEditorParams_default_instance_;
class EnablePlaceVideoNextToShareInRecordParams;
struct EnablePlaceVideoNextToShareInRecordParamsDefaultTypeInternal;
extern EnablePlaceVideoNextToShareInRecordParamsDefaultTypeInternal _EnablePlaceVideoNextToShareInRecordParams_default_instance_;
class EnablePlayChimeWhenEnterOrExitParams;
struct EnablePlayChimeWhenEnterOrExitParamsDefaultTypeInternal;
extern EnablePlayChimeWhenEnterOrExitParamsDefaultTypeInternal _EnablePlayChimeWhenEnterOrExitParams_default_instance_;
class EnableRemoteControlAllApplicationsParams;
struct EnableRemoteControlAllApplicationsParamsDefaultTypeInternal;
extern EnableRemoteControlAllApplicationsParamsDefaultTypeInternal _EnableRemoteControlAllApplicationsParams_default_instance_;
class EnableSelectRecordFileLocationAfterMeetingParams;
struct EnableSelectRecordFileLocationAfterMeetingParamsDefaultTypeInternal;
extern EnableSelectRecordFileLocationAfterMeetingParamsDefaultTypeInternal _EnableSelectRecordFileLocationAfterMeetingParams_default_instance_;
class EnableShareIOSDeviceParams;
struct EnableShareIOSDeviceParamsDefaultTypeInternal;
extern EnableShareIOSDeviceParamsDefaultTypeInternal _EnableShareIOSDeviceParams_default_instance_;
class EnableShareWhiteBoardParams;
struct EnableShareWhiteBoardParamsDefaultTypeInternal;
extern EnableShareWhiteBoardParamsDefaultTypeInternal _EnableShareWhiteBoardParams_default_instance_;
class EnableShowMyMeetingElapseTimeParams;
struct EnableShowMyMeetingElapseTimeParamsDefaultTypeInternal;
extern EnableShowMyMeetingElapseTimeParamsDefaultTypeInternal _EnableShowMyMeetingElapseTimeParams_default_instance_;
class EnableShowShareSwitchMultiToSingleConfirmDlgParams;
struct EnableShowShareSwitchMultiToSingleConfirmDlgParamsDefaultTypeInternal;
extern EnableShowShareSwitchMultiToSingleConfirmDlgParamsDefaultTypeInternal _EnableShowShareSwitchMultiToSingleConfirmDlgParams_default_instance_;
class EnableShowVideoThumbnailWhenShareParams;
struct EnableShowVideoThumbnailWhenShareParamsDefaultTypeInternal;
extern EnableShowVideoThumbnailWhenShareParamsDefaultTypeInternal _EnableShowVideoThumbnailWhenShareParams_default_instance_;
class EnableSplitScreenModeParams;
struct EnableSplitScreenModeParamsDefaultTypeInternal;
extern EnableSplitScreenModeParamsDefaultTypeInternal _EnableSplitScreenModeParams_default_instance_;
class EnableSpotlightSelfParams;
struct EnableSpotlightSelfParamsDefaultTypeInternal;
extern EnableSpotlightSelfParamsDefaultTypeInternal _EnableSpotlightSelfParams_default_instance_;
class EnableStereoAudioParams;
struct EnableStereoAudioParamsDefaultTypeInternal;
extern EnableStereoAudioParamsDefaultTypeInternal _EnableStereoAudioParams_default_instance_;
class EnableSuppressAudioNotifyParams;
struct EnableSuppressAudioNotifyParamsDefaultTypeInternal;
extern EnableSuppressAudioNotifyParamsDefaultTypeInternal _EnableSuppressAudioNotifyParams_default_instance_;
class EnableToolTipsShowParams;
struct EnableToolTipsShowParamsDefaultTypeInternal;
extern EnableToolTipsShowParamsDefaultTypeInternal _EnableToolTipsShowParams_default_instance_;
class EnableVideoButtonOnMeetingUIParams;
struct EnableVideoButtonOnMeetingUIParamsDefaultTypeInternal;
extern EnableVideoButtonOnMeetingUIParamsDefaultTypeInternal _EnableVideoButtonOnMeetingUIParams_default_instance_;
class EnableVideoMirrorEffectParams;
struct EnableVideoMirrorEffectParamsDefaultTypeInternal;
extern EnableVideoMirrorEffectParamsDefaultTypeInternal _EnableVideoMirrorEffectParams_default_instance_;
class EnableVideoPreviewDialogParams;
struct EnableVideoPreviewDialogParamsDefaultTypeInternal;
extern EnableVideoPreviewDialogParamsDefaultTypeInternal _EnableVideoPreviewDialogParams_default_instance_;
class EnableWaitingRoomOnEntryParams;
struct EnableWaitingRoomOnEntryParamsDefaultTypeInternal;
extern EnableWaitingRoomOnEntryParamsDefaultTypeInternal _EnableWaitingRoomOnEntryParams_default_instance_;
class EnableZoomAuthRealNameMeetingUIShownParams;
struct EnableZoomAuthRealNameMeetingUIShownParamsDefaultTypeInternal;
extern EnableZoomAuthRealNameMeetingUIShownParamsDefaultTypeInternal _EnableZoomAuthRealNameMeetingUIShownParams_default_instance_;
class EnterFullScreenParams;
struct EnterFullScreenParamsDefaultTypeInternal;
extern EnterFullScreenParamsDefaultTypeInternal _EnterFullScreenParams_default_instance_;
class ExitFullScreenParams;
struct ExitFullScreenParamsDefaultTypeInternal;
extern ExitFullScreenParamsDefaultTypeInternal _ExitFullScreenParams_default_instance_;
class ExpelUserParams;
struct ExpelUserParamsDefaultTypeInternal;
extern ExpelUserParamsDefaultTypeInternal _ExpelUserParams_default_instance_;
class ForceDisableMultiShareParams;
struct ForceDisableMultiShareParamsDefaultTypeInternal;
extern ForceDisableMultiShareParamsDefaultTypeInternal _ForceDisableMultiShareParams_default_instance_;
class GenerateSSOLoginWebURLParams;
struct GenerateSSOLoginWebURLParamsDefaultTypeInternal;
extern GenerateSSOLoginWebURLParamsDefaultTypeInternal _GenerateSSOLoginWebURLParams_default_instance_;
class GetLiveStreamItemInfoParams;
struct GetLiveStreamItemInfoParamsDefaultTypeInternal;
extern GetLiveStreamItemInfoParamsDefaultTypeInternal _GetLiveStreamItemInfoParams_default_instance_;
class GetRawDataTypeParams;
struct GetRawDataTypeParamsDefaultTypeInternal;
extern GetRawDataTypeParamsDefaultTypeInternal _GetRawDataTypeParams_default_instance_;
class GetResolutionParams;
struct GetResolutionParamsDefaultTypeInternal;
extern GetResolutionParamsDefaultTypeInternal _GetResolutionParams_default_instance_;
class GetUserIdParams;
struct GetUserIdParamsDefaultTypeInternal;
extern GetUserIdParamsDefaultTypeInternal _GetUserIdParams_default_instance_;
class GetUserInfoByUserIDParams;
struct GetUserInfoByUserIDParamsDefaultTypeInternal;
extern GetUserInfoByUserIDParamsDefaultTypeInternal _GetUserInfoByUserIDParams_default_instance_;
class GetWaitingRoomUserInfoByIDParams;
struct GetWaitingRoomUserInfoByIDParamsDefaultTypeInternal;
extern GetWaitingRoomUserInfoByIDParamsDefaultTypeInternal _GetWaitingRoomUserInfoByIDParams_default_instance_;
class HandleZoomWebUriProtocolActionParams;
struct HandleZoomWebUriProtocolActionParamsDefaultTypeInternal;
extern HandleZoomWebUriProtocolActionParamsDefaultTypeInternal _HandleZoomWebUriProtocolActionParams_default_instance_;
class HideAutoCopyInviteLinkCheckBoxParams;
struct HideAutoCopyInviteLinkCheckBoxParamsDefaultTypeInternal;
extern HideAutoCopyInviteLinkCheckBoxParamsDefaultTypeInternal _HideAutoCopyInviteLinkCheckBoxParams_default_instance_;
class HideChatItemOnMeetingUIParams;
struct HideChatItemOnMeetingUIParamsDefaultTypeInternal;
extern HideChatItemOnMeetingUIParamsDefaultTypeInternal _HideChatItemOnMeetingUIParams_default_instance_;
class HideCopyInvitationOnInviteWindowParams;
struct HideCopyInvitationOnInviteWindowParamsDefaultTypeInternal;
extern HideCopyInvitationOnInviteWindowParamsDefaultTypeInternal _HideCopyInvitationOnInviteWindowParams_default_instance_;
class HideCopyUrlOnInviteWindowParams;
struct HideCopyUrlOnInviteWindowParamsDefaultTypeInternal;
extern HideCopyUrlOnInviteWindowParamsDefaultTypeInternal _HideCopyUrlOnInviteWindowParams_default_instance_;
class HideKeypadButtonOnMeetingWindowParams;
struct HideKeypadButtonOnMeetingWindowParamsDefaultTypeInternal;
extern HideKeypadButtonOnMeetingWindowParamsDefaultTypeInternal _HideKeypadButtonOnMeetingWindowParams_default_instance_;
class HideOrShowNoVideoUserOnVideoWallParams;
struct HideOrShowNoVideoUserOnVideoWallParamsDefaultTypeInternal;
extern HideOrShowNoVideoUserOnVideoWallParamsDefaultTypeInternal _HideOrShowNoVideoUserOnVideoWallParams_default_instance_;
class HidePollOnMeetingUIParams;
struct HidePollOnMeetingUIParamsDefaultTypeInternal;
extern HidePollOnMeetingUIParamsDefaultTypeInternal _HidePollOnMeetingUIParams_default_instance_;
class HideQAOnMeetingUIParams;
struct HideQAOnMeetingUIParamsDefaultTypeInternal;
extern HideQAOnMeetingUIParamsDefaultTypeInternal _HideQAOnMeetingUIParams_default_instance_;
class HideRecordItemOnMeetingUIParams;
struct HideRecordItemOnMeetingUIParamsDefaultTypeInternal;
extern HideRecordItemOnMeetingUIParamsDefaultTypeInternal _HideRecordItemOnMeetingUIParams_default_instance_;
class HideRemoteControlOnMeetingUIParams;
struct HideRemoteControlOnMeetingUIParamsDefaultTypeInternal;
extern HideRemoteControlOnMeetingUIParamsDefaultTypeInternal _HideRemoteControlOnMeetingUIParams_default_instance_;
class HideSwitchCameraButtonParams;
struct HideSwitchCameraButtonParamsDefaultTypeInternal;
extern HideSwitchCameraButtonParamsDefaultTypeInternal _HideSwitchCameraButtonParams_default_instance_;
class HideUpgradeFreeMeetingButtonParams;
struct HideUpgradeFreeMeetingButtonParamsDefaultTypeInternal;
extern HideUpgradeFreeMeetingButtonParamsDefaultTypeInternal _HideUpgradeFreeMeetingButtonParams_default_instance_;
class InitSDKParams;
struct InitSDKParamsDefaultTypeInternal;
extern InitSDKParamsDefaultTypeInternal _InitSDKParams_default_instance_;
class InputMeetingIDAndScreenNameParams;
struct InputMeetingIDAndScreenNameParamsDefaultTypeInternal;
extern InputMeetingIDAndScreenNameParamsDefaultTypeInternal _InputMeetingIDAndScreenNameParams_default_instance_;
class InputMeetingPasswordAndScreenNameParams;
struct InputMeetingPasswordAndScreenNameParamsDefaultTypeInternal;
extern InputMeetingPasswordAndScreenNameParamsDefaultTypeInternal _InputMeetingPasswordAndScreenNameParams_default_instance_;
class InputMeetingScreenNameParams;
struct InputMeetingScreenNameParamsDefaultTypeInternal;
extern InputMeetingScreenNameParamsDefaultTypeInternal _InputMeetingScreenNameParams_default_instance_;
class InputScreenNameParams;
struct InputScreenNameParamsDefaultTypeInternal;
extern InputScreenNameParamsDefaultTypeInternal _InputScreenNameParams_default_instance_;
class InputWebinarRegisterEmailAndScreenNameParams;
struct InputWebinarRegisterEmailAndScreenNameParamsDefaultTypeInternal;
extern InputWebinarRegisterEmailAndScreenNameParamsDefaultTypeInternal _InputWebinarRegisterEmailAndScreenNameParams_default_instance_;
class IsHardwareEncodeEnabledParams;
struct IsHardwareEncodeEnabledParamsDefaultTypeInternal;
extern IsHardwareEncodeEnabledParamsDefaultTypeInternal _IsHardwareEncodeEnabledParams_default_instance_;
class IsSupportLocalRecordingParams;
struct IsSupportLocalRecordingParamsDefaultTypeInternal;
extern IsSupportLocalRecordingParamsDefaultTypeInternal _IsSupportLocalRecordingParams_default_instance_;
class JoinMeetingParams;
struct JoinMeetingParamsDefaultTypeInternal;
extern JoinMeetingParamsDefaultTypeInternal _JoinMeetingParams_default_instance_;
class JoinWithoutLoginParams;
struct JoinWithoutLoginParamsDefaultTypeInternal;
extern JoinWithoutLoginParamsDefaultTypeInternal _JoinWithoutLoginParams_default_instance_;
class LeaveMeetingParams;
struct LeaveMeetingParamsDefaultTypeInternal;
extern LeaveMeetingParamsDefaultTypeInternal _LeaveMeetingParams_default_instance_;
class LoginWithSSOTokenParams;
struct LoginWithSSOTokenParamsDefaultTypeInternal;
extern LoginWithSSOTokenParamsDefaultTypeInternal _LoginWithSSOTokenParams_default_instance_;
class MoveFloatVideoWndParams;
struct MoveFloatVideoWndParamsDefaultTypeInternal;
extern MoveFloatVideoWndParamsDefaultTypeInternal _MoveFloatVideoWndParams_default_instance_;
class MuteAudioParams;
struct MuteAudioParamsDefaultTypeInternal;
extern MuteAudioParamsDefaultTypeInternal _MuteAudioParams_default_instance_;
class MuteVideoParams;
struct MuteVideoParamsDefaultTypeInternal;
extern MuteVideoParamsDefaultTypeInternal _MuteVideoParams_default_instance_;
class PinVideoParams;
struct PinVideoParamsDefaultTypeInternal;
extern PinVideoParamsDefaultTypeInternal _PinVideoParams_default_instance_;
class PrePopulateWebinarRegistrationInfoParams;
struct PrePopulateWebinarRegistrationInfoParamsDefaultTypeInternal;
extern PrePopulateWebinarRegistrationInfoParamsDefaultTypeInternal _PrePopulateWebinarRegistrationInfoParams_default_instance_;
class PutInWaitingRoomParams;
struct PutInWaitingRoomParamsDefaultTypeInternal;
extern PutInWaitingRoomParamsDefaultTypeInternal _PutInWaitingRoomParams_default_instance_;
class RedirectClickAudioBTNEventParams;
struct RedirectClickAudioBTNEventParamsDefaultTypeInternal;
extern RedirectClickAudioBTNEventParamsDefaultTypeInternal _RedirectClickAudioBTNEventParams_default_instance_;
class RedirectClickAudioMenuBTNEventParams;
struct RedirectClickAudioMenuBTNEventParamsDefaultTypeInternal;
extern RedirectClickAudioMenuBTNEventParamsDefaultTypeInternal _RedirectClickAudioMenuBTNEventParams_default_instance_;
class RedirectClickCCBTNEventParams;
struct RedirectClickCCBTNEventParamsDefaultTypeInternal;
extern RedirectClickCCBTNEventParamsDefaultTypeInternal _RedirectClickCCBTNEventParams_default_instance_;
class RedirectClickCustomLiveStreamMenuEventParams;
struct RedirectClickCustomLiveStreamMenuEventParamsDefaultTypeInternal;
extern RedirectClickCustomLiveStreamMenuEventParamsDefaultTypeInternal _RedirectClickCustomLiveStreamMenuEventParams_default_instance_;
class RedirectClickEndMeetingBTNEventParams;
struct RedirectClickEndMeetingBTNEventParamsDefaultTypeInternal;
extern RedirectClickEndMeetingBTNEventParamsDefaultTypeInternal _RedirectClickEndMeetingBTNEventParams_default_instance_;
class RedirectClickParticipantListBTNEventParams;
struct RedirectClickParticipantListBTNEventParamsDefaultTypeInternal;
extern RedirectClickParticipantListBTNEventParamsDefaultTypeInternal _RedirectClickParticipantListBTNEventParams_default_instance_;
class RedirectClickShareBTNEventParams;
struct RedirectClickShareBTNEventParamsDefaultTypeInternal;
extern RedirectClickShareBTNEventParamsDefaultTypeInternal _RedirectClickShareBTNEventParams_default_instance_;
class RedirectEndOtherMeetingParams;
struct RedirectEndOtherMeetingParamsDefaultTypeInternal;
extern RedirectEndOtherMeetingParamsDefaultTypeInternal _RedirectEndOtherMeetingParams_default_instance_;
class RedirectFreeMeetingEndingReminderDlgParams;
struct RedirectFreeMeetingEndingReminderDlgParamsDefaultTypeInternal;
extern RedirectFreeMeetingEndingReminderDlgParamsDefaultTypeInternal _RedirectFreeMeetingEndingReminderDlgParams_default_instance_;
class RedirectMeetingWarningMsgParams;
struct RedirectMeetingWarningMsgParamsDefaultTypeInternal;
extern RedirectMeetingWarningMsgParamsDefaultTypeInternal _RedirectMeetingWarningMsgParams_default_instance_;
class RedirectWebinarNeedRegisterParams;
struct RedirectWebinarNeedRegisterParamsDefaultTypeInternal;
extern RedirectWebinarNeedRegisterParamsDefaultTypeInternal _RedirectWebinarNeedRegisterParams_default_instance_;
class RedoParams;
struct RedoParamsDefaultTypeInternal;
extern RedoParamsDefaultTypeInternal _RedoParams_default_instance_;
class RemoveRawLiveStreamPrivilegeParams;
struct RemoveRawLiveStreamPrivilegeParamsDefaultTypeInternal;
extern RemoveRawLiveStreamPrivilegeParamsDefaultTypeInternal _RemoveRawLiveStreamPrivilegeParams_default_instance_;
class RenameUserParams;
struct RenameUserParamsDefaultTypeInternal;
extern RenameUserParamsDefaultTypeInternal _RenameUserParams_default_instance_;
class RequestRawLiveStreamParams;
struct RequestRawLiveStreamParamsDefaultTypeInternal;
extern RequestRawLiveStreamParamsDefaultTypeInternal _RequestRawLiveStreamParams_default_instance_;
class RetrieveParams;
struct RetrieveParamsDefaultTypeInternal;
extern RetrieveParamsDefaultTypeInternal _RetrieveParams_default_instance_;
class SSOLoginWithWebUriProtocolParams;
struct SSOLoginWithWebUriProtocolParamsDefaultTypeInternal;
extern SSOLoginWithWebUriProtocolParamsDefaultTypeInternal _SSOLoginWithWebUriProtocolParams_default_instance_;
class ScheduleMeetingWithWndParams;
struct ScheduleMeetingWithWndParamsDefaultTypeInternal;
extern ScheduleMeetingWithWndParamsDefaultTypeInternal _ScheduleMeetingWithWndParams_default_instance_;
class SelectMicParams;
struct SelectMicParamsDefaultTypeInternal;
extern SelectMicParamsDefaultTypeInternal _SelectMicParams_default_instance_;
class SelectSpeakerParams;
struct SelectSpeakerParamsDefaultTypeInternal;
extern SelectSpeakerParamsDefaultTypeInternal _SelectSpeakerParams_default_instance_;
class SelectVideoCameraParams;
struct SelectVideoCameraParamsDefaultTypeInternal;
extern SelectVideoCameraParamsDefaultTypeInternal _SelectVideoCameraParams_default_instance_;
class SetAudioShareModeParams;
struct SetAudioShareModeParamsDefaultTypeInternal;
extern SetAudioShareModeParamsDefaultTypeInternal _SetAudioShareModeParams_default_instance_;
class SetBottomFloatToolBarWndVisibilityParams;
struct SetBottomFloatToolBarWndVisibilityParamsDefaultTypeInternal;
extern SetBottomFloatToolBarWndVisibilityParamsDefaultTypeInternal _SetBottomFloatToolBarWndVisibilityParams_default_instance_;
class SetChatMessageBuilderParams;
struct SetChatMessageBuilderParamsDefaultTypeInternal;
extern SetChatMessageBuilderParamsDefaultTypeInternal _SetChatMessageBuilderParams_default_instance_;
class SetColorParams;
struct SetColorParamsDefaultTypeInternal;
extern SetColorParamsDefaultTypeInternal _SetColorParams_default_instance_;
class SetCustomizedCloudRecordingMgrUrlParams;
struct SetCustomizedCloudRecordingMgrUrlParamsDefaultTypeInternal;
extern SetCustomizedCloudRecordingMgrUrlParamsDefaultTypeInternal _SetCustomizedCloudRecordingMgrUrlParams_default_instance_;
class SetCustomizedInvitationDomainParams;
struct SetCustomizedInvitationDomainParamsDefaultTypeInternal;
extern SetCustomizedInvitationDomainParamsDefaultTypeInternal _SetCustomizedInvitationDomainParams_default_instance_;
class SetCustomizedPollingUrlParams;
struct SetCustomizedPollingUrlParamsDefaultTypeInternal;
extern SetCustomizedPollingUrlParamsDefaultTypeInternal _SetCustomizedPollingUrlParams_default_instance_;
class SetDefaultCellPhoneInfoParams;
struct SetDefaultCellPhoneInfoParamsDefaultTypeInternal;
extern SetDefaultCellPhoneInfoParamsDefaultTypeInternal _SetDefaultCellPhoneInfoParams_default_instance_;
class SetDirectShareMonitorIDParams;
struct SetDirectShareMonitorIDParamsDefaultTypeInternal;
extern SetDirectShareMonitorIDParamsDefaultTypeInternal _SetDirectShareMonitorIDParams_default_instance_;
class SetEchoCancellationLevelParams;
struct SetEchoCancellationLevelParamsDefaultTypeInternal;
extern SetEchoCancellationLevelParamsDefaultTypeInternal _SetEchoCancellationLevelParams_default_instance_;
class SetEnableOptionParams;
struct SetEnableOptionParamsDefaultTypeInternal;
extern SetEnableOptionParamsDefaultTypeInternal _SetEnableOptionParams_default_instance_;
class SetFloatVideoPosParams;
struct SetFloatVideoPosParamsDefaultTypeInternal;
extern SetFloatVideoPosParamsDefaultTypeInternal _SetFloatVideoPosParams_default_instance_;
class SetFloatVideoWndVisibilityParams;
struct SetFloatVideoWndVisibilityParamsDefaultTypeInternal;
extern SetFloatVideoWndVisibilityParamsDefaultTypeInternal _SetFloatVideoWndVisibilityParams_default_instance_;
class SetLineWidthParams;
struct SetLineWidthParamsDefaultTypeInternal;
extern SetLineWidthParamsDefaultTypeInternal _SetLineWidthParams_default_instance_;
class SetMaxDurationForOnlyHostInMeetingParams;
struct SetMaxDurationForOnlyHostInMeetingParamsDefaultTypeInternal;
extern SetMaxDurationForOnlyHostInMeetingParamsDefaultTypeInternal _SetMaxDurationForOnlyHostInMeetingParams_default_instance_;
class SetMeetingTopicParams;
struct SetMeetingTopicParamsDefaultTypeInternal;
extern SetMeetingTopicParamsDefaultTypeInternal _SetMeetingTopicParams_default_instance_;
class SetMeetingUIPosParams;
struct SetMeetingUIPosParamsDefaultTypeInternal;
extern SetMeetingUIPosParamsDefaultTypeInternal _SetMeetingUIPosParams_default_instance_;
class SetMicVolParams;
struct SetMicVolParamsDefaultTypeInternal;
extern SetMicVolParamsDefaultTypeInternal _SetMicVolParams_default_instance_;
class SetParticipantsChatPrivilegeParams;
struct SetParticipantsChatPrivilegeParamsDefaultTypeInternal;
extern SetParticipantsChatPrivilegeParamsDefaultTypeInternal _SetParticipantsChatPrivilegeParams_default_instance_;
class SetPipeInitParams;
struct SetPipeInitParamsDefaultTypeInternal;
extern SetPipeInitParamsDefaultTypeInternal _SetPipeInitParams_default_instance_;
class SetRawDataResolutionParams;
struct SetRawDataResolutionParamsDefaultTypeInternal;
extern SetRawDataResolutionParamsDefaultTypeInternal _SetRawDataResolutionParams_default_instance_;
class SetRecordingPathParams;
struct SetRecordingPathParamsDefaultTypeInternal;
extern SetRecordingPathParamsDefaultTypeInternal _SetRecordingPathParams_default_instance_;
class SetSharingToolBarVisibilityParams;
struct SetSharingToolBarVisibilityParamsDefaultTypeInternal;
extern SetSharingToolBarVisibilityParamsDefaultTypeInternal _SetSharingToolBarVisibilityParams_default_instance_;
class SetShowAudioUseComputerSoundChkboxParams;
struct SetShowAudioUseComputerSoundChkboxParamsDefaultTypeInternal;
extern SetShowAudioUseComputerSoundChkboxParamsDefaultTypeInternal _SetShowAudioUseComputerSoundChkboxParams_default_instance_;
class SetShowCallInTabParams;
struct SetShowCallInTabParamsDefaultTypeInternal;
extern SetShowCallInTabParamsDefaultTypeInternal _SetShowCallInTabParams_default_instance_;
class SetShowCallMeTabParams;
struct SetShowCallMeTabParamsDefaultTypeInternal;
extern SetShowCallMeTabParamsDefaultTypeInternal _SetShowCallMeTabParams_default_instance_;
class SetShowH323SubTabPageParams;
struct SetShowH323SubTabPageParamsDefaultTypeInternal;
extern SetShowH323SubTabPageParamsDefaultTypeInternal _SetShowH323SubTabPageParams_default_instance_;
class SetShowInviteDlgTabPageParams;
struct SetShowInviteDlgTabPageParamsDefaultTypeInternal;
extern SetShowInviteDlgTabPageParamsDefaultTypeInternal _SetShowInviteDlgTabPageParams_default_instance_;
class SetShowVideoOptimizeChkboxParams;
struct SetShowVideoOptimizeChkboxParamsDefaultTypeInternal;
extern SetShowVideoOptimizeChkboxParamsDefaultTypeInternal _SetShowVideoOptimizeChkboxParams_default_instance_;
class SetSpeakerVolParams;
struct SetSpeakerVolParamsDefaultTypeInternal;
extern SetSpeakerVolParamsDefaultTypeInternal _SetSpeakerVolParams_default_instance_;
class SetSupportDarkModeParams;
struct SetSupportDarkModeParamsDefaultTypeInternal;
extern SetSupportDarkModeParamsDefaultTypeInternal _SetSupportDarkModeParams_default_instance_;
class SetToolParams;
struct SetToolParamsDefaultTypeInternal;
extern SetToolParamsDefaultTypeInternal _SetToolParams_default_instance_;
class ShowAANPanelParams;
struct ShowAANPanelParamsDefaultTypeInternal;
extern ShowAANPanelParamsDefaultTypeInternal _ShowAANPanelParams_default_instance_;
class ShowBottomFloatToolbarWndParams;
struct ShowBottomFloatToolbarWndParamsDefaultTypeInternal;
extern ShowBottomFloatToolbarWndParamsDefaultTypeInternal _ShowBottomFloatToolbarWndParams_default_instance_;
class ShowChatDlgParams;
struct ShowChatDlgParamsDefaultTypeInternal;
extern ShowChatDlgParamsDefaultTypeInternal _ShowChatDlgParams_default_instance_;
class ShowParticipantsListWndParams;
struct ShowParticipantsListWndParamsDefaultTypeInternal;
extern ShowParticipantsListWndParamsDefaultTypeInternal _ShowParticipantsListWndParams_default_instance_;
class ShowPreOrNextPageVideoParams;
struct ShowPreOrNextPageVideoParamsDefaultTypeInternal;
extern ShowPreOrNextPageVideoParamsDefaultTypeInternal _ShowPreOrNextPageVideoParams_default_instance_;
class ShowSettingDlgParams;
struct ShowSettingDlgParamsDefaultTypeInternal;
extern ShowSettingDlgParamsDefaultTypeInternal _ShowSettingDlgParams_default_instance_;
class ShowSharingFrameWindowsParams;
struct ShowSharingFrameWindowsParamsDefaultTypeInternal;
extern ShowSharingFrameWindowsParamsDefaultTypeInternal _ShowSharingFrameWindowsParams_default_instance_;
class ShowSharingToolbarParams;
struct ShowSharingToolbarParamsDefaultTypeInternal;
extern ShowSharingToolbarParamsDefaultTypeInternal _ShowSharingToolbarParams_default_instance_;
class SpotlightVideoParams;
struct SpotlightVideoParamsDefaultTypeInternal;
extern SpotlightVideoParamsDefaultTypeInternal _SpotlightVideoParams_default_instance_;
class StartAnnotationParams;
struct StartAnnotationParamsDefaultTypeInternal;
extern StartAnnotationParamsDefaultTypeInternal _StartAnnotationParams_default_instance_;
class StartAppShareParams;
struct StartAppShareParamsDefaultTypeInternal;
extern StartAppShareParamsDefaultTypeInternal _StartAppShareParams_default_instance_;
class StartLiveStreamParams;
struct StartLiveStreamParamsDefaultTypeInternal;
extern StartLiveStreamParamsDefaultTypeInternal _StartLiveStreamParams_default_instance_;
class StartLiveStreamWithSteamingURLParams;
struct StartLiveStreamWithSteamingURLParamsDefaultTypeInternal;
extern StartLiveStreamWithSteamingURLParamsDefaultTypeInternal _StartLiveStreamWithSteamingURLParams_default_instance_;
class StartMeetingParams;
struct StartMeetingParamsDefaultTypeInternal;
extern StartMeetingParamsDefaultTypeInternal _StartMeetingParams_default_instance_;
class StartMonitorShareParams;
struct StartMonitorShareParamsDefaultTypeInternal;
extern StartMonitorShareParamsDefaultTypeInternal _StartMonitorShareParams_default_instance_;
class StartRawLiveStreamParams;
struct StartRawLiveStreamParamsDefaultTypeInternal;
extern StartRawLiveStreamParamsDefaultTypeInternal _StartRawLiveStreamParams_default_instance_;
class StartWithoutLoginParams;
struct StartWithoutLoginParamsDefaultTypeInternal;
extern StartWithoutLoginParamsDefaultTypeInternal _StartWithoutLoginParams_default_instance_;
class StopAnnotationParams;
struct StopAnnotationParamsDefaultTypeInternal;
extern StopAnnotationParamsDefaultTypeInternal _StopAnnotationParams_default_instance_;
class SubscribeParams;
struct SubscribeParamsDefaultTypeInternal;
extern SubscribeParamsDefaultTypeInternal _SubscribeParams_default_instance_;
class SwapToShowShareViewOrVideoParams;
struct SwapToShowShareViewOrVideoParamsDefaultTypeInternal;
extern SwapToShowShareViewOrVideoParamsDefaultTypeInternal _SwapToShowShareViewOrVideoParams_default_instance_;
class SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams;
struct SwitchMinimizeUIMode4FirstScreenMeetingUIWndParamsDefaultTypeInternal;
extern SwitchMinimizeUIMode4FirstScreenMeetingUIWndParamsDefaultTypeInternal _SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_default_instance_;
class SwitchSplitScreenModeParams;
struct SwitchSplitScreenModeParamsDefaultTypeInternal;
extern SwitchSplitScreenModeParamsDefaultTypeInternal _SwitchSplitScreenModeParams_default_instance_;
class TryWithMeetingNumberParams;
struct TryWithMeetingNumberParamsDefaultTypeInternal;
extern TryWithMeetingNumberParamsDefaultTypeInternal _TryWithMeetingNumberParams_default_instance_;
class TryWithPairingCodeParams;
struct TryWithPairingCodeParamsDefaultTypeInternal;
extern TryWithPairingCodeParamsDefaultTypeInternal _TryWithPairingCodeParams_default_instance_;
class TurnOffAeroModeInSharingParams;
struct TurnOffAeroModeInSharingParamsDefaultTypeInternal;
extern TurnOffAeroModeInSharingParamsDefaultTypeInternal _TurnOffAeroModeInSharingParams_default_instance_;
class UnMuteVideoParams;
struct UnMuteVideoParamsDefaultTypeInternal;
extern UnMuteVideoParamsDefaultTypeInternal _UnMuteVideoParams_default_instance_;
class UnSubscribeParams;
struct UnSubscribeParamsDefaultTypeInternal;
extern UnSubscribeParamsDefaultTypeInternal _UnSubscribeParams_default_instance_;
class UndoParams;
struct UndoParamsDefaultTypeInternal;
extern UndoParamsDefaultTypeInternal _UndoParams_default_instance_;
class UnmuteAudioParams;
struct UnmuteAudioParamsDefaultTypeInternal;
extern UnmuteAudioParamsDefaultTypeInternal _UnmuteAudioParams_default_instance_;
class VerifyParams;
struct VerifyParamsDefaultTypeInternal;
extern VerifyParamsDefaultTypeInternal _VerifyParams_default_instance_;
}  // namespace proto
}  // namespace sdk
}  // namespace electron
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template <>
::com::electron::sdk::proto::AddCustomizedPictureResourceParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::AddCustomizedPictureResourceParams>(Arena*);
template <>
::com::electron::sdk::proto::AddCustomizedStringResourceParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::AddCustomizedStringResourceParams>(Arena*);
template <>
::com::electron::sdk::proto::AddCustomizedURLResourceParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::AddCustomizedURLResourceParams>(Arena*);
template <>
::com::electron::sdk::proto::AdmitToMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::AdmitToMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::AllowLocalRecordingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::AllowLocalRecordingParams>(Arena*);
template <>
::com::electron::sdk::proto::AllowParticipantsToRequestCloudRecordingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::AllowParticipantsToRequestCloudRecordingParams>(Arena*);
template <>
::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams>(Arena*);
template <>
::com::electron::sdk::proto::AuthWithJwtTokenParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::AuthWithJwtTokenParams>(Arena*);
template <>
::com::electron::sdk::proto::CallOutH323Params* Arena::CreateMaybeMessage<::com::electron::sdk::proto::CallOutH323Params>(Arena*);
template <>
::com::electron::sdk::proto::CanStartRecordingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::CanStartRecordingParams>(Arena*);
template <>
::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams>(Arena*);
template <>
::com::electron::sdk::proto::ChatMessageIDParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ChatMessageIDParams>(Arena*);
template <>
::com::electron::sdk::proto::ClearAnnotationParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ClearAnnotationParams>(Arena*);
template <>
::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams>(Arena*);
template <>
::com::electron::sdk::proto::ConfigDSCPParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ConfigDSCPParams>(Arena*);
template <>
::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams>(Arena*);
template <>
::com::electron::sdk::proto::CreateRendererParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::CreateRendererParams>(Arena*);
template <>
::com::electron::sdk::proto::DeclineEnableParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DeclineEnableParams>(Arena*);
template <>
::com::electron::sdk::proto::DeleteMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DeleteMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::DenyRequestStartCloudRecordingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DenyRequestStartCloudRecordingParams>(Arena*);
template <>
::com::electron::sdk::proto::DestroyRendererParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DestroyRendererParams>(Arena*);
template <>
::com::electron::sdk::proto::DisAllowLocalRecordingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisAllowLocalRecordingParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableAccountSettingTabPageParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableAccountSettingTabPageParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams>(Arena*);
template <>
::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableShowJoinMeetingWndParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableShowJoinMeetingWndParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams>(Arena*);
template <>
::com::electron::sdk::proto::DisableWaitingForHostDialogParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::DisableWaitingForHostDialogParams>(Arena*);
template <>
::com::electron::sdk::proto::EditMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EditMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::EditMeetingWithWndParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EditMeetingWithWndParams>(Arena*);
template <>
::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAddTimestampWatermarkParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAddTimestampWatermarkParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAirplayInstructionWindowParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAirplayInstructionWindowParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoAdjustMicParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoAdjustMicParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoJoinAudioParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoJoinAudioParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableClaimHostFeatureParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableClaimHostFeatureParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableDualScreenModeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableDualScreenModeParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableFaceBeautyEffectParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableFaceBeautyEffectParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableHDVideoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableHDVideoParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableHardwareEncodeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableHardwareEncodeParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableMicOriginalInputParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableMicOriginalInputParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams>(Arena*);
template <>
::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams>(Arena*);
template <>
::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableShareIOSDeviceParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableShareIOSDeviceParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableShareWhiteBoardParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableShareWhiteBoardParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableSplitScreenModeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableSplitScreenModeParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableSpotlightSelfParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableSpotlightSelfParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableStereoAudioParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableStereoAudioParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableSuppressAudioNotifyParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableSuppressAudioNotifyParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableToolTipsShowParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableToolTipsShowParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableVideoMirrorEffectParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableVideoMirrorEffectParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableVideoPreviewDialogParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableVideoPreviewDialogParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableWaitingRoomOnEntryParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableWaitingRoomOnEntryParams>(Arena*);
template <>
::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams>(Arena*);
template <>
::com::electron::sdk::proto::EnterFullScreenParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::EnterFullScreenParams>(Arena*);
template <>
::com::electron::sdk::proto::ExitFullScreenParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ExitFullScreenParams>(Arena*);
template <>
::com::electron::sdk::proto::ExpelUserParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ExpelUserParams>(Arena*);
template <>
::com::electron::sdk::proto::ForceDisableMultiShareParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ForceDisableMultiShareParams>(Arena*);
template <>
::com::electron::sdk::proto::GenerateSSOLoginWebURLParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::GenerateSSOLoginWebURLParams>(Arena*);
template <>
::com::electron::sdk::proto::GetLiveStreamItemInfoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::GetLiveStreamItemInfoParams>(Arena*);
template <>
::com::electron::sdk::proto::GetRawDataTypeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::GetRawDataTypeParams>(Arena*);
template <>
::com::electron::sdk::proto::GetResolutionParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::GetResolutionParams>(Arena*);
template <>
::com::electron::sdk::proto::GetUserIdParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::GetUserIdParams>(Arena*);
template <>
::com::electron::sdk::proto::GetUserInfoByUserIDParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::GetUserInfoByUserIDParams>(Arena*);
template <>
::com::electron::sdk::proto::GetWaitingRoomUserInfoByIDParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::GetWaitingRoomUserInfoByIDParams>(Arena*);
template <>
::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams>(Arena*);
template <>
::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams>(Arena*);
template <>
::com::electron::sdk::proto::HideChatItemOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideChatItemOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams>(Arena*);
template <>
::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams>(Arena*);
template <>
::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams>(Arena*);
template <>
::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams>(Arena*);
template <>
::com::electron::sdk::proto::HidePollOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HidePollOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::HideQAOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideQAOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams>(Arena*);
template <>
::com::electron::sdk::proto::HideSwitchCameraButtonParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideSwitchCameraButtonParams>(Arena*);
template <>
::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams>(Arena*);
template <>
::com::electron::sdk::proto::InitSDKParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::InitSDKParams>(Arena*);
template <>
::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams>(Arena*);
template <>
::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams>(Arena*);
template <>
::com::electron::sdk::proto::InputMeetingScreenNameParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::InputMeetingScreenNameParams>(Arena*);
template <>
::com::electron::sdk::proto::InputScreenNameParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::InputScreenNameParams>(Arena*);
template <>
::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams>(Arena*);
template <>
::com::electron::sdk::proto::IsHardwareEncodeEnabledParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::IsHardwareEncodeEnabledParams>(Arena*);
template <>
::com::electron::sdk::proto::IsSupportLocalRecordingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::IsSupportLocalRecordingParams>(Arena*);
template <>
::com::electron::sdk::proto::JoinMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::JoinMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::JoinWithoutLoginParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::JoinWithoutLoginParams>(Arena*);
template <>
::com::electron::sdk::proto::LeaveMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::LeaveMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::LoginWithSSOTokenParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::LoginWithSSOTokenParams>(Arena*);
template <>
::com::electron::sdk::proto::MoveFloatVideoWndParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::MoveFloatVideoWndParams>(Arena*);
template <>
::com::electron::sdk::proto::MuteAudioParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::MuteAudioParams>(Arena*);
template <>
::com::electron::sdk::proto::MuteVideoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::MuteVideoParams>(Arena*);
template <>
::com::electron::sdk::proto::PinVideoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::PinVideoParams>(Arena*);
template <>
::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams>(Arena*);
template <>
::com::electron::sdk::proto::PutInWaitingRoomParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::PutInWaitingRoomParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectClickAudioBTNEventParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectClickAudioBTNEventParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectClickCCBTNEventParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectClickCCBTNEventParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectClickShareBTNEventParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectClickShareBTNEventParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectEndOtherMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectEndOtherMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectMeetingWarningMsgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectMeetingWarningMsgParams>(Arena*);
template <>
::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams>(Arena*);
template <>
::com::electron::sdk::proto::RedoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RedoParams>(Arena*);
template <>
::com::electron::sdk::proto::RemoveRawLiveStreamPrivilegeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RemoveRawLiveStreamPrivilegeParams>(Arena*);
template <>
::com::electron::sdk::proto::RenameUserParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RenameUserParams>(Arena*);
template <>
::com::electron::sdk::proto::RequestRawLiveStreamParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RequestRawLiveStreamParams>(Arena*);
template <>
::com::electron::sdk::proto::RetrieveParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::RetrieveParams>(Arena*);
template <>
::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams>(Arena*);
template <>
::com::electron::sdk::proto::ScheduleMeetingWithWndParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ScheduleMeetingWithWndParams>(Arena*);
template <>
::com::electron::sdk::proto::SelectMicParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SelectMicParams>(Arena*);
template <>
::com::electron::sdk::proto::SelectSpeakerParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SelectSpeakerParams>(Arena*);
template <>
::com::electron::sdk::proto::SelectVideoCameraParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SelectVideoCameraParams>(Arena*);
template <>
::com::electron::sdk::proto::SetAudioShareModeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetAudioShareModeParams>(Arena*);
template <>
::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams>(Arena*);
template <>
::com::electron::sdk::proto::SetChatMessageBuilderParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetChatMessageBuilderParams>(Arena*);
template <>
::com::electron::sdk::proto::SetColorParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetColorParams>(Arena*);
template <>
::com::electron::sdk::proto::SetCustomizedCloudRecordingMgrUrlParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetCustomizedCloudRecordingMgrUrlParams>(Arena*);
template <>
::com::electron::sdk::proto::SetCustomizedInvitationDomainParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetCustomizedInvitationDomainParams>(Arena*);
template <>
::com::electron::sdk::proto::SetCustomizedPollingUrlParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetCustomizedPollingUrlParams>(Arena*);
template <>
::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams>(Arena*);
template <>
::com::electron::sdk::proto::SetDirectShareMonitorIDParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetDirectShareMonitorIDParams>(Arena*);
template <>
::com::electron::sdk::proto::SetEchoCancellationLevelParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetEchoCancellationLevelParams>(Arena*);
template <>
::com::electron::sdk::proto::SetEnableOptionParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetEnableOptionParams>(Arena*);
template <>
::com::electron::sdk::proto::SetFloatVideoPosParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetFloatVideoPosParams>(Arena*);
template <>
::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams>(Arena*);
template <>
::com::electron::sdk::proto::SetLineWidthParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetLineWidthParams>(Arena*);
template <>
::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::SetMeetingTopicParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetMeetingTopicParams>(Arena*);
template <>
::com::electron::sdk::proto::SetMeetingUIPosParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetMeetingUIPosParams>(Arena*);
template <>
::com::electron::sdk::proto::SetMicVolParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetMicVolParams>(Arena*);
template <>
::com::electron::sdk::proto::SetParticipantsChatPrivilegeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetParticipantsChatPrivilegeParams>(Arena*);
template <>
::com::electron::sdk::proto::SetPipeInitParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetPipeInitParams>(Arena*);
template <>
::com::electron::sdk::proto::SetRawDataResolutionParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetRawDataResolutionParams>(Arena*);
template <>
::com::electron::sdk::proto::SetRecordingPathParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetRecordingPathParams>(Arena*);
template <>
::com::electron::sdk::proto::SetSharingToolBarVisibilityParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetSharingToolBarVisibilityParams>(Arena*);
template <>
::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams>(Arena*);
template <>
::com::electron::sdk::proto::SetShowCallInTabParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetShowCallInTabParams>(Arena*);
template <>
::com::electron::sdk::proto::SetShowCallMeTabParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetShowCallMeTabParams>(Arena*);
template <>
::com::electron::sdk::proto::SetShowH323SubTabPageParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetShowH323SubTabPageParams>(Arena*);
template <>
::com::electron::sdk::proto::SetShowInviteDlgTabPageParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetShowInviteDlgTabPageParams>(Arena*);
template <>
::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams>(Arena*);
template <>
::com::electron::sdk::proto::SetSpeakerVolParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetSpeakerVolParams>(Arena*);
template <>
::com::electron::sdk::proto::SetSupportDarkModeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetSupportDarkModeParams>(Arena*);
template <>
::com::electron::sdk::proto::SetToolParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SetToolParams>(Arena*);
template <>
::com::electron::sdk::proto::ShowAANPanelParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ShowAANPanelParams>(Arena*);
template <>
::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams>(Arena*);
template <>
::com::electron::sdk::proto::ShowChatDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ShowChatDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::ShowParticipantsListWndParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ShowParticipantsListWndParams>(Arena*);
template <>
::com::electron::sdk::proto::ShowPreOrNextPageVideoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ShowPreOrNextPageVideoParams>(Arena*);
template <>
::com::electron::sdk::proto::ShowSettingDlgParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ShowSettingDlgParams>(Arena*);
template <>
::com::electron::sdk::proto::ShowSharingFrameWindowsParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ShowSharingFrameWindowsParams>(Arena*);
template <>
::com::electron::sdk::proto::ShowSharingToolbarParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::ShowSharingToolbarParams>(Arena*);
template <>
::com::electron::sdk::proto::SpotlightVideoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SpotlightVideoParams>(Arena*);
template <>
::com::electron::sdk::proto::StartAnnotationParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StartAnnotationParams>(Arena*);
template <>
::com::electron::sdk::proto::StartAppShareParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StartAppShareParams>(Arena*);
template <>
::com::electron::sdk::proto::StartLiveStreamParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StartLiveStreamParams>(Arena*);
template <>
::com::electron::sdk::proto::StartLiveStreamWithSteamingURLParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StartLiveStreamWithSteamingURLParams>(Arena*);
template <>
::com::electron::sdk::proto::StartMeetingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StartMeetingParams>(Arena*);
template <>
::com::electron::sdk::proto::StartMonitorShareParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StartMonitorShareParams>(Arena*);
template <>
::com::electron::sdk::proto::StartRawLiveStreamParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StartRawLiveStreamParams>(Arena*);
template <>
::com::electron::sdk::proto::StartWithoutLoginParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StartWithoutLoginParams>(Arena*);
template <>
::com::electron::sdk::proto::StopAnnotationParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::StopAnnotationParams>(Arena*);
template <>
::com::electron::sdk::proto::SubscribeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SubscribeParams>(Arena*);
template <>
::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams>(Arena*);
template <>
::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams>(Arena*);
template <>
::com::electron::sdk::proto::SwitchSplitScreenModeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::SwitchSplitScreenModeParams>(Arena*);
template <>
::com::electron::sdk::proto::TryWithMeetingNumberParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::TryWithMeetingNumberParams>(Arena*);
template <>
::com::electron::sdk::proto::TryWithPairingCodeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::TryWithPairingCodeParams>(Arena*);
template <>
::com::electron::sdk::proto::TurnOffAeroModeInSharingParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::TurnOffAeroModeInSharingParams>(Arena*);
template <>
::com::electron::sdk::proto::UnMuteVideoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::UnMuteVideoParams>(Arena*);
template <>
::com::electron::sdk::proto::UnSubscribeParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::UnSubscribeParams>(Arena*);
template <>
::com::electron::sdk::proto::UndoParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::UndoParams>(Arena*);
template <>
::com::electron::sdk::proto::UnmuteAudioParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::UnmuteAudioParams>(Arena*);
template <>
::com::electron::sdk::proto::VerifyParams* Arena::CreateMaybeMessage<::com::electron::sdk::proto::VerifyParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace com {
namespace electron {
namespace sdk {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class InitSDKParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.InitSDKParams) */ {
 public:
  inline InitSDKParams() : InitSDKParams(nullptr) {}
  ~InitSDKParams() override;
  explicit PROTOBUF_CONSTEXPR InitSDKParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitSDKParams(const InitSDKParams& from);
  InitSDKParams(InitSDKParams&& from) noexcept
    : InitSDKParams() {
    *this = ::std::move(from);
  }

  inline InitSDKParams& operator=(const InitSDKParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitSDKParams& operator=(InitSDKParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InitSDKParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitSDKParams* internal_default_instance() {
    return reinterpret_cast<const InitSDKParams*>(
               &_InitSDKParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitSDKParams& a, InitSDKParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InitSDKParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitSDKParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitSDKParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitSDKParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitSDKParams& from);
  void MergeFrom(const InitSDKParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitSDKParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.InitSDKParams";
  }
  protected:
  explicit InitSDKParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kDomainFieldNumber = 2,
    kCustomizedLanguageNameFieldNumber = 3,
    kCustomizedLanguageInfoFieldNumber = 4,
    kStrSupportUrlFieldNumber = 6,
    kCustomLocalizationFilePathFieldNumber = 20,
    kStrBrandingNameFieldNumber = 22,
    kCustomizedLanguageTypeFieldNumber = 5,
    kLangIDFieldNumber = 7,
    kAppLocaleFieldNumber = 9,
    kLogFileSizeFieldNumber = 10,
    kEnableLogFieldNumber = 8,
    kEnableGeneralDumpFieldNumber = 11,
    kPermonitorAwarenessModeFieldNumber = 12,
    kEnableRawdataIntermediateModeFieldNumber = 17,
    kVideoRenderModeFieldNumber = 13,
    kVideoRawdataMemoryModeFieldNumber = 14,
    kShareRawdataMemoryModeFieldNumber = 15,
    kAudioRawdataMemoryModeFieldNumber = 16,
    kRenderPostProcessingFieldNumber = 18,
    kVideoCaptureMethodFieldNumber = 19,
    kUseCustomUIFieldNumber = 21,
  };
  // optional string path = 1;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // optional string domain = 2;
  bool has_domain() const;
  void clear_domain() ;
  const std::string& domain() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domain(Arg_&& arg, Args_... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* ptr);

  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(
      const std::string& value);
  std::string* _internal_mutable_domain();

  public:
  // optional string customizedLanguageName = 3;
  bool has_customizedlanguagename() const;
  void clear_customizedlanguagename() ;
  const std::string& customizedlanguagename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customizedlanguagename(Arg_&& arg, Args_... args);
  std::string* mutable_customizedlanguagename();
  PROTOBUF_NODISCARD std::string* release_customizedlanguagename();
  void set_allocated_customizedlanguagename(std::string* ptr);

  private:
  const std::string& _internal_customizedlanguagename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customizedlanguagename(
      const std::string& value);
  std::string* _internal_mutable_customizedlanguagename();

  public:
  // optional string customizedLanguageInfo = 4;
  bool has_customizedlanguageinfo() const;
  void clear_customizedlanguageinfo() ;
  const std::string& customizedlanguageinfo() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customizedlanguageinfo(Arg_&& arg, Args_... args);
  std::string* mutable_customizedlanguageinfo();
  PROTOBUF_NODISCARD std::string* release_customizedlanguageinfo();
  void set_allocated_customizedlanguageinfo(std::string* ptr);

  private:
  const std::string& _internal_customizedlanguageinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customizedlanguageinfo(
      const std::string& value);
  std::string* _internal_mutable_customizedlanguageinfo();

  public:
  // optional string strSupportUrl = 6;
  bool has_strsupporturl() const;
  void clear_strsupporturl() ;
  const std::string& strsupporturl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strsupporturl(Arg_&& arg, Args_... args);
  std::string* mutable_strsupporturl();
  PROTOBUF_NODISCARD std::string* release_strsupporturl();
  void set_allocated_strsupporturl(std::string* ptr);

  private:
  const std::string& _internal_strsupporturl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strsupporturl(
      const std::string& value);
  std::string* _internal_mutable_strsupporturl();

  public:
  // optional string customLocalizationFilePath = 20;
  bool has_customlocalizationfilepath() const;
  void clear_customlocalizationfilepath() ;
  const std::string& customlocalizationfilepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customlocalizationfilepath(Arg_&& arg, Args_... args);
  std::string* mutable_customlocalizationfilepath();
  PROTOBUF_NODISCARD std::string* release_customlocalizationfilepath();
  void set_allocated_customlocalizationfilepath(std::string* ptr);

  private:
  const std::string& _internal_customlocalizationfilepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customlocalizationfilepath(
      const std::string& value);
  std::string* _internal_mutable_customlocalizationfilepath();

  public:
  // optional string strBrandingName = 22;
  bool has_strbrandingname() const;
  void clear_strbrandingname() ;
  const std::string& strbrandingname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strbrandingname(Arg_&& arg, Args_... args);
  std::string* mutable_strbrandingname();
  PROTOBUF_NODISCARD std::string* release_strbrandingname();
  void set_allocated_strbrandingname(std::string* ptr);

  private:
  const std::string& _internal_strbrandingname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strbrandingname(
      const std::string& value);
  std::string* _internal_mutable_strbrandingname();

  public:
  // optional int32 customizedLanguageType = 5;
  bool has_customizedlanguagetype() const;
  void clear_customizedlanguagetype() ;
  ::int32_t customizedlanguagetype() const;
  void set_customizedlanguagetype(::int32_t value);

  private:
  ::int32_t _internal_customizedlanguagetype() const;
  void _internal_set_customizedlanguagetype(::int32_t value);

  public:
  // optional int32 langID = 7;
  bool has_langid() const;
  void clear_langid() ;
  ::int32_t langid() const;
  void set_langid(::int32_t value);

  private:
  ::int32_t _internal_langid() const;
  void _internal_set_langid(::int32_t value);

  public:
  // optional int32 appLocale = 9;
  bool has_applocale() const;
  void clear_applocale() ;
  ::int32_t applocale() const;
  void set_applocale(::int32_t value);

  private:
  ::int32_t _internal_applocale() const;
  void _internal_set_applocale(::int32_t value);

  public:
  // optional int32 logFileSize = 10;
  bool has_logfilesize() const;
  void clear_logfilesize() ;
  ::int32_t logfilesize() const;
  void set_logfilesize(::int32_t value);

  private:
  ::int32_t _internal_logfilesize() const;
  void _internal_set_logfilesize(::int32_t value);

  public:
  // optional bool enableLog = 8;
  bool has_enablelog() const;
  void clear_enablelog() ;
  bool enablelog() const;
  void set_enablelog(bool value);

  private:
  bool _internal_enablelog() const;
  void _internal_set_enablelog(bool value);

  public:
  // optional bool enableGeneralDump = 11;
  bool has_enablegeneraldump() const;
  void clear_enablegeneraldump() ;
  bool enablegeneraldump() const;
  void set_enablegeneraldump(bool value);

  private:
  bool _internal_enablegeneraldump() const;
  void _internal_set_enablegeneraldump(bool value);

  public:
  // optional bool permonitorAwarenessMode = 12;
  bool has_permonitorawarenessmode() const;
  void clear_permonitorawarenessmode() ;
  bool permonitorawarenessmode() const;
  void set_permonitorawarenessmode(bool value);

  private:
  bool _internal_permonitorawarenessmode() const;
  void _internal_set_permonitorawarenessmode(bool value);

  public:
  // optional bool enableRawdataIntermediateMode = 17;
  bool has_enablerawdataintermediatemode() const;
  void clear_enablerawdataintermediatemode() ;
  bool enablerawdataintermediatemode() const;
  void set_enablerawdataintermediatemode(bool value);

  private:
  bool _internal_enablerawdataintermediatemode() const;
  void _internal_set_enablerawdataintermediatemode(bool value);

  public:
  // optional int32 videoRenderMode = 13;
  bool has_videorendermode() const;
  void clear_videorendermode() ;
  ::int32_t videorendermode() const;
  void set_videorendermode(::int32_t value);

  private:
  ::int32_t _internal_videorendermode() const;
  void _internal_set_videorendermode(::int32_t value);

  public:
  // optional int32 videoRawdataMemoryMode = 14;
  bool has_videorawdatamemorymode() const;
  void clear_videorawdatamemorymode() ;
  ::int32_t videorawdatamemorymode() const;
  void set_videorawdatamemorymode(::int32_t value);

  private:
  ::int32_t _internal_videorawdatamemorymode() const;
  void _internal_set_videorawdatamemorymode(::int32_t value);

  public:
  // optional int32 shareRawdataMemoryMode = 15;
  bool has_sharerawdatamemorymode() const;
  void clear_sharerawdatamemorymode() ;
  ::int32_t sharerawdatamemorymode() const;
  void set_sharerawdatamemorymode(::int32_t value);

  private:
  ::int32_t _internal_sharerawdatamemorymode() const;
  void _internal_set_sharerawdatamemorymode(::int32_t value);

  public:
  // optional int32 audioRawdataMemoryMode = 16;
  bool has_audiorawdatamemorymode() const;
  void clear_audiorawdatamemorymode() ;
  ::int32_t audiorawdatamemorymode() const;
  void set_audiorawdatamemorymode(::int32_t value);

  private:
  ::int32_t _internal_audiorawdatamemorymode() const;
  void _internal_set_audiorawdatamemorymode(::int32_t value);

  public:
  // optional int32 renderPostProcessing = 18;
  bool has_renderpostprocessing() const;
  void clear_renderpostprocessing() ;
  ::int32_t renderpostprocessing() const;
  void set_renderpostprocessing(::int32_t value);

  private:
  ::int32_t _internal_renderpostprocessing() const;
  void _internal_set_renderpostprocessing(::int32_t value);

  public:
  // optional int32 videoCaptureMethod = 19;
  bool has_videocapturemethod() const;
  void clear_videocapturemethod() ;
  ::int32_t videocapturemethod() const;
  void set_videocapturemethod(::int32_t value);

  private:
  ::int32_t _internal_videocapturemethod() const;
  void _internal_set_videocapturemethod(::int32_t value);

  public:
  // optional bool useCustomUI = 21;
  bool has_usecustomui() const;
  void clear_usecustomui() ;
  bool usecustomui() const;
  void set_usecustomui(bool value);

  private:
  bool _internal_usecustomui() const;
  void _internal_set_usecustomui(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.InitSDKParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customizedlanguagename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customizedlanguageinfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strsupporturl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customlocalizationfilepath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strbrandingname_;
    ::int32_t customizedlanguagetype_;
    ::int32_t langid_;
    ::int32_t applocale_;
    ::int32_t logfilesize_;
    bool enablelog_;
    bool enablegeneraldump_;
    bool permonitorawarenessmode_;
    bool enablerawdataintermediatemode_;
    ::int32_t videorendermode_;
    ::int32_t videorawdatamemorymode_;
    ::int32_t sharerawdatamemorymode_;
    ::int32_t audiorawdatamemorymode_;
    ::int32_t renderpostprocessing_;
    ::int32_t videocapturemethod_;
    bool usecustomui_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class AuthWithJwtTokenParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.AuthWithJwtTokenParams) */ {
 public:
  inline AuthWithJwtTokenParams() : AuthWithJwtTokenParams(nullptr) {}
  ~AuthWithJwtTokenParams() override;
  explicit PROTOBUF_CONSTEXPR AuthWithJwtTokenParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthWithJwtTokenParams(const AuthWithJwtTokenParams& from);
  AuthWithJwtTokenParams(AuthWithJwtTokenParams&& from) noexcept
    : AuthWithJwtTokenParams() {
    *this = ::std::move(from);
  }

  inline AuthWithJwtTokenParams& operator=(const AuthWithJwtTokenParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthWithJwtTokenParams& operator=(AuthWithJwtTokenParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthWithJwtTokenParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthWithJwtTokenParams* internal_default_instance() {
    return reinterpret_cast<const AuthWithJwtTokenParams*>(
               &_AuthWithJwtTokenParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthWithJwtTokenParams& a, AuthWithJwtTokenParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthWithJwtTokenParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthWithJwtTokenParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthWithJwtTokenParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthWithJwtTokenParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthWithJwtTokenParams& from);
  void MergeFrom(const AuthWithJwtTokenParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthWithJwtTokenParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.AuthWithJwtTokenParams";
  }
  protected:
  explicit AuthWithJwtTokenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdkJwtTokenFieldNumber = 1,
  };
  // optional string sdkJwtToken = 1;
  bool has_sdkjwttoken() const;
  void clear_sdkjwttoken() ;
  const std::string& sdkjwttoken() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sdkjwttoken(Arg_&& arg, Args_... args);
  std::string* mutable_sdkjwttoken();
  PROTOBUF_NODISCARD std::string* release_sdkjwttoken();
  void set_allocated_sdkjwttoken(std::string* ptr);

  private:
  const std::string& _internal_sdkjwttoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdkjwttoken(
      const std::string& value);
  std::string* _internal_mutable_sdkjwttoken();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.AuthWithJwtTokenParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkjwttoken_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class LoginWithSSOTokenParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.LoginWithSSOTokenParams) */ {
 public:
  inline LoginWithSSOTokenParams() : LoginWithSSOTokenParams(nullptr) {}
  ~LoginWithSSOTokenParams() override;
  explicit PROTOBUF_CONSTEXPR LoginWithSSOTokenParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginWithSSOTokenParams(const LoginWithSSOTokenParams& from);
  LoginWithSSOTokenParams(LoginWithSSOTokenParams&& from) noexcept
    : LoginWithSSOTokenParams() {
    *this = ::std::move(from);
  }

  inline LoginWithSSOTokenParams& operator=(const LoginWithSSOTokenParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginWithSSOTokenParams& operator=(LoginWithSSOTokenParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginWithSSOTokenParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginWithSSOTokenParams* internal_default_instance() {
    return reinterpret_cast<const LoginWithSSOTokenParams*>(
               &_LoginWithSSOTokenParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginWithSSOTokenParams& a, LoginWithSSOTokenParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginWithSSOTokenParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginWithSSOTokenParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginWithSSOTokenParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginWithSSOTokenParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginWithSSOTokenParams& from);
  void MergeFrom(const LoginWithSSOTokenParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginWithSSOTokenParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.LoginWithSSOTokenParams";
  }
  protected:
  explicit LoginWithSSOTokenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsoTokenFieldNumber = 1,
    kRememberMeFieldNumber = 2,
  };
  // optional string ssoToken = 1;
  bool has_ssotoken() const;
  void clear_ssotoken() ;
  const std::string& ssotoken() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ssotoken(Arg_&& arg, Args_... args);
  std::string* mutable_ssotoken();
  PROTOBUF_NODISCARD std::string* release_ssotoken();
  void set_allocated_ssotoken(std::string* ptr);

  private:
  const std::string& _internal_ssotoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssotoken(
      const std::string& value);
  std::string* _internal_mutable_ssotoken();

  public:
  // optional bool rememberMe = 2;
  bool has_rememberme() const;
  void clear_rememberme() ;
  bool rememberme() const;
  void set_rememberme(bool value);

  private:
  bool _internal_rememberme() const;
  void _internal_set_rememberme(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.LoginWithSSOTokenParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssotoken_;
    bool rememberme_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StartMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StartMeetingParams) */ {
 public:
  inline StartMeetingParams() : StartMeetingParams(nullptr) {}
  ~StartMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR StartMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartMeetingParams(const StartMeetingParams& from);
  StartMeetingParams(StartMeetingParams&& from) noexcept
    : StartMeetingParams() {
    *this = ::std::move(from);
  }

  inline StartMeetingParams& operator=(const StartMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMeetingParams& operator=(StartMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartMeetingParams* internal_default_instance() {
    return reinterpret_cast<const StartMeetingParams*>(
               &_StartMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartMeetingParams& a, StartMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartMeetingParams& from);
  void MergeFrom(const StartMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StartMeetingParams";
  }
  protected:
  explicit StartMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHDirectShareAppWndFieldNumber = 2,
    kCustomerKeyFieldNumber = 3,
    kMeetingNumberFieldNumber = 1,
    kIsVideoOffFieldNumber = 4,
    kIsAudioOffFieldNumber = 5,
    kIsDirectShareDesktopFieldNumber = 6,
  };
  // optional string hDirectShareAppWnd = 2;
  bool has_hdirectshareappwnd() const;
  void clear_hdirectshareappwnd() ;
  const std::string& hdirectshareappwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hdirectshareappwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hdirectshareappwnd();
  PROTOBUF_NODISCARD std::string* release_hdirectshareappwnd();
  void set_allocated_hdirectshareappwnd(std::string* ptr);

  private:
  const std::string& _internal_hdirectshareappwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hdirectshareappwnd(
      const std::string& value);
  std::string* _internal_mutable_hdirectshareappwnd();

  public:
  // optional string customerKey = 3;
  bool has_customerkey() const;
  void clear_customerkey() ;
  const std::string& customerkey() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customerkey(Arg_&& arg, Args_... args);
  std::string* mutable_customerkey();
  PROTOBUF_NODISCARD std::string* release_customerkey();
  void set_allocated_customerkey(std::string* ptr);

  private:
  const std::string& _internal_customerkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customerkey(
      const std::string& value);
  std::string* _internal_mutable_customerkey();

  public:
  // optional uint64 meetingNumber = 1;
  bool has_meetingnumber() const;
  void clear_meetingnumber() ;
  ::uint64_t meetingnumber() const;
  void set_meetingnumber(::uint64_t value);

  private:
  ::uint64_t _internal_meetingnumber() const;
  void _internal_set_meetingnumber(::uint64_t value);

  public:
  // optional bool isVideoOff = 4;
  bool has_isvideooff() const;
  void clear_isvideooff() ;
  bool isvideooff() const;
  void set_isvideooff(bool value);

  private:
  bool _internal_isvideooff() const;
  void _internal_set_isvideooff(bool value);

  public:
  // optional bool isAudioOff = 5;
  bool has_isaudiooff() const;
  void clear_isaudiooff() ;
  bool isaudiooff() const;
  void set_isaudiooff(bool value);

  private:
  bool _internal_isaudiooff() const;
  void _internal_set_isaudiooff(bool value);

  public:
  // optional bool isDirectShareDesktop = 6;
  bool has_isdirectsharedesktop() const;
  void clear_isdirectsharedesktop() ;
  bool isdirectsharedesktop() const;
  void set_isdirectsharedesktop(bool value);

  private:
  bool _internal_isdirectsharedesktop() const;
  void _internal_set_isdirectsharedesktop(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StartMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdirectshareappwnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customerkey_;
    ::uint64_t meetingnumber_;
    bool isvideooff_;
    bool isaudiooff_;
    bool isdirectsharedesktop_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StartWithoutLoginParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StartWithoutLoginParams) */ {
 public:
  inline StartWithoutLoginParams() : StartWithoutLoginParams(nullptr) {}
  ~StartWithoutLoginParams() override;
  explicit PROTOBUF_CONSTEXPR StartWithoutLoginParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartWithoutLoginParams(const StartWithoutLoginParams& from);
  StartWithoutLoginParams(StartWithoutLoginParams&& from) noexcept
    : StartWithoutLoginParams() {
    *this = ::std::move(from);
  }

  inline StartWithoutLoginParams& operator=(const StartWithoutLoginParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartWithoutLoginParams& operator=(StartWithoutLoginParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartWithoutLoginParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartWithoutLoginParams* internal_default_instance() {
    return reinterpret_cast<const StartWithoutLoginParams*>(
               &_StartWithoutLoginParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StartWithoutLoginParams& a, StartWithoutLoginParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartWithoutLoginParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartWithoutLoginParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartWithoutLoginParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartWithoutLoginParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartWithoutLoginParams& from);
  void MergeFrom(const StartWithoutLoginParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartWithoutLoginParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StartWithoutLoginParams";
  }
  protected:
  explicit StartWithoutLoginParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserZAKFieldNumber = 1,
    kUserNameFieldNumber = 2,
    kSdkVanityIDFieldNumber = 5,
    kHDirectShareAppWndFieldNumber = 6,
    kCustomerKeyFieldNumber = 7,
    kMeetingNumberFieldNumber = 4,
    kNodeUserTypeFieldNumber = 3,
    kIsDirectShareDesktopFieldNumber = 8,
    kIsVideoOffFieldNumber = 9,
    kIsAudioOffFieldNumber = 10,
  };
  // optional string userZAK = 1;
  bool has_userzak() const;
  void clear_userzak() ;
  const std::string& userzak() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userzak(Arg_&& arg, Args_... args);
  std::string* mutable_userzak();
  PROTOBUF_NODISCARD std::string* release_userzak();
  void set_allocated_userzak(std::string* ptr);

  private:
  const std::string& _internal_userzak() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userzak(
      const std::string& value);
  std::string* _internal_mutable_userzak();

  public:
  // optional string userName = 2;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string sdkVanityID = 5;
  bool has_sdkvanityid() const;
  void clear_sdkvanityid() ;
  const std::string& sdkvanityid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sdkvanityid(Arg_&& arg, Args_... args);
  std::string* mutable_sdkvanityid();
  PROTOBUF_NODISCARD std::string* release_sdkvanityid();
  void set_allocated_sdkvanityid(std::string* ptr);

  private:
  const std::string& _internal_sdkvanityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdkvanityid(
      const std::string& value);
  std::string* _internal_mutable_sdkvanityid();

  public:
  // optional string hDirectShareAppWnd = 6;
  bool has_hdirectshareappwnd() const;
  void clear_hdirectshareappwnd() ;
  const std::string& hdirectshareappwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hdirectshareappwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hdirectshareappwnd();
  PROTOBUF_NODISCARD std::string* release_hdirectshareappwnd();
  void set_allocated_hdirectshareappwnd(std::string* ptr);

  private:
  const std::string& _internal_hdirectshareappwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hdirectshareappwnd(
      const std::string& value);
  std::string* _internal_mutable_hdirectshareappwnd();

  public:
  // optional string customerKey = 7;
  bool has_customerkey() const;
  void clear_customerkey() ;
  const std::string& customerkey() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customerkey(Arg_&& arg, Args_... args);
  std::string* mutable_customerkey();
  PROTOBUF_NODISCARD std::string* release_customerkey();
  void set_allocated_customerkey(std::string* ptr);

  private:
  const std::string& _internal_customerkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customerkey(
      const std::string& value);
  std::string* _internal_mutable_customerkey();

  public:
  // optional uint64 meetingNumber = 4;
  bool has_meetingnumber() const;
  void clear_meetingnumber() ;
  ::uint64_t meetingnumber() const;
  void set_meetingnumber(::uint64_t value);

  private:
  ::uint64_t _internal_meetingnumber() const;
  void _internal_set_meetingnumber(::uint64_t value);

  public:
  // optional int32 nodeUserType = 3;
  bool has_nodeusertype() const;
  void clear_nodeusertype() ;
  ::int32_t nodeusertype() const;
  void set_nodeusertype(::int32_t value);

  private:
  ::int32_t _internal_nodeusertype() const;
  void _internal_set_nodeusertype(::int32_t value);

  public:
  // optional bool isDirectShareDesktop = 8;
  bool has_isdirectsharedesktop() const;
  void clear_isdirectsharedesktop() ;
  bool isdirectsharedesktop() const;
  void set_isdirectsharedesktop(bool value);

  private:
  bool _internal_isdirectsharedesktop() const;
  void _internal_set_isdirectsharedesktop(bool value);

  public:
  // optional bool isVideoOff = 9;
  bool has_isvideooff() const;
  void clear_isvideooff() ;
  bool isvideooff() const;
  void set_isvideooff(bool value);

  private:
  bool _internal_isvideooff() const;
  void _internal_set_isvideooff(bool value);

  public:
  // optional bool isAudioOff = 10;
  bool has_isaudiooff() const;
  void clear_isaudiooff() ;
  bool isaudiooff() const;
  void set_isaudiooff(bool value);

  private:
  bool _internal_isaudiooff() const;
  void _internal_set_isaudiooff(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StartWithoutLoginParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userzak_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkvanityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdirectshareappwnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customerkey_;
    ::uint64_t meetingnumber_;
    ::int32_t nodeusertype_;
    bool isdirectsharedesktop_;
    bool isvideooff_;
    bool isaudiooff_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class JoinMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.JoinMeetingParams) */ {
 public:
  inline JoinMeetingParams() : JoinMeetingParams(nullptr) {}
  ~JoinMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR JoinMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinMeetingParams(const JoinMeetingParams& from);
  JoinMeetingParams(JoinMeetingParams&& from) noexcept
    : JoinMeetingParams() {
    *this = ::std::move(from);
  }

  inline JoinMeetingParams& operator=(const JoinMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinMeetingParams& operator=(JoinMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const JoinMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinMeetingParams* internal_default_instance() {
    return reinterpret_cast<const JoinMeetingParams*>(
               &_JoinMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JoinMeetingParams& a, JoinMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const JoinMeetingParams& from);
  void MergeFrom(const JoinMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JoinMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.JoinMeetingParams";
  }
  protected:
  explicit JoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVanityIDFieldNumber = 2,
    kUserNameFieldNumber = 3,
    kPswFieldNumber = 4,
    kHDirectShareAppWndFieldNumber = 5,
    kCustomerKeyFieldNumber = 6,
    kWebinarTokenFieldNumber = 7,
    kAppPrivilegeTokenFieldNumber = 11,
    kJoinTokenFieldNumber = 12,
    kMeetingNumberFieldNumber = 1,
    kIsVideoOffFieldNumber = 8,
    kIsAudioOffFieldNumber = 9,
    kIsDirectShareDesktopFieldNumber = 10,
  };
  // optional string vanityID = 2;
  bool has_vanityid() const;
  void clear_vanityid() ;
  const std::string& vanityid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vanityid(Arg_&& arg, Args_... args);
  std::string* mutable_vanityid();
  PROTOBUF_NODISCARD std::string* release_vanityid();
  void set_allocated_vanityid(std::string* ptr);

  private:
  const std::string& _internal_vanityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vanityid(
      const std::string& value);
  std::string* _internal_mutable_vanityid();

  public:
  // optional string userName = 3;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string psw = 4;
  bool has_psw() const;
  void clear_psw() ;
  const std::string& psw() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_psw(Arg_&& arg, Args_... args);
  std::string* mutable_psw();
  PROTOBUF_NODISCARD std::string* release_psw();
  void set_allocated_psw(std::string* ptr);

  private:
  const std::string& _internal_psw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_psw(
      const std::string& value);
  std::string* _internal_mutable_psw();

  public:
  // optional string hDirectShareAppWnd = 5;
  bool has_hdirectshareappwnd() const;
  void clear_hdirectshareappwnd() ;
  const std::string& hdirectshareappwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hdirectshareappwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hdirectshareappwnd();
  PROTOBUF_NODISCARD std::string* release_hdirectshareappwnd();
  void set_allocated_hdirectshareappwnd(std::string* ptr);

  private:
  const std::string& _internal_hdirectshareappwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hdirectshareappwnd(
      const std::string& value);
  std::string* _internal_mutable_hdirectshareappwnd();

  public:
  // optional string customerKey = 6;
  bool has_customerkey() const;
  void clear_customerkey() ;
  const std::string& customerkey() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customerkey(Arg_&& arg, Args_... args);
  std::string* mutable_customerkey();
  PROTOBUF_NODISCARD std::string* release_customerkey();
  void set_allocated_customerkey(std::string* ptr);

  private:
  const std::string& _internal_customerkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customerkey(
      const std::string& value);
  std::string* _internal_mutable_customerkey();

  public:
  // optional string webinarToken = 7;
  bool has_webinartoken() const;
  void clear_webinartoken() ;
  const std::string& webinartoken() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_webinartoken(Arg_&& arg, Args_... args);
  std::string* mutable_webinartoken();
  PROTOBUF_NODISCARD std::string* release_webinartoken();
  void set_allocated_webinartoken(std::string* ptr);

  private:
  const std::string& _internal_webinartoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webinartoken(
      const std::string& value);
  std::string* _internal_mutable_webinartoken();

  public:
  // optional string appPrivilegeToken = 11;
  bool has_appprivilegetoken() const;
  void clear_appprivilegetoken() ;
  const std::string& appprivilegetoken() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_appprivilegetoken(Arg_&& arg, Args_... args);
  std::string* mutable_appprivilegetoken();
  PROTOBUF_NODISCARD std::string* release_appprivilegetoken();
  void set_allocated_appprivilegetoken(std::string* ptr);

  private:
  const std::string& _internal_appprivilegetoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appprivilegetoken(
      const std::string& value);
  std::string* _internal_mutable_appprivilegetoken();

  public:
  // optional string join_token = 12;
  bool has_join_token() const;
  void clear_join_token() ;
  const std::string& join_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_join_token(Arg_&& arg, Args_... args);
  std::string* mutable_join_token();
  PROTOBUF_NODISCARD std::string* release_join_token();
  void set_allocated_join_token(std::string* ptr);

  private:
  const std::string& _internal_join_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_join_token(
      const std::string& value);
  std::string* _internal_mutable_join_token();

  public:
  // optional uint64 meetingNumber = 1;
  bool has_meetingnumber() const;
  void clear_meetingnumber() ;
  ::uint64_t meetingnumber() const;
  void set_meetingnumber(::uint64_t value);

  private:
  ::uint64_t _internal_meetingnumber() const;
  void _internal_set_meetingnumber(::uint64_t value);

  public:
  // optional bool isVideoOff = 8;
  bool has_isvideooff() const;
  void clear_isvideooff() ;
  bool isvideooff() const;
  void set_isvideooff(bool value);

  private:
  bool _internal_isvideooff() const;
  void _internal_set_isvideooff(bool value);

  public:
  // optional bool isAudioOff = 9;
  bool has_isaudiooff() const;
  void clear_isaudiooff() ;
  bool isaudiooff() const;
  void set_isaudiooff(bool value);

  private:
  bool _internal_isaudiooff() const;
  void _internal_set_isaudiooff(bool value);

  public:
  // optional bool isDirectShareDesktop = 10;
  bool has_isdirectsharedesktop() const;
  void clear_isdirectsharedesktop() ;
  bool isdirectsharedesktop() const;
  void set_isdirectsharedesktop(bool value);

  private:
  bool _internal_isdirectsharedesktop() const;
  void _internal_set_isdirectsharedesktop(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.JoinMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vanityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdirectshareappwnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customerkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webinartoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appprivilegetoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr join_token_;
    ::uint64_t meetingnumber_;
    bool isvideooff_;
    bool isaudiooff_;
    bool isdirectsharedesktop_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class JoinWithoutLoginParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.JoinWithoutLoginParams) */ {
 public:
  inline JoinWithoutLoginParams() : JoinWithoutLoginParams(nullptr) {}
  ~JoinWithoutLoginParams() override;
  explicit PROTOBUF_CONSTEXPR JoinWithoutLoginParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinWithoutLoginParams(const JoinWithoutLoginParams& from);
  JoinWithoutLoginParams(JoinWithoutLoginParams&& from) noexcept
    : JoinWithoutLoginParams() {
    *this = ::std::move(from);
  }

  inline JoinWithoutLoginParams& operator=(const JoinWithoutLoginParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinWithoutLoginParams& operator=(JoinWithoutLoginParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const JoinWithoutLoginParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinWithoutLoginParams* internal_default_instance() {
    return reinterpret_cast<const JoinWithoutLoginParams*>(
               &_JoinWithoutLoginParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JoinWithoutLoginParams& a, JoinWithoutLoginParams& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinWithoutLoginParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinWithoutLoginParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinWithoutLoginParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinWithoutLoginParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const JoinWithoutLoginParams& from);
  void MergeFrom(const JoinWithoutLoginParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JoinWithoutLoginParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.JoinWithoutLoginParams";
  }
  protected:
  explicit JoinWithoutLoginParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVanityIDFieldNumber = 2,
    kUserNameFieldNumber = 3,
    kPswFieldNumber = 4,
    kHDirectShareAppWndFieldNumber = 5,
    kUserZAKFieldNumber = 6,
    kCustomerKeyFieldNumber = 7,
    kWebinarTokenFieldNumber = 8,
    kAppPrivilegeTokenFieldNumber = 12,
    kJoinTokenFieldNumber = 13,
    kMeetingNumberFieldNumber = 1,
    kIsDirectShareDesktopFieldNumber = 9,
    kIsVideoOffFieldNumber = 10,
    kIsAudioOffFieldNumber = 11,
  };
  // optional string vanityID = 2;
  bool has_vanityid() const;
  void clear_vanityid() ;
  const std::string& vanityid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vanityid(Arg_&& arg, Args_... args);
  std::string* mutable_vanityid();
  PROTOBUF_NODISCARD std::string* release_vanityid();
  void set_allocated_vanityid(std::string* ptr);

  private:
  const std::string& _internal_vanityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vanityid(
      const std::string& value);
  std::string* _internal_mutable_vanityid();

  public:
  // optional string userName = 3;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string psw = 4;
  bool has_psw() const;
  void clear_psw() ;
  const std::string& psw() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_psw(Arg_&& arg, Args_... args);
  std::string* mutable_psw();
  PROTOBUF_NODISCARD std::string* release_psw();
  void set_allocated_psw(std::string* ptr);

  private:
  const std::string& _internal_psw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_psw(
      const std::string& value);
  std::string* _internal_mutable_psw();

  public:
  // optional string hDirectShareAppWnd = 5;
  bool has_hdirectshareappwnd() const;
  void clear_hdirectshareappwnd() ;
  const std::string& hdirectshareappwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hdirectshareappwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hdirectshareappwnd();
  PROTOBUF_NODISCARD std::string* release_hdirectshareappwnd();
  void set_allocated_hdirectshareappwnd(std::string* ptr);

  private:
  const std::string& _internal_hdirectshareappwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hdirectshareappwnd(
      const std::string& value);
  std::string* _internal_mutable_hdirectshareappwnd();

  public:
  // optional string userZAK = 6;
  bool has_userzak() const;
  void clear_userzak() ;
  const std::string& userzak() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userzak(Arg_&& arg, Args_... args);
  std::string* mutable_userzak();
  PROTOBUF_NODISCARD std::string* release_userzak();
  void set_allocated_userzak(std::string* ptr);

  private:
  const std::string& _internal_userzak() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userzak(
      const std::string& value);
  std::string* _internal_mutable_userzak();

  public:
  // optional string customerKey = 7;
  bool has_customerkey() const;
  void clear_customerkey() ;
  const std::string& customerkey() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customerkey(Arg_&& arg, Args_... args);
  std::string* mutable_customerkey();
  PROTOBUF_NODISCARD std::string* release_customerkey();
  void set_allocated_customerkey(std::string* ptr);

  private:
  const std::string& _internal_customerkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customerkey(
      const std::string& value);
  std::string* _internal_mutable_customerkey();

  public:
  // optional string webinarToken = 8;
  bool has_webinartoken() const;
  void clear_webinartoken() ;
  const std::string& webinartoken() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_webinartoken(Arg_&& arg, Args_... args);
  std::string* mutable_webinartoken();
  PROTOBUF_NODISCARD std::string* release_webinartoken();
  void set_allocated_webinartoken(std::string* ptr);

  private:
  const std::string& _internal_webinartoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webinartoken(
      const std::string& value);
  std::string* _internal_mutable_webinartoken();

  public:
  // optional string appPrivilegeToken = 12;
  bool has_appprivilegetoken() const;
  void clear_appprivilegetoken() ;
  const std::string& appprivilegetoken() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_appprivilegetoken(Arg_&& arg, Args_... args);
  std::string* mutable_appprivilegetoken();
  PROTOBUF_NODISCARD std::string* release_appprivilegetoken();
  void set_allocated_appprivilegetoken(std::string* ptr);

  private:
  const std::string& _internal_appprivilegetoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appprivilegetoken(
      const std::string& value);
  std::string* _internal_mutable_appprivilegetoken();

  public:
  // optional string join_token = 13;
  bool has_join_token() const;
  void clear_join_token() ;
  const std::string& join_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_join_token(Arg_&& arg, Args_... args);
  std::string* mutable_join_token();
  PROTOBUF_NODISCARD std::string* release_join_token();
  void set_allocated_join_token(std::string* ptr);

  private:
  const std::string& _internal_join_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_join_token(
      const std::string& value);
  std::string* _internal_mutable_join_token();

  public:
  // optional uint64 meetingNumber = 1;
  bool has_meetingnumber() const;
  void clear_meetingnumber() ;
  ::uint64_t meetingnumber() const;
  void set_meetingnumber(::uint64_t value);

  private:
  ::uint64_t _internal_meetingnumber() const;
  void _internal_set_meetingnumber(::uint64_t value);

  public:
  // optional bool isDirectShareDesktop = 9;
  bool has_isdirectsharedesktop() const;
  void clear_isdirectsharedesktop() ;
  bool isdirectsharedesktop() const;
  void set_isdirectsharedesktop(bool value);

  private:
  bool _internal_isdirectsharedesktop() const;
  void _internal_set_isdirectsharedesktop(bool value);

  public:
  // optional bool isVideoOff = 10;
  bool has_isvideooff() const;
  void clear_isvideooff() ;
  bool isvideooff() const;
  void set_isvideooff(bool value);

  private:
  bool _internal_isvideooff() const;
  void _internal_set_isvideooff(bool value);

  public:
  // optional bool isAudioOff = 11;
  bool has_isaudiooff() const;
  void clear_isaudiooff() ;
  bool isaudiooff() const;
  void set_isaudiooff(bool value);

  private:
  bool _internal_isaudiooff() const;
  void _internal_set_isaudiooff(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.JoinWithoutLoginParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vanityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdirectshareappwnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userzak_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customerkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webinartoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appprivilegetoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr join_token_;
    ::uint64_t meetingnumber_;
    bool isdirectsharedesktop_;
    bool isvideooff_;
    bool isaudiooff_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class LeaveMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.LeaveMeetingParams) */ {
 public:
  inline LeaveMeetingParams() : LeaveMeetingParams(nullptr) {}
  ~LeaveMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR LeaveMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveMeetingParams(const LeaveMeetingParams& from);
  LeaveMeetingParams(LeaveMeetingParams&& from) noexcept
    : LeaveMeetingParams() {
    *this = ::std::move(from);
  }

  inline LeaveMeetingParams& operator=(const LeaveMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveMeetingParams& operator=(LeaveMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LeaveMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveMeetingParams* internal_default_instance() {
    return reinterpret_cast<const LeaveMeetingParams*>(
               &_LeaveMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LeaveMeetingParams& a, LeaveMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LeaveMeetingParams& from);
  void MergeFrom(const LeaveMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaveMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.LeaveMeetingParams";
  }
  protected:
  explicit LeaveMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEndFieldNumber = 1,
  };
  // optional bool bEnd = 1;
  bool has_bend() const;
  void clear_bend() ;
  bool bend() const;
  void set_bend(bool value);

  private:
  bool _internal_bend() const;
  void _internal_set_bend(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.LeaveMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bend_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HandleZoomWebUriProtocolActionParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams) */ {
 public:
  inline HandleZoomWebUriProtocolActionParams() : HandleZoomWebUriProtocolActionParams(nullptr) {}
  ~HandleZoomWebUriProtocolActionParams() override;
  explicit PROTOBUF_CONSTEXPR HandleZoomWebUriProtocolActionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandleZoomWebUriProtocolActionParams(const HandleZoomWebUriProtocolActionParams& from);
  HandleZoomWebUriProtocolActionParams(HandleZoomWebUriProtocolActionParams&& from) noexcept
    : HandleZoomWebUriProtocolActionParams() {
    *this = ::std::move(from);
  }

  inline HandleZoomWebUriProtocolActionParams& operator=(const HandleZoomWebUriProtocolActionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandleZoomWebUriProtocolActionParams& operator=(HandleZoomWebUriProtocolActionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HandleZoomWebUriProtocolActionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandleZoomWebUriProtocolActionParams* internal_default_instance() {
    return reinterpret_cast<const HandleZoomWebUriProtocolActionParams*>(
               &_HandleZoomWebUriProtocolActionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HandleZoomWebUriProtocolActionParams& a, HandleZoomWebUriProtocolActionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HandleZoomWebUriProtocolActionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandleZoomWebUriProtocolActionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandleZoomWebUriProtocolActionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandleZoomWebUriProtocolActionParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HandleZoomWebUriProtocolActionParams& from);
  void MergeFrom(const HandleZoomWebUriProtocolActionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HandleZoomWebUriProtocolActionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams";
  }
  protected:
  explicit HandleZoomWebUriProtocolActionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolActionFieldNumber = 1,
  };
  // optional string protocolAction = 1;
  bool has_protocolaction() const;
  void clear_protocolaction() ;
  const std::string& protocolaction() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocolaction(Arg_&& arg, Args_... args);
  std::string* mutable_protocolaction();
  PROTOBUF_NODISCARD std::string* release_protocolaction();
  void set_allocated_protocolaction(std::string* ptr);

  private:
  const std::string& _internal_protocolaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocolaction(
      const std::string& value);
  std::string* _internal_mutable_protocolaction();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocolaction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ShowChatDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ShowChatDlgParams) */ {
 public:
  inline ShowChatDlgParams() : ShowChatDlgParams(nullptr) {}
  ~ShowChatDlgParams() override;
  explicit PROTOBUF_CONSTEXPR ShowChatDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowChatDlgParams(const ShowChatDlgParams& from);
  ShowChatDlgParams(ShowChatDlgParams&& from) noexcept
    : ShowChatDlgParams() {
    *this = ::std::move(from);
  }

  inline ShowChatDlgParams& operator=(const ShowChatDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowChatDlgParams& operator=(ShowChatDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowChatDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowChatDlgParams* internal_default_instance() {
    return reinterpret_cast<const ShowChatDlgParams*>(
               &_ShowChatDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ShowChatDlgParams& a, ShowChatDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowChatDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowChatDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowChatDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowChatDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShowChatDlgParams& from);
  void MergeFrom(const ShowChatDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowChatDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ShowChatDlgParams";
  }
  protected:
  explicit ShowChatDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHParentFieldNumber = 1,
    kRectLeftFieldNumber = 2,
    kRectTopFieldNumber = 3,
    kRectRightFieldNumber = 4,
    kRectBottomFieldNumber = 5,
  };
  // optional string hParent = 1;
  bool has_hparent() const;
  void clear_hparent() ;
  const std::string& hparent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hparent(Arg_&& arg, Args_... args);
  std::string* mutable_hparent();
  PROTOBUF_NODISCARD std::string* release_hparent();
  void set_allocated_hparent(std::string* ptr);

  private:
  const std::string& _internal_hparent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hparent(
      const std::string& value);
  std::string* _internal_mutable_hparent();

  public:
  // optional string rectLeft = 2;
  bool has_rectleft() const;
  void clear_rectleft() ;
  const std::string& rectleft() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rectleft(Arg_&& arg, Args_... args);
  std::string* mutable_rectleft();
  PROTOBUF_NODISCARD std::string* release_rectleft();
  void set_allocated_rectleft(std::string* ptr);

  private:
  const std::string& _internal_rectleft() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectleft(
      const std::string& value);
  std::string* _internal_mutable_rectleft();

  public:
  // optional string rectTop = 3;
  bool has_recttop() const;
  void clear_recttop() ;
  const std::string& recttop() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recttop(Arg_&& arg, Args_... args);
  std::string* mutable_recttop();
  PROTOBUF_NODISCARD std::string* release_recttop();
  void set_allocated_recttop(std::string* ptr);

  private:
  const std::string& _internal_recttop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recttop(
      const std::string& value);
  std::string* _internal_mutable_recttop();

  public:
  // optional string rectRight = 4;
  bool has_rectright() const;
  void clear_rectright() ;
  const std::string& rectright() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rectright(Arg_&& arg, Args_... args);
  std::string* mutable_rectright();
  PROTOBUF_NODISCARD std::string* release_rectright();
  void set_allocated_rectright(std::string* ptr);

  private:
  const std::string& _internal_rectright() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectright(
      const std::string& value);
  std::string* _internal_mutable_rectright();

  public:
  // optional string rectBottom = 5;
  bool has_rectbottom() const;
  void clear_rectbottom() ;
  const std::string& rectbottom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rectbottom(Arg_&& arg, Args_... args);
  std::string* mutable_rectbottom();
  PROTOBUF_NODISCARD std::string* release_rectbottom();
  void set_allocated_rectbottom(std::string* ptr);

  private:
  const std::string& _internal_rectbottom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectbottom(
      const std::string& value);
  std::string* _internal_mutable_rectbottom();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ShowChatDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hparent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectleft_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recttop_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectright_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectbottom_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnterFullScreenParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnterFullScreenParams) */ {
 public:
  inline EnterFullScreenParams() : EnterFullScreenParams(nullptr) {}
  ~EnterFullScreenParams() override;
  explicit PROTOBUF_CONSTEXPR EnterFullScreenParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterFullScreenParams(const EnterFullScreenParams& from);
  EnterFullScreenParams(EnterFullScreenParams&& from) noexcept
    : EnterFullScreenParams() {
    *this = ::std::move(from);
  }

  inline EnterFullScreenParams& operator=(const EnterFullScreenParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterFullScreenParams& operator=(EnterFullScreenParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnterFullScreenParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterFullScreenParams* internal_default_instance() {
    return reinterpret_cast<const EnterFullScreenParams*>(
               &_EnterFullScreenParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EnterFullScreenParams& a, EnterFullScreenParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterFullScreenParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterFullScreenParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterFullScreenParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterFullScreenParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnterFullScreenParams& from);
  void MergeFrom(const EnterFullScreenParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnterFullScreenParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnterFullScreenParams";
  }
  protected:
  explicit EnterFullScreenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFirstViewFieldNumber = 1,
    kBSecViewFieldNumber = 2,
  };
  // optional bool bFirstView = 1;
  bool has_bfirstview() const;
  void clear_bfirstview() ;
  bool bfirstview() const;
  void set_bfirstview(bool value);

  private:
  bool _internal_bfirstview() const;
  void _internal_set_bfirstview(bool value);

  public:
  // optional bool bSecView = 2;
  bool has_bsecview() const;
  void clear_bsecview() ;
  bool bsecview() const;
  void set_bsecview(bool value);

  private:
  bool _internal_bsecview() const;
  void _internal_set_bsecview(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnterFullScreenParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bfirstview_;
    bool bsecview_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ExitFullScreenParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ExitFullScreenParams) */ {
 public:
  inline ExitFullScreenParams() : ExitFullScreenParams(nullptr) {}
  ~ExitFullScreenParams() override;
  explicit PROTOBUF_CONSTEXPR ExitFullScreenParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExitFullScreenParams(const ExitFullScreenParams& from);
  ExitFullScreenParams(ExitFullScreenParams&& from) noexcept
    : ExitFullScreenParams() {
    *this = ::std::move(from);
  }

  inline ExitFullScreenParams& operator=(const ExitFullScreenParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExitFullScreenParams& operator=(ExitFullScreenParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExitFullScreenParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExitFullScreenParams* internal_default_instance() {
    return reinterpret_cast<const ExitFullScreenParams*>(
               &_ExitFullScreenParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ExitFullScreenParams& a, ExitFullScreenParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ExitFullScreenParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExitFullScreenParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExitFullScreenParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExitFullScreenParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExitFullScreenParams& from);
  void MergeFrom(const ExitFullScreenParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExitFullScreenParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ExitFullScreenParams";
  }
  protected:
  explicit ExitFullScreenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFirstViewFieldNumber = 1,
    kBSecViewFieldNumber = 2,
  };
  // optional bool bFirstView = 1;
  bool has_bfirstview() const;
  void clear_bfirstview() ;
  bool bfirstview() const;
  void set_bfirstview(bool value);

  private:
  bool _internal_bfirstview() const;
  void _internal_set_bfirstview(bool value);

  public:
  // optional bool bSecView = 2;
  bool has_bsecview() const;
  void clear_bsecview() ;
  bool bsecview() const;
  void set_bsecview(bool value);

  private:
  bool _internal_bsecview() const;
  void _internal_set_bsecview(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ExitFullScreenParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bfirstview_;
    bool bsecview_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class MoveFloatVideoWndParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.MoveFloatVideoWndParams) */ {
 public:
  inline MoveFloatVideoWndParams() : MoveFloatVideoWndParams(nullptr) {}
  ~MoveFloatVideoWndParams() override;
  explicit PROTOBUF_CONSTEXPR MoveFloatVideoWndParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveFloatVideoWndParams(const MoveFloatVideoWndParams& from);
  MoveFloatVideoWndParams(MoveFloatVideoWndParams&& from) noexcept
    : MoveFloatVideoWndParams() {
    *this = ::std::move(from);
  }

  inline MoveFloatVideoWndParams& operator=(const MoveFloatVideoWndParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveFloatVideoWndParams& operator=(MoveFloatVideoWndParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MoveFloatVideoWndParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveFloatVideoWndParams* internal_default_instance() {
    return reinterpret_cast<const MoveFloatVideoWndParams*>(
               &_MoveFloatVideoWndParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MoveFloatVideoWndParams& a, MoveFloatVideoWndParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveFloatVideoWndParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveFloatVideoWndParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveFloatVideoWndParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveFloatVideoWndParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MoveFloatVideoWndParams& from);
  void MergeFrom(const MoveFloatVideoWndParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MoveFloatVideoWndParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.MoveFloatVideoWndParams";
  }
  protected:
  explicit MoveFloatVideoWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
  };
  // optional string left = 1;
  bool has_left() const;
  void clear_left() ;
  const std::string& left() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_left(Arg_&& arg, Args_... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* ptr);

  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(
      const std::string& value);
  std::string* _internal_mutable_left();

  public:
  // optional string top = 2;
  bool has_top() const;
  void clear_top() ;
  const std::string& top() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_top(Arg_&& arg, Args_... args);
  std::string* mutable_top();
  PROTOBUF_NODISCARD std::string* release_top();
  void set_allocated_top(std::string* ptr);

  private:
  const std::string& _internal_top() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top(
      const std::string& value);
  std::string* _internal_mutable_top();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.MoveFloatVideoWndParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ShowSharingToolbarParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ShowSharingToolbarParams) */ {
 public:
  inline ShowSharingToolbarParams() : ShowSharingToolbarParams(nullptr) {}
  ~ShowSharingToolbarParams() override;
  explicit PROTOBUF_CONSTEXPR ShowSharingToolbarParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowSharingToolbarParams(const ShowSharingToolbarParams& from);
  ShowSharingToolbarParams(ShowSharingToolbarParams&& from) noexcept
    : ShowSharingToolbarParams() {
    *this = ::std::move(from);
  }

  inline ShowSharingToolbarParams& operator=(const ShowSharingToolbarParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowSharingToolbarParams& operator=(ShowSharingToolbarParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowSharingToolbarParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowSharingToolbarParams* internal_default_instance() {
    return reinterpret_cast<const ShowSharingToolbarParams*>(
               &_ShowSharingToolbarParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ShowSharingToolbarParams& a, ShowSharingToolbarParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowSharingToolbarParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowSharingToolbarParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowSharingToolbarParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowSharingToolbarParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShowSharingToolbarParams& from);
  void MergeFrom(const ShowSharingToolbarParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowSharingToolbarParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ShowSharingToolbarParams";
  }
  protected:
  explicit ShowSharingToolbarParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ShowSharingToolbarParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ChangeFloatoActiveSpkVideoSizeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams) */ {
 public:
  inline ChangeFloatoActiveSpkVideoSizeParams() : ChangeFloatoActiveSpkVideoSizeParams(nullptr) {}
  ~ChangeFloatoActiveSpkVideoSizeParams() override;
  explicit PROTOBUF_CONSTEXPR ChangeFloatoActiveSpkVideoSizeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeFloatoActiveSpkVideoSizeParams(const ChangeFloatoActiveSpkVideoSizeParams& from);
  ChangeFloatoActiveSpkVideoSizeParams(ChangeFloatoActiveSpkVideoSizeParams&& from) noexcept
    : ChangeFloatoActiveSpkVideoSizeParams() {
    *this = ::std::move(from);
  }

  inline ChangeFloatoActiveSpkVideoSizeParams& operator=(const ChangeFloatoActiveSpkVideoSizeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeFloatoActiveSpkVideoSizeParams& operator=(ChangeFloatoActiveSpkVideoSizeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChangeFloatoActiveSpkVideoSizeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeFloatoActiveSpkVideoSizeParams* internal_default_instance() {
    return reinterpret_cast<const ChangeFloatoActiveSpkVideoSizeParams*>(
               &_ChangeFloatoActiveSpkVideoSizeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChangeFloatoActiveSpkVideoSizeParams& a, ChangeFloatoActiveSpkVideoSizeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeFloatoActiveSpkVideoSizeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeFloatoActiveSpkVideoSizeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeFloatoActiveSpkVideoSizeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeFloatoActiveSpkVideoSizeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChangeFloatoActiveSpkVideoSizeParams& from);
  void MergeFrom(const ChangeFloatoActiveSpkVideoSizeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChangeFloatoActiveSpkVideoSizeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams";
  }
  protected:
  explicit ChangeFloatoActiveSpkVideoSizeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatVideoTypeFieldNumber = 1,
  };
  // optional int32 floatVideoType = 1;
  bool has_floatvideotype() const;
  void clear_floatvideotype() ;
  ::int32_t floatvideotype() const;
  void set_floatvideotype(::int32_t value);

  private:
  ::int32_t _internal_floatvideotype() const;
  void _internal_set_floatvideotype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t floatvideotype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ShowParticipantsListWndParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ShowParticipantsListWndParams) */ {
 public:
  inline ShowParticipantsListWndParams() : ShowParticipantsListWndParams(nullptr) {}
  ~ShowParticipantsListWndParams() override;
  explicit PROTOBUF_CONSTEXPR ShowParticipantsListWndParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowParticipantsListWndParams(const ShowParticipantsListWndParams& from);
  ShowParticipantsListWndParams(ShowParticipantsListWndParams&& from) noexcept
    : ShowParticipantsListWndParams() {
    *this = ::std::move(from);
  }

  inline ShowParticipantsListWndParams& operator=(const ShowParticipantsListWndParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowParticipantsListWndParams& operator=(ShowParticipantsListWndParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowParticipantsListWndParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowParticipantsListWndParams* internal_default_instance() {
    return reinterpret_cast<const ShowParticipantsListWndParams*>(
               &_ShowParticipantsListWndParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ShowParticipantsListWndParams& a, ShowParticipantsListWndParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowParticipantsListWndParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowParticipantsListWndParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowParticipantsListWndParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowParticipantsListWndParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShowParticipantsListWndParams& from);
  void MergeFrom(const ShowParticipantsListWndParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowParticipantsListWndParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ShowParticipantsListWndParams";
  }
  protected:
  explicit ShowParticipantsListWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ShowParticipantsListWndParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ShowBottomFloatToolbarWndParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams) */ {
 public:
  inline ShowBottomFloatToolbarWndParams() : ShowBottomFloatToolbarWndParams(nullptr) {}
  ~ShowBottomFloatToolbarWndParams() override;
  explicit PROTOBUF_CONSTEXPR ShowBottomFloatToolbarWndParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowBottomFloatToolbarWndParams(const ShowBottomFloatToolbarWndParams& from);
  ShowBottomFloatToolbarWndParams(ShowBottomFloatToolbarWndParams&& from) noexcept
    : ShowBottomFloatToolbarWndParams() {
    *this = ::std::move(from);
  }

  inline ShowBottomFloatToolbarWndParams& operator=(const ShowBottomFloatToolbarWndParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowBottomFloatToolbarWndParams& operator=(ShowBottomFloatToolbarWndParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowBottomFloatToolbarWndParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowBottomFloatToolbarWndParams* internal_default_instance() {
    return reinterpret_cast<const ShowBottomFloatToolbarWndParams*>(
               &_ShowBottomFloatToolbarWndParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ShowBottomFloatToolbarWndParams& a, ShowBottomFloatToolbarWndParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowBottomFloatToolbarWndParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowBottomFloatToolbarWndParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowBottomFloatToolbarWndParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowBottomFloatToolbarWndParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShowBottomFloatToolbarWndParams& from);
  void MergeFrom(const ShowBottomFloatToolbarWndParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowBottomFloatToolbarWndParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ShowBottomFloatToolbarWndParams";
  }
  protected:
  explicit ShowBottomFloatToolbarWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ShowPreOrNextPageVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ShowPreOrNextPageVideoParams) */ {
 public:
  inline ShowPreOrNextPageVideoParams() : ShowPreOrNextPageVideoParams(nullptr) {}
  ~ShowPreOrNextPageVideoParams() override;
  explicit PROTOBUF_CONSTEXPR ShowPreOrNextPageVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowPreOrNextPageVideoParams(const ShowPreOrNextPageVideoParams& from);
  ShowPreOrNextPageVideoParams(ShowPreOrNextPageVideoParams&& from) noexcept
    : ShowPreOrNextPageVideoParams() {
    *this = ::std::move(from);
  }

  inline ShowPreOrNextPageVideoParams& operator=(const ShowPreOrNextPageVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowPreOrNextPageVideoParams& operator=(ShowPreOrNextPageVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowPreOrNextPageVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowPreOrNextPageVideoParams* internal_default_instance() {
    return reinterpret_cast<const ShowPreOrNextPageVideoParams*>(
               &_ShowPreOrNextPageVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ShowPreOrNextPageVideoParams& a, ShowPreOrNextPageVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowPreOrNextPageVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowPreOrNextPageVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowPreOrNextPageVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowPreOrNextPageVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShowPreOrNextPageVideoParams& from);
  void MergeFrom(const ShowPreOrNextPageVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowPreOrNextPageVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ShowPreOrNextPageVideoParams";
  }
  protected:
  explicit ShowPreOrNextPageVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBPageUpFieldNumber = 1,
  };
  // optional bool bPageUp = 1;
  bool has_bpageup() const;
  void clear_bpageup() ;
  bool bpageup() const;
  void set_bpageup(bool value);

  private:
  bool _internal_bpageup() const;
  void _internal_set_bpageup(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bpageup_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ShowSharingFrameWindowsParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ShowSharingFrameWindowsParams) */ {
 public:
  inline ShowSharingFrameWindowsParams() : ShowSharingFrameWindowsParams(nullptr) {}
  ~ShowSharingFrameWindowsParams() override;
  explicit PROTOBUF_CONSTEXPR ShowSharingFrameWindowsParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowSharingFrameWindowsParams(const ShowSharingFrameWindowsParams& from);
  ShowSharingFrameWindowsParams(ShowSharingFrameWindowsParams&& from) noexcept
    : ShowSharingFrameWindowsParams() {
    *this = ::std::move(from);
  }

  inline ShowSharingFrameWindowsParams& operator=(const ShowSharingFrameWindowsParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowSharingFrameWindowsParams& operator=(ShowSharingFrameWindowsParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowSharingFrameWindowsParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowSharingFrameWindowsParams* internal_default_instance() {
    return reinterpret_cast<const ShowSharingFrameWindowsParams*>(
               &_ShowSharingFrameWindowsParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ShowSharingFrameWindowsParams& a, ShowSharingFrameWindowsParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowSharingFrameWindowsParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowSharingFrameWindowsParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowSharingFrameWindowsParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowSharingFrameWindowsParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShowSharingFrameWindowsParams& from);
  void MergeFrom(const ShowSharingFrameWindowsParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowSharingFrameWindowsParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ShowSharingFrameWindowsParams";
  }
  protected:
  explicit ShowSharingFrameWindowsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SwitchSplitScreenModeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SwitchSplitScreenModeParams) */ {
 public:
  inline SwitchSplitScreenModeParams() : SwitchSplitScreenModeParams(nullptr) {}
  ~SwitchSplitScreenModeParams() override;
  explicit PROTOBUF_CONSTEXPR SwitchSplitScreenModeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchSplitScreenModeParams(const SwitchSplitScreenModeParams& from);
  SwitchSplitScreenModeParams(SwitchSplitScreenModeParams&& from) noexcept
    : SwitchSplitScreenModeParams() {
    *this = ::std::move(from);
  }

  inline SwitchSplitScreenModeParams& operator=(const SwitchSplitScreenModeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchSplitScreenModeParams& operator=(SwitchSplitScreenModeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SwitchSplitScreenModeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchSplitScreenModeParams* internal_default_instance() {
    return reinterpret_cast<const SwitchSplitScreenModeParams*>(
               &_SwitchSplitScreenModeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SwitchSplitScreenModeParams& a, SwitchSplitScreenModeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchSplitScreenModeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchSplitScreenModeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchSplitScreenModeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchSplitScreenModeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SwitchSplitScreenModeParams& from);
  void MergeFrom(const SwitchSplitScreenModeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchSplitScreenModeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SwitchSplitScreenModeParams";
  }
  protected:
  explicit SwitchSplitScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBSplitFieldNumber = 1,
  };
  // optional bool bSplit = 1;
  bool has_bsplit() const;
  void clear_bsplit() ;
  bool bsplit() const;
  void set_bsplit(bool value);

  private:
  bool _internal_bsplit() const;
  void _internal_set_bsplit(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SwitchSplitScreenModeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bsplit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams) */ {
 public:
  inline SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams() : SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(nullptr) {}
  ~SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams() override;
  explicit PROTOBUF_CONSTEXPR SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from);
  SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams&& from) noexcept
    : SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams() {
    *this = ::std::move(from);
  }

  inline SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& operator=(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& operator=(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* internal_default_instance() {
    return reinterpret_cast<const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams*>(
               &_SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& a, SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from);
  void MergeFrom(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams";
  }
  protected:
  explicit SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinimizeUIMOdeFieldNumber = 1,
  };
  // optional int32 minimizeUIMOde = 1;
  bool has_minimizeuimode() const;
  void clear_minimizeuimode() ;
  ::int32_t minimizeuimode() const;
  void set_minimizeuimode(::int32_t value);

  private:
  ::int32_t _internal_minimizeuimode() const;
  void _internal_set_minimizeuimode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t minimizeuimode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SwapToShowShareViewOrVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams) */ {
 public:
  inline SwapToShowShareViewOrVideoParams() : SwapToShowShareViewOrVideoParams(nullptr) {}
  ~SwapToShowShareViewOrVideoParams() override;
  explicit PROTOBUF_CONSTEXPR SwapToShowShareViewOrVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapToShowShareViewOrVideoParams(const SwapToShowShareViewOrVideoParams& from);
  SwapToShowShareViewOrVideoParams(SwapToShowShareViewOrVideoParams&& from) noexcept
    : SwapToShowShareViewOrVideoParams() {
    *this = ::std::move(from);
  }

  inline SwapToShowShareViewOrVideoParams& operator=(const SwapToShowShareViewOrVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapToShowShareViewOrVideoParams& operator=(SwapToShowShareViewOrVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SwapToShowShareViewOrVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapToShowShareViewOrVideoParams* internal_default_instance() {
    return reinterpret_cast<const SwapToShowShareViewOrVideoParams*>(
               &_SwapToShowShareViewOrVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SwapToShowShareViewOrVideoParams& a, SwapToShowShareViewOrVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapToShowShareViewOrVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapToShowShareViewOrVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwapToShowShareViewOrVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwapToShowShareViewOrVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SwapToShowShareViewOrVideoParams& from);
  void MergeFrom(const SwapToShowShareViewOrVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwapToShowShareViewOrVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SwapToShowShareViewOrVideoParams";
  }
  protected:
  explicit SwapToShowShareViewOrVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBToDisplayShareFieldNumber = 1,
  };
  // optional bool bToDisplayShare = 1;
  bool has_btodisplayshare() const;
  void clear_btodisplayshare() ;
  bool btodisplayshare() const;
  void set_btodisplayshare(bool value);

  private:
  bool _internal_btodisplayshare() const;
  void _internal_set_btodisplayshare(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool btodisplayshare_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ShowSettingDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ShowSettingDlgParams) */ {
 public:
  inline ShowSettingDlgParams() : ShowSettingDlgParams(nullptr) {}
  ~ShowSettingDlgParams() override;
  explicit PROTOBUF_CONSTEXPR ShowSettingDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowSettingDlgParams(const ShowSettingDlgParams& from);
  ShowSettingDlgParams(ShowSettingDlgParams&& from) noexcept
    : ShowSettingDlgParams() {
    *this = ::std::move(from);
  }

  inline ShowSettingDlgParams& operator=(const ShowSettingDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowSettingDlgParams& operator=(ShowSettingDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowSettingDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowSettingDlgParams* internal_default_instance() {
    return reinterpret_cast<const ShowSettingDlgParams*>(
               &_ShowSettingDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ShowSettingDlgParams& a, ShowSettingDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowSettingDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowSettingDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowSettingDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowSettingDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShowSettingDlgParams& from);
  void MergeFrom(const ShowSettingDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowSettingDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ShowSettingDlgParams";
  }
  protected:
  explicit ShowSettingDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHParentFieldNumber = 1,
    kLeftFieldNumber = 2,
    kTopFieldNumber = 3,
    kHSettingWndFieldNumber = 4,
    kBShowFieldNumber = 5,
  };
  // optional string hParent = 1;
  bool has_hparent() const;
  void clear_hparent() ;
  const std::string& hparent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hparent(Arg_&& arg, Args_... args);
  std::string* mutable_hparent();
  PROTOBUF_NODISCARD std::string* release_hparent();
  void set_allocated_hparent(std::string* ptr);

  private:
  const std::string& _internal_hparent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hparent(
      const std::string& value);
  std::string* _internal_mutable_hparent();

  public:
  // optional string left = 2;
  bool has_left() const;
  void clear_left() ;
  const std::string& left() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_left(Arg_&& arg, Args_... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* ptr);

  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(
      const std::string& value);
  std::string* _internal_mutable_left();

  public:
  // optional string top = 3;
  bool has_top() const;
  void clear_top() ;
  const std::string& top() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_top(Arg_&& arg, Args_... args);
  std::string* mutable_top();
  PROTOBUF_NODISCARD std::string* release_top();
  void set_allocated_top(std::string* ptr);

  private:
  const std::string& _internal_top() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top(
      const std::string& value);
  std::string* _internal_mutable_top();

  public:
  // optional string hSettingWnd = 4;
  bool has_hsettingwnd() const;
  void clear_hsettingwnd() ;
  const std::string& hsettingwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hsettingwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hsettingwnd();
  PROTOBUF_NODISCARD std::string* release_hsettingwnd();
  void set_allocated_hsettingwnd(std::string* ptr);

  private:
  const std::string& _internal_hsettingwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hsettingwnd(
      const std::string& value);
  std::string* _internal_mutable_hsettingwnd();

  public:
  // optional bool bShow = 5;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ShowSettingDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hparent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hsettingwnd_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ScheduleMeetingWithWndParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ScheduleMeetingWithWndParams) */ {
 public:
  inline ScheduleMeetingWithWndParams() : ScheduleMeetingWithWndParams(nullptr) {}
  ~ScheduleMeetingWithWndParams() override;
  explicit PROTOBUF_CONSTEXPR ScheduleMeetingWithWndParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleMeetingWithWndParams(const ScheduleMeetingWithWndParams& from);
  ScheduleMeetingWithWndParams(ScheduleMeetingWithWndParams&& from) noexcept
    : ScheduleMeetingWithWndParams() {
    *this = ::std::move(from);
  }

  inline ScheduleMeetingWithWndParams& operator=(const ScheduleMeetingWithWndParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleMeetingWithWndParams& operator=(ScheduleMeetingWithWndParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ScheduleMeetingWithWndParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleMeetingWithWndParams* internal_default_instance() {
    return reinterpret_cast<const ScheduleMeetingWithWndParams*>(
               &_ScheduleMeetingWithWndParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ScheduleMeetingWithWndParams& a, ScheduleMeetingWithWndParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleMeetingWithWndParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleMeetingWithWndParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleMeetingWithWndParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleMeetingWithWndParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ScheduleMeetingWithWndParams& from);
  void MergeFrom(const ScheduleMeetingWithWndParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScheduleMeetingWithWndParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ScheduleMeetingWithWndParams";
  }
  protected:
  explicit ScheduleMeetingWithWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHSelfWndFieldNumber = 1,
    kHParentFieldNumber = 2,
    kLeftFieldNumber = 3,
    kTopFieldNumber = 4,
  };
  // optional string hSelfWnd = 1;
  bool has_hselfwnd() const;
  void clear_hselfwnd() ;
  const std::string& hselfwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hselfwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hselfwnd();
  PROTOBUF_NODISCARD std::string* release_hselfwnd();
  void set_allocated_hselfwnd(std::string* ptr);

  private:
  const std::string& _internal_hselfwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hselfwnd(
      const std::string& value);
  std::string* _internal_mutable_hselfwnd();

  public:
  // optional string hParent = 2;
  bool has_hparent() const;
  void clear_hparent() ;
  const std::string& hparent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hparent(Arg_&& arg, Args_... args);
  std::string* mutable_hparent();
  PROTOBUF_NODISCARD std::string* release_hparent();
  void set_allocated_hparent(std::string* ptr);

  private:
  const std::string& _internal_hparent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hparent(
      const std::string& value);
  std::string* _internal_mutable_hparent();

  public:
  // optional string left = 3;
  bool has_left() const;
  void clear_left() ;
  const std::string& left() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_left(Arg_&& arg, Args_... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* ptr);

  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(
      const std::string& value);
  std::string* _internal_mutable_left();

  public:
  // optional string top = 4;
  bool has_top() const;
  void clear_top() ;
  const std::string& top() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_top(Arg_&& arg, Args_... args);
  std::string* mutable_top();
  PROTOBUF_NODISCARD std::string* release_top();
  void set_allocated_top(std::string* ptr);

  private:
  const std::string& _internal_top() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top(
      const std::string& value);
  std::string* _internal_mutable_top();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hselfwnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hparent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EditMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EditMeetingParams) */ {
 public:
  inline EditMeetingParams() : EditMeetingParams(nullptr) {}
  ~EditMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR EditMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditMeetingParams(const EditMeetingParams& from);
  EditMeetingParams(EditMeetingParams&& from) noexcept
    : EditMeetingParams() {
    *this = ::std::move(from);
  }

  inline EditMeetingParams& operator=(const EditMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditMeetingParams& operator=(EditMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EditMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditMeetingParams* internal_default_instance() {
    return reinterpret_cast<const EditMeetingParams*>(
               &_EditMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EditMeetingParams& a, EditMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EditMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EditMeetingParams& from);
  void MergeFrom(const EditMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EditMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EditMeetingParams";
  }
  protected:
  explicit EditMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeetingNumberFieldNumber = 1,
  };
  // optional uint64 meetingNumber = 1;
  bool has_meetingnumber() const;
  void clear_meetingnumber() ;
  ::uint64_t meetingnumber() const;
  void set_meetingnumber(::uint64_t value);

  private:
  ::uint64_t _internal_meetingnumber() const;
  void _internal_set_meetingnumber(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EditMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t meetingnumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EditMeetingWithWndParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EditMeetingWithWndParams) */ {
 public:
  inline EditMeetingWithWndParams() : EditMeetingWithWndParams(nullptr) {}
  ~EditMeetingWithWndParams() override;
  explicit PROTOBUF_CONSTEXPR EditMeetingWithWndParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditMeetingWithWndParams(const EditMeetingWithWndParams& from);
  EditMeetingWithWndParams(EditMeetingWithWndParams&& from) noexcept
    : EditMeetingWithWndParams() {
    *this = ::std::move(from);
  }

  inline EditMeetingWithWndParams& operator=(const EditMeetingWithWndParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditMeetingWithWndParams& operator=(EditMeetingWithWndParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EditMeetingWithWndParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditMeetingWithWndParams* internal_default_instance() {
    return reinterpret_cast<const EditMeetingWithWndParams*>(
               &_EditMeetingWithWndParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(EditMeetingWithWndParams& a, EditMeetingWithWndParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EditMeetingWithWndParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditMeetingWithWndParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditMeetingWithWndParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditMeetingWithWndParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EditMeetingWithWndParams& from);
  void MergeFrom(const EditMeetingWithWndParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EditMeetingWithWndParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EditMeetingWithWndParams";
  }
  protected:
  explicit EditMeetingWithWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHSelfWndFieldNumber = 1,
    kHParentFieldNumber = 2,
    kLeftFieldNumber = 3,
    kTopFieldNumber = 4,
    kMeetingNumberFieldNumber = 5,
  };
  // optional string hSelfWnd = 1;
  bool has_hselfwnd() const;
  void clear_hselfwnd() ;
  const std::string& hselfwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hselfwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hselfwnd();
  PROTOBUF_NODISCARD std::string* release_hselfwnd();
  void set_allocated_hselfwnd(std::string* ptr);

  private:
  const std::string& _internal_hselfwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hselfwnd(
      const std::string& value);
  std::string* _internal_mutable_hselfwnd();

  public:
  // optional string hParent = 2;
  bool has_hparent() const;
  void clear_hparent() ;
  const std::string& hparent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hparent(Arg_&& arg, Args_... args);
  std::string* mutable_hparent();
  PROTOBUF_NODISCARD std::string* release_hparent();
  void set_allocated_hparent(std::string* ptr);

  private:
  const std::string& _internal_hparent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hparent(
      const std::string& value);
  std::string* _internal_mutable_hparent();

  public:
  // optional string left = 3;
  bool has_left() const;
  void clear_left() ;
  const std::string& left() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_left(Arg_&& arg, Args_... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* ptr);

  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(
      const std::string& value);
  std::string* _internal_mutable_left();

  public:
  // optional string top = 4;
  bool has_top() const;
  void clear_top() ;
  const std::string& top() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_top(Arg_&& arg, Args_... args);
  std::string* mutable_top();
  PROTOBUF_NODISCARD std::string* release_top();
  void set_allocated_top(std::string* ptr);

  private:
  const std::string& _internal_top() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top(
      const std::string& value);
  std::string* _internal_mutable_top();

  public:
  // optional uint64 meetingNumber = 5;
  bool has_meetingnumber() const;
  void clear_meetingnumber() ;
  ::uint64_t meetingnumber() const;
  void set_meetingnumber(::uint64_t value);

  private:
  ::uint64_t _internal_meetingnumber() const;
  void _internal_set_meetingnumber(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EditMeetingWithWndParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hselfwnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hparent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_;
    ::uint64_t meetingnumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DeleteMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DeleteMeetingParams) */ {
 public:
  inline DeleteMeetingParams() : DeleteMeetingParams(nullptr) {}
  ~DeleteMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR DeleteMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMeetingParams(const DeleteMeetingParams& from);
  DeleteMeetingParams(DeleteMeetingParams&& from) noexcept
    : DeleteMeetingParams() {
    *this = ::std::move(from);
  }

  inline DeleteMeetingParams& operator=(const DeleteMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMeetingParams& operator=(DeleteMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeleteMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMeetingParams* internal_default_instance() {
    return reinterpret_cast<const DeleteMeetingParams*>(
               &_DeleteMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeleteMeetingParams& a, DeleteMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DeleteMeetingParams& from);
  void MergeFrom(const DeleteMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DeleteMeetingParams";
  }
  protected:
  explicit DeleteMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeetingNumberFieldNumber = 1,
  };
  // optional uint64 meetingNumber = 1;
  bool has_meetingnumber() const;
  void clear_meetingnumber() ;
  ::uint64_t meetingnumber() const;
  void set_meetingnumber(::uint64_t value);

  private:
  ::uint64_t _internal_meetingnumber() const;
  void _internal_set_meetingnumber(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DeleteMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t meetingnumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class AddCustomizedPictureResourceParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.AddCustomizedPictureResourceParams) */ {
 public:
  inline AddCustomizedPictureResourceParams() : AddCustomizedPictureResourceParams(nullptr) {}
  ~AddCustomizedPictureResourceParams() override;
  explicit PROTOBUF_CONSTEXPR AddCustomizedPictureResourceParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCustomizedPictureResourceParams(const AddCustomizedPictureResourceParams& from);
  AddCustomizedPictureResourceParams(AddCustomizedPictureResourceParams&& from) noexcept
    : AddCustomizedPictureResourceParams() {
    *this = ::std::move(from);
  }

  inline AddCustomizedPictureResourceParams& operator=(const AddCustomizedPictureResourceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCustomizedPictureResourceParams& operator=(AddCustomizedPictureResourceParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AddCustomizedPictureResourceParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCustomizedPictureResourceParams* internal_default_instance() {
    return reinterpret_cast<const AddCustomizedPictureResourceParams*>(
               &_AddCustomizedPictureResourceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AddCustomizedPictureResourceParams& a, AddCustomizedPictureResourceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCustomizedPictureResourceParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCustomizedPictureResourceParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddCustomizedPictureResourceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddCustomizedPictureResourceParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AddCustomizedPictureResourceParams& from);
  void MergeFrom(const AddCustomizedPictureResourceParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddCustomizedPictureResourceParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.AddCustomizedPictureResourceParams";
  }
  protected:
  explicit AddCustomizedPictureResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrPNGIDFieldNumber = 1,
    kStrPNGPathFieldNumber = 2,
  };
  // optional string strPNGID = 1;
  bool has_strpngid() const;
  void clear_strpngid() ;
  const std::string& strpngid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strpngid(Arg_&& arg, Args_... args);
  std::string* mutable_strpngid();
  PROTOBUF_NODISCARD std::string* release_strpngid();
  void set_allocated_strpngid(std::string* ptr);

  private:
  const std::string& _internal_strpngid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strpngid(
      const std::string& value);
  std::string* _internal_mutable_strpngid();

  public:
  // optional string strPNGPath = 2;
  bool has_strpngpath() const;
  void clear_strpngpath() ;
  const std::string& strpngpath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strpngpath(Arg_&& arg, Args_... args);
  std::string* mutable_strpngpath();
  PROTOBUF_NODISCARD std::string* release_strpngpath();
  void set_allocated_strpngpath(std::string* ptr);

  private:
  const std::string& _internal_strpngpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strpngpath(
      const std::string& value);
  std::string* _internal_mutable_strpngpath();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strpngid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strpngpath_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class AddCustomizedStringResourceParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.AddCustomizedStringResourceParams) */ {
 public:
  inline AddCustomizedStringResourceParams() : AddCustomizedStringResourceParams(nullptr) {}
  ~AddCustomizedStringResourceParams() override;
  explicit PROTOBUF_CONSTEXPR AddCustomizedStringResourceParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCustomizedStringResourceParams(const AddCustomizedStringResourceParams& from);
  AddCustomizedStringResourceParams(AddCustomizedStringResourceParams&& from) noexcept
    : AddCustomizedStringResourceParams() {
    *this = ::std::move(from);
  }

  inline AddCustomizedStringResourceParams& operator=(const AddCustomizedStringResourceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCustomizedStringResourceParams& operator=(AddCustomizedStringResourceParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AddCustomizedStringResourceParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCustomizedStringResourceParams* internal_default_instance() {
    return reinterpret_cast<const AddCustomizedStringResourceParams*>(
               &_AddCustomizedStringResourceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AddCustomizedStringResourceParams& a, AddCustomizedStringResourceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCustomizedStringResourceParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCustomizedStringResourceParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddCustomizedStringResourceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddCustomizedStringResourceParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AddCustomizedStringResourceParams& from);
  void MergeFrom(const AddCustomizedStringResourceParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddCustomizedStringResourceParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.AddCustomizedStringResourceParams";
  }
  protected:
  explicit AddCustomizedStringResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrCustomizedStringFieldNumber = 2,
    kCustomizedStringTypeFieldNumber = 1,
  };
  // optional string strCustomizedString = 2;
  bool has_strcustomizedstring() const;
  void clear_strcustomizedstring() ;
  const std::string& strcustomizedstring() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strcustomizedstring(Arg_&& arg, Args_... args);
  std::string* mutable_strcustomizedstring();
  PROTOBUF_NODISCARD std::string* release_strcustomizedstring();
  void set_allocated_strcustomizedstring(std::string* ptr);

  private:
  const std::string& _internal_strcustomizedstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcustomizedstring(
      const std::string& value);
  std::string* _internal_mutable_strcustomizedstring();

  public:
  // optional int32 customizedStringType = 1;
  bool has_customizedstringtype() const;
  void clear_customizedstringtype() ;
  ::int32_t customizedstringtype() const;
  void set_customizedstringtype(::int32_t value);

  private:
  ::int32_t _internal_customizedstringtype() const;
  void _internal_set_customizedstringtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.AddCustomizedStringResourceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcustomizedstring_;
    ::int32_t customizedstringtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class AddCustomizedURLResourceParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.AddCustomizedURLResourceParams) */ {
 public:
  inline AddCustomizedURLResourceParams() : AddCustomizedURLResourceParams(nullptr) {}
  ~AddCustomizedURLResourceParams() override;
  explicit PROTOBUF_CONSTEXPR AddCustomizedURLResourceParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCustomizedURLResourceParams(const AddCustomizedURLResourceParams& from);
  AddCustomizedURLResourceParams(AddCustomizedURLResourceParams&& from) noexcept
    : AddCustomizedURLResourceParams() {
    *this = ::std::move(from);
  }

  inline AddCustomizedURLResourceParams& operator=(const AddCustomizedURLResourceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCustomizedURLResourceParams& operator=(AddCustomizedURLResourceParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AddCustomizedURLResourceParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCustomizedURLResourceParams* internal_default_instance() {
    return reinterpret_cast<const AddCustomizedURLResourceParams*>(
               &_AddCustomizedURLResourceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AddCustomizedURLResourceParams& a, AddCustomizedURLResourceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCustomizedURLResourceParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCustomizedURLResourceParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddCustomizedURLResourceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddCustomizedURLResourceParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AddCustomizedURLResourceParams& from);
  void MergeFrom(const AddCustomizedURLResourceParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddCustomizedURLResourceParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.AddCustomizedURLResourceParams";
  }
  protected:
  explicit AddCustomizedURLResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrCustomizedURLFieldNumber = 2,
    kCustomizedURLTypeFieldNumber = 1,
  };
  // optional string strCustomizedURL = 2;
  bool has_strcustomizedurl() const;
  void clear_strcustomizedurl() ;
  const std::string& strcustomizedurl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strcustomizedurl(Arg_&& arg, Args_... args);
  std::string* mutable_strcustomizedurl();
  PROTOBUF_NODISCARD std::string* release_strcustomizedurl();
  void set_allocated_strcustomizedurl(std::string* ptr);

  private:
  const std::string& _internal_strcustomizedurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcustomizedurl(
      const std::string& value);
  std::string* _internal_mutable_strcustomizedurl();

  public:
  // optional int32 customizedURLType = 1;
  bool has_customizedurltype() const;
  void clear_customizedurltype() ;
  ::int32_t customizedurltype() const;
  void set_customizedurltype(::int32_t value);

  private:
  ::int32_t _internal_customizedurltype() const;
  void _internal_set_customizedurltype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.AddCustomizedURLResourceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcustomizedurl_;
    ::int32_t customizedurltype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class TryWithMeetingNumberParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.TryWithMeetingNumberParams) */ {
 public:
  inline TryWithMeetingNumberParams() : TryWithMeetingNumberParams(nullptr) {}
  ~TryWithMeetingNumberParams() override;
  explicit PROTOBUF_CONSTEXPR TryWithMeetingNumberParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TryWithMeetingNumberParams(const TryWithMeetingNumberParams& from);
  TryWithMeetingNumberParams(TryWithMeetingNumberParams&& from) noexcept
    : TryWithMeetingNumberParams() {
    *this = ::std::move(from);
  }

  inline TryWithMeetingNumberParams& operator=(const TryWithMeetingNumberParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryWithMeetingNumberParams& operator=(TryWithMeetingNumberParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TryWithMeetingNumberParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TryWithMeetingNumberParams* internal_default_instance() {
    return reinterpret_cast<const TryWithMeetingNumberParams*>(
               &_TryWithMeetingNumberParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TryWithMeetingNumberParams& a, TryWithMeetingNumberParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TryWithMeetingNumberParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryWithMeetingNumberParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TryWithMeetingNumberParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TryWithMeetingNumberParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TryWithMeetingNumberParams& from);
  void MergeFrom(const TryWithMeetingNumberParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TryWithMeetingNumberParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.TryWithMeetingNumberParams";
  }
  protected:
  explicit TryWithMeetingNumberParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeetingNumberFieldNumber = 1,
  };
  // optional uint64 meetingNumber = 1;
  bool has_meetingnumber() const;
  void clear_meetingnumber() ;
  ::uint64_t meetingnumber() const;
  void set_meetingnumber(::uint64_t value);

  private:
  ::uint64_t _internal_meetingnumber() const;
  void _internal_set_meetingnumber(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.TryWithMeetingNumberParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t meetingnumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class TryWithPairingCodeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.TryWithPairingCodeParams) */ {
 public:
  inline TryWithPairingCodeParams() : TryWithPairingCodeParams(nullptr) {}
  ~TryWithPairingCodeParams() override;
  explicit PROTOBUF_CONSTEXPR TryWithPairingCodeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TryWithPairingCodeParams(const TryWithPairingCodeParams& from);
  TryWithPairingCodeParams(TryWithPairingCodeParams&& from) noexcept
    : TryWithPairingCodeParams() {
    *this = ::std::move(from);
  }

  inline TryWithPairingCodeParams& operator=(const TryWithPairingCodeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryWithPairingCodeParams& operator=(TryWithPairingCodeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TryWithPairingCodeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TryWithPairingCodeParams* internal_default_instance() {
    return reinterpret_cast<const TryWithPairingCodeParams*>(
               &_TryWithPairingCodeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TryWithPairingCodeParams& a, TryWithPairingCodeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TryWithPairingCodeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryWithPairingCodeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TryWithPairingCodeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TryWithPairingCodeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TryWithPairingCodeParams& from);
  void MergeFrom(const TryWithPairingCodeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TryWithPairingCodeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.TryWithPairingCodeParams";
  }
  protected:
  explicit TryWithPairingCodeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParingCodeFieldNumber = 1,
  };
  // optional string paringCode = 1;
  bool has_paringcode() const;
  void clear_paringcode() ;
  const std::string& paringcode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_paringcode(Arg_&& arg, Args_... args);
  std::string* mutable_paringcode();
  PROTOBUF_NODISCARD std::string* release_paringcode();
  void set_allocated_paringcode(std::string* ptr);

  private:
  const std::string& _internal_paringcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paringcode(
      const std::string& value);
  std::string* _internal_mutable_paringcode();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.TryWithPairingCodeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paringcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StartAnnotationParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StartAnnotationParams) */ {
 public:
  inline StartAnnotationParams() : StartAnnotationParams(nullptr) {}
  ~StartAnnotationParams() override;
  explicit PROTOBUF_CONSTEXPR StartAnnotationParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartAnnotationParams(const StartAnnotationParams& from);
  StartAnnotationParams(StartAnnotationParams&& from) noexcept
    : StartAnnotationParams() {
    *this = ::std::move(from);
  }

  inline StartAnnotationParams& operator=(const StartAnnotationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartAnnotationParams& operator=(StartAnnotationParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartAnnotationParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartAnnotationParams* internal_default_instance() {
    return reinterpret_cast<const StartAnnotationParams*>(
               &_StartAnnotationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(StartAnnotationParams& a, StartAnnotationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartAnnotationParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartAnnotationParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartAnnotationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartAnnotationParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartAnnotationParams& from);
  void MergeFrom(const StartAnnotationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartAnnotationParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StartAnnotationParams";
  }
  protected:
  explicit StartAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 2,
    kTopFieldNumber = 3,
    kViewTypeFieldNumber = 1,
  };
  // optional string left = 2;
  bool has_left() const;
  void clear_left() ;
  const std::string& left() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_left(Arg_&& arg, Args_... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* ptr);

  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(
      const std::string& value);
  std::string* _internal_mutable_left();

  public:
  // optional string top = 3;
  bool has_top() const;
  void clear_top() ;
  const std::string& top() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_top(Arg_&& arg, Args_... args);
  std::string* mutable_top();
  PROTOBUF_NODISCARD std::string* release_top();
  void set_allocated_top(std::string* ptr);

  private:
  const std::string& _internal_top() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top(
      const std::string& value);
  std::string* _internal_mutable_top();

  public:
  // optional int32 viewType = 1;
  bool has_viewtype() const;
  void clear_viewtype() ;
  ::int32_t viewtype() const;
  void set_viewtype(::int32_t value);

  private:
  ::int32_t _internal_viewtype() const;
  void _internal_set_viewtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StartAnnotationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_;
    ::int32_t viewtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StopAnnotationParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StopAnnotationParams) */ {
 public:
  inline StopAnnotationParams() : StopAnnotationParams(nullptr) {}
  ~StopAnnotationParams() override;
  explicit PROTOBUF_CONSTEXPR StopAnnotationParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopAnnotationParams(const StopAnnotationParams& from);
  StopAnnotationParams(StopAnnotationParams&& from) noexcept
    : StopAnnotationParams() {
    *this = ::std::move(from);
  }

  inline StopAnnotationParams& operator=(const StopAnnotationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopAnnotationParams& operator=(StopAnnotationParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StopAnnotationParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopAnnotationParams* internal_default_instance() {
    return reinterpret_cast<const StopAnnotationParams*>(
               &_StopAnnotationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(StopAnnotationParams& a, StopAnnotationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StopAnnotationParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopAnnotationParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopAnnotationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopAnnotationParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StopAnnotationParams& from);
  void MergeFrom(const StopAnnotationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopAnnotationParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StopAnnotationParams";
  }
  protected:
  explicit StopAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewTypeFieldNumber = 1,
  };
  // optional int32 viewType = 1;
  bool has_viewtype() const;
  void clear_viewtype() ;
  ::int32_t viewtype() const;
  void set_viewtype(::int32_t value);

  private:
  ::int32_t _internal_viewtype() const;
  void _internal_set_viewtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StopAnnotationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t viewtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetToolParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetToolParams) */ {
 public:
  inline SetToolParams() : SetToolParams(nullptr) {}
  ~SetToolParams() override;
  explicit PROTOBUF_CONSTEXPR SetToolParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetToolParams(const SetToolParams& from);
  SetToolParams(SetToolParams&& from) noexcept
    : SetToolParams() {
    *this = ::std::move(from);
  }

  inline SetToolParams& operator=(const SetToolParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetToolParams& operator=(SetToolParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetToolParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetToolParams* internal_default_instance() {
    return reinterpret_cast<const SetToolParams*>(
               &_SetToolParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SetToolParams& a, SetToolParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetToolParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetToolParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetToolParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetToolParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetToolParams& from);
  void MergeFrom(const SetToolParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetToolParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetToolParams";
  }
  protected:
  explicit SetToolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewTypeFieldNumber = 1,
    kToolTypeFieldNumber = 2,
  };
  // optional int32 viewType = 1;
  bool has_viewtype() const;
  void clear_viewtype() ;
  ::int32_t viewtype() const;
  void set_viewtype(::int32_t value);

  private:
  ::int32_t _internal_viewtype() const;
  void _internal_set_viewtype(::int32_t value);

  public:
  // optional int32 toolType = 2;
  bool has_tooltype() const;
  void clear_tooltype() ;
  ::int32_t tooltype() const;
  void set_tooltype(::int32_t value);

  private:
  ::int32_t _internal_tooltype() const;
  void _internal_set_tooltype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetToolParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t viewtype_;
    ::int32_t tooltype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ClearAnnotationParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ClearAnnotationParams) */ {
 public:
  inline ClearAnnotationParams() : ClearAnnotationParams(nullptr) {}
  ~ClearAnnotationParams() override;
  explicit PROTOBUF_CONSTEXPR ClearAnnotationParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearAnnotationParams(const ClearAnnotationParams& from);
  ClearAnnotationParams(ClearAnnotationParams&& from) noexcept
    : ClearAnnotationParams() {
    *this = ::std::move(from);
  }

  inline ClearAnnotationParams& operator=(const ClearAnnotationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearAnnotationParams& operator=(ClearAnnotationParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClearAnnotationParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearAnnotationParams* internal_default_instance() {
    return reinterpret_cast<const ClearAnnotationParams*>(
               &_ClearAnnotationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ClearAnnotationParams& a, ClearAnnotationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearAnnotationParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearAnnotationParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearAnnotationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearAnnotationParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClearAnnotationParams& from);
  void MergeFrom(const ClearAnnotationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearAnnotationParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ClearAnnotationParams";
  }
  protected:
  explicit ClearAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewTypeFieldNumber = 1,
    kClearTypeFieldNumber = 2,
  };
  // optional int32 viewType = 1;
  bool has_viewtype() const;
  void clear_viewtype() ;
  ::int32_t viewtype() const;
  void set_viewtype(::int32_t value);

  private:
  ::int32_t _internal_viewtype() const;
  void _internal_set_viewtype(::int32_t value);

  public:
  // optional int32 clearType = 2;
  bool has_cleartype() const;
  void clear_cleartype() ;
  ::int32_t cleartype() const;
  void set_cleartype(::int32_t value);

  private:
  ::int32_t _internal_cleartype() const;
  void _internal_set_cleartype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ClearAnnotationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t viewtype_;
    ::int32_t cleartype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetColorParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetColorParams) */ {
 public:
  inline SetColorParams() : SetColorParams(nullptr) {}
  ~SetColorParams() override;
  explicit PROTOBUF_CONSTEXPR SetColorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetColorParams(const SetColorParams& from);
  SetColorParams(SetColorParams&& from) noexcept
    : SetColorParams() {
    *this = ::std::move(from);
  }

  inline SetColorParams& operator=(const SetColorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetColorParams& operator=(SetColorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetColorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetColorParams* internal_default_instance() {
    return reinterpret_cast<const SetColorParams*>(
               &_SetColorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SetColorParams& a, SetColorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetColorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetColorParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetColorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetColorParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetColorParams& from);
  void MergeFrom(const SetColorParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetColorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetColorParams";
  }
  protected:
  explicit SetColorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 2,
    kViewTypeFieldNumber = 1,
  };
  // optional string color = 2;
  bool has_color() const;
  void clear_color() ;
  const std::string& color() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_color(Arg_&& arg, Args_... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* ptr);

  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(
      const std::string& value);
  std::string* _internal_mutable_color();

  public:
  // optional int32 viewType = 1;
  bool has_viewtype() const;
  void clear_viewtype() ;
  ::int32_t viewtype() const;
  void set_viewtype(::int32_t value);

  private:
  ::int32_t _internal_viewtype() const;
  void _internal_set_viewtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetColorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    ::int32_t viewtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetLineWidthParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetLineWidthParams) */ {
 public:
  inline SetLineWidthParams() : SetLineWidthParams(nullptr) {}
  ~SetLineWidthParams() override;
  explicit PROTOBUF_CONSTEXPR SetLineWidthParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLineWidthParams(const SetLineWidthParams& from);
  SetLineWidthParams(SetLineWidthParams&& from) noexcept
    : SetLineWidthParams() {
    *this = ::std::move(from);
  }

  inline SetLineWidthParams& operator=(const SetLineWidthParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLineWidthParams& operator=(SetLineWidthParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetLineWidthParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLineWidthParams* internal_default_instance() {
    return reinterpret_cast<const SetLineWidthParams*>(
               &_SetLineWidthParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SetLineWidthParams& a, SetLineWidthParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLineWidthParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLineWidthParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLineWidthParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLineWidthParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetLineWidthParams& from);
  void MergeFrom(const SetLineWidthParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetLineWidthParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetLineWidthParams";
  }
  protected:
  explicit SetLineWidthParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineWidthFieldNumber = 2,
    kViewTypeFieldNumber = 1,
  };
  // optional string lineWidth = 2;
  bool has_linewidth() const;
  void clear_linewidth() ;
  const std::string& linewidth() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_linewidth(Arg_&& arg, Args_... args);
  std::string* mutable_linewidth();
  PROTOBUF_NODISCARD std::string* release_linewidth();
  void set_allocated_linewidth(std::string* ptr);

  private:
  const std::string& _internal_linewidth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_linewidth(
      const std::string& value);
  std::string* _internal_mutable_linewidth();

  public:
  // optional int32 viewType = 1;
  bool has_viewtype() const;
  void clear_viewtype() ;
  ::int32_t viewtype() const;
  void set_viewtype(::int32_t value);

  private:
  ::int32_t _internal_viewtype() const;
  void _internal_set_viewtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetLineWidthParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linewidth_;
    ::int32_t viewtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class UndoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.UndoParams) */ {
 public:
  inline UndoParams() : UndoParams(nullptr) {}
  ~UndoParams() override;
  explicit PROTOBUF_CONSTEXPR UndoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoParams(const UndoParams& from);
  UndoParams(UndoParams&& from) noexcept
    : UndoParams() {
    *this = ::std::move(from);
  }

  inline UndoParams& operator=(const UndoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoParams& operator=(UndoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UndoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoParams* internal_default_instance() {
    return reinterpret_cast<const UndoParams*>(
               &_UndoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(UndoParams& a, UndoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UndoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UndoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UndoParams& from);
  void MergeFrom(const UndoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UndoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.UndoParams";
  }
  protected:
  explicit UndoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewTypeFieldNumber = 1,
  };
  // optional int32 viewType = 1;
  bool has_viewtype() const;
  void clear_viewtype() ;
  ::int32_t viewtype() const;
  void set_viewtype(::int32_t value);

  private:
  ::int32_t _internal_viewtype() const;
  void _internal_set_viewtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.UndoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t viewtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedoParams) */ {
 public:
  inline RedoParams() : RedoParams(nullptr) {}
  ~RedoParams() override;
  explicit PROTOBUF_CONSTEXPR RedoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedoParams(const RedoParams& from);
  RedoParams(RedoParams&& from) noexcept
    : RedoParams() {
    *this = ::std::move(from);
  }

  inline RedoParams& operator=(const RedoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedoParams& operator=(RedoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedoParams* internal_default_instance() {
    return reinterpret_cast<const RedoParams*>(
               &_RedoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RedoParams& a, RedoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedoParams& from);
  void MergeFrom(const RedoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedoParams";
  }
  protected:
  explicit RedoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewTypeFieldNumber = 1,
  };
  // optional int32 viewType = 1;
  bool has_viewtype() const;
  void clear_viewtype() ;
  ::int32_t viewtype() const;
  void set_viewtype(::int32_t value);

  private:
  ::int32_t _internal_viewtype() const;
  void _internal_set_viewtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t viewtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class MuteAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.MuteAudioParams) */ {
 public:
  inline MuteAudioParams() : MuteAudioParams(nullptr) {}
  ~MuteAudioParams() override;
  explicit PROTOBUF_CONSTEXPR MuteAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteAudioParams(const MuteAudioParams& from);
  MuteAudioParams(MuteAudioParams&& from) noexcept
    : MuteAudioParams() {
    *this = ::std::move(from);
  }

  inline MuteAudioParams& operator=(const MuteAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteAudioParams& operator=(MuteAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MuteAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteAudioParams* internal_default_instance() {
    return reinterpret_cast<const MuteAudioParams*>(
               &_MuteAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(MuteAudioParams& a, MuteAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MuteAudioParams& from);
  void MergeFrom(const MuteAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MuteAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.MuteAudioParams";
  }
  protected:
  explicit MuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kAllowUnmuteBySelfFieldNumber = 2,
  };
  // optional int32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // optional bool allowUnmuteBySelf = 2;
  bool has_allowunmutebyself() const;
  void clear_allowunmutebyself() ;
  bool allowunmutebyself() const;
  void set_allowunmutebyself(bool value);

  private:
  bool _internal_allowunmutebyself() const;
  void _internal_set_allowunmutebyself(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.MuteAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t userid_;
    bool allowunmutebyself_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class UnmuteAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.UnmuteAudioParams) */ {
 public:
  inline UnmuteAudioParams() : UnmuteAudioParams(nullptr) {}
  ~UnmuteAudioParams() override;
  explicit PROTOBUF_CONSTEXPR UnmuteAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmuteAudioParams(const UnmuteAudioParams& from);
  UnmuteAudioParams(UnmuteAudioParams&& from) noexcept
    : UnmuteAudioParams() {
    *this = ::std::move(from);
  }

  inline UnmuteAudioParams& operator=(const UnmuteAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmuteAudioParams& operator=(UnmuteAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UnmuteAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmuteAudioParams* internal_default_instance() {
    return reinterpret_cast<const UnmuteAudioParams*>(
               &_UnmuteAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UnmuteAudioParams& a, UnmuteAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmuteAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmuteAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnmuteAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnmuteAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnmuteAudioParams& from);
  void MergeFrom(const UnmuteAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnmuteAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.UnmuteAudioParams";
  }
  protected:
  explicit UnmuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // optional int32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.UnmuteAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnablePlayChimeWhenEnterOrExitParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams) */ {
 public:
  inline EnablePlayChimeWhenEnterOrExitParams() : EnablePlayChimeWhenEnterOrExitParams(nullptr) {}
  ~EnablePlayChimeWhenEnterOrExitParams() override;
  explicit PROTOBUF_CONSTEXPR EnablePlayChimeWhenEnterOrExitParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnablePlayChimeWhenEnterOrExitParams(const EnablePlayChimeWhenEnterOrExitParams& from);
  EnablePlayChimeWhenEnterOrExitParams(EnablePlayChimeWhenEnterOrExitParams&& from) noexcept
    : EnablePlayChimeWhenEnterOrExitParams() {
    *this = ::std::move(from);
  }

  inline EnablePlayChimeWhenEnterOrExitParams& operator=(const EnablePlayChimeWhenEnterOrExitParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnablePlayChimeWhenEnterOrExitParams& operator=(EnablePlayChimeWhenEnterOrExitParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnablePlayChimeWhenEnterOrExitParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnablePlayChimeWhenEnterOrExitParams* internal_default_instance() {
    return reinterpret_cast<const EnablePlayChimeWhenEnterOrExitParams*>(
               &_EnablePlayChimeWhenEnterOrExitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(EnablePlayChimeWhenEnterOrExitParams& a, EnablePlayChimeWhenEnterOrExitParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnablePlayChimeWhenEnterOrExitParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnablePlayChimeWhenEnterOrExitParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnablePlayChimeWhenEnterOrExitParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnablePlayChimeWhenEnterOrExitParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnablePlayChimeWhenEnterOrExitParams& from);
  void MergeFrom(const EnablePlayChimeWhenEnterOrExitParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnablePlayChimeWhenEnterOrExitParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams";
  }
  protected:
  explicit EnablePlayChimeWhenEnterOrExitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableInviteButtonOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams) */ {
 public:
  inline EnableInviteButtonOnMeetingUIParams() : EnableInviteButtonOnMeetingUIParams(nullptr) {}
  ~EnableInviteButtonOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR EnableInviteButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableInviteButtonOnMeetingUIParams(const EnableInviteButtonOnMeetingUIParams& from);
  EnableInviteButtonOnMeetingUIParams(EnableInviteButtonOnMeetingUIParams&& from) noexcept
    : EnableInviteButtonOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline EnableInviteButtonOnMeetingUIParams& operator=(const EnableInviteButtonOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableInviteButtonOnMeetingUIParams& operator=(EnableInviteButtonOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableInviteButtonOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableInviteButtonOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const EnableInviteButtonOnMeetingUIParams*>(
               &_EnableInviteButtonOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(EnableInviteButtonOnMeetingUIParams& a, EnableInviteButtonOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableInviteButtonOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableInviteButtonOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableInviteButtonOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableInviteButtonOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableInviteButtonOnMeetingUIParams& from);
  void MergeFrom(const EnableInviteButtonOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableInviteButtonOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams";
  }
  protected:
  explicit EnableInviteButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetFloatVideoPosParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetFloatVideoPosParams) */ {
 public:
  inline SetFloatVideoPosParams() : SetFloatVideoPosParams(nullptr) {}
  ~SetFloatVideoPosParams() override;
  explicit PROTOBUF_CONSTEXPR SetFloatVideoPosParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetFloatVideoPosParams(const SetFloatVideoPosParams& from);
  SetFloatVideoPosParams(SetFloatVideoPosParams&& from) noexcept
    : SetFloatVideoPosParams() {
    *this = ::std::move(from);
  }

  inline SetFloatVideoPosParams& operator=(const SetFloatVideoPosParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFloatVideoPosParams& operator=(SetFloatVideoPosParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetFloatVideoPosParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetFloatVideoPosParams* internal_default_instance() {
    return reinterpret_cast<const SetFloatVideoPosParams*>(
               &_SetFloatVideoPosParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SetFloatVideoPosParams& a, SetFloatVideoPosParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetFloatVideoPosParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFloatVideoPosParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetFloatVideoPosParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetFloatVideoPosParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetFloatVideoPosParams& from);
  void MergeFrom(const SetFloatVideoPosParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetFloatVideoPosParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetFloatVideoPosParams";
  }
  protected:
  explicit SetFloatVideoPosParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kHSelfWndFieldNumber = 3,
    kHParentFieldNumber = 4,
  };
  // optional string left = 1;
  bool has_left() const;
  void clear_left() ;
  const std::string& left() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_left(Arg_&& arg, Args_... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* ptr);

  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(
      const std::string& value);
  std::string* _internal_mutable_left();

  public:
  // optional string top = 2;
  bool has_top() const;
  void clear_top() ;
  const std::string& top() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_top(Arg_&& arg, Args_... args);
  std::string* mutable_top();
  PROTOBUF_NODISCARD std::string* release_top();
  void set_allocated_top(std::string* ptr);

  private:
  const std::string& _internal_top() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top(
      const std::string& value);
  std::string* _internal_mutable_top();

  public:
  // optional string hSelfWnd = 3;
  bool has_hselfwnd() const;
  void clear_hselfwnd() ;
  const std::string& hselfwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hselfwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hselfwnd();
  PROTOBUF_NODISCARD std::string* release_hselfwnd();
  void set_allocated_hselfwnd(std::string* ptr);

  private:
  const std::string& _internal_hselfwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hselfwnd(
      const std::string& value);
  std::string* _internal_mutable_hselfwnd();

  public:
  // optional string hParent = 4;
  bool has_hparent() const;
  void clear_hparent() ;
  const std::string& hparent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hparent(Arg_&& arg, Args_... args);
  std::string* mutable_hparent();
  PROTOBUF_NODISCARD std::string* release_hparent();
  void set_allocated_hparent(std::string* ptr);

  private:
  const std::string& _internal_hparent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hparent(
      const std::string& value);
  std::string* _internal_mutable_hparent();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetFloatVideoPosParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hselfwnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hparent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetBottomFloatToolBarWndVisibilityParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams) */ {
 public:
  inline SetBottomFloatToolBarWndVisibilityParams() : SetBottomFloatToolBarWndVisibilityParams(nullptr) {}
  ~SetBottomFloatToolBarWndVisibilityParams() override;
  explicit PROTOBUF_CONSTEXPR SetBottomFloatToolBarWndVisibilityParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBottomFloatToolBarWndVisibilityParams(const SetBottomFloatToolBarWndVisibilityParams& from);
  SetBottomFloatToolBarWndVisibilityParams(SetBottomFloatToolBarWndVisibilityParams&& from) noexcept
    : SetBottomFloatToolBarWndVisibilityParams() {
    *this = ::std::move(from);
  }

  inline SetBottomFloatToolBarWndVisibilityParams& operator=(const SetBottomFloatToolBarWndVisibilityParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBottomFloatToolBarWndVisibilityParams& operator=(SetBottomFloatToolBarWndVisibilityParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetBottomFloatToolBarWndVisibilityParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBottomFloatToolBarWndVisibilityParams* internal_default_instance() {
    return reinterpret_cast<const SetBottomFloatToolBarWndVisibilityParams*>(
               &_SetBottomFloatToolBarWndVisibilityParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SetBottomFloatToolBarWndVisibilityParams& a, SetBottomFloatToolBarWndVisibilityParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBottomFloatToolBarWndVisibilityParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBottomFloatToolBarWndVisibilityParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBottomFloatToolBarWndVisibilityParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBottomFloatToolBarWndVisibilityParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetBottomFloatToolBarWndVisibilityParams& from);
  void MergeFrom(const SetBottomFloatToolBarWndVisibilityParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetBottomFloatToolBarWndVisibilityParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams";
  }
  protected:
  explicit SetBottomFloatToolBarWndVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetSharingToolBarVisibilityParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetSharingToolBarVisibilityParams) */ {
 public:
  inline SetSharingToolBarVisibilityParams() : SetSharingToolBarVisibilityParams(nullptr) {}
  ~SetSharingToolBarVisibilityParams() override;
  explicit PROTOBUF_CONSTEXPR SetSharingToolBarVisibilityParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSharingToolBarVisibilityParams(const SetSharingToolBarVisibilityParams& from);
  SetSharingToolBarVisibilityParams(SetSharingToolBarVisibilityParams&& from) noexcept
    : SetSharingToolBarVisibilityParams() {
    *this = ::std::move(from);
  }

  inline SetSharingToolBarVisibilityParams& operator=(const SetSharingToolBarVisibilityParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSharingToolBarVisibilityParams& operator=(SetSharingToolBarVisibilityParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetSharingToolBarVisibilityParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSharingToolBarVisibilityParams* internal_default_instance() {
    return reinterpret_cast<const SetSharingToolBarVisibilityParams*>(
               &_SetSharingToolBarVisibilityParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SetSharingToolBarVisibilityParams& a, SetSharingToolBarVisibilityParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSharingToolBarVisibilityParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSharingToolBarVisibilityParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSharingToolBarVisibilityParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSharingToolBarVisibilityParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetSharingToolBarVisibilityParams& from);
  void MergeFrom(const SetSharingToolBarVisibilityParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetSharingToolBarVisibilityParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetSharingToolBarVisibilityParams";
  }
  protected:
  explicit SetSharingToolBarVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetDirectShareMonitorIDParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetDirectShareMonitorIDParams) */ {
 public:
  inline SetDirectShareMonitorIDParams() : SetDirectShareMonitorIDParams(nullptr) {}
  ~SetDirectShareMonitorIDParams() override;
  explicit PROTOBUF_CONSTEXPR SetDirectShareMonitorIDParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDirectShareMonitorIDParams(const SetDirectShareMonitorIDParams& from);
  SetDirectShareMonitorIDParams(SetDirectShareMonitorIDParams&& from) noexcept
    : SetDirectShareMonitorIDParams() {
    *this = ::std::move(from);
  }

  inline SetDirectShareMonitorIDParams& operator=(const SetDirectShareMonitorIDParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDirectShareMonitorIDParams& operator=(SetDirectShareMonitorIDParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetDirectShareMonitorIDParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDirectShareMonitorIDParams* internal_default_instance() {
    return reinterpret_cast<const SetDirectShareMonitorIDParams*>(
               &_SetDirectShareMonitorIDParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SetDirectShareMonitorIDParams& a, SetDirectShareMonitorIDParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDirectShareMonitorIDParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDirectShareMonitorIDParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDirectShareMonitorIDParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDirectShareMonitorIDParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetDirectShareMonitorIDParams& from);
  void MergeFrom(const SetDirectShareMonitorIDParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetDirectShareMonitorIDParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetDirectShareMonitorIDParams";
  }
  protected:
  explicit SetDirectShareMonitorIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorIDFieldNumber = 1,
  };
  // optional string monitorID = 1;
  bool has_monitorid() const;
  void clear_monitorid() ;
  const std::string& monitorid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_monitorid(Arg_&& arg, Args_... args);
  std::string* mutable_monitorid();
  PROTOBUF_NODISCARD std::string* release_monitorid();
  void set_allocated_monitorid(std::string* ptr);

  private:
  const std::string& _internal_monitorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_monitorid(
      const std::string& value);
  std::string* _internal_mutable_monitorid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monitorid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetMeetingUIPosParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetMeetingUIPosParams) */ {
 public:
  inline SetMeetingUIPosParams() : SetMeetingUIPosParams(nullptr) {}
  ~SetMeetingUIPosParams() override;
  explicit PROTOBUF_CONSTEXPR SetMeetingUIPosParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMeetingUIPosParams(const SetMeetingUIPosParams& from);
  SetMeetingUIPosParams(SetMeetingUIPosParams&& from) noexcept
    : SetMeetingUIPosParams() {
    *this = ::std::move(from);
  }

  inline SetMeetingUIPosParams& operator=(const SetMeetingUIPosParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMeetingUIPosParams& operator=(SetMeetingUIPosParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetMeetingUIPosParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMeetingUIPosParams* internal_default_instance() {
    return reinterpret_cast<const SetMeetingUIPosParams*>(
               &_SetMeetingUIPosParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SetMeetingUIPosParams& a, SetMeetingUIPosParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMeetingUIPosParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMeetingUIPosParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMeetingUIPosParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMeetingUIPosParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetMeetingUIPosParams& from);
  void MergeFrom(const SetMeetingUIPosParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetMeetingUIPosParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetMeetingUIPosParams";
  }
  protected:
  explicit SetMeetingUIPosParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kHSelfWndFieldNumber = 3,
    kHParentFieldNumber = 4,
  };
  // optional string left = 1;
  bool has_left() const;
  void clear_left() ;
  const std::string& left() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_left(Arg_&& arg, Args_... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* ptr);

  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(
      const std::string& value);
  std::string* _internal_mutable_left();

  public:
  // optional string top = 2;
  bool has_top() const;
  void clear_top() ;
  const std::string& top() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_top(Arg_&& arg, Args_... args);
  std::string* mutable_top();
  PROTOBUF_NODISCARD std::string* release_top();
  void set_allocated_top(std::string* ptr);

  private:
  const std::string& _internal_top() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top(
      const std::string& value);
  std::string* _internal_mutable_top();

  public:
  // optional string hSelfWnd = 3;
  bool has_hselfwnd() const;
  void clear_hselfwnd() ;
  const std::string& hselfwnd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hselfwnd(Arg_&& arg, Args_... args);
  std::string* mutable_hselfwnd();
  PROTOBUF_NODISCARD std::string* release_hselfwnd();
  void set_allocated_hselfwnd(std::string* ptr);

  private:
  const std::string& _internal_hselfwnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hselfwnd(
      const std::string& value);
  std::string* _internal_mutable_hselfwnd();

  public:
  // optional string hParent = 4;
  bool has_hparent() const;
  void clear_hparent() ;
  const std::string& hparent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hparent(Arg_&& arg, Args_... args);
  std::string* mutable_hparent();
  PROTOBUF_NODISCARD std::string* release_hparent();
  void set_allocated_hparent(std::string* ptr);

  private:
  const std::string& _internal_hparent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hparent(
      const std::string& value);
  std::string* _internal_mutable_hparent();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetMeetingUIPosParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hselfwnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hparent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableWaitingForHostDialogParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableWaitingForHostDialogParams) */ {
 public:
  inline DisableWaitingForHostDialogParams() : DisableWaitingForHostDialogParams(nullptr) {}
  ~DisableWaitingForHostDialogParams() override;
  explicit PROTOBUF_CONSTEXPR DisableWaitingForHostDialogParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableWaitingForHostDialogParams(const DisableWaitingForHostDialogParams& from);
  DisableWaitingForHostDialogParams(DisableWaitingForHostDialogParams&& from) noexcept
    : DisableWaitingForHostDialogParams() {
    *this = ::std::move(from);
  }

  inline DisableWaitingForHostDialogParams& operator=(const DisableWaitingForHostDialogParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableWaitingForHostDialogParams& operator=(DisableWaitingForHostDialogParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableWaitingForHostDialogParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableWaitingForHostDialogParams* internal_default_instance() {
    return reinterpret_cast<const DisableWaitingForHostDialogParams*>(
               &_DisableWaitingForHostDialogParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DisableWaitingForHostDialogParams& a, DisableWaitingForHostDialogParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableWaitingForHostDialogParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableWaitingForHostDialogParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableWaitingForHostDialogParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableWaitingForHostDialogParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableWaitingForHostDialogParams& from);
  void MergeFrom(const DisableWaitingForHostDialogParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableWaitingForHostDialogParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableWaitingForHostDialogParams";
  }
  protected:
  explicit DisableWaitingForHostDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisablePopupMeetingWrongPSWDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams) */ {
 public:
  inline DisablePopupMeetingWrongPSWDlgParams() : DisablePopupMeetingWrongPSWDlgParams(nullptr) {}
  ~DisablePopupMeetingWrongPSWDlgParams() override;
  explicit PROTOBUF_CONSTEXPR DisablePopupMeetingWrongPSWDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisablePopupMeetingWrongPSWDlgParams(const DisablePopupMeetingWrongPSWDlgParams& from);
  DisablePopupMeetingWrongPSWDlgParams(DisablePopupMeetingWrongPSWDlgParams&& from) noexcept
    : DisablePopupMeetingWrongPSWDlgParams() {
    *this = ::std::move(from);
  }

  inline DisablePopupMeetingWrongPSWDlgParams& operator=(const DisablePopupMeetingWrongPSWDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisablePopupMeetingWrongPSWDlgParams& operator=(DisablePopupMeetingWrongPSWDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisablePopupMeetingWrongPSWDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisablePopupMeetingWrongPSWDlgParams* internal_default_instance() {
    return reinterpret_cast<const DisablePopupMeetingWrongPSWDlgParams*>(
               &_DisablePopupMeetingWrongPSWDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DisablePopupMeetingWrongPSWDlgParams& a, DisablePopupMeetingWrongPSWDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisablePopupMeetingWrongPSWDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisablePopupMeetingWrongPSWDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisablePopupMeetingWrongPSWDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisablePopupMeetingWrongPSWDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisablePopupMeetingWrongPSWDlgParams& from);
  void MergeFrom(const DisablePopupMeetingWrongPSWDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisablePopupMeetingWrongPSWDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams";
  }
  protected:
  explicit DisablePopupMeetingWrongPSWDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoEndOtherMeetingWhenStartMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams) */ {
 public:
  inline EnableAutoEndOtherMeetingWhenStartMeetingParams() : EnableAutoEndOtherMeetingWhenStartMeetingParams(nullptr) {}
  ~EnableAutoEndOtherMeetingWhenStartMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoEndOtherMeetingWhenStartMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoEndOtherMeetingWhenStartMeetingParams(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from);
  EnableAutoEndOtherMeetingWhenStartMeetingParams(EnableAutoEndOtherMeetingWhenStartMeetingParams&& from) noexcept
    : EnableAutoEndOtherMeetingWhenStartMeetingParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoEndOtherMeetingWhenStartMeetingParams& operator=(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoEndOtherMeetingWhenStartMeetingParams& operator=(EnableAutoEndOtherMeetingWhenStartMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoEndOtherMeetingWhenStartMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoEndOtherMeetingWhenStartMeetingParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoEndOtherMeetingWhenStartMeetingParams*>(
               &_EnableAutoEndOtherMeetingWhenStartMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(EnableAutoEndOtherMeetingWhenStartMeetingParams& a, EnableAutoEndOtherMeetingWhenStartMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoEndOtherMeetingWhenStartMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoEndOtherMeetingWhenStartMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoEndOtherMeetingWhenStartMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoEndOtherMeetingWhenStartMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from);
  void MergeFrom(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoEndOtherMeetingWhenStartMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams";
  }
  protected:
  explicit EnableAutoEndOtherMeetingWhenStartMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableLButtonDBClick4SwitchFullScreenModeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams) */ {
 public:
  inline EnableLButtonDBClick4SwitchFullScreenModeParams() : EnableLButtonDBClick4SwitchFullScreenModeParams(nullptr) {}
  ~EnableLButtonDBClick4SwitchFullScreenModeParams() override;
  explicit PROTOBUF_CONSTEXPR EnableLButtonDBClick4SwitchFullScreenModeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableLButtonDBClick4SwitchFullScreenModeParams(const EnableLButtonDBClick4SwitchFullScreenModeParams& from);
  EnableLButtonDBClick4SwitchFullScreenModeParams(EnableLButtonDBClick4SwitchFullScreenModeParams&& from) noexcept
    : EnableLButtonDBClick4SwitchFullScreenModeParams() {
    *this = ::std::move(from);
  }

  inline EnableLButtonDBClick4SwitchFullScreenModeParams& operator=(const EnableLButtonDBClick4SwitchFullScreenModeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableLButtonDBClick4SwitchFullScreenModeParams& operator=(EnableLButtonDBClick4SwitchFullScreenModeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableLButtonDBClick4SwitchFullScreenModeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableLButtonDBClick4SwitchFullScreenModeParams* internal_default_instance() {
    return reinterpret_cast<const EnableLButtonDBClick4SwitchFullScreenModeParams*>(
               &_EnableLButtonDBClick4SwitchFullScreenModeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(EnableLButtonDBClick4SwitchFullScreenModeParams& a, EnableLButtonDBClick4SwitchFullScreenModeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableLButtonDBClick4SwitchFullScreenModeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableLButtonDBClick4SwitchFullScreenModeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableLButtonDBClick4SwitchFullScreenModeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableLButtonDBClick4SwitchFullScreenModeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableLButtonDBClick4SwitchFullScreenModeParams& from);
  void MergeFrom(const EnableLButtonDBClick4SwitchFullScreenModeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableLButtonDBClick4SwitchFullScreenModeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams";
  }
  protected:
  explicit EnableLButtonDBClick4SwitchFullScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetFloatVideoWndVisibilityParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams) */ {
 public:
  inline SetFloatVideoWndVisibilityParams() : SetFloatVideoWndVisibilityParams(nullptr) {}
  ~SetFloatVideoWndVisibilityParams() override;
  explicit PROTOBUF_CONSTEXPR SetFloatVideoWndVisibilityParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetFloatVideoWndVisibilityParams(const SetFloatVideoWndVisibilityParams& from);
  SetFloatVideoWndVisibilityParams(SetFloatVideoWndVisibilityParams&& from) noexcept
    : SetFloatVideoWndVisibilityParams() {
    *this = ::std::move(from);
  }

  inline SetFloatVideoWndVisibilityParams& operator=(const SetFloatVideoWndVisibilityParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFloatVideoWndVisibilityParams& operator=(SetFloatVideoWndVisibilityParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetFloatVideoWndVisibilityParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetFloatVideoWndVisibilityParams* internal_default_instance() {
    return reinterpret_cast<const SetFloatVideoWndVisibilityParams*>(
               &_SetFloatVideoWndVisibilityParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SetFloatVideoWndVisibilityParams& a, SetFloatVideoWndVisibilityParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetFloatVideoWndVisibilityParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFloatVideoWndVisibilityParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetFloatVideoWndVisibilityParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetFloatVideoWndVisibilityParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetFloatVideoWndVisibilityParams& from);
  void MergeFrom(const SetFloatVideoWndVisibilityParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetFloatVideoWndVisibilityParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetFloatVideoWndVisibilityParams";
  }
  protected:
  explicit SetFloatVideoWndVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class PrePopulateWebinarRegistrationInfoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams) */ {
 public:
  inline PrePopulateWebinarRegistrationInfoParams() : PrePopulateWebinarRegistrationInfoParams(nullptr) {}
  ~PrePopulateWebinarRegistrationInfoParams() override;
  explicit PROTOBUF_CONSTEXPR PrePopulateWebinarRegistrationInfoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrePopulateWebinarRegistrationInfoParams(const PrePopulateWebinarRegistrationInfoParams& from);
  PrePopulateWebinarRegistrationInfoParams(PrePopulateWebinarRegistrationInfoParams&& from) noexcept
    : PrePopulateWebinarRegistrationInfoParams() {
    *this = ::std::move(from);
  }

  inline PrePopulateWebinarRegistrationInfoParams& operator=(const PrePopulateWebinarRegistrationInfoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrePopulateWebinarRegistrationInfoParams& operator=(PrePopulateWebinarRegistrationInfoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PrePopulateWebinarRegistrationInfoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrePopulateWebinarRegistrationInfoParams* internal_default_instance() {
    return reinterpret_cast<const PrePopulateWebinarRegistrationInfoParams*>(
               &_PrePopulateWebinarRegistrationInfoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(PrePopulateWebinarRegistrationInfoParams& a, PrePopulateWebinarRegistrationInfoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PrePopulateWebinarRegistrationInfoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrePopulateWebinarRegistrationInfoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrePopulateWebinarRegistrationInfoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrePopulateWebinarRegistrationInfoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrePopulateWebinarRegistrationInfoParams& from);
  void MergeFrom(const PrePopulateWebinarRegistrationInfoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrePopulateWebinarRegistrationInfoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams";
  }
  protected:
  explicit PrePopulateWebinarRegistrationInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kUserNameFieldNumber = 2,
  };
  // optional string email = 1;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // optional string userName = 2;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams) */ {
 public:
  inline EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams() : EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(nullptr) {}
  ~EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from);
  EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams&& from) noexcept
    : EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& operator=(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& operator=(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams*>(
               &_EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& a, EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from);
  void MergeFrom(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams";
  }
  protected:
  explicit EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoAdjustMicVolumeWhenJoinAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams) */ {
 public:
  inline EnableAutoAdjustMicVolumeWhenJoinAudioParams() : EnableAutoAdjustMicVolumeWhenJoinAudioParams(nullptr) {}
  ~EnableAutoAdjustMicVolumeWhenJoinAudioParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoAdjustMicVolumeWhenJoinAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoAdjustMicVolumeWhenJoinAudioParams(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from);
  EnableAutoAdjustMicVolumeWhenJoinAudioParams(EnableAutoAdjustMicVolumeWhenJoinAudioParams&& from) noexcept
    : EnableAutoAdjustMicVolumeWhenJoinAudioParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoAdjustMicVolumeWhenJoinAudioParams& operator=(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoAdjustMicVolumeWhenJoinAudioParams& operator=(EnableAutoAdjustMicVolumeWhenJoinAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoAdjustMicVolumeWhenJoinAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoAdjustMicVolumeWhenJoinAudioParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoAdjustMicVolumeWhenJoinAudioParams*>(
               &_EnableAutoAdjustMicVolumeWhenJoinAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(EnableAutoAdjustMicVolumeWhenJoinAudioParams& a, EnableAutoAdjustMicVolumeWhenJoinAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoAdjustMicVolumeWhenJoinAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoAdjustMicVolumeWhenJoinAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoAdjustMicVolumeWhenJoinAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoAdjustMicVolumeWhenJoinAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from);
  void MergeFrom(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoAdjustMicVolumeWhenJoinAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams";
  }
  protected:
  explicit EnableAutoAdjustMicVolumeWhenJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ConfigDSCPParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ConfigDSCPParams) */ {
 public:
  inline ConfigDSCPParams() : ConfigDSCPParams(nullptr) {}
  ~ConfigDSCPParams() override;
  explicit PROTOBUF_CONSTEXPR ConfigDSCPParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigDSCPParams(const ConfigDSCPParams& from);
  ConfigDSCPParams(ConfigDSCPParams&& from) noexcept
    : ConfigDSCPParams() {
    *this = ::std::move(from);
  }

  inline ConfigDSCPParams& operator=(const ConfigDSCPParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigDSCPParams& operator=(ConfigDSCPParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ConfigDSCPParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigDSCPParams* internal_default_instance() {
    return reinterpret_cast<const ConfigDSCPParams*>(
               &_ConfigDSCPParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ConfigDSCPParams& a, ConfigDSCPParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigDSCPParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigDSCPParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigDSCPParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigDSCPParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ConfigDSCPParams& from);
  void MergeFrom(const ConfigDSCPParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigDSCPParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ConfigDSCPParams";
  }
  protected:
  explicit ConfigDSCPParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDscpAudioFieldNumber = 1,
    kDscpVideoFieldNumber = 2,
    kBResetFieldNumber = 3,
  };
  // optional int32 dscpAudio = 1;
  bool has_dscpaudio() const;
  void clear_dscpaudio() ;
  ::int32_t dscpaudio() const;
  void set_dscpaudio(::int32_t value);

  private:
  ::int32_t _internal_dscpaudio() const;
  void _internal_set_dscpaudio(::int32_t value);

  public:
  // optional int32 dscpVideo = 2;
  bool has_dscpvideo() const;
  void clear_dscpvideo() ;
  ::int32_t dscpvideo() const;
  void set_dscpvideo(::int32_t value);

  private:
  ::int32_t _internal_dscpvideo() const;
  void _internal_set_dscpvideo(::int32_t value);

  public:
  // optional bool bReset = 3;
  bool has_breset() const;
  void clear_breset() ;
  bool breset() const;
  void set_breset(bool value);

  private:
  bool _internal_breset() const;
  void _internal_set_breset(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ConfigDSCPParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t dscpaudio_;
    ::int32_t dscpvideo_;
    bool breset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableHIdeFullPhoneNumber4PureCallinUserParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams) */ {
 public:
  inline EnableHIdeFullPhoneNumber4PureCallinUserParams() : EnableHIdeFullPhoneNumber4PureCallinUserParams(nullptr) {}
  ~EnableHIdeFullPhoneNumber4PureCallinUserParams() override;
  explicit PROTOBUF_CONSTEXPR EnableHIdeFullPhoneNumber4PureCallinUserParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableHIdeFullPhoneNumber4PureCallinUserParams(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from);
  EnableHIdeFullPhoneNumber4PureCallinUserParams(EnableHIdeFullPhoneNumber4PureCallinUserParams&& from) noexcept
    : EnableHIdeFullPhoneNumber4PureCallinUserParams() {
    *this = ::std::move(from);
  }

  inline EnableHIdeFullPhoneNumber4PureCallinUserParams& operator=(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableHIdeFullPhoneNumber4PureCallinUserParams& operator=(EnableHIdeFullPhoneNumber4PureCallinUserParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableHIdeFullPhoneNumber4PureCallinUserParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableHIdeFullPhoneNumber4PureCallinUserParams* internal_default_instance() {
    return reinterpret_cast<const EnableHIdeFullPhoneNumber4PureCallinUserParams*>(
               &_EnableHIdeFullPhoneNumber4PureCallinUserParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(EnableHIdeFullPhoneNumber4PureCallinUserParams& a, EnableHIdeFullPhoneNumber4PureCallinUserParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableHIdeFullPhoneNumber4PureCallinUserParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableHIdeFullPhoneNumber4PureCallinUserParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableHIdeFullPhoneNumber4PureCallinUserParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableHIdeFullPhoneNumber4PureCallinUserParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from);
  void MergeFrom(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableHIdeFullPhoneNumber4PureCallinUserParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams";
  }
  protected:
  explicit EnableHIdeFullPhoneNumber4PureCallinUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableShareIOSDeviceParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableShareIOSDeviceParams) */ {
 public:
  inline EnableShareIOSDeviceParams() : EnableShareIOSDeviceParams(nullptr) {}
  ~EnableShareIOSDeviceParams() override;
  explicit PROTOBUF_CONSTEXPR EnableShareIOSDeviceParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableShareIOSDeviceParams(const EnableShareIOSDeviceParams& from);
  EnableShareIOSDeviceParams(EnableShareIOSDeviceParams&& from) noexcept
    : EnableShareIOSDeviceParams() {
    *this = ::std::move(from);
  }

  inline EnableShareIOSDeviceParams& operator=(const EnableShareIOSDeviceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableShareIOSDeviceParams& operator=(EnableShareIOSDeviceParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableShareIOSDeviceParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableShareIOSDeviceParams* internal_default_instance() {
    return reinterpret_cast<const EnableShareIOSDeviceParams*>(
               &_EnableShareIOSDeviceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(EnableShareIOSDeviceParams& a, EnableShareIOSDeviceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableShareIOSDeviceParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableShareIOSDeviceParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableShareIOSDeviceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableShareIOSDeviceParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableShareIOSDeviceParams& from);
  void MergeFrom(const EnableShareIOSDeviceParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableShareIOSDeviceParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableShareIOSDeviceParams";
  }
  protected:
  explicit EnableShareIOSDeviceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableShareIOSDeviceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableShareWhiteBoardParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableShareWhiteBoardParams) */ {
 public:
  inline EnableShareWhiteBoardParams() : EnableShareWhiteBoardParams(nullptr) {}
  ~EnableShareWhiteBoardParams() override;
  explicit PROTOBUF_CONSTEXPR EnableShareWhiteBoardParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableShareWhiteBoardParams(const EnableShareWhiteBoardParams& from);
  EnableShareWhiteBoardParams(EnableShareWhiteBoardParams&& from) noexcept
    : EnableShareWhiteBoardParams() {
    *this = ::std::move(from);
  }

  inline EnableShareWhiteBoardParams& operator=(const EnableShareWhiteBoardParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableShareWhiteBoardParams& operator=(EnableShareWhiteBoardParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableShareWhiteBoardParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableShareWhiteBoardParams* internal_default_instance() {
    return reinterpret_cast<const EnableShareWhiteBoardParams*>(
               &_EnableShareWhiteBoardParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(EnableShareWhiteBoardParams& a, EnableShareWhiteBoardParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableShareWhiteBoardParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableShareWhiteBoardParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableShareWhiteBoardParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableShareWhiteBoardParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableShareWhiteBoardParams& from);
  void MergeFrom(const EnableShareWhiteBoardParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableShareWhiteBoardParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableShareWhiteBoardParams";
  }
  protected:
  explicit EnableShareWhiteBoardParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableShareWhiteBoardParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableLengthLimitationOfMeetingNumberParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams) */ {
 public:
  inline EnableLengthLimitationOfMeetingNumberParams() : EnableLengthLimitationOfMeetingNumberParams(nullptr) {}
  ~EnableLengthLimitationOfMeetingNumberParams() override;
  explicit PROTOBUF_CONSTEXPR EnableLengthLimitationOfMeetingNumberParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableLengthLimitationOfMeetingNumberParams(const EnableLengthLimitationOfMeetingNumberParams& from);
  EnableLengthLimitationOfMeetingNumberParams(EnableLengthLimitationOfMeetingNumberParams&& from) noexcept
    : EnableLengthLimitationOfMeetingNumberParams() {
    *this = ::std::move(from);
  }

  inline EnableLengthLimitationOfMeetingNumberParams& operator=(const EnableLengthLimitationOfMeetingNumberParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableLengthLimitationOfMeetingNumberParams& operator=(EnableLengthLimitationOfMeetingNumberParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableLengthLimitationOfMeetingNumberParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableLengthLimitationOfMeetingNumberParams* internal_default_instance() {
    return reinterpret_cast<const EnableLengthLimitationOfMeetingNumberParams*>(
               &_EnableLengthLimitationOfMeetingNumberParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(EnableLengthLimitationOfMeetingNumberParams& a, EnableLengthLimitationOfMeetingNumberParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableLengthLimitationOfMeetingNumberParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableLengthLimitationOfMeetingNumberParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableLengthLimitationOfMeetingNumberParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableLengthLimitationOfMeetingNumberParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableLengthLimitationOfMeetingNumberParams& from);
  void MergeFrom(const EnableLengthLimitationOfMeetingNumberParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableLengthLimitationOfMeetingNumberParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams";
  }
  protected:
  explicit EnableLengthLimitationOfMeetingNumberParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ForceDisableMultiShareParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ForceDisableMultiShareParams) */ {
 public:
  inline ForceDisableMultiShareParams() : ForceDisableMultiShareParams(nullptr) {}
  ~ForceDisableMultiShareParams() override;
  explicit PROTOBUF_CONSTEXPR ForceDisableMultiShareParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForceDisableMultiShareParams(const ForceDisableMultiShareParams& from);
  ForceDisableMultiShareParams(ForceDisableMultiShareParams&& from) noexcept
    : ForceDisableMultiShareParams() {
    *this = ::std::move(from);
  }

  inline ForceDisableMultiShareParams& operator=(const ForceDisableMultiShareParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForceDisableMultiShareParams& operator=(ForceDisableMultiShareParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ForceDisableMultiShareParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForceDisableMultiShareParams* internal_default_instance() {
    return reinterpret_cast<const ForceDisableMultiShareParams*>(
               &_ForceDisableMultiShareParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ForceDisableMultiShareParams& a, ForceDisableMultiShareParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ForceDisableMultiShareParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForceDisableMultiShareParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForceDisableMultiShareParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForceDisableMultiShareParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ForceDisableMultiShareParams& from);
  void MergeFrom(const ForceDisableMultiShareParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ForceDisableMultiShareParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ForceDisableMultiShareParams";
  }
  protected:
  explicit ForceDisableMultiShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ForceDisableMultiShareParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableLocalRecordingConverProgressBarDialogParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams) */ {
 public:
  inline EnableLocalRecordingConverProgressBarDialogParams() : EnableLocalRecordingConverProgressBarDialogParams(nullptr) {}
  ~EnableLocalRecordingConverProgressBarDialogParams() override;
  explicit PROTOBUF_CONSTEXPR EnableLocalRecordingConverProgressBarDialogParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableLocalRecordingConverProgressBarDialogParams(const EnableLocalRecordingConverProgressBarDialogParams& from);
  EnableLocalRecordingConverProgressBarDialogParams(EnableLocalRecordingConverProgressBarDialogParams&& from) noexcept
    : EnableLocalRecordingConverProgressBarDialogParams() {
    *this = ::std::move(from);
  }

  inline EnableLocalRecordingConverProgressBarDialogParams& operator=(const EnableLocalRecordingConverProgressBarDialogParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableLocalRecordingConverProgressBarDialogParams& operator=(EnableLocalRecordingConverProgressBarDialogParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableLocalRecordingConverProgressBarDialogParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableLocalRecordingConverProgressBarDialogParams* internal_default_instance() {
    return reinterpret_cast<const EnableLocalRecordingConverProgressBarDialogParams*>(
               &_EnableLocalRecordingConverProgressBarDialogParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(EnableLocalRecordingConverProgressBarDialogParams& a, EnableLocalRecordingConverProgressBarDialogParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableLocalRecordingConverProgressBarDialogParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableLocalRecordingConverProgressBarDialogParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableLocalRecordingConverProgressBarDialogParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableLocalRecordingConverProgressBarDialogParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableLocalRecordingConverProgressBarDialogParams& from);
  void MergeFrom(const EnableLocalRecordingConverProgressBarDialogParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableLocalRecordingConverProgressBarDialogParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams";
  }
  protected:
  explicit EnableLocalRecordingConverProgressBarDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetMaxDurationForOnlyHostInMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams) */ {
 public:
  inline SetMaxDurationForOnlyHostInMeetingParams() : SetMaxDurationForOnlyHostInMeetingParams(nullptr) {}
  ~SetMaxDurationForOnlyHostInMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR SetMaxDurationForOnlyHostInMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMaxDurationForOnlyHostInMeetingParams(const SetMaxDurationForOnlyHostInMeetingParams& from);
  SetMaxDurationForOnlyHostInMeetingParams(SetMaxDurationForOnlyHostInMeetingParams&& from) noexcept
    : SetMaxDurationForOnlyHostInMeetingParams() {
    *this = ::std::move(from);
  }

  inline SetMaxDurationForOnlyHostInMeetingParams& operator=(const SetMaxDurationForOnlyHostInMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMaxDurationForOnlyHostInMeetingParams& operator=(SetMaxDurationForOnlyHostInMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetMaxDurationForOnlyHostInMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMaxDurationForOnlyHostInMeetingParams* internal_default_instance() {
    return reinterpret_cast<const SetMaxDurationForOnlyHostInMeetingParams*>(
               &_SetMaxDurationForOnlyHostInMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SetMaxDurationForOnlyHostInMeetingParams& a, SetMaxDurationForOnlyHostInMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMaxDurationForOnlyHostInMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMaxDurationForOnlyHostInMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMaxDurationForOnlyHostInMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMaxDurationForOnlyHostInMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetMaxDurationForOnlyHostInMeetingParams& from);
  void MergeFrom(const SetMaxDurationForOnlyHostInMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetMaxDurationForOnlyHostInMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams";
  }
  protected:
  explicit SetMaxDurationForOnlyHostInMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNDurationFieldNumber = 1,
  };
  // optional int32 nDuration = 1;
  bool has_nduration() const;
  void clear_nduration() ;
  ::int32_t nduration() const;
  void set_nduration(::int32_t value);

  private:
  ::int32_t _internal_nduration() const;
  void _internal_set_nduration(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t nduration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableApproveRemoteControlDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams) */ {
 public:
  inline EnableApproveRemoteControlDlgParams() : EnableApproveRemoteControlDlgParams(nullptr) {}
  ~EnableApproveRemoteControlDlgParams() override;
  explicit PROTOBUF_CONSTEXPR EnableApproveRemoteControlDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableApproveRemoteControlDlgParams(const EnableApproveRemoteControlDlgParams& from);
  EnableApproveRemoteControlDlgParams(EnableApproveRemoteControlDlgParams&& from) noexcept
    : EnableApproveRemoteControlDlgParams() {
    *this = ::std::move(from);
  }

  inline EnableApproveRemoteControlDlgParams& operator=(const EnableApproveRemoteControlDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableApproveRemoteControlDlgParams& operator=(EnableApproveRemoteControlDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableApproveRemoteControlDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableApproveRemoteControlDlgParams* internal_default_instance() {
    return reinterpret_cast<const EnableApproveRemoteControlDlgParams*>(
               &_EnableApproveRemoteControlDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(EnableApproveRemoteControlDlgParams& a, EnableApproveRemoteControlDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableApproveRemoteControlDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableApproveRemoteControlDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableApproveRemoteControlDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableApproveRemoteControlDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableApproveRemoteControlDlgParams& from);
  void MergeFrom(const EnableApproveRemoteControlDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableApproveRemoteControlDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableApproveRemoteControlDlgParams";
  }
  protected:
  explicit EnableApproveRemoteControlDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableDeclineRemoteControlResponseDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams) */ {
 public:
  inline EnableDeclineRemoteControlResponseDlgParams() : EnableDeclineRemoteControlResponseDlgParams(nullptr) {}
  ~EnableDeclineRemoteControlResponseDlgParams() override;
  explicit PROTOBUF_CONSTEXPR EnableDeclineRemoteControlResponseDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableDeclineRemoteControlResponseDlgParams(const EnableDeclineRemoteControlResponseDlgParams& from);
  EnableDeclineRemoteControlResponseDlgParams(EnableDeclineRemoteControlResponseDlgParams&& from) noexcept
    : EnableDeclineRemoteControlResponseDlgParams() {
    *this = ::std::move(from);
  }

  inline EnableDeclineRemoteControlResponseDlgParams& operator=(const EnableDeclineRemoteControlResponseDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableDeclineRemoteControlResponseDlgParams& operator=(EnableDeclineRemoteControlResponseDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableDeclineRemoteControlResponseDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableDeclineRemoteControlResponseDlgParams* internal_default_instance() {
    return reinterpret_cast<const EnableDeclineRemoteControlResponseDlgParams*>(
               &_EnableDeclineRemoteControlResponseDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(EnableDeclineRemoteControlResponseDlgParams& a, EnableDeclineRemoteControlResponseDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableDeclineRemoteControlResponseDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableDeclineRemoteControlResponseDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableDeclineRemoteControlResponseDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableDeclineRemoteControlResponseDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableDeclineRemoteControlResponseDlgParams& from);
  void MergeFrom(const EnableDeclineRemoteControlResponseDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableDeclineRemoteControlResponseDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams";
  }
  protected:
  explicit EnableDeclineRemoteControlResponseDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableLeaveMeetingOptionForHostParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams) */ {
 public:
  inline EnableLeaveMeetingOptionForHostParams() : EnableLeaveMeetingOptionForHostParams(nullptr) {}
  ~EnableLeaveMeetingOptionForHostParams() override;
  explicit PROTOBUF_CONSTEXPR EnableLeaveMeetingOptionForHostParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableLeaveMeetingOptionForHostParams(const EnableLeaveMeetingOptionForHostParams& from);
  EnableLeaveMeetingOptionForHostParams(EnableLeaveMeetingOptionForHostParams&& from) noexcept
    : EnableLeaveMeetingOptionForHostParams() {
    *this = ::std::move(from);
  }

  inline EnableLeaveMeetingOptionForHostParams& operator=(const EnableLeaveMeetingOptionForHostParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableLeaveMeetingOptionForHostParams& operator=(EnableLeaveMeetingOptionForHostParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableLeaveMeetingOptionForHostParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableLeaveMeetingOptionForHostParams* internal_default_instance() {
    return reinterpret_cast<const EnableLeaveMeetingOptionForHostParams*>(
               &_EnableLeaveMeetingOptionForHostParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(EnableLeaveMeetingOptionForHostParams& a, EnableLeaveMeetingOptionForHostParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableLeaveMeetingOptionForHostParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableLeaveMeetingOptionForHostParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableLeaveMeetingOptionForHostParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableLeaveMeetingOptionForHostParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableLeaveMeetingOptionForHostParams& from);
  void MergeFrom(const EnableLeaveMeetingOptionForHostParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableLeaveMeetingOptionForHostParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams";
  }
  protected:
  explicit EnableLeaveMeetingOptionForHostParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableVideoButtonOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams) */ {
 public:
  inline EnableVideoButtonOnMeetingUIParams() : EnableVideoButtonOnMeetingUIParams(nullptr) {}
  ~EnableVideoButtonOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR EnableVideoButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableVideoButtonOnMeetingUIParams(const EnableVideoButtonOnMeetingUIParams& from);
  EnableVideoButtonOnMeetingUIParams(EnableVideoButtonOnMeetingUIParams&& from) noexcept
    : EnableVideoButtonOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline EnableVideoButtonOnMeetingUIParams& operator=(const EnableVideoButtonOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableVideoButtonOnMeetingUIParams& operator=(EnableVideoButtonOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableVideoButtonOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableVideoButtonOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const EnableVideoButtonOnMeetingUIParams*>(
               &_EnableVideoButtonOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(EnableVideoButtonOnMeetingUIParams& a, EnableVideoButtonOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableVideoButtonOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableVideoButtonOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableVideoButtonOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableVideoButtonOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableVideoButtonOnMeetingUIParams& from);
  void MergeFrom(const EnableVideoButtonOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableVideoButtonOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams";
  }
  protected:
  explicit EnableVideoButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAudioButtonOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams) */ {
 public:
  inline EnableAudioButtonOnMeetingUIParams() : EnableAudioButtonOnMeetingUIParams(nullptr) {}
  ~EnableAudioButtonOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAudioButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAudioButtonOnMeetingUIParams(const EnableAudioButtonOnMeetingUIParams& from);
  EnableAudioButtonOnMeetingUIParams(EnableAudioButtonOnMeetingUIParams&& from) noexcept
    : EnableAudioButtonOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline EnableAudioButtonOnMeetingUIParams& operator=(const EnableAudioButtonOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAudioButtonOnMeetingUIParams& operator=(EnableAudioButtonOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAudioButtonOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAudioButtonOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const EnableAudioButtonOnMeetingUIParams*>(
               &_EnableAudioButtonOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(EnableAudioButtonOnMeetingUIParams& a, EnableAudioButtonOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAudioButtonOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAudioButtonOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAudioButtonOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAudioButtonOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAudioButtonOnMeetingUIParams& from);
  void MergeFrom(const EnableAudioButtonOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAudioButtonOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams";
  }
  protected:
  explicit EnableAudioButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableEnterAndExitFullScreenButtonOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams) */ {
 public:
  inline EnableEnterAndExitFullScreenButtonOnMeetingUIParams() : EnableEnterAndExitFullScreenButtonOnMeetingUIParams(nullptr) {}
  ~EnableEnterAndExitFullScreenButtonOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR EnableEnterAndExitFullScreenButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableEnterAndExitFullScreenButtonOnMeetingUIParams(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from);
  EnableEnterAndExitFullScreenButtonOnMeetingUIParams(EnableEnterAndExitFullScreenButtonOnMeetingUIParams&& from) noexcept
    : EnableEnterAndExitFullScreenButtonOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline EnableEnterAndExitFullScreenButtonOnMeetingUIParams& operator=(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableEnterAndExitFullScreenButtonOnMeetingUIParams& operator=(EnableEnterAndExitFullScreenButtonOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableEnterAndExitFullScreenButtonOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const EnableEnterAndExitFullScreenButtonOnMeetingUIParams*>(
               &_EnableEnterAndExitFullScreenButtonOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(EnableEnterAndExitFullScreenButtonOnMeetingUIParams& a, EnableEnterAndExitFullScreenButtonOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableEnterAndExitFullScreenButtonOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableEnterAndExitFullScreenButtonOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableEnterAndExitFullScreenButtonOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableEnterAndExitFullScreenButtonOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from);
  void MergeFrom(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableEnterAndExitFullScreenButtonOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams";
  }
  protected:
  explicit EnableEnterAndExitFullScreenButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectClickShareBTNEventParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectClickShareBTNEventParams) */ {
 public:
  inline RedirectClickShareBTNEventParams() : RedirectClickShareBTNEventParams(nullptr) {}
  ~RedirectClickShareBTNEventParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectClickShareBTNEventParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectClickShareBTNEventParams(const RedirectClickShareBTNEventParams& from);
  RedirectClickShareBTNEventParams(RedirectClickShareBTNEventParams&& from) noexcept
    : RedirectClickShareBTNEventParams() {
    *this = ::std::move(from);
  }

  inline RedirectClickShareBTNEventParams& operator=(const RedirectClickShareBTNEventParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectClickShareBTNEventParams& operator=(RedirectClickShareBTNEventParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectClickShareBTNEventParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectClickShareBTNEventParams* internal_default_instance() {
    return reinterpret_cast<const RedirectClickShareBTNEventParams*>(
               &_RedirectClickShareBTNEventParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(RedirectClickShareBTNEventParams& a, RedirectClickShareBTNEventParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectClickShareBTNEventParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectClickShareBTNEventParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectClickShareBTNEventParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectClickShareBTNEventParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectClickShareBTNEventParams& from);
  void MergeFrom(const RedirectClickShareBTNEventParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectClickShareBTNEventParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectClickShareBTNEventParams";
  }
  protected:
  explicit RedirectClickShareBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectClickEndMeetingBTNEventParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams) */ {
 public:
  inline RedirectClickEndMeetingBTNEventParams() : RedirectClickEndMeetingBTNEventParams(nullptr) {}
  ~RedirectClickEndMeetingBTNEventParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectClickEndMeetingBTNEventParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectClickEndMeetingBTNEventParams(const RedirectClickEndMeetingBTNEventParams& from);
  RedirectClickEndMeetingBTNEventParams(RedirectClickEndMeetingBTNEventParams&& from) noexcept
    : RedirectClickEndMeetingBTNEventParams() {
    *this = ::std::move(from);
  }

  inline RedirectClickEndMeetingBTNEventParams& operator=(const RedirectClickEndMeetingBTNEventParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectClickEndMeetingBTNEventParams& operator=(RedirectClickEndMeetingBTNEventParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectClickEndMeetingBTNEventParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectClickEndMeetingBTNEventParams* internal_default_instance() {
    return reinterpret_cast<const RedirectClickEndMeetingBTNEventParams*>(
               &_RedirectClickEndMeetingBTNEventParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(RedirectClickEndMeetingBTNEventParams& a, RedirectClickEndMeetingBTNEventParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectClickEndMeetingBTNEventParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectClickEndMeetingBTNEventParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectClickEndMeetingBTNEventParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectClickEndMeetingBTNEventParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectClickEndMeetingBTNEventParams& from);
  void MergeFrom(const RedirectClickEndMeetingBTNEventParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectClickEndMeetingBTNEventParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams";
  }
  protected:
  explicit RedirectClickEndMeetingBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectFreeMeetingEndingReminderDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams) */ {
 public:
  inline RedirectFreeMeetingEndingReminderDlgParams() : RedirectFreeMeetingEndingReminderDlgParams(nullptr) {}
  ~RedirectFreeMeetingEndingReminderDlgParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectFreeMeetingEndingReminderDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectFreeMeetingEndingReminderDlgParams(const RedirectFreeMeetingEndingReminderDlgParams& from);
  RedirectFreeMeetingEndingReminderDlgParams(RedirectFreeMeetingEndingReminderDlgParams&& from) noexcept
    : RedirectFreeMeetingEndingReminderDlgParams() {
    *this = ::std::move(from);
  }

  inline RedirectFreeMeetingEndingReminderDlgParams& operator=(const RedirectFreeMeetingEndingReminderDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectFreeMeetingEndingReminderDlgParams& operator=(RedirectFreeMeetingEndingReminderDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectFreeMeetingEndingReminderDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectFreeMeetingEndingReminderDlgParams* internal_default_instance() {
    return reinterpret_cast<const RedirectFreeMeetingEndingReminderDlgParams*>(
               &_RedirectFreeMeetingEndingReminderDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(RedirectFreeMeetingEndingReminderDlgParams& a, RedirectFreeMeetingEndingReminderDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectFreeMeetingEndingReminderDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectFreeMeetingEndingReminderDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectFreeMeetingEndingReminderDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectFreeMeetingEndingReminderDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectFreeMeetingEndingReminderDlgParams& from);
  void MergeFrom(const RedirectFreeMeetingEndingReminderDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectFreeMeetingEndingReminderDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams";
  }
  protected:
  explicit RedirectFreeMeetingEndingReminderDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectClickCustomLiveStreamMenuEventParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams) */ {
 public:
  inline RedirectClickCustomLiveStreamMenuEventParams() : RedirectClickCustomLiveStreamMenuEventParams(nullptr) {}
  ~RedirectClickCustomLiveStreamMenuEventParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectClickCustomLiveStreamMenuEventParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectClickCustomLiveStreamMenuEventParams(const RedirectClickCustomLiveStreamMenuEventParams& from);
  RedirectClickCustomLiveStreamMenuEventParams(RedirectClickCustomLiveStreamMenuEventParams&& from) noexcept
    : RedirectClickCustomLiveStreamMenuEventParams() {
    *this = ::std::move(from);
  }

  inline RedirectClickCustomLiveStreamMenuEventParams& operator=(const RedirectClickCustomLiveStreamMenuEventParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectClickCustomLiveStreamMenuEventParams& operator=(RedirectClickCustomLiveStreamMenuEventParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectClickCustomLiveStreamMenuEventParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectClickCustomLiveStreamMenuEventParams* internal_default_instance() {
    return reinterpret_cast<const RedirectClickCustomLiveStreamMenuEventParams*>(
               &_RedirectClickCustomLiveStreamMenuEventParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(RedirectClickCustomLiveStreamMenuEventParams& a, RedirectClickCustomLiveStreamMenuEventParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectClickCustomLiveStreamMenuEventParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectClickCustomLiveStreamMenuEventParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectClickCustomLiveStreamMenuEventParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectClickCustomLiveStreamMenuEventParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectClickCustomLiveStreamMenuEventParams& from);
  void MergeFrom(const RedirectClickCustomLiveStreamMenuEventParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectClickCustomLiveStreamMenuEventParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams";
  }
  protected:
  explicit RedirectClickCustomLiveStreamMenuEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectClickParticipantListBTNEventParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams) */ {
 public:
  inline RedirectClickParticipantListBTNEventParams() : RedirectClickParticipantListBTNEventParams(nullptr) {}
  ~RedirectClickParticipantListBTNEventParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectClickParticipantListBTNEventParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectClickParticipantListBTNEventParams(const RedirectClickParticipantListBTNEventParams& from);
  RedirectClickParticipantListBTNEventParams(RedirectClickParticipantListBTNEventParams&& from) noexcept
    : RedirectClickParticipantListBTNEventParams() {
    *this = ::std::move(from);
  }

  inline RedirectClickParticipantListBTNEventParams& operator=(const RedirectClickParticipantListBTNEventParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectClickParticipantListBTNEventParams& operator=(RedirectClickParticipantListBTNEventParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectClickParticipantListBTNEventParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectClickParticipantListBTNEventParams* internal_default_instance() {
    return reinterpret_cast<const RedirectClickParticipantListBTNEventParams*>(
               &_RedirectClickParticipantListBTNEventParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(RedirectClickParticipantListBTNEventParams& a, RedirectClickParticipantListBTNEventParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectClickParticipantListBTNEventParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectClickParticipantListBTNEventParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectClickParticipantListBTNEventParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectClickParticipantListBTNEventParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectClickParticipantListBTNEventParams& from);
  void MergeFrom(const RedirectClickParticipantListBTNEventParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectClickParticipantListBTNEventParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams";
  }
  protected:
  explicit RedirectClickParticipantListBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectClickCCBTNEventParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectClickCCBTNEventParams) */ {
 public:
  inline RedirectClickCCBTNEventParams() : RedirectClickCCBTNEventParams(nullptr) {}
  ~RedirectClickCCBTNEventParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectClickCCBTNEventParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectClickCCBTNEventParams(const RedirectClickCCBTNEventParams& from);
  RedirectClickCCBTNEventParams(RedirectClickCCBTNEventParams&& from) noexcept
    : RedirectClickCCBTNEventParams() {
    *this = ::std::move(from);
  }

  inline RedirectClickCCBTNEventParams& operator=(const RedirectClickCCBTNEventParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectClickCCBTNEventParams& operator=(RedirectClickCCBTNEventParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectClickCCBTNEventParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectClickCCBTNEventParams* internal_default_instance() {
    return reinterpret_cast<const RedirectClickCCBTNEventParams*>(
               &_RedirectClickCCBTNEventParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(RedirectClickCCBTNEventParams& a, RedirectClickCCBTNEventParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectClickCCBTNEventParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectClickCCBTNEventParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectClickCCBTNEventParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectClickCCBTNEventParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectClickCCBTNEventParams& from);
  void MergeFrom(const RedirectClickCCBTNEventParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectClickCCBTNEventParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectClickCCBTNEventParams";
  }
  protected:
  explicit RedirectClickCCBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectClickAudioBTNEventParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectClickAudioBTNEventParams) */ {
 public:
  inline RedirectClickAudioBTNEventParams() : RedirectClickAudioBTNEventParams(nullptr) {}
  ~RedirectClickAudioBTNEventParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectClickAudioBTNEventParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectClickAudioBTNEventParams(const RedirectClickAudioBTNEventParams& from);
  RedirectClickAudioBTNEventParams(RedirectClickAudioBTNEventParams&& from) noexcept
    : RedirectClickAudioBTNEventParams() {
    *this = ::std::move(from);
  }

  inline RedirectClickAudioBTNEventParams& operator=(const RedirectClickAudioBTNEventParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectClickAudioBTNEventParams& operator=(RedirectClickAudioBTNEventParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectClickAudioBTNEventParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectClickAudioBTNEventParams* internal_default_instance() {
    return reinterpret_cast<const RedirectClickAudioBTNEventParams*>(
               &_RedirectClickAudioBTNEventParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(RedirectClickAudioBTNEventParams& a, RedirectClickAudioBTNEventParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectClickAudioBTNEventParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectClickAudioBTNEventParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectClickAudioBTNEventParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectClickAudioBTNEventParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectClickAudioBTNEventParams& from);
  void MergeFrom(const RedirectClickAudioBTNEventParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectClickAudioBTNEventParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectClickAudioBTNEventParams";
  }
  protected:
  explicit RedirectClickAudioBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectClickAudioMenuBTNEventParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams) */ {
 public:
  inline RedirectClickAudioMenuBTNEventParams() : RedirectClickAudioMenuBTNEventParams(nullptr) {}
  ~RedirectClickAudioMenuBTNEventParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectClickAudioMenuBTNEventParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectClickAudioMenuBTNEventParams(const RedirectClickAudioMenuBTNEventParams& from);
  RedirectClickAudioMenuBTNEventParams(RedirectClickAudioMenuBTNEventParams&& from) noexcept
    : RedirectClickAudioMenuBTNEventParams() {
    *this = ::std::move(from);
  }

  inline RedirectClickAudioMenuBTNEventParams& operator=(const RedirectClickAudioMenuBTNEventParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectClickAudioMenuBTNEventParams& operator=(RedirectClickAudioMenuBTNEventParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectClickAudioMenuBTNEventParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectClickAudioMenuBTNEventParams* internal_default_instance() {
    return reinterpret_cast<const RedirectClickAudioMenuBTNEventParams*>(
               &_RedirectClickAudioMenuBTNEventParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(RedirectClickAudioMenuBTNEventParams& a, RedirectClickAudioMenuBTNEventParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectClickAudioMenuBTNEventParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectClickAudioMenuBTNEventParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectClickAudioMenuBTNEventParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectClickAudioMenuBTNEventParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectClickAudioMenuBTNEventParams& from);
  void MergeFrom(const RedirectClickAudioMenuBTNEventParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectClickAudioMenuBTNEventParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams";
  }
  protected:
  explicit RedirectClickAudioMenuBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectMeetingWarningMsgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectMeetingWarningMsgParams) */ {
 public:
  inline RedirectMeetingWarningMsgParams() : RedirectMeetingWarningMsgParams(nullptr) {}
  ~RedirectMeetingWarningMsgParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectMeetingWarningMsgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectMeetingWarningMsgParams(const RedirectMeetingWarningMsgParams& from);
  RedirectMeetingWarningMsgParams(RedirectMeetingWarningMsgParams&& from) noexcept
    : RedirectMeetingWarningMsgParams() {
    *this = ::std::move(from);
  }

  inline RedirectMeetingWarningMsgParams& operator=(const RedirectMeetingWarningMsgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectMeetingWarningMsgParams& operator=(RedirectMeetingWarningMsgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectMeetingWarningMsgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectMeetingWarningMsgParams* internal_default_instance() {
    return reinterpret_cast<const RedirectMeetingWarningMsgParams*>(
               &_RedirectMeetingWarningMsgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(RedirectMeetingWarningMsgParams& a, RedirectMeetingWarningMsgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectMeetingWarningMsgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectMeetingWarningMsgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectMeetingWarningMsgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectMeetingWarningMsgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectMeetingWarningMsgParams& from);
  void MergeFrom(const RedirectMeetingWarningMsgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectMeetingWarningMsgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectMeetingWarningMsgParams";
  }
  protected:
  explicit RedirectMeetingWarningMsgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectBadNetworkFieldNumber = 1,
    kBRedirectWarnHighCPUFieldNumber = 2,
  };
  // optional bool bRedirectBadNetwork = 1;
  bool has_bredirectbadnetwork() const;
  void clear_bredirectbadnetwork() ;
  bool bredirectbadnetwork() const;
  void set_bredirectbadnetwork(bool value);

  private:
  bool _internal_bredirectbadnetwork() const;
  void _internal_set_bredirectbadnetwork(bool value);

  public:
  // optional bool bRedirectWarnHighCPU = 2;
  bool has_bredirectwarnhighcpu() const;
  void clear_bredirectwarnhighcpu() ;
  bool bredirectwarnhighcpu() const;
  void set_bredirectwarnhighcpu(bool value);

  private:
  bool _internal_bredirectwarnhighcpu() const;
  void _internal_set_bredirectwarnhighcpu(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirectbadnetwork_;
    bool bredirectwarnhighcpu_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableToolTipsShowParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableToolTipsShowParams) */ {
 public:
  inline EnableToolTipsShowParams() : EnableToolTipsShowParams(nullptr) {}
  ~EnableToolTipsShowParams() override;
  explicit PROTOBUF_CONSTEXPR EnableToolTipsShowParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableToolTipsShowParams(const EnableToolTipsShowParams& from);
  EnableToolTipsShowParams(EnableToolTipsShowParams&& from) noexcept
    : EnableToolTipsShowParams() {
    *this = ::std::move(from);
  }

  inline EnableToolTipsShowParams& operator=(const EnableToolTipsShowParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableToolTipsShowParams& operator=(EnableToolTipsShowParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableToolTipsShowParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableToolTipsShowParams* internal_default_instance() {
    return reinterpret_cast<const EnableToolTipsShowParams*>(
               &_EnableToolTipsShowParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(EnableToolTipsShowParams& a, EnableToolTipsShowParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableToolTipsShowParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableToolTipsShowParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableToolTipsShowParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableToolTipsShowParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableToolTipsShowParams& from);
  void MergeFrom(const EnableToolTipsShowParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableToolTipsShowParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableToolTipsShowParams";
  }
  protected:
  explicit EnableToolTipsShowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableToolTipsShowParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAirplayInstructionWindowParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAirplayInstructionWindowParams) */ {
 public:
  inline EnableAirplayInstructionWindowParams() : EnableAirplayInstructionWindowParams(nullptr) {}
  ~EnableAirplayInstructionWindowParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAirplayInstructionWindowParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAirplayInstructionWindowParams(const EnableAirplayInstructionWindowParams& from);
  EnableAirplayInstructionWindowParams(EnableAirplayInstructionWindowParams&& from) noexcept
    : EnableAirplayInstructionWindowParams() {
    *this = ::std::move(from);
  }

  inline EnableAirplayInstructionWindowParams& operator=(const EnableAirplayInstructionWindowParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAirplayInstructionWindowParams& operator=(EnableAirplayInstructionWindowParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAirplayInstructionWindowParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAirplayInstructionWindowParams* internal_default_instance() {
    return reinterpret_cast<const EnableAirplayInstructionWindowParams*>(
               &_EnableAirplayInstructionWindowParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(EnableAirplayInstructionWindowParams& a, EnableAirplayInstructionWindowParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAirplayInstructionWindowParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAirplayInstructionWindowParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAirplayInstructionWindowParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAirplayInstructionWindowParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAirplayInstructionWindowParams& from);
  void MergeFrom(const EnableAirplayInstructionWindowParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAirplayInstructionWindowParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAirplayInstructionWindowParams";
  }
  protected:
  explicit EnableAirplayInstructionWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableClaimHostFeatureParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableClaimHostFeatureParams) */ {
 public:
  inline EnableClaimHostFeatureParams() : EnableClaimHostFeatureParams(nullptr) {}
  ~EnableClaimHostFeatureParams() override;
  explicit PROTOBUF_CONSTEXPR EnableClaimHostFeatureParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableClaimHostFeatureParams(const EnableClaimHostFeatureParams& from);
  EnableClaimHostFeatureParams(EnableClaimHostFeatureParams&& from) noexcept
    : EnableClaimHostFeatureParams() {
    *this = ::std::move(from);
  }

  inline EnableClaimHostFeatureParams& operator=(const EnableClaimHostFeatureParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableClaimHostFeatureParams& operator=(EnableClaimHostFeatureParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableClaimHostFeatureParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableClaimHostFeatureParams* internal_default_instance() {
    return reinterpret_cast<const EnableClaimHostFeatureParams*>(
               &_EnableClaimHostFeatureParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(EnableClaimHostFeatureParams& a, EnableClaimHostFeatureParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableClaimHostFeatureParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableClaimHostFeatureParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableClaimHostFeatureParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableClaimHostFeatureParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableClaimHostFeatureParams& from);
  void MergeFrom(const EnableClaimHostFeatureParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableClaimHostFeatureParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableClaimHostFeatureParams";
  }
  protected:
  explicit EnableClaimHostFeatureParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableClaimHostFeatureParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoHideJoinAudioDialogParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams) */ {
 public:
  inline EnableAutoHideJoinAudioDialogParams() : EnableAutoHideJoinAudioDialogParams(nullptr) {}
  ~EnableAutoHideJoinAudioDialogParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoHideJoinAudioDialogParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoHideJoinAudioDialogParams(const EnableAutoHideJoinAudioDialogParams& from);
  EnableAutoHideJoinAudioDialogParams(EnableAutoHideJoinAudioDialogParams&& from) noexcept
    : EnableAutoHideJoinAudioDialogParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoHideJoinAudioDialogParams& operator=(const EnableAutoHideJoinAudioDialogParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoHideJoinAudioDialogParams& operator=(EnableAutoHideJoinAudioDialogParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoHideJoinAudioDialogParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoHideJoinAudioDialogParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoHideJoinAudioDialogParams*>(
               &_EnableAutoHideJoinAudioDialogParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(EnableAutoHideJoinAudioDialogParams& a, EnableAutoHideJoinAudioDialogParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoHideJoinAudioDialogParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoHideJoinAudioDialogParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoHideJoinAudioDialogParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoHideJoinAudioDialogParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoHideJoinAudioDialogParams& from);
  void MergeFrom(const EnableAutoHideJoinAudioDialogParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoHideJoinAudioDialogParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams";
  }
  protected:
  explicit EnableAutoHideJoinAudioDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class AlwaysShowIconOnTaskBarParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams) */ {
 public:
  inline AlwaysShowIconOnTaskBarParams() : AlwaysShowIconOnTaskBarParams(nullptr) {}
  ~AlwaysShowIconOnTaskBarParams() override;
  explicit PROTOBUF_CONSTEXPR AlwaysShowIconOnTaskBarParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlwaysShowIconOnTaskBarParams(const AlwaysShowIconOnTaskBarParams& from);
  AlwaysShowIconOnTaskBarParams(AlwaysShowIconOnTaskBarParams&& from) noexcept
    : AlwaysShowIconOnTaskBarParams() {
    *this = ::std::move(from);
  }

  inline AlwaysShowIconOnTaskBarParams& operator=(const AlwaysShowIconOnTaskBarParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlwaysShowIconOnTaskBarParams& operator=(AlwaysShowIconOnTaskBarParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AlwaysShowIconOnTaskBarParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlwaysShowIconOnTaskBarParams* internal_default_instance() {
    return reinterpret_cast<const AlwaysShowIconOnTaskBarParams*>(
               &_AlwaysShowIconOnTaskBarParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(AlwaysShowIconOnTaskBarParams& a, AlwaysShowIconOnTaskBarParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AlwaysShowIconOnTaskBarParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlwaysShowIconOnTaskBarParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlwaysShowIconOnTaskBarParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlwaysShowIconOnTaskBarParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AlwaysShowIconOnTaskBarParams& from);
  void MergeFrom(const AlwaysShowIconOnTaskBarParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlwaysShowIconOnTaskBarParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams";
  }
  protected:
  explicit AlwaysShowIconOnTaskBarParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBAlwaysShowFieldNumber = 1,
  };
  // optional bool bAlwaysShow = 1;
  bool has_balwaysshow() const;
  void clear_balwaysshow() ;
  bool balwaysshow() const;
  void set_balwaysshow(bool value);

  private:
  bool _internal_balwaysshow() const;
  void _internal_set_balwaysshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool balwaysshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableSplitScreenModeUIElementsParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams) */ {
 public:
  inline DisableSplitScreenModeUIElementsParams() : DisableSplitScreenModeUIElementsParams(nullptr) {}
  ~DisableSplitScreenModeUIElementsParams() override;
  explicit PROTOBUF_CONSTEXPR DisableSplitScreenModeUIElementsParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableSplitScreenModeUIElementsParams(const DisableSplitScreenModeUIElementsParams& from);
  DisableSplitScreenModeUIElementsParams(DisableSplitScreenModeUIElementsParams&& from) noexcept
    : DisableSplitScreenModeUIElementsParams() {
    *this = ::std::move(from);
  }

  inline DisableSplitScreenModeUIElementsParams& operator=(const DisableSplitScreenModeUIElementsParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableSplitScreenModeUIElementsParams& operator=(DisableSplitScreenModeUIElementsParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableSplitScreenModeUIElementsParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableSplitScreenModeUIElementsParams* internal_default_instance() {
    return reinterpret_cast<const DisableSplitScreenModeUIElementsParams*>(
               &_DisableSplitScreenModeUIElementsParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(DisableSplitScreenModeUIElementsParams& a, DisableSplitScreenModeUIElementsParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableSplitScreenModeUIElementsParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableSplitScreenModeUIElementsParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableSplitScreenModeUIElementsParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableSplitScreenModeUIElementsParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableSplitScreenModeUIElementsParams& from);
  void MergeFrom(const DisableSplitScreenModeUIElementsParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableSplitScreenModeUIElementsParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams";
  }
  protected:
  explicit DisableSplitScreenModeUIElementsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetShowAudioUseComputerSoundChkboxParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams) */ {
 public:
  inline SetShowAudioUseComputerSoundChkboxParams() : SetShowAudioUseComputerSoundChkboxParams(nullptr) {}
  ~SetShowAudioUseComputerSoundChkboxParams() override;
  explicit PROTOBUF_CONSTEXPR SetShowAudioUseComputerSoundChkboxParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetShowAudioUseComputerSoundChkboxParams(const SetShowAudioUseComputerSoundChkboxParams& from);
  SetShowAudioUseComputerSoundChkboxParams(SetShowAudioUseComputerSoundChkboxParams&& from) noexcept
    : SetShowAudioUseComputerSoundChkboxParams() {
    *this = ::std::move(from);
  }

  inline SetShowAudioUseComputerSoundChkboxParams& operator=(const SetShowAudioUseComputerSoundChkboxParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShowAudioUseComputerSoundChkboxParams& operator=(SetShowAudioUseComputerSoundChkboxParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetShowAudioUseComputerSoundChkboxParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetShowAudioUseComputerSoundChkboxParams* internal_default_instance() {
    return reinterpret_cast<const SetShowAudioUseComputerSoundChkboxParams*>(
               &_SetShowAudioUseComputerSoundChkboxParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SetShowAudioUseComputerSoundChkboxParams& a, SetShowAudioUseComputerSoundChkboxParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShowAudioUseComputerSoundChkboxParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetShowAudioUseComputerSoundChkboxParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetShowAudioUseComputerSoundChkboxParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetShowAudioUseComputerSoundChkboxParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetShowAudioUseComputerSoundChkboxParams& from);
  void MergeFrom(const SetShowAudioUseComputerSoundChkboxParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetShowAudioUseComputerSoundChkboxParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams";
  }
  protected:
  explicit SetShowAudioUseComputerSoundChkboxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetShowCallInTabParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetShowCallInTabParams) */ {
 public:
  inline SetShowCallInTabParams() : SetShowCallInTabParams(nullptr) {}
  ~SetShowCallInTabParams() override;
  explicit PROTOBUF_CONSTEXPR SetShowCallInTabParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetShowCallInTabParams(const SetShowCallInTabParams& from);
  SetShowCallInTabParams(SetShowCallInTabParams&& from) noexcept
    : SetShowCallInTabParams() {
    *this = ::std::move(from);
  }

  inline SetShowCallInTabParams& operator=(const SetShowCallInTabParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShowCallInTabParams& operator=(SetShowCallInTabParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetShowCallInTabParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetShowCallInTabParams* internal_default_instance() {
    return reinterpret_cast<const SetShowCallInTabParams*>(
               &_SetShowCallInTabParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SetShowCallInTabParams& a, SetShowCallInTabParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShowCallInTabParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetShowCallInTabParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetShowCallInTabParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetShowCallInTabParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetShowCallInTabParams& from);
  void MergeFrom(const SetShowCallInTabParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetShowCallInTabParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetShowCallInTabParams";
  }
  protected:
  explicit SetShowCallInTabParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetShowCallInTabParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetShowCallMeTabParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetShowCallMeTabParams) */ {
 public:
  inline SetShowCallMeTabParams() : SetShowCallMeTabParams(nullptr) {}
  ~SetShowCallMeTabParams() override;
  explicit PROTOBUF_CONSTEXPR SetShowCallMeTabParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetShowCallMeTabParams(const SetShowCallMeTabParams& from);
  SetShowCallMeTabParams(SetShowCallMeTabParams&& from) noexcept
    : SetShowCallMeTabParams() {
    *this = ::std::move(from);
  }

  inline SetShowCallMeTabParams& operator=(const SetShowCallMeTabParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShowCallMeTabParams& operator=(SetShowCallMeTabParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetShowCallMeTabParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetShowCallMeTabParams* internal_default_instance() {
    return reinterpret_cast<const SetShowCallMeTabParams*>(
               &_SetShowCallMeTabParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SetShowCallMeTabParams& a, SetShowCallMeTabParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShowCallMeTabParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetShowCallMeTabParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetShowCallMeTabParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetShowCallMeTabParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetShowCallMeTabParams& from);
  void MergeFrom(const SetShowCallMeTabParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetShowCallMeTabParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetShowCallMeTabParams";
  }
  protected:
  explicit SetShowCallMeTabParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetShowCallMeTabParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableTopMostAttr4SettingDialogParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams) */ {
 public:
  inline DisableTopMostAttr4SettingDialogParams() : DisableTopMostAttr4SettingDialogParams(nullptr) {}
  ~DisableTopMostAttr4SettingDialogParams() override;
  explicit PROTOBUF_CONSTEXPR DisableTopMostAttr4SettingDialogParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableTopMostAttr4SettingDialogParams(const DisableTopMostAttr4SettingDialogParams& from);
  DisableTopMostAttr4SettingDialogParams(DisableTopMostAttr4SettingDialogParams&& from) noexcept
    : DisableTopMostAttr4SettingDialogParams() {
    *this = ::std::move(from);
  }

  inline DisableTopMostAttr4SettingDialogParams& operator=(const DisableTopMostAttr4SettingDialogParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableTopMostAttr4SettingDialogParams& operator=(DisableTopMostAttr4SettingDialogParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableTopMostAttr4SettingDialogParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableTopMostAttr4SettingDialogParams* internal_default_instance() {
    return reinterpret_cast<const DisableTopMostAttr4SettingDialogParams*>(
               &_DisableTopMostAttr4SettingDialogParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(DisableTopMostAttr4SettingDialogParams& a, DisableTopMostAttr4SettingDialogParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableTopMostAttr4SettingDialogParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableTopMostAttr4SettingDialogParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableTopMostAttr4SettingDialogParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableTopMostAttr4SettingDialogParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableTopMostAttr4SettingDialogParams& from);
  void MergeFrom(const DisableTopMostAttr4SettingDialogParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableTopMostAttr4SettingDialogParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams";
  }
  protected:
  explicit DisableTopMostAttr4SettingDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableGrabShareWithoutReminderParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams) */ {
 public:
  inline EnableGrabShareWithoutReminderParams() : EnableGrabShareWithoutReminderParams(nullptr) {}
  ~EnableGrabShareWithoutReminderParams() override;
  explicit PROTOBUF_CONSTEXPR EnableGrabShareWithoutReminderParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableGrabShareWithoutReminderParams(const EnableGrabShareWithoutReminderParams& from);
  EnableGrabShareWithoutReminderParams(EnableGrabShareWithoutReminderParams&& from) noexcept
    : EnableGrabShareWithoutReminderParams() {
    *this = ::std::move(from);
  }

  inline EnableGrabShareWithoutReminderParams& operator=(const EnableGrabShareWithoutReminderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableGrabShareWithoutReminderParams& operator=(EnableGrabShareWithoutReminderParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableGrabShareWithoutReminderParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableGrabShareWithoutReminderParams* internal_default_instance() {
    return reinterpret_cast<const EnableGrabShareWithoutReminderParams*>(
               &_EnableGrabShareWithoutReminderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(EnableGrabShareWithoutReminderParams& a, EnableGrabShareWithoutReminderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableGrabShareWithoutReminderParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableGrabShareWithoutReminderParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableGrabShareWithoutReminderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableGrabShareWithoutReminderParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableGrabShareWithoutReminderParams& from);
  void MergeFrom(const EnableGrabShareWithoutReminderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableGrabShareWithoutReminderParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableGrabShareWithoutReminderParams";
  }
  protected:
  explicit EnableGrabShareWithoutReminderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableShowShareSwitchMultiToSingleConfirmDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams) */ {
 public:
  inline EnableShowShareSwitchMultiToSingleConfirmDlgParams() : EnableShowShareSwitchMultiToSingleConfirmDlgParams(nullptr) {}
  ~EnableShowShareSwitchMultiToSingleConfirmDlgParams() override;
  explicit PROTOBUF_CONSTEXPR EnableShowShareSwitchMultiToSingleConfirmDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableShowShareSwitchMultiToSingleConfirmDlgParams(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from);
  EnableShowShareSwitchMultiToSingleConfirmDlgParams(EnableShowShareSwitchMultiToSingleConfirmDlgParams&& from) noexcept
    : EnableShowShareSwitchMultiToSingleConfirmDlgParams() {
    *this = ::std::move(from);
  }

  inline EnableShowShareSwitchMultiToSingleConfirmDlgParams& operator=(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableShowShareSwitchMultiToSingleConfirmDlgParams& operator=(EnableShowShareSwitchMultiToSingleConfirmDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableShowShareSwitchMultiToSingleConfirmDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableShowShareSwitchMultiToSingleConfirmDlgParams* internal_default_instance() {
    return reinterpret_cast<const EnableShowShareSwitchMultiToSingleConfirmDlgParams*>(
               &_EnableShowShareSwitchMultiToSingleConfirmDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(EnableShowShareSwitchMultiToSingleConfirmDlgParams& a, EnableShowShareSwitchMultiToSingleConfirmDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableShowShareSwitchMultiToSingleConfirmDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableShowShareSwitchMultiToSingleConfirmDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableShowShareSwitchMultiToSingleConfirmDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableShowShareSwitchMultiToSingleConfirmDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from);
  void MergeFrom(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableShowShareSwitchMultiToSingleConfirmDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams";
  }
  protected:
  explicit EnableShowShareSwitchMultiToSingleConfirmDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableFreeMeetingRemainTimeNotifyParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams) */ {
 public:
  inline DisableFreeMeetingRemainTimeNotifyParams() : DisableFreeMeetingRemainTimeNotifyParams(nullptr) {}
  ~DisableFreeMeetingRemainTimeNotifyParams() override;
  explicit PROTOBUF_CONSTEXPR DisableFreeMeetingRemainTimeNotifyParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableFreeMeetingRemainTimeNotifyParams(const DisableFreeMeetingRemainTimeNotifyParams& from);
  DisableFreeMeetingRemainTimeNotifyParams(DisableFreeMeetingRemainTimeNotifyParams&& from) noexcept
    : DisableFreeMeetingRemainTimeNotifyParams() {
    *this = ::std::move(from);
  }

  inline DisableFreeMeetingRemainTimeNotifyParams& operator=(const DisableFreeMeetingRemainTimeNotifyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableFreeMeetingRemainTimeNotifyParams& operator=(DisableFreeMeetingRemainTimeNotifyParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableFreeMeetingRemainTimeNotifyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableFreeMeetingRemainTimeNotifyParams* internal_default_instance() {
    return reinterpret_cast<const DisableFreeMeetingRemainTimeNotifyParams*>(
               &_DisableFreeMeetingRemainTimeNotifyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(DisableFreeMeetingRemainTimeNotifyParams& a, DisableFreeMeetingRemainTimeNotifyParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableFreeMeetingRemainTimeNotifyParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableFreeMeetingRemainTimeNotifyParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableFreeMeetingRemainTimeNotifyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableFreeMeetingRemainTimeNotifyParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableFreeMeetingRemainTimeNotifyParams& from);
  void MergeFrom(const DisableFreeMeetingRemainTimeNotifyParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableFreeMeetingRemainTimeNotifyParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams";
  }
  protected:
  explicit DisableFreeMeetingRemainTimeNotifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideChatItemOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideChatItemOnMeetingUIParams) */ {
 public:
  inline HideChatItemOnMeetingUIParams() : HideChatItemOnMeetingUIParams(nullptr) {}
  ~HideChatItemOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR HideChatItemOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideChatItemOnMeetingUIParams(const HideChatItemOnMeetingUIParams& from);
  HideChatItemOnMeetingUIParams(HideChatItemOnMeetingUIParams&& from) noexcept
    : HideChatItemOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline HideChatItemOnMeetingUIParams& operator=(const HideChatItemOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideChatItemOnMeetingUIParams& operator=(HideChatItemOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideChatItemOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideChatItemOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const HideChatItemOnMeetingUIParams*>(
               &_HideChatItemOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(HideChatItemOnMeetingUIParams& a, HideChatItemOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideChatItemOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideChatItemOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideChatItemOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideChatItemOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideChatItemOnMeetingUIParams& from);
  void MergeFrom(const HideChatItemOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideChatItemOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideChatItemOnMeetingUIParams";
  }
  protected:
  explicit HideChatItemOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideRecordItemOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams) */ {
 public:
  inline HideRecordItemOnMeetingUIParams() : HideRecordItemOnMeetingUIParams(nullptr) {}
  ~HideRecordItemOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR HideRecordItemOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideRecordItemOnMeetingUIParams(const HideRecordItemOnMeetingUIParams& from);
  HideRecordItemOnMeetingUIParams(HideRecordItemOnMeetingUIParams&& from) noexcept
    : HideRecordItemOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline HideRecordItemOnMeetingUIParams& operator=(const HideRecordItemOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideRecordItemOnMeetingUIParams& operator=(HideRecordItemOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideRecordItemOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideRecordItemOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const HideRecordItemOnMeetingUIParams*>(
               &_HideRecordItemOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(HideRecordItemOnMeetingUIParams& a, HideRecordItemOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideRecordItemOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideRecordItemOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideRecordItemOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideRecordItemOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideRecordItemOnMeetingUIParams& from);
  void MergeFrom(const HideRecordItemOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideRecordItemOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideRecordItemOnMeetingUIParams";
  }
  protected:
  explicit HideRecordItemOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideUpgradeFreeMeetingButtonParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams) */ {
 public:
  inline HideUpgradeFreeMeetingButtonParams() : HideUpgradeFreeMeetingButtonParams(nullptr) {}
  ~HideUpgradeFreeMeetingButtonParams() override;
  explicit PROTOBUF_CONSTEXPR HideUpgradeFreeMeetingButtonParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideUpgradeFreeMeetingButtonParams(const HideUpgradeFreeMeetingButtonParams& from);
  HideUpgradeFreeMeetingButtonParams(HideUpgradeFreeMeetingButtonParams&& from) noexcept
    : HideUpgradeFreeMeetingButtonParams() {
    *this = ::std::move(from);
  }

  inline HideUpgradeFreeMeetingButtonParams& operator=(const HideUpgradeFreeMeetingButtonParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideUpgradeFreeMeetingButtonParams& operator=(HideUpgradeFreeMeetingButtonParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideUpgradeFreeMeetingButtonParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideUpgradeFreeMeetingButtonParams* internal_default_instance() {
    return reinterpret_cast<const HideUpgradeFreeMeetingButtonParams*>(
               &_HideUpgradeFreeMeetingButtonParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(HideUpgradeFreeMeetingButtonParams& a, HideUpgradeFreeMeetingButtonParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideUpgradeFreeMeetingButtonParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideUpgradeFreeMeetingButtonParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideUpgradeFreeMeetingButtonParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideUpgradeFreeMeetingButtonParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideUpgradeFreeMeetingButtonParams& from);
  void MergeFrom(const HideUpgradeFreeMeetingButtonParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideUpgradeFreeMeetingButtonParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams";
  }
  protected:
  explicit HideUpgradeFreeMeetingButtonParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetShowInviteDlgTabPageParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetShowInviteDlgTabPageParams) */ {
 public:
  inline SetShowInviteDlgTabPageParams() : SetShowInviteDlgTabPageParams(nullptr) {}
  ~SetShowInviteDlgTabPageParams() override;
  explicit PROTOBUF_CONSTEXPR SetShowInviteDlgTabPageParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetShowInviteDlgTabPageParams(const SetShowInviteDlgTabPageParams& from);
  SetShowInviteDlgTabPageParams(SetShowInviteDlgTabPageParams&& from) noexcept
    : SetShowInviteDlgTabPageParams() {
    *this = ::std::move(from);
  }

  inline SetShowInviteDlgTabPageParams& operator=(const SetShowInviteDlgTabPageParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShowInviteDlgTabPageParams& operator=(SetShowInviteDlgTabPageParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetShowInviteDlgTabPageParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetShowInviteDlgTabPageParams* internal_default_instance() {
    return reinterpret_cast<const SetShowInviteDlgTabPageParams*>(
               &_SetShowInviteDlgTabPageParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(SetShowInviteDlgTabPageParams& a, SetShowInviteDlgTabPageParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShowInviteDlgTabPageParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetShowInviteDlgTabPageParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetShowInviteDlgTabPageParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetShowInviteDlgTabPageParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetShowInviteDlgTabPageParams& from);
  void MergeFrom(const SetShowInviteDlgTabPageParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetShowInviteDlgTabPageParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetShowInviteDlgTabPageParams";
  }
  protected:
  explicit SetShowInviteDlgTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabPageFieldNumber = 1,
    kBShowFieldNumber = 2,
  };
  // optional int32 tabPage = 1;
  bool has_tabpage() const;
  void clear_tabpage() ;
  ::int32_t tabpage() const;
  void set_tabpage(::int32_t value);

  private:
  ::int32_t _internal_tabpage() const;
  void _internal_set_tabpage(::int32_t value);

  public:
  // optional bool bShow = 2;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t tabpage_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetShowH323SubTabPageParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetShowH323SubTabPageParams) */ {
 public:
  inline SetShowH323SubTabPageParams() : SetShowH323SubTabPageParams(nullptr) {}
  ~SetShowH323SubTabPageParams() override;
  explicit PROTOBUF_CONSTEXPR SetShowH323SubTabPageParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetShowH323SubTabPageParams(const SetShowH323SubTabPageParams& from);
  SetShowH323SubTabPageParams(SetShowH323SubTabPageParams&& from) noexcept
    : SetShowH323SubTabPageParams() {
    *this = ::std::move(from);
  }

  inline SetShowH323SubTabPageParams& operator=(const SetShowH323SubTabPageParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShowH323SubTabPageParams& operator=(SetShowH323SubTabPageParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetShowH323SubTabPageParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetShowH323SubTabPageParams* internal_default_instance() {
    return reinterpret_cast<const SetShowH323SubTabPageParams*>(
               &_SetShowH323SubTabPageParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SetShowH323SubTabPageParams& a, SetShowH323SubTabPageParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShowH323SubTabPageParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetShowH323SubTabPageParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetShowH323SubTabPageParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetShowH323SubTabPageParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetShowH323SubTabPageParams& from);
  void MergeFrom(const SetShowH323SubTabPageParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetShowH323SubTabPageParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetShowH323SubTabPageParams";
  }
  protected:
  explicit SetShowH323SubTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabPageFieldNumber = 1,
    kBShowFieldNumber = 2,
  };
  // optional int32 tabPage = 1;
  bool has_tabpage() const;
  void clear_tabpage() ;
  ::int32_t tabpage() const;
  void set_tabpage(::int32_t value);

  private:
  ::int32_t _internal_tabpage() const;
  void _internal_set_tabpage(::int32_t value);

  public:
  // optional bool bShow = 2;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetShowH323SubTabPageParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t tabpage_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideSwitchCameraButtonParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideSwitchCameraButtonParams) */ {
 public:
  inline HideSwitchCameraButtonParams() : HideSwitchCameraButtonParams(nullptr) {}
  ~HideSwitchCameraButtonParams() override;
  explicit PROTOBUF_CONSTEXPR HideSwitchCameraButtonParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideSwitchCameraButtonParams(const HideSwitchCameraButtonParams& from);
  HideSwitchCameraButtonParams(HideSwitchCameraButtonParams&& from) noexcept
    : HideSwitchCameraButtonParams() {
    *this = ::std::move(from);
  }

  inline HideSwitchCameraButtonParams& operator=(const HideSwitchCameraButtonParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideSwitchCameraButtonParams& operator=(HideSwitchCameraButtonParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideSwitchCameraButtonParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideSwitchCameraButtonParams* internal_default_instance() {
    return reinterpret_cast<const HideSwitchCameraButtonParams*>(
               &_HideSwitchCameraButtonParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(HideSwitchCameraButtonParams& a, HideSwitchCameraButtonParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideSwitchCameraButtonParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideSwitchCameraButtonParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideSwitchCameraButtonParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideSwitchCameraButtonParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideSwitchCameraButtonParams& from);
  void MergeFrom(const HideSwitchCameraButtonParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideSwitchCameraButtonParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideSwitchCameraButtonParams";
  }
  protected:
  explicit HideSwitchCameraButtonParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideSwitchCameraButtonParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideCopyUrlOnInviteWindowParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams) */ {
 public:
  inline HideCopyUrlOnInviteWindowParams() : HideCopyUrlOnInviteWindowParams(nullptr) {}
  ~HideCopyUrlOnInviteWindowParams() override;
  explicit PROTOBUF_CONSTEXPR HideCopyUrlOnInviteWindowParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideCopyUrlOnInviteWindowParams(const HideCopyUrlOnInviteWindowParams& from);
  HideCopyUrlOnInviteWindowParams(HideCopyUrlOnInviteWindowParams&& from) noexcept
    : HideCopyUrlOnInviteWindowParams() {
    *this = ::std::move(from);
  }

  inline HideCopyUrlOnInviteWindowParams& operator=(const HideCopyUrlOnInviteWindowParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideCopyUrlOnInviteWindowParams& operator=(HideCopyUrlOnInviteWindowParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideCopyUrlOnInviteWindowParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideCopyUrlOnInviteWindowParams* internal_default_instance() {
    return reinterpret_cast<const HideCopyUrlOnInviteWindowParams*>(
               &_HideCopyUrlOnInviteWindowParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(HideCopyUrlOnInviteWindowParams& a, HideCopyUrlOnInviteWindowParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideCopyUrlOnInviteWindowParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideCopyUrlOnInviteWindowParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideCopyUrlOnInviteWindowParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideCopyUrlOnInviteWindowParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideCopyUrlOnInviteWindowParams& from);
  void MergeFrom(const HideCopyUrlOnInviteWindowParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideCopyUrlOnInviteWindowParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams";
  }
  protected:
  explicit HideCopyUrlOnInviteWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideCopyInvitationOnInviteWindowParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams) */ {
 public:
  inline HideCopyInvitationOnInviteWindowParams() : HideCopyInvitationOnInviteWindowParams(nullptr) {}
  ~HideCopyInvitationOnInviteWindowParams() override;
  explicit PROTOBUF_CONSTEXPR HideCopyInvitationOnInviteWindowParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideCopyInvitationOnInviteWindowParams(const HideCopyInvitationOnInviteWindowParams& from);
  HideCopyInvitationOnInviteWindowParams(HideCopyInvitationOnInviteWindowParams&& from) noexcept
    : HideCopyInvitationOnInviteWindowParams() {
    *this = ::std::move(from);
  }

  inline HideCopyInvitationOnInviteWindowParams& operator=(const HideCopyInvitationOnInviteWindowParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideCopyInvitationOnInviteWindowParams& operator=(HideCopyInvitationOnInviteWindowParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideCopyInvitationOnInviteWindowParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideCopyInvitationOnInviteWindowParams* internal_default_instance() {
    return reinterpret_cast<const HideCopyInvitationOnInviteWindowParams*>(
               &_HideCopyInvitationOnInviteWindowParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(HideCopyInvitationOnInviteWindowParams& a, HideCopyInvitationOnInviteWindowParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideCopyInvitationOnInviteWindowParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideCopyInvitationOnInviteWindowParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideCopyInvitationOnInviteWindowParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideCopyInvitationOnInviteWindowParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideCopyInvitationOnInviteWindowParams& from);
  void MergeFrom(const HideCopyInvitationOnInviteWindowParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideCopyInvitationOnInviteWindowParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams";
  }
  protected:
  explicit HideCopyInvitationOnInviteWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideKeypadButtonOnMeetingWindowParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams) */ {
 public:
  inline HideKeypadButtonOnMeetingWindowParams() : HideKeypadButtonOnMeetingWindowParams(nullptr) {}
  ~HideKeypadButtonOnMeetingWindowParams() override;
  explicit PROTOBUF_CONSTEXPR HideKeypadButtonOnMeetingWindowParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideKeypadButtonOnMeetingWindowParams(const HideKeypadButtonOnMeetingWindowParams& from);
  HideKeypadButtonOnMeetingWindowParams(HideKeypadButtonOnMeetingWindowParams&& from) noexcept
    : HideKeypadButtonOnMeetingWindowParams() {
    *this = ::std::move(from);
  }

  inline HideKeypadButtonOnMeetingWindowParams& operator=(const HideKeypadButtonOnMeetingWindowParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideKeypadButtonOnMeetingWindowParams& operator=(HideKeypadButtonOnMeetingWindowParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideKeypadButtonOnMeetingWindowParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideKeypadButtonOnMeetingWindowParams* internal_default_instance() {
    return reinterpret_cast<const HideKeypadButtonOnMeetingWindowParams*>(
               &_HideKeypadButtonOnMeetingWindowParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(HideKeypadButtonOnMeetingWindowParams& a, HideKeypadButtonOnMeetingWindowParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideKeypadButtonOnMeetingWindowParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideKeypadButtonOnMeetingWindowParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideKeypadButtonOnMeetingWindowParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideKeypadButtonOnMeetingWindowParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideKeypadButtonOnMeetingWindowParams& from);
  void MergeFrom(const HideKeypadButtonOnMeetingWindowParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideKeypadButtonOnMeetingWindowParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams";
  }
  protected:
  explicit HideKeypadButtonOnMeetingWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideRemoteControlOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams) */ {
 public:
  inline HideRemoteControlOnMeetingUIParams() : HideRemoteControlOnMeetingUIParams(nullptr) {}
  ~HideRemoteControlOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR HideRemoteControlOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideRemoteControlOnMeetingUIParams(const HideRemoteControlOnMeetingUIParams& from);
  HideRemoteControlOnMeetingUIParams(HideRemoteControlOnMeetingUIParams&& from) noexcept
    : HideRemoteControlOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline HideRemoteControlOnMeetingUIParams& operator=(const HideRemoteControlOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideRemoteControlOnMeetingUIParams& operator=(HideRemoteControlOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideRemoteControlOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideRemoteControlOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const HideRemoteControlOnMeetingUIParams*>(
               &_HideRemoteControlOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(HideRemoteControlOnMeetingUIParams& a, HideRemoteControlOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideRemoteControlOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideRemoteControlOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideRemoteControlOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideRemoteControlOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideRemoteControlOnMeetingUIParams& from);
  void MergeFrom(const HideRemoteControlOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideRemoteControlOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams";
  }
  protected:
  explicit HideRemoteControlOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideQAOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideQAOnMeetingUIParams) */ {
 public:
  inline HideQAOnMeetingUIParams() : HideQAOnMeetingUIParams(nullptr) {}
  ~HideQAOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR HideQAOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideQAOnMeetingUIParams(const HideQAOnMeetingUIParams& from);
  HideQAOnMeetingUIParams(HideQAOnMeetingUIParams&& from) noexcept
    : HideQAOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline HideQAOnMeetingUIParams& operator=(const HideQAOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideQAOnMeetingUIParams& operator=(HideQAOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideQAOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideQAOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const HideQAOnMeetingUIParams*>(
               &_HideQAOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(HideQAOnMeetingUIParams& a, HideQAOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideQAOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideQAOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideQAOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideQAOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideQAOnMeetingUIParams& from);
  void MergeFrom(const HideQAOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideQAOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideQAOnMeetingUIParams";
  }
  protected:
  explicit HideQAOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideQAOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HidePollOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HidePollOnMeetingUIParams) */ {
 public:
  inline HidePollOnMeetingUIParams() : HidePollOnMeetingUIParams(nullptr) {}
  ~HidePollOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR HidePollOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HidePollOnMeetingUIParams(const HidePollOnMeetingUIParams& from);
  HidePollOnMeetingUIParams(HidePollOnMeetingUIParams&& from) noexcept
    : HidePollOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline HidePollOnMeetingUIParams& operator=(const HidePollOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HidePollOnMeetingUIParams& operator=(HidePollOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HidePollOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HidePollOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const HidePollOnMeetingUIParams*>(
               &_HidePollOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(HidePollOnMeetingUIParams& a, HidePollOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HidePollOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HidePollOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HidePollOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HidePollOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HidePollOnMeetingUIParams& from);
  void MergeFrom(const HidePollOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HidePollOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HidePollOnMeetingUIParams";
  }
  protected:
  explicit HidePollOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HidePollOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableInputMeetingPasswordDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams) */ {
 public:
  inline EnableInputMeetingPasswordDlgParams() : EnableInputMeetingPasswordDlgParams(nullptr) {}
  ~EnableInputMeetingPasswordDlgParams() override;
  explicit PROTOBUF_CONSTEXPR EnableInputMeetingPasswordDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableInputMeetingPasswordDlgParams(const EnableInputMeetingPasswordDlgParams& from);
  EnableInputMeetingPasswordDlgParams(EnableInputMeetingPasswordDlgParams&& from) noexcept
    : EnableInputMeetingPasswordDlgParams() {
    *this = ::std::move(from);
  }

  inline EnableInputMeetingPasswordDlgParams& operator=(const EnableInputMeetingPasswordDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableInputMeetingPasswordDlgParams& operator=(EnableInputMeetingPasswordDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableInputMeetingPasswordDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableInputMeetingPasswordDlgParams* internal_default_instance() {
    return reinterpret_cast<const EnableInputMeetingPasswordDlgParams*>(
               &_EnableInputMeetingPasswordDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(EnableInputMeetingPasswordDlgParams& a, EnableInputMeetingPasswordDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableInputMeetingPasswordDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableInputMeetingPasswordDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableInputMeetingPasswordDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableInputMeetingPasswordDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableInputMeetingPasswordDlgParams& from);
  void MergeFrom(const EnableInputMeetingPasswordDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableInputMeetingPasswordDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams";
  }
  protected:
  explicit EnableInputMeetingPasswordDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableInputMeetingScreenNameDlgParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams) */ {
 public:
  inline EnableInputMeetingScreenNameDlgParams() : EnableInputMeetingScreenNameDlgParams(nullptr) {}
  ~EnableInputMeetingScreenNameDlgParams() override;
  explicit PROTOBUF_CONSTEXPR EnableInputMeetingScreenNameDlgParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableInputMeetingScreenNameDlgParams(const EnableInputMeetingScreenNameDlgParams& from);
  EnableInputMeetingScreenNameDlgParams(EnableInputMeetingScreenNameDlgParams&& from) noexcept
    : EnableInputMeetingScreenNameDlgParams() {
    *this = ::std::move(from);
  }

  inline EnableInputMeetingScreenNameDlgParams& operator=(const EnableInputMeetingScreenNameDlgParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableInputMeetingScreenNameDlgParams& operator=(EnableInputMeetingScreenNameDlgParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableInputMeetingScreenNameDlgParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableInputMeetingScreenNameDlgParams* internal_default_instance() {
    return reinterpret_cast<const EnableInputMeetingScreenNameDlgParams*>(
               &_EnableInputMeetingScreenNameDlgParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(EnableInputMeetingScreenNameDlgParams& a, EnableInputMeetingScreenNameDlgParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableInputMeetingScreenNameDlgParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableInputMeetingScreenNameDlgParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableInputMeetingScreenNameDlgParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableInputMeetingScreenNameDlgParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableInputMeetingScreenNameDlgParams& from);
  void MergeFrom(const EnableInputMeetingScreenNameDlgParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableInputMeetingScreenNameDlgParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams";
  }
  protected:
  explicit EnableInputMeetingScreenNameDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectWebinarNeedRegisterParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams) */ {
 public:
  inline RedirectWebinarNeedRegisterParams() : RedirectWebinarNeedRegisterParams(nullptr) {}
  ~RedirectWebinarNeedRegisterParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectWebinarNeedRegisterParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectWebinarNeedRegisterParams(const RedirectWebinarNeedRegisterParams& from);
  RedirectWebinarNeedRegisterParams(RedirectWebinarNeedRegisterParams&& from) noexcept
    : RedirectWebinarNeedRegisterParams() {
    *this = ::std::move(from);
  }

  inline RedirectWebinarNeedRegisterParams& operator=(const RedirectWebinarNeedRegisterParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectWebinarNeedRegisterParams& operator=(RedirectWebinarNeedRegisterParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectWebinarNeedRegisterParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectWebinarNeedRegisterParams* internal_default_instance() {
    return reinterpret_cast<const RedirectWebinarNeedRegisterParams*>(
               &_RedirectWebinarNeedRegisterParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(RedirectWebinarNeedRegisterParams& a, RedirectWebinarNeedRegisterParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectWebinarNeedRegisterParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectWebinarNeedRegisterParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectWebinarNeedRegisterParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectWebinarNeedRegisterParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectWebinarNeedRegisterParams& from);
  void MergeFrom(const RedirectWebinarNeedRegisterParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectWebinarNeedRegisterParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectWebinarNeedRegisterParams";
  }
  protected:
  explicit RedirectWebinarNeedRegisterParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RedirectEndOtherMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RedirectEndOtherMeetingParams) */ {
 public:
  inline RedirectEndOtherMeetingParams() : RedirectEndOtherMeetingParams(nullptr) {}
  ~RedirectEndOtherMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR RedirectEndOtherMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedirectEndOtherMeetingParams(const RedirectEndOtherMeetingParams& from);
  RedirectEndOtherMeetingParams(RedirectEndOtherMeetingParams&& from) noexcept
    : RedirectEndOtherMeetingParams() {
    *this = ::std::move(from);
  }

  inline RedirectEndOtherMeetingParams& operator=(const RedirectEndOtherMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectEndOtherMeetingParams& operator=(RedirectEndOtherMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RedirectEndOtherMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedirectEndOtherMeetingParams* internal_default_instance() {
    return reinterpret_cast<const RedirectEndOtherMeetingParams*>(
               &_RedirectEndOtherMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(RedirectEndOtherMeetingParams& a, RedirectEndOtherMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectEndOtherMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectEndOtherMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedirectEndOtherMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedirectEndOtherMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RedirectEndOtherMeetingParams& from);
  void MergeFrom(const RedirectEndOtherMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectEndOtherMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RedirectEndOtherMeetingParams";
  }
  protected:
  explicit RedirectEndOtherMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRedirectFieldNumber = 1,
  };
  // optional bool bRedirect = 1;
  bool has_bredirect() const;
  void clear_bredirect() ;
  bool bredirect() const;
  void set_bredirect(bool value);

  private:
  bool _internal_bredirect() const;
  void _internal_set_bredirect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bredirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableForceAutoStartMyVideoWhenJoinMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams) */ {
 public:
  inline EnableForceAutoStartMyVideoWhenJoinMeetingParams() : EnableForceAutoStartMyVideoWhenJoinMeetingParams(nullptr) {}
  ~EnableForceAutoStartMyVideoWhenJoinMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR EnableForceAutoStartMyVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableForceAutoStartMyVideoWhenJoinMeetingParams(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from);
  EnableForceAutoStartMyVideoWhenJoinMeetingParams(EnableForceAutoStartMyVideoWhenJoinMeetingParams&& from) noexcept
    : EnableForceAutoStartMyVideoWhenJoinMeetingParams() {
    *this = ::std::move(from);
  }

  inline EnableForceAutoStartMyVideoWhenJoinMeetingParams& operator=(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableForceAutoStartMyVideoWhenJoinMeetingParams& operator=(EnableForceAutoStartMyVideoWhenJoinMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableForceAutoStartMyVideoWhenJoinMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableForceAutoStartMyVideoWhenJoinMeetingParams* internal_default_instance() {
    return reinterpret_cast<const EnableForceAutoStartMyVideoWhenJoinMeetingParams*>(
               &_EnableForceAutoStartMyVideoWhenJoinMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(EnableForceAutoStartMyVideoWhenJoinMeetingParams& a, EnableForceAutoStartMyVideoWhenJoinMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableForceAutoStartMyVideoWhenJoinMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableForceAutoStartMyVideoWhenJoinMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableForceAutoStartMyVideoWhenJoinMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableForceAutoStartMyVideoWhenJoinMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from);
  void MergeFrom(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableForceAutoStartMyVideoWhenJoinMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams";
  }
  protected:
  explicit EnableForceAutoStartMyVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableForceAutoStopMyVideoWhenJoinMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams) */ {
 public:
  inline EnableForceAutoStopMyVideoWhenJoinMeetingParams() : EnableForceAutoStopMyVideoWhenJoinMeetingParams(nullptr) {}
  ~EnableForceAutoStopMyVideoWhenJoinMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR EnableForceAutoStopMyVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableForceAutoStopMyVideoWhenJoinMeetingParams(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from);
  EnableForceAutoStopMyVideoWhenJoinMeetingParams(EnableForceAutoStopMyVideoWhenJoinMeetingParams&& from) noexcept
    : EnableForceAutoStopMyVideoWhenJoinMeetingParams() {
    *this = ::std::move(from);
  }

  inline EnableForceAutoStopMyVideoWhenJoinMeetingParams& operator=(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableForceAutoStopMyVideoWhenJoinMeetingParams& operator=(EnableForceAutoStopMyVideoWhenJoinMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableForceAutoStopMyVideoWhenJoinMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableForceAutoStopMyVideoWhenJoinMeetingParams* internal_default_instance() {
    return reinterpret_cast<const EnableForceAutoStopMyVideoWhenJoinMeetingParams*>(
               &_EnableForceAutoStopMyVideoWhenJoinMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(EnableForceAutoStopMyVideoWhenJoinMeetingParams& a, EnableForceAutoStopMyVideoWhenJoinMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableForceAutoStopMyVideoWhenJoinMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableForceAutoStopMyVideoWhenJoinMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableForceAutoStopMyVideoWhenJoinMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableForceAutoStopMyVideoWhenJoinMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from);
  void MergeFrom(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableForceAutoStopMyVideoWhenJoinMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams";
  }
  protected:
  explicit EnableForceAutoStopMyVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams) */ {
 public:
  inline DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams() : DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(nullptr) {}
  ~DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from);
  DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams&& from) noexcept
    : DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams() {
    *this = ::std::move(from);
  }

  inline DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& operator=(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& operator=(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* internal_default_instance() {
    return reinterpret_cast<const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams*>(
               &_DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& a, DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from);
  void MergeFrom(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams";
  }
  protected:
  explicit DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableShowJoinMeetingWndParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableShowJoinMeetingWndParams) */ {
 public:
  inline DisableShowJoinMeetingWndParams() : DisableShowJoinMeetingWndParams(nullptr) {}
  ~DisableShowJoinMeetingWndParams() override;
  explicit PROTOBUF_CONSTEXPR DisableShowJoinMeetingWndParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableShowJoinMeetingWndParams(const DisableShowJoinMeetingWndParams& from);
  DisableShowJoinMeetingWndParams(DisableShowJoinMeetingWndParams&& from) noexcept
    : DisableShowJoinMeetingWndParams() {
    *this = ::std::move(from);
  }

  inline DisableShowJoinMeetingWndParams& operator=(const DisableShowJoinMeetingWndParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableShowJoinMeetingWndParams& operator=(DisableShowJoinMeetingWndParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableShowJoinMeetingWndParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableShowJoinMeetingWndParams* internal_default_instance() {
    return reinterpret_cast<const DisableShowJoinMeetingWndParams*>(
               &_DisableShowJoinMeetingWndParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(DisableShowJoinMeetingWndParams& a, DisableShowJoinMeetingWndParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableShowJoinMeetingWndParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableShowJoinMeetingWndParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableShowJoinMeetingWndParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableShowJoinMeetingWndParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableShowJoinMeetingWndParams& from);
  void MergeFrom(const DisableShowJoinMeetingWndParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableShowJoinMeetingWndParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableShowJoinMeetingWndParams";
  }
  protected:
  explicit DisableShowJoinMeetingWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableToolbarInviteButtonClickOriginActionParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams) */ {
 public:
  inline DisableToolbarInviteButtonClickOriginActionParams() : DisableToolbarInviteButtonClickOriginActionParams(nullptr) {}
  ~DisableToolbarInviteButtonClickOriginActionParams() override;
  explicit PROTOBUF_CONSTEXPR DisableToolbarInviteButtonClickOriginActionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableToolbarInviteButtonClickOriginActionParams(const DisableToolbarInviteButtonClickOriginActionParams& from);
  DisableToolbarInviteButtonClickOriginActionParams(DisableToolbarInviteButtonClickOriginActionParams&& from) noexcept
    : DisableToolbarInviteButtonClickOriginActionParams() {
    *this = ::std::move(from);
  }

  inline DisableToolbarInviteButtonClickOriginActionParams& operator=(const DisableToolbarInviteButtonClickOriginActionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableToolbarInviteButtonClickOriginActionParams& operator=(DisableToolbarInviteButtonClickOriginActionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableToolbarInviteButtonClickOriginActionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableToolbarInviteButtonClickOriginActionParams* internal_default_instance() {
    return reinterpret_cast<const DisableToolbarInviteButtonClickOriginActionParams*>(
               &_DisableToolbarInviteButtonClickOriginActionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(DisableToolbarInviteButtonClickOriginActionParams& a, DisableToolbarInviteButtonClickOriginActionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableToolbarInviteButtonClickOriginActionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableToolbarInviteButtonClickOriginActionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableToolbarInviteButtonClickOriginActionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableToolbarInviteButtonClickOriginActionParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableToolbarInviteButtonClickOriginActionParams& from);
  void MergeFrom(const DisableToolbarInviteButtonClickOriginActionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableToolbarInviteButtonClickOriginActionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams";
  }
  protected:
  explicit DisableToolbarInviteButtonClickOriginActionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetShowVideoOptimizeChkboxParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams) */ {
 public:
  inline SetShowVideoOptimizeChkboxParams() : SetShowVideoOptimizeChkboxParams(nullptr) {}
  ~SetShowVideoOptimizeChkboxParams() override;
  explicit PROTOBUF_CONSTEXPR SetShowVideoOptimizeChkboxParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetShowVideoOptimizeChkboxParams(const SetShowVideoOptimizeChkboxParams& from);
  SetShowVideoOptimizeChkboxParams(SetShowVideoOptimizeChkboxParams&& from) noexcept
    : SetShowVideoOptimizeChkboxParams() {
    *this = ::std::move(from);
  }

  inline SetShowVideoOptimizeChkboxParams& operator=(const SetShowVideoOptimizeChkboxParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShowVideoOptimizeChkboxParams& operator=(SetShowVideoOptimizeChkboxParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetShowVideoOptimizeChkboxParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetShowVideoOptimizeChkboxParams* internal_default_instance() {
    return reinterpret_cast<const SetShowVideoOptimizeChkboxParams*>(
               &_SetShowVideoOptimizeChkboxParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(SetShowVideoOptimizeChkboxParams& a, SetShowVideoOptimizeChkboxParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShowVideoOptimizeChkboxParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetShowVideoOptimizeChkboxParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetShowVideoOptimizeChkboxParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetShowVideoOptimizeChkboxParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetShowVideoOptimizeChkboxParams& from);
  void MergeFrom(const SetShowVideoOptimizeChkboxParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetShowVideoOptimizeChkboxParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams";
  }
  protected:
  explicit SetShowVideoOptimizeChkboxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBShowFieldNumber = 1,
  };
  // optional bool bShow = 1;
  bool has_bshow() const;
  void clear_bshow() ;
  bool bshow() const;
  void set_bshow(bool value);

  private:
  bool _internal_bshow() const;
  void _internal_set_bshow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bshow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class InputMeetingPasswordAndScreenNameParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams) */ {
 public:
  inline InputMeetingPasswordAndScreenNameParams() : InputMeetingPasswordAndScreenNameParams(nullptr) {}
  ~InputMeetingPasswordAndScreenNameParams() override;
  explicit PROTOBUF_CONSTEXPR InputMeetingPasswordAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputMeetingPasswordAndScreenNameParams(const InputMeetingPasswordAndScreenNameParams& from);
  InputMeetingPasswordAndScreenNameParams(InputMeetingPasswordAndScreenNameParams&& from) noexcept
    : InputMeetingPasswordAndScreenNameParams() {
    *this = ::std::move(from);
  }

  inline InputMeetingPasswordAndScreenNameParams& operator=(const InputMeetingPasswordAndScreenNameParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputMeetingPasswordAndScreenNameParams& operator=(InputMeetingPasswordAndScreenNameParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InputMeetingPasswordAndScreenNameParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputMeetingPasswordAndScreenNameParams* internal_default_instance() {
    return reinterpret_cast<const InputMeetingPasswordAndScreenNameParams*>(
               &_InputMeetingPasswordAndScreenNameParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(InputMeetingPasswordAndScreenNameParams& a, InputMeetingPasswordAndScreenNameParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InputMeetingPasswordAndScreenNameParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputMeetingPasswordAndScreenNameParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputMeetingPasswordAndScreenNameParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputMeetingPasswordAndScreenNameParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InputMeetingPasswordAndScreenNameParams& from);
  void MergeFrom(const InputMeetingPasswordAndScreenNameParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputMeetingPasswordAndScreenNameParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams";
  }
  protected:
  explicit InputMeetingPasswordAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPswFieldNumber = 1,
    kScreenNameFieldNumber = 2,
  };
  // optional string psw = 1;
  bool has_psw() const;
  void clear_psw() ;
  const std::string& psw() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_psw(Arg_&& arg, Args_... args);
  std::string* mutable_psw();
  PROTOBUF_NODISCARD std::string* release_psw();
  void set_allocated_psw(std::string* ptr);

  private:
  const std::string& _internal_psw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_psw(
      const std::string& value);
  std::string* _internal_mutable_psw();

  public:
  // optional string screenName = 2;
  bool has_screenname() const;
  void clear_screenname() ;
  const std::string& screenname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_screenname(Arg_&& arg, Args_... args);
  std::string* mutable_screenname();
  PROTOBUF_NODISCARD std::string* release_screenname();
  void set_allocated_screenname(std::string* ptr);

  private:
  const std::string& _internal_screenname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_screenname(
      const std::string& value);
  std::string* _internal_mutable_screenname();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class InputMeetingIDAndScreenNameParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams) */ {
 public:
  inline InputMeetingIDAndScreenNameParams() : InputMeetingIDAndScreenNameParams(nullptr) {}
  ~InputMeetingIDAndScreenNameParams() override;
  explicit PROTOBUF_CONSTEXPR InputMeetingIDAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputMeetingIDAndScreenNameParams(const InputMeetingIDAndScreenNameParams& from);
  InputMeetingIDAndScreenNameParams(InputMeetingIDAndScreenNameParams&& from) noexcept
    : InputMeetingIDAndScreenNameParams() {
    *this = ::std::move(from);
  }

  inline InputMeetingIDAndScreenNameParams& operator=(const InputMeetingIDAndScreenNameParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputMeetingIDAndScreenNameParams& operator=(InputMeetingIDAndScreenNameParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InputMeetingIDAndScreenNameParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputMeetingIDAndScreenNameParams* internal_default_instance() {
    return reinterpret_cast<const InputMeetingIDAndScreenNameParams*>(
               &_InputMeetingIDAndScreenNameParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(InputMeetingIDAndScreenNameParams& a, InputMeetingIDAndScreenNameParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InputMeetingIDAndScreenNameParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputMeetingIDAndScreenNameParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputMeetingIDAndScreenNameParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputMeetingIDAndScreenNameParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InputMeetingIDAndScreenNameParams& from);
  void MergeFrom(const InputMeetingIDAndScreenNameParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputMeetingIDAndScreenNameParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.InputMeetingIDAndScreenNameParams";
  }
  protected:
  explicit InputMeetingIDAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeetingIDFieldNumber = 1,
    kScreenNameFieldNumber = 2,
  };
  // optional string meetingID = 1;
  bool has_meetingid() const;
  void clear_meetingid() ;
  const std::string& meetingid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_meetingid(Arg_&& arg, Args_... args);
  std::string* mutable_meetingid();
  PROTOBUF_NODISCARD std::string* release_meetingid();
  void set_allocated_meetingid(std::string* ptr);

  private:
  const std::string& _internal_meetingid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meetingid(
      const std::string& value);
  std::string* _internal_mutable_meetingid();

  public:
  // optional string screenName = 2;
  bool has_screenname() const;
  void clear_screenname() ;
  const std::string& screenname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_screenname(Arg_&& arg, Args_... args);
  std::string* mutable_screenname();
  PROTOBUF_NODISCARD std::string* release_screenname();
  void set_allocated_screenname(std::string* ptr);

  private:
  const std::string& _internal_screenname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_screenname(
      const std::string& value);
  std::string* _internal_mutable_screenname();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meetingid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class InputMeetingScreenNameParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.InputMeetingScreenNameParams) */ {
 public:
  inline InputMeetingScreenNameParams() : InputMeetingScreenNameParams(nullptr) {}
  ~InputMeetingScreenNameParams() override;
  explicit PROTOBUF_CONSTEXPR InputMeetingScreenNameParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputMeetingScreenNameParams(const InputMeetingScreenNameParams& from);
  InputMeetingScreenNameParams(InputMeetingScreenNameParams&& from) noexcept
    : InputMeetingScreenNameParams() {
    *this = ::std::move(from);
  }

  inline InputMeetingScreenNameParams& operator=(const InputMeetingScreenNameParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputMeetingScreenNameParams& operator=(InputMeetingScreenNameParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InputMeetingScreenNameParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputMeetingScreenNameParams* internal_default_instance() {
    return reinterpret_cast<const InputMeetingScreenNameParams*>(
               &_InputMeetingScreenNameParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(InputMeetingScreenNameParams& a, InputMeetingScreenNameParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InputMeetingScreenNameParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputMeetingScreenNameParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputMeetingScreenNameParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputMeetingScreenNameParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InputMeetingScreenNameParams& from);
  void MergeFrom(const InputMeetingScreenNameParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputMeetingScreenNameParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.InputMeetingScreenNameParams";
  }
  protected:
  explicit InputMeetingScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenNameFieldNumber = 1,
  };
  // optional string screenName = 1;
  bool has_screenname() const;
  void clear_screenname() ;
  const std::string& screenname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_screenname(Arg_&& arg, Args_... args);
  std::string* mutable_screenname();
  PROTOBUF_NODISCARD std::string* release_screenname();
  void set_allocated_screenname(std::string* ptr);

  private:
  const std::string& _internal_screenname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_screenname(
      const std::string& value);
  std::string* _internal_mutable_screenname();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.InputMeetingScreenNameParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class InputWebinarRegisterEmailAndScreenNameParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams) */ {
 public:
  inline InputWebinarRegisterEmailAndScreenNameParams() : InputWebinarRegisterEmailAndScreenNameParams(nullptr) {}
  ~InputWebinarRegisterEmailAndScreenNameParams() override;
  explicit PROTOBUF_CONSTEXPR InputWebinarRegisterEmailAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputWebinarRegisterEmailAndScreenNameParams(const InputWebinarRegisterEmailAndScreenNameParams& from);
  InputWebinarRegisterEmailAndScreenNameParams(InputWebinarRegisterEmailAndScreenNameParams&& from) noexcept
    : InputWebinarRegisterEmailAndScreenNameParams() {
    *this = ::std::move(from);
  }

  inline InputWebinarRegisterEmailAndScreenNameParams& operator=(const InputWebinarRegisterEmailAndScreenNameParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputWebinarRegisterEmailAndScreenNameParams& operator=(InputWebinarRegisterEmailAndScreenNameParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InputWebinarRegisterEmailAndScreenNameParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputWebinarRegisterEmailAndScreenNameParams* internal_default_instance() {
    return reinterpret_cast<const InputWebinarRegisterEmailAndScreenNameParams*>(
               &_InputWebinarRegisterEmailAndScreenNameParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(InputWebinarRegisterEmailAndScreenNameParams& a, InputWebinarRegisterEmailAndScreenNameParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InputWebinarRegisterEmailAndScreenNameParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputWebinarRegisterEmailAndScreenNameParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputWebinarRegisterEmailAndScreenNameParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputWebinarRegisterEmailAndScreenNameParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InputWebinarRegisterEmailAndScreenNameParams& from);
  void MergeFrom(const InputWebinarRegisterEmailAndScreenNameParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputWebinarRegisterEmailAndScreenNameParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams";
  }
  protected:
  explicit InputWebinarRegisterEmailAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kScreenNameFieldNumber = 2,
  };
  // optional string email = 1;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // optional string screenName = 2;
  bool has_screenname() const;
  void clear_screenname() ;
  const std::string& screenname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_screenname(Arg_&& arg, Args_... args);
  std::string* mutable_screenname();
  PROTOBUF_NODISCARD std::string* release_screenname();
  void set_allocated_screenname(std::string* ptr);

  private:
  const std::string& _internal_screenname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_screenname(
      const std::string& value);
  std::string* _internal_mutable_screenname();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class CallOutH323Params final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.CallOutH323Params) */ {
 public:
  inline CallOutH323Params() : CallOutH323Params(nullptr) {}
  ~CallOutH323Params() override;
  explicit PROTOBUF_CONSTEXPR CallOutH323Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallOutH323Params(const CallOutH323Params& from);
  CallOutH323Params(CallOutH323Params&& from) noexcept
    : CallOutH323Params() {
    *this = ::std::move(from);
  }

  inline CallOutH323Params& operator=(const CallOutH323Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallOutH323Params& operator=(CallOutH323Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallOutH323Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallOutH323Params* internal_default_instance() {
    return reinterpret_cast<const CallOutH323Params*>(
               &_CallOutH323Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CallOutH323Params& a, CallOutH323Params& b) {
    a.Swap(&b);
  }
  inline void Swap(CallOutH323Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallOutH323Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallOutH323Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallOutH323Params>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallOutH323Params& from);
  void MergeFrom(const CallOutH323Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallOutH323Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.CallOutH323Params";
  }
  protected:
  explicit CallOutH323Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kDeviceIPFieldNumber = 2,
    kDeviceE164NumFieldNumber = 3,
    kH323DeviceTypeFieldNumber = 4,
  };
  // optional string deviceName = 1;
  bool has_devicename() const;
  void clear_devicename() ;
  const std::string& devicename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* ptr);

  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(
      const std::string& value);
  std::string* _internal_mutable_devicename();

  public:
  // optional string deviceIP = 2;
  bool has_deviceip() const;
  void clear_deviceip() ;
  const std::string& deviceip() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceip(Arg_&& arg, Args_... args);
  std::string* mutable_deviceip();
  PROTOBUF_NODISCARD std::string* release_deviceip();
  void set_allocated_deviceip(std::string* ptr);

  private:
  const std::string& _internal_deviceip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceip(
      const std::string& value);
  std::string* _internal_mutable_deviceip();

  public:
  // optional string deviceE164num = 3;
  bool has_devicee164num() const;
  void clear_devicee164num() ;
  const std::string& devicee164num() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicee164num(Arg_&& arg, Args_... args);
  std::string* mutable_devicee164num();
  PROTOBUF_NODISCARD std::string* release_devicee164num();
  void set_allocated_devicee164num(std::string* ptr);

  private:
  const std::string& _internal_devicee164num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicee164num(
      const std::string& value);
  std::string* _internal_mutable_devicee164num();

  public:
  // optional int32 h323DeviceType = 4;
  bool has_h323devicetype() const;
  void clear_h323devicetype() ;
  ::int32_t h323devicetype() const;
  void set_h323devicetype(::int32_t value);

  private:
  ::int32_t _internal_h323devicetype() const;
  void _internal_set_h323devicetype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.CallOutH323Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicee164num_;
    ::int32_t h323devicetype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class GetUserInfoByUserIDParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.GetUserInfoByUserIDParams) */ {
 public:
  inline GetUserInfoByUserIDParams() : GetUserInfoByUserIDParams(nullptr) {}
  ~GetUserInfoByUserIDParams() override;
  explicit PROTOBUF_CONSTEXPR GetUserInfoByUserIDParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserInfoByUserIDParams(const GetUserInfoByUserIDParams& from);
  GetUserInfoByUserIDParams(GetUserInfoByUserIDParams&& from) noexcept
    : GetUserInfoByUserIDParams() {
    *this = ::std::move(from);
  }

  inline GetUserInfoByUserIDParams& operator=(const GetUserInfoByUserIDParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserInfoByUserIDParams& operator=(GetUserInfoByUserIDParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetUserInfoByUserIDParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserInfoByUserIDParams* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoByUserIDParams*>(
               &_GetUserInfoByUserIDParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(GetUserInfoByUserIDParams& a, GetUserInfoByUserIDParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserInfoByUserIDParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserInfoByUserIDParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserInfoByUserIDParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserInfoByUserIDParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetUserInfoByUserIDParams& from);
  void MergeFrom(const GetUserInfoByUserIDParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetUserInfoByUserIDParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.GetUserInfoByUserIDParams";
  }
  protected:
  explicit GetUserInfoByUserIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // optional uint32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.GetUserInfoByUserIDParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class CanStartRecordingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.CanStartRecordingParams) */ {
 public:
  inline CanStartRecordingParams() : CanStartRecordingParams(nullptr) {}
  ~CanStartRecordingParams() override;
  explicit PROTOBUF_CONSTEXPR CanStartRecordingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanStartRecordingParams(const CanStartRecordingParams& from);
  CanStartRecordingParams(CanStartRecordingParams&& from) noexcept
    : CanStartRecordingParams() {
    *this = ::std::move(from);
  }

  inline CanStartRecordingParams& operator=(const CanStartRecordingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanStartRecordingParams& operator=(CanStartRecordingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CanStartRecordingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanStartRecordingParams* internal_default_instance() {
    return reinterpret_cast<const CanStartRecordingParams*>(
               &_CanStartRecordingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CanStartRecordingParams& a, CanStartRecordingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CanStartRecordingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanStartRecordingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanStartRecordingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanStartRecordingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CanStartRecordingParams& from);
  void MergeFrom(const CanStartRecordingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CanStartRecordingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.CanStartRecordingParams";
  }
  protected:
  explicit CanStartRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBCloudRecordingFieldNumber = 1,
    kUserIDFieldNumber = 2,
  };
  // optional bool bCloudRecording = 1;
  bool has_bcloudrecording() const;
  void clear_bcloudrecording() ;
  bool bcloudrecording() const;
  void set_bcloudrecording(bool value);

  private:
  bool _internal_bcloudrecording() const;
  void _internal_set_bcloudrecording(bool value);

  public:
  // optional uint32 userID = 2;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.CanStartRecordingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bcloudrecording_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class IsSupportLocalRecordingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.IsSupportLocalRecordingParams) */ {
 public:
  inline IsSupportLocalRecordingParams() : IsSupportLocalRecordingParams(nullptr) {}
  ~IsSupportLocalRecordingParams() override;
  explicit PROTOBUF_CONSTEXPR IsSupportLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsSupportLocalRecordingParams(const IsSupportLocalRecordingParams& from);
  IsSupportLocalRecordingParams(IsSupportLocalRecordingParams&& from) noexcept
    : IsSupportLocalRecordingParams() {
    *this = ::std::move(from);
  }

  inline IsSupportLocalRecordingParams& operator=(const IsSupportLocalRecordingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsSupportLocalRecordingParams& operator=(IsSupportLocalRecordingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IsSupportLocalRecordingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsSupportLocalRecordingParams* internal_default_instance() {
    return reinterpret_cast<const IsSupportLocalRecordingParams*>(
               &_IsSupportLocalRecordingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(IsSupportLocalRecordingParams& a, IsSupportLocalRecordingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(IsSupportLocalRecordingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsSupportLocalRecordingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsSupportLocalRecordingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsSupportLocalRecordingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IsSupportLocalRecordingParams& from);
  void MergeFrom(const IsSupportLocalRecordingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsSupportLocalRecordingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.IsSupportLocalRecordingParams";
  }
  protected:
  explicit IsSupportLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // optional uint32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.IsSupportLocalRecordingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class AllowLocalRecordingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.AllowLocalRecordingParams) */ {
 public:
  inline AllowLocalRecordingParams() : AllowLocalRecordingParams(nullptr) {}
  ~AllowLocalRecordingParams() override;
  explicit PROTOBUF_CONSTEXPR AllowLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllowLocalRecordingParams(const AllowLocalRecordingParams& from);
  AllowLocalRecordingParams(AllowLocalRecordingParams&& from) noexcept
    : AllowLocalRecordingParams() {
    *this = ::std::move(from);
  }

  inline AllowLocalRecordingParams& operator=(const AllowLocalRecordingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowLocalRecordingParams& operator=(AllowLocalRecordingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AllowLocalRecordingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllowLocalRecordingParams* internal_default_instance() {
    return reinterpret_cast<const AllowLocalRecordingParams*>(
               &_AllowLocalRecordingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(AllowLocalRecordingParams& a, AllowLocalRecordingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowLocalRecordingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowLocalRecordingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllowLocalRecordingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllowLocalRecordingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AllowLocalRecordingParams& from);
  void MergeFrom(const AllowLocalRecordingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllowLocalRecordingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.AllowLocalRecordingParams";
  }
  protected:
  explicit AllowLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // optional int32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.AllowLocalRecordingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisAllowLocalRecordingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisAllowLocalRecordingParams) */ {
 public:
  inline DisAllowLocalRecordingParams() : DisAllowLocalRecordingParams(nullptr) {}
  ~DisAllowLocalRecordingParams() override;
  explicit PROTOBUF_CONSTEXPR DisAllowLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisAllowLocalRecordingParams(const DisAllowLocalRecordingParams& from);
  DisAllowLocalRecordingParams(DisAllowLocalRecordingParams&& from) noexcept
    : DisAllowLocalRecordingParams() {
    *this = ::std::move(from);
  }

  inline DisAllowLocalRecordingParams& operator=(const DisAllowLocalRecordingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisAllowLocalRecordingParams& operator=(DisAllowLocalRecordingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisAllowLocalRecordingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisAllowLocalRecordingParams* internal_default_instance() {
    return reinterpret_cast<const DisAllowLocalRecordingParams*>(
               &_DisAllowLocalRecordingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(DisAllowLocalRecordingParams& a, DisAllowLocalRecordingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisAllowLocalRecordingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisAllowLocalRecordingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisAllowLocalRecordingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisAllowLocalRecordingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisAllowLocalRecordingParams& from);
  void MergeFrom(const DisAllowLocalRecordingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisAllowLocalRecordingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisAllowLocalRecordingParams";
  }
  protected:
  explicit DisAllowLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // optional uint32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisAllowLocalRecordingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StartAppShareParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StartAppShareParams) */ {
 public:
  inline StartAppShareParams() : StartAppShareParams(nullptr) {}
  ~StartAppShareParams() override;
  explicit PROTOBUF_CONSTEXPR StartAppShareParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartAppShareParams(const StartAppShareParams& from);
  StartAppShareParams(StartAppShareParams&& from) noexcept
    : StartAppShareParams() {
    *this = ::std::move(from);
  }

  inline StartAppShareParams& operator=(const StartAppShareParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartAppShareParams& operator=(StartAppShareParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartAppShareParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartAppShareParams* internal_default_instance() {
    return reinterpret_cast<const StartAppShareParams*>(
               &_StartAppShareParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(StartAppShareParams& a, StartAppShareParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartAppShareParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartAppShareParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartAppShareParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartAppShareParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartAppShareParams& from);
  void MergeFrom(const StartAppShareParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartAppShareParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StartAppShareParams";
  }
  protected:
  explicit StartAppShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHShareAppFieldNumber = 1,
  };
  // optional string hShareApp = 1;
  bool has_hshareapp() const;
  void clear_hshareapp() ;
  const std::string& hshareapp() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hshareapp(Arg_&& arg, Args_... args);
  std::string* mutable_hshareapp();
  PROTOBUF_NODISCARD std::string* release_hshareapp();
  void set_allocated_hshareapp(std::string* ptr);

  private:
  const std::string& _internal_hshareapp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hshareapp(
      const std::string& value);
  std::string* _internal_mutable_hshareapp();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StartAppShareParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hshareapp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StartMonitorShareParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StartMonitorShareParams) */ {
 public:
  inline StartMonitorShareParams() : StartMonitorShareParams(nullptr) {}
  ~StartMonitorShareParams() override;
  explicit PROTOBUF_CONSTEXPR StartMonitorShareParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartMonitorShareParams(const StartMonitorShareParams& from);
  StartMonitorShareParams(StartMonitorShareParams&& from) noexcept
    : StartMonitorShareParams() {
    *this = ::std::move(from);
  }

  inline StartMonitorShareParams& operator=(const StartMonitorShareParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMonitorShareParams& operator=(StartMonitorShareParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartMonitorShareParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartMonitorShareParams* internal_default_instance() {
    return reinterpret_cast<const StartMonitorShareParams*>(
               &_StartMonitorShareParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(StartMonitorShareParams& a, StartMonitorShareParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMonitorShareParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMonitorShareParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartMonitorShareParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartMonitorShareParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartMonitorShareParams& from);
  void MergeFrom(const StartMonitorShareParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartMonitorShareParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StartMonitorShareParams";
  }
  protected:
  explicit StartMonitorShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorIDFieldNumber = 1,
  };
  // optional string monitorID = 1;
  bool has_monitorid() const;
  void clear_monitorid() ;
  const std::string& monitorid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_monitorid(Arg_&& arg, Args_... args);
  std::string* mutable_monitorid();
  PROTOBUF_NODISCARD std::string* release_monitorid();
  void set_allocated_monitorid(std::string* ptr);

  private:
  const std::string& _internal_monitorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_monitorid(
      const std::string& value);
  std::string* _internal_mutable_monitorid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StartMonitorShareParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monitorid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class MuteVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.MuteVideoParams) */ {
 public:
  inline MuteVideoParams() : MuteVideoParams(nullptr) {}
  ~MuteVideoParams() override;
  explicit PROTOBUF_CONSTEXPR MuteVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteVideoParams(const MuteVideoParams& from);
  MuteVideoParams(MuteVideoParams&& from) noexcept
    : MuteVideoParams() {
    *this = ::std::move(from);
  }

  inline MuteVideoParams& operator=(const MuteVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteVideoParams& operator=(MuteVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MuteVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteVideoParams* internal_default_instance() {
    return reinterpret_cast<const MuteVideoParams*>(
               &_MuteVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(MuteVideoParams& a, MuteVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MuteVideoParams& from);
  void MergeFrom(const MuteVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MuteVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.MuteVideoParams";
  }
  protected:
  explicit MuteVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // optional uint32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.MuteVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class UnMuteVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.UnMuteVideoParams) */ {
 public:
  inline UnMuteVideoParams() : UnMuteVideoParams(nullptr) {}
  ~UnMuteVideoParams() override;
  explicit PROTOBUF_CONSTEXPR UnMuteVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnMuteVideoParams(const UnMuteVideoParams& from);
  UnMuteVideoParams(UnMuteVideoParams&& from) noexcept
    : UnMuteVideoParams() {
    *this = ::std::move(from);
  }

  inline UnMuteVideoParams& operator=(const UnMuteVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnMuteVideoParams& operator=(UnMuteVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UnMuteVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnMuteVideoParams* internal_default_instance() {
    return reinterpret_cast<const UnMuteVideoParams*>(
               &_UnMuteVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(UnMuteVideoParams& a, UnMuteVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UnMuteVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnMuteVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnMuteVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnMuteVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnMuteVideoParams& from);
  void MergeFrom(const UnMuteVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnMuteVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.UnMuteVideoParams";
  }
  protected:
  explicit UnMuteVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // optional uint32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.UnMuteVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class PinVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.PinVideoParams) */ {
 public:
  inline PinVideoParams() : PinVideoParams(nullptr) {}
  ~PinVideoParams() override;
  explicit PROTOBUF_CONSTEXPR PinVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PinVideoParams(const PinVideoParams& from);
  PinVideoParams(PinVideoParams&& from) noexcept
    : PinVideoParams() {
    *this = ::std::move(from);
  }

  inline PinVideoParams& operator=(const PinVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinVideoParams& operator=(PinVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PinVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PinVideoParams* internal_default_instance() {
    return reinterpret_cast<const PinVideoParams*>(
               &_PinVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(PinVideoParams& a, PinVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PinVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PinVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PinVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PinVideoParams& from);
  void MergeFrom(const PinVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PinVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.PinVideoParams";
  }
  protected:
  explicit PinVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBPinFieldNumber = 1,
    kBFirstViewFieldNumber = 2,
    kUserIDFieldNumber = 3,
  };
  // optional bool bPin = 1;
  bool has_bpin() const;
  void clear_bpin() ;
  bool bpin() const;
  void set_bpin(bool value);

  private:
  bool _internal_bpin() const;
  void _internal_set_bpin(bool value);

  public:
  // optional bool bFirstView = 2;
  bool has_bfirstview() const;
  void clear_bfirstview() ;
  bool bfirstview() const;
  void set_bfirstview(bool value);

  private:
  bool _internal_bfirstview() const;
  void _internal_set_bfirstview(bool value);

  public:
  // optional uint32 userID = 3;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.PinVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bpin_;
    bool bfirstview_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SpotlightVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SpotlightVideoParams) */ {
 public:
  inline SpotlightVideoParams() : SpotlightVideoParams(nullptr) {}
  ~SpotlightVideoParams() override;
  explicit PROTOBUF_CONSTEXPR SpotlightVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpotlightVideoParams(const SpotlightVideoParams& from);
  SpotlightVideoParams(SpotlightVideoParams&& from) noexcept
    : SpotlightVideoParams() {
    *this = ::std::move(from);
  }

  inline SpotlightVideoParams& operator=(const SpotlightVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpotlightVideoParams& operator=(SpotlightVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SpotlightVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpotlightVideoParams* internal_default_instance() {
    return reinterpret_cast<const SpotlightVideoParams*>(
               &_SpotlightVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(SpotlightVideoParams& a, SpotlightVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SpotlightVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpotlightVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpotlightVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpotlightVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SpotlightVideoParams& from);
  void MergeFrom(const SpotlightVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpotlightVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SpotlightVideoParams";
  }
  protected:
  explicit SpotlightVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBSpotlightFieldNumber = 1,
    kUserIDFieldNumber = 2,
  };
  // optional bool bSpotlight = 1;
  bool has_bspotlight() const;
  void clear_bspotlight() ;
  bool bspotlight() const;
  void set_bspotlight(bool value);

  private:
  bool _internal_bspotlight() const;
  void _internal_set_bspotlight(bool value);

  public:
  // optional uint32 userID = 2;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SpotlightVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bspotlight_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideOrShowNoVideoUserOnVideoWallParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams) */ {
 public:
  inline HideOrShowNoVideoUserOnVideoWallParams() : HideOrShowNoVideoUserOnVideoWallParams(nullptr) {}
  ~HideOrShowNoVideoUserOnVideoWallParams() override;
  explicit PROTOBUF_CONSTEXPR HideOrShowNoVideoUserOnVideoWallParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideOrShowNoVideoUserOnVideoWallParams(const HideOrShowNoVideoUserOnVideoWallParams& from);
  HideOrShowNoVideoUserOnVideoWallParams(HideOrShowNoVideoUserOnVideoWallParams&& from) noexcept
    : HideOrShowNoVideoUserOnVideoWallParams() {
    *this = ::std::move(from);
  }

  inline HideOrShowNoVideoUserOnVideoWallParams& operator=(const HideOrShowNoVideoUserOnVideoWallParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideOrShowNoVideoUserOnVideoWallParams& operator=(HideOrShowNoVideoUserOnVideoWallParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideOrShowNoVideoUserOnVideoWallParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideOrShowNoVideoUserOnVideoWallParams* internal_default_instance() {
    return reinterpret_cast<const HideOrShowNoVideoUserOnVideoWallParams*>(
               &_HideOrShowNoVideoUserOnVideoWallParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(HideOrShowNoVideoUserOnVideoWallParams& a, HideOrShowNoVideoUserOnVideoWallParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideOrShowNoVideoUserOnVideoWallParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideOrShowNoVideoUserOnVideoWallParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideOrShowNoVideoUserOnVideoWallParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideOrShowNoVideoUserOnVideoWallParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideOrShowNoVideoUserOnVideoWallParams& from);
  void MergeFrom(const HideOrShowNoVideoUserOnVideoWallParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideOrShowNoVideoUserOnVideoWallParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams";
  }
  protected:
  explicit HideOrShowNoVideoUserOnVideoWallParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class CreateRendererParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.CreateRendererParams) */ {
 public:
  inline CreateRendererParams() : CreateRendererParams(nullptr) {}
  ~CreateRendererParams() override;
  explicit PROTOBUF_CONSTEXPR CreateRendererParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRendererParams(const CreateRendererParams& from);
  CreateRendererParams(CreateRendererParams&& from) noexcept
    : CreateRendererParams() {
    *this = ::std::move(from);
  }

  inline CreateRendererParams& operator=(const CreateRendererParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRendererParams& operator=(CreateRendererParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CreateRendererParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRendererParams* internal_default_instance() {
    return reinterpret_cast<const CreateRendererParams*>(
               &_CreateRendererParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CreateRendererParams& a, CreateRendererParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRendererParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRendererParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRendererParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRendererParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CreateRendererParams& from);
  void MergeFrom(const CreateRendererParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateRendererParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.CreateRendererParams";
  }
  protected:
  explicit CreateRendererParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvHandleFieldNumber = 1,
  };
  // optional uint64 recvHandle = 1;
  bool has_recvhandle() const;
  void clear_recvhandle() ;
  ::uint64_t recvhandle() const;
  void set_recvhandle(::uint64_t value);

  private:
  ::uint64_t _internal_recvhandle() const;
  void _internal_set_recvhandle(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.CreateRendererParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t recvhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DestroyRendererParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DestroyRendererParams) */ {
 public:
  inline DestroyRendererParams() : DestroyRendererParams(nullptr) {}
  ~DestroyRendererParams() override;
  explicit PROTOBUF_CONSTEXPR DestroyRendererParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyRendererParams(const DestroyRendererParams& from);
  DestroyRendererParams(DestroyRendererParams&& from) noexcept
    : DestroyRendererParams() {
    *this = ::std::move(from);
  }

  inline DestroyRendererParams& operator=(const DestroyRendererParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyRendererParams& operator=(DestroyRendererParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DestroyRendererParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyRendererParams* internal_default_instance() {
    return reinterpret_cast<const DestroyRendererParams*>(
               &_DestroyRendererParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(DestroyRendererParams& a, DestroyRendererParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyRendererParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyRendererParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyRendererParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyRendererParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DestroyRendererParams& from);
  void MergeFrom(const DestroyRendererParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DestroyRendererParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DestroyRendererParams";
  }
  protected:
  explicit DestroyRendererParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvHandleFieldNumber = 1,
  };
  // optional uint64 recvHandle = 1;
  bool has_recvhandle() const;
  void clear_recvhandle() ;
  ::uint64_t recvhandle() const;
  void set_recvhandle(::uint64_t value);

  private:
  ::uint64_t _internal_recvhandle() const;
  void _internal_set_recvhandle(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DestroyRendererParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t recvhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SubscribeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SubscribeParams) */ {
 public:
  inline SubscribeParams() : SubscribeParams(nullptr) {}
  ~SubscribeParams() override;
  explicit PROTOBUF_CONSTEXPR SubscribeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeParams(const SubscribeParams& from);
  SubscribeParams(SubscribeParams&& from) noexcept
    : SubscribeParams() {
    *this = ::std::move(from);
  }

  inline SubscribeParams& operator=(const SubscribeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeParams& operator=(SubscribeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SubscribeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeParams* internal_default_instance() {
    return reinterpret_cast<const SubscribeParams*>(
               &_SubscribeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(SubscribeParams& a, SubscribeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SubscribeParams& from);
  void MergeFrom(const SubscribeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SubscribeParams";
  }
  protected:
  explicit SubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kRawDataTypeFieldNumber = 2,
    kRecvHandleFieldNumber = 3,
  };
  // optional uint32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // optional int32 rawDataType = 2;
  bool has_rawdatatype() const;
  void clear_rawdatatype() ;
  ::int32_t rawdatatype() const;
  void set_rawdatatype(::int32_t value);

  private:
  ::int32_t _internal_rawdatatype() const;
  void _internal_set_rawdatatype(::int32_t value);

  public:
  // optional uint64 recvHandle = 3;
  bool has_recvhandle() const;
  void clear_recvhandle() ;
  ::uint64_t recvhandle() const;
  void set_recvhandle(::uint64_t value);

  private:
  ::uint64_t _internal_recvhandle() const;
  void _internal_set_recvhandle(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SubscribeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
    ::int32_t rawdatatype_;
    ::uint64_t recvhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class UnSubscribeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.UnSubscribeParams) */ {
 public:
  inline UnSubscribeParams() : UnSubscribeParams(nullptr) {}
  ~UnSubscribeParams() override;
  explicit PROTOBUF_CONSTEXPR UnSubscribeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnSubscribeParams(const UnSubscribeParams& from);
  UnSubscribeParams(UnSubscribeParams&& from) noexcept
    : UnSubscribeParams() {
    *this = ::std::move(from);
  }

  inline UnSubscribeParams& operator=(const UnSubscribeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnSubscribeParams& operator=(UnSubscribeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UnSubscribeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnSubscribeParams* internal_default_instance() {
    return reinterpret_cast<const UnSubscribeParams*>(
               &_UnSubscribeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(UnSubscribeParams& a, UnSubscribeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UnSubscribeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnSubscribeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnSubscribeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnSubscribeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnSubscribeParams& from);
  void MergeFrom(const UnSubscribeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnSubscribeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.UnSubscribeParams";
  }
  protected:
  explicit UnSubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvHandleFieldNumber = 1,
  };
  // optional uint64 recvHandle = 1;
  bool has_recvhandle() const;
  void clear_recvhandle() ;
  ::uint64_t recvhandle() const;
  void set_recvhandle(::uint64_t value);

  private:
  ::uint64_t _internal_recvhandle() const;
  void _internal_set_recvhandle(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.UnSubscribeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t recvhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetRawDataResolutionParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetRawDataResolutionParams) */ {
 public:
  inline SetRawDataResolutionParams() : SetRawDataResolutionParams(nullptr) {}
  ~SetRawDataResolutionParams() override;
  explicit PROTOBUF_CONSTEXPR SetRawDataResolutionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRawDataResolutionParams(const SetRawDataResolutionParams& from);
  SetRawDataResolutionParams(SetRawDataResolutionParams&& from) noexcept
    : SetRawDataResolutionParams() {
    *this = ::std::move(from);
  }

  inline SetRawDataResolutionParams& operator=(const SetRawDataResolutionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRawDataResolutionParams& operator=(SetRawDataResolutionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetRawDataResolutionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRawDataResolutionParams* internal_default_instance() {
    return reinterpret_cast<const SetRawDataResolutionParams*>(
               &_SetRawDataResolutionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(SetRawDataResolutionParams& a, SetRawDataResolutionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRawDataResolutionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRawDataResolutionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRawDataResolutionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRawDataResolutionParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetRawDataResolutionParams& from);
  void MergeFrom(const SetRawDataResolutionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetRawDataResolutionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetRawDataResolutionParams";
  }
  protected:
  explicit SetRawDataResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvHandleFieldNumber = 2,
    kResolutionFieldNumber = 1,
  };
  // optional uint64 recvHandle = 2;
  bool has_recvhandle() const;
  void clear_recvhandle() ;
  ::uint64_t recvhandle() const;
  void set_recvhandle(::uint64_t value);

  private:
  ::uint64_t _internal_recvhandle() const;
  void _internal_set_recvhandle(::uint64_t value);

  public:
  // optional int32 resolution = 1;
  bool has_resolution() const;
  void clear_resolution() ;
  ::int32_t resolution() const;
  void set_resolution(::int32_t value);

  private:
  ::int32_t _internal_resolution() const;
  void _internal_set_resolution(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetRawDataResolutionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t recvhandle_;
    ::int32_t resolution_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class GetResolutionParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.GetResolutionParams) */ {
 public:
  inline GetResolutionParams() : GetResolutionParams(nullptr) {}
  ~GetResolutionParams() override;
  explicit PROTOBUF_CONSTEXPR GetResolutionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResolutionParams(const GetResolutionParams& from);
  GetResolutionParams(GetResolutionParams&& from) noexcept
    : GetResolutionParams() {
    *this = ::std::move(from);
  }

  inline GetResolutionParams& operator=(const GetResolutionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResolutionParams& operator=(GetResolutionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetResolutionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResolutionParams* internal_default_instance() {
    return reinterpret_cast<const GetResolutionParams*>(
               &_GetResolutionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(GetResolutionParams& a, GetResolutionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResolutionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResolutionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResolutionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResolutionParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetResolutionParams& from);
  void MergeFrom(const GetResolutionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResolutionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.GetResolutionParams";
  }
  protected:
  explicit GetResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvHandleFieldNumber = 1,
  };
  // optional uint64 recvHandle = 1;
  bool has_recvhandle() const;
  void clear_recvhandle() ;
  ::uint64_t recvhandle() const;
  void set_recvhandle(::uint64_t value);

  private:
  ::uint64_t _internal_recvhandle() const;
  void _internal_set_recvhandle(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.GetResolutionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t recvhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class GetRawDataTypeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.GetRawDataTypeParams) */ {
 public:
  inline GetRawDataTypeParams() : GetRawDataTypeParams(nullptr) {}
  ~GetRawDataTypeParams() override;
  explicit PROTOBUF_CONSTEXPR GetRawDataTypeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRawDataTypeParams(const GetRawDataTypeParams& from);
  GetRawDataTypeParams(GetRawDataTypeParams&& from) noexcept
    : GetRawDataTypeParams() {
    *this = ::std::move(from);
  }

  inline GetRawDataTypeParams& operator=(const GetRawDataTypeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawDataTypeParams& operator=(GetRawDataTypeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetRawDataTypeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRawDataTypeParams* internal_default_instance() {
    return reinterpret_cast<const GetRawDataTypeParams*>(
               &_GetRawDataTypeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(GetRawDataTypeParams& a, GetRawDataTypeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawDataTypeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRawDataTypeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRawDataTypeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRawDataTypeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetRawDataTypeParams& from);
  void MergeFrom(const GetRawDataTypeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRawDataTypeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.GetRawDataTypeParams";
  }
  protected:
  explicit GetRawDataTypeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvHandleFieldNumber = 1,
  };
  // optional uint64 recvHandle = 1;
  bool has_recvhandle() const;
  void clear_recvhandle() ;
  ::uint64_t recvhandle() const;
  void set_recvhandle(::uint64_t value);

  private:
  ::uint64_t _internal_recvhandle() const;
  void _internal_set_recvhandle(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.GetRawDataTypeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t recvhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class GetUserIdParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.GetUserIdParams) */ {
 public:
  inline GetUserIdParams() : GetUserIdParams(nullptr) {}
  ~GetUserIdParams() override;
  explicit PROTOBUF_CONSTEXPR GetUserIdParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserIdParams(const GetUserIdParams& from);
  GetUserIdParams(GetUserIdParams&& from) noexcept
    : GetUserIdParams() {
    *this = ::std::move(from);
  }

  inline GetUserIdParams& operator=(const GetUserIdParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserIdParams& operator=(GetUserIdParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetUserIdParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserIdParams* internal_default_instance() {
    return reinterpret_cast<const GetUserIdParams*>(
               &_GetUserIdParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(GetUserIdParams& a, GetUserIdParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserIdParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserIdParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserIdParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserIdParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetUserIdParams& from);
  void MergeFrom(const GetUserIdParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetUserIdParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.GetUserIdParams";
  }
  protected:
  explicit GetUserIdParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvHandleFieldNumber = 1,
  };
  // optional uint64 recvHandle = 1;
  bool has_recvhandle() const;
  void clear_recvhandle() ;
  ::uint64_t recvhandle() const;
  void set_recvhandle(::uint64_t value);

  private:
  ::uint64_t _internal_recvhandle() const;
  void _internal_set_recvhandle(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.GetUserIdParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t recvhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableZoomAuthRealNameMeetingUIShownParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams) */ {
 public:
  inline EnableZoomAuthRealNameMeetingUIShownParams() : EnableZoomAuthRealNameMeetingUIShownParams(nullptr) {}
  ~EnableZoomAuthRealNameMeetingUIShownParams() override;
  explicit PROTOBUF_CONSTEXPR EnableZoomAuthRealNameMeetingUIShownParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableZoomAuthRealNameMeetingUIShownParams(const EnableZoomAuthRealNameMeetingUIShownParams& from);
  EnableZoomAuthRealNameMeetingUIShownParams(EnableZoomAuthRealNameMeetingUIShownParams&& from) noexcept
    : EnableZoomAuthRealNameMeetingUIShownParams() {
    *this = ::std::move(from);
  }

  inline EnableZoomAuthRealNameMeetingUIShownParams& operator=(const EnableZoomAuthRealNameMeetingUIShownParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableZoomAuthRealNameMeetingUIShownParams& operator=(EnableZoomAuthRealNameMeetingUIShownParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableZoomAuthRealNameMeetingUIShownParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableZoomAuthRealNameMeetingUIShownParams* internal_default_instance() {
    return reinterpret_cast<const EnableZoomAuthRealNameMeetingUIShownParams*>(
               &_EnableZoomAuthRealNameMeetingUIShownParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(EnableZoomAuthRealNameMeetingUIShownParams& a, EnableZoomAuthRealNameMeetingUIShownParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableZoomAuthRealNameMeetingUIShownParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableZoomAuthRealNameMeetingUIShownParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableZoomAuthRealNameMeetingUIShownParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableZoomAuthRealNameMeetingUIShownParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableZoomAuthRealNameMeetingUIShownParams& from);
  void MergeFrom(const EnableZoomAuthRealNameMeetingUIShownParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableZoomAuthRealNameMeetingUIShownParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams";
  }
  protected:
  explicit EnableZoomAuthRealNameMeetingUIShownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RetrieveParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RetrieveParams) */ {
 public:
  inline RetrieveParams() : RetrieveParams(nullptr) {}
  ~RetrieveParams() override;
  explicit PROTOBUF_CONSTEXPR RetrieveParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetrieveParams(const RetrieveParams& from);
  RetrieveParams(RetrieveParams&& from) noexcept
    : RetrieveParams() {
    *this = ::std::move(from);
  }

  inline RetrieveParams& operator=(const RetrieveParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveParams& operator=(RetrieveParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RetrieveParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveParams* internal_default_instance() {
    return reinterpret_cast<const RetrieveParams*>(
               &_RetrieveParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(RetrieveParams& a, RetrieveParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetrieveParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RetrieveParams& from);
  void MergeFrom(const RetrieveParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RetrieveParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RetrieveParams";
  }
  protected:
  explicit RetrieveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kPhoneNumFieldNumber = 2,
  };
  // optional string countryCode = 1;
  bool has_countrycode() const;
  void clear_countrycode() ;
  const std::string& countrycode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_countrycode(Arg_&& arg, Args_... args);
  std::string* mutable_countrycode();
  PROTOBUF_NODISCARD std::string* release_countrycode();
  void set_allocated_countrycode(std::string* ptr);

  private:
  const std::string& _internal_countrycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countrycode(
      const std::string& value);
  std::string* _internal_mutable_countrycode();

  public:
  // optional string phoneNum = 2;
  bool has_phonenum() const;
  void clear_phonenum() ;
  const std::string& phonenum() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonenum(Arg_&& arg, Args_... args);
  std::string* mutable_phonenum();
  PROTOBUF_NODISCARD std::string* release_phonenum();
  void set_allocated_phonenum(std::string* ptr);

  private:
  const std::string& _internal_phonenum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenum(
      const std::string& value);
  std::string* _internal_mutable_phonenum();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RetrieveParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class VerifyParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.VerifyParams) */ {
 public:
  inline VerifyParams() : VerifyParams(nullptr) {}
  ~VerifyParams() override;
  explicit PROTOBUF_CONSTEXPR VerifyParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyParams(const VerifyParams& from);
  VerifyParams(VerifyParams&& from) noexcept
    : VerifyParams() {
    *this = ::std::move(from);
  }

  inline VerifyParams& operator=(const VerifyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyParams& operator=(VerifyParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VerifyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyParams* internal_default_instance() {
    return reinterpret_cast<const VerifyParams*>(
               &_VerifyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(VerifyParams& a, VerifyParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VerifyParams& from);
  void MergeFrom(const VerifyParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VerifyParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.VerifyParams";
  }
  protected:
  explicit VerifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kPhoneNumFieldNumber = 2,
    kVerificationCodeFieldNumber = 3,
  };
  // optional string countryCode = 1;
  bool has_countrycode() const;
  void clear_countrycode() ;
  const std::string& countrycode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_countrycode(Arg_&& arg, Args_... args);
  std::string* mutable_countrycode();
  PROTOBUF_NODISCARD std::string* release_countrycode();
  void set_allocated_countrycode(std::string* ptr);

  private:
  const std::string& _internal_countrycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countrycode(
      const std::string& value);
  std::string* _internal_mutable_countrycode();

  public:
  // optional string phoneNum = 2;
  bool has_phonenum() const;
  void clear_phonenum() ;
  const std::string& phonenum() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonenum(Arg_&& arg, Args_... args);
  std::string* mutable_phonenum();
  PROTOBUF_NODISCARD std::string* release_phonenum();
  void set_allocated_phonenum(std::string* ptr);

  private:
  const std::string& _internal_phonenum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenum(
      const std::string& value);
  std::string* _internal_mutable_phonenum();

  public:
  // optional string verificationCode = 3;
  bool has_verificationcode() const;
  void clear_verificationcode() ;
  const std::string& verificationcode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_verificationcode(Arg_&& arg, Args_... args);
  std::string* mutable_verificationcode();
  PROTOBUF_NODISCARD std::string* release_verificationcode();
  void set_allocated_verificationcode(std::string* ptr);

  private:
  const std::string& _internal_verificationcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verificationcode(
      const std::string& value);
  std::string* _internal_mutable_verificationcode();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.VerifyParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verificationcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetDefaultCellPhoneInfoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams) */ {
 public:
  inline SetDefaultCellPhoneInfoParams() : SetDefaultCellPhoneInfoParams(nullptr) {}
  ~SetDefaultCellPhoneInfoParams() override;
  explicit PROTOBUF_CONSTEXPR SetDefaultCellPhoneInfoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDefaultCellPhoneInfoParams(const SetDefaultCellPhoneInfoParams& from);
  SetDefaultCellPhoneInfoParams(SetDefaultCellPhoneInfoParams&& from) noexcept
    : SetDefaultCellPhoneInfoParams() {
    *this = ::std::move(from);
  }

  inline SetDefaultCellPhoneInfoParams& operator=(const SetDefaultCellPhoneInfoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDefaultCellPhoneInfoParams& operator=(SetDefaultCellPhoneInfoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetDefaultCellPhoneInfoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDefaultCellPhoneInfoParams* internal_default_instance() {
    return reinterpret_cast<const SetDefaultCellPhoneInfoParams*>(
               &_SetDefaultCellPhoneInfoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(SetDefaultCellPhoneInfoParams& a, SetDefaultCellPhoneInfoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDefaultCellPhoneInfoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDefaultCellPhoneInfoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDefaultCellPhoneInfoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDefaultCellPhoneInfoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetDefaultCellPhoneInfoParams& from);
  void MergeFrom(const SetDefaultCellPhoneInfoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetDefaultCellPhoneInfoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetDefaultCellPhoneInfoParams";
  }
  protected:
  explicit SetDefaultCellPhoneInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kPhoneNumFieldNumber = 2,
  };
  // optional string countryCode = 1;
  bool has_countrycode() const;
  void clear_countrycode() ;
  const std::string& countrycode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_countrycode(Arg_&& arg, Args_... args);
  std::string* mutable_countrycode();
  PROTOBUF_NODISCARD std::string* release_countrycode();
  void set_allocated_countrycode(std::string* ptr);

  private:
  const std::string& _internal_countrycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countrycode(
      const std::string& value);
  std::string* _internal_mutable_countrycode();

  public:
  // optional string phoneNum = 2;
  bool has_phonenum() const;
  void clear_phonenum() ;
  const std::string& phonenum() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonenum(Arg_&& arg, Args_... args);
  std::string* mutable_phonenum();
  PROTOBUF_NODISCARD std::string* release_phonenum();
  void set_allocated_phonenum(std::string* ptr);

  private:
  const std::string& _internal_phonenum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenum(
      const std::string& value);
  std::string* _internal_mutable_phonenum();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAlwaysShowMeetingControlsParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams) */ {
 public:
  inline EnableAlwaysShowMeetingControlsParams() : EnableAlwaysShowMeetingControlsParams(nullptr) {}
  ~EnableAlwaysShowMeetingControlsParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAlwaysShowMeetingControlsParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAlwaysShowMeetingControlsParams(const EnableAlwaysShowMeetingControlsParams& from);
  EnableAlwaysShowMeetingControlsParams(EnableAlwaysShowMeetingControlsParams&& from) noexcept
    : EnableAlwaysShowMeetingControlsParams() {
    *this = ::std::move(from);
  }

  inline EnableAlwaysShowMeetingControlsParams& operator=(const EnableAlwaysShowMeetingControlsParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAlwaysShowMeetingControlsParams& operator=(EnableAlwaysShowMeetingControlsParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAlwaysShowMeetingControlsParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAlwaysShowMeetingControlsParams* internal_default_instance() {
    return reinterpret_cast<const EnableAlwaysShowMeetingControlsParams*>(
               &_EnableAlwaysShowMeetingControlsParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(EnableAlwaysShowMeetingControlsParams& a, EnableAlwaysShowMeetingControlsParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAlwaysShowMeetingControlsParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAlwaysShowMeetingControlsParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAlwaysShowMeetingControlsParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAlwaysShowMeetingControlsParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAlwaysShowMeetingControlsParams& from);
  void MergeFrom(const EnableAlwaysShowMeetingControlsParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAlwaysShowMeetingControlsParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams";
  }
  protected:
  explicit EnableAlwaysShowMeetingControlsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SelectMicParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SelectMicParams) */ {
 public:
  inline SelectMicParams() : SelectMicParams(nullptr) {}
  ~SelectMicParams() override;
  explicit PROTOBUF_CONSTEXPR SelectMicParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectMicParams(const SelectMicParams& from);
  SelectMicParams(SelectMicParams&& from) noexcept
    : SelectMicParams() {
    *this = ::std::move(from);
  }

  inline SelectMicParams& operator=(const SelectMicParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectMicParams& operator=(SelectMicParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SelectMicParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectMicParams* internal_default_instance() {
    return reinterpret_cast<const SelectMicParams*>(
               &_SelectMicParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(SelectMicParams& a, SelectMicParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectMicParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectMicParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectMicParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectMicParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SelectMicParams& from);
  void MergeFrom(const SelectMicParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectMicParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SelectMicParams";
  }
  protected:
  explicit SelectMicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // optional string deviceName = 2;
  bool has_devicename() const;
  void clear_devicename() ;
  const std::string& devicename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* ptr);

  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(
      const std::string& value);
  std::string* _internal_mutable_devicename();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SelectMicParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SelectSpeakerParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SelectSpeakerParams) */ {
 public:
  inline SelectSpeakerParams() : SelectSpeakerParams(nullptr) {}
  ~SelectSpeakerParams() override;
  explicit PROTOBUF_CONSTEXPR SelectSpeakerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectSpeakerParams(const SelectSpeakerParams& from);
  SelectSpeakerParams(SelectSpeakerParams&& from) noexcept
    : SelectSpeakerParams() {
    *this = ::std::move(from);
  }

  inline SelectSpeakerParams& operator=(const SelectSpeakerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectSpeakerParams& operator=(SelectSpeakerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SelectSpeakerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectSpeakerParams* internal_default_instance() {
    return reinterpret_cast<const SelectSpeakerParams*>(
               &_SelectSpeakerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(SelectSpeakerParams& a, SelectSpeakerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectSpeakerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectSpeakerParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectSpeakerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectSpeakerParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SelectSpeakerParams& from);
  void MergeFrom(const SelectSpeakerParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectSpeakerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SelectSpeakerParams";
  }
  protected:
  explicit SelectSpeakerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // optional string deviceName = 2;
  bool has_devicename() const;
  void clear_devicename() ;
  const std::string& devicename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* ptr);

  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(
      const std::string& value);
  std::string* _internal_mutable_devicename();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SelectSpeakerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoJoinAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoJoinAudioParams) */ {
 public:
  inline EnableAutoJoinAudioParams() : EnableAutoJoinAudioParams(nullptr) {}
  ~EnableAutoJoinAudioParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoJoinAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoJoinAudioParams(const EnableAutoJoinAudioParams& from);
  EnableAutoJoinAudioParams(EnableAutoJoinAudioParams&& from) noexcept
    : EnableAutoJoinAudioParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoJoinAudioParams& operator=(const EnableAutoJoinAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoJoinAudioParams& operator=(EnableAutoJoinAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoJoinAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoJoinAudioParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoJoinAudioParams*>(
               &_EnableAutoJoinAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(EnableAutoJoinAudioParams& a, EnableAutoJoinAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoJoinAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoJoinAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoJoinAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoJoinAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoJoinAudioParams& from);
  void MergeFrom(const EnableAutoJoinAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoJoinAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoJoinAudioParams";
  }
  protected:
  explicit EnableAutoJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoJoinAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoAdjustMicParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoAdjustMicParams) */ {
 public:
  inline EnableAutoAdjustMicParams() : EnableAutoAdjustMicParams(nullptr) {}
  ~EnableAutoAdjustMicParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoAdjustMicParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoAdjustMicParams(const EnableAutoAdjustMicParams& from);
  EnableAutoAdjustMicParams(EnableAutoAdjustMicParams&& from) noexcept
    : EnableAutoAdjustMicParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoAdjustMicParams& operator=(const EnableAutoAdjustMicParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoAdjustMicParams& operator=(EnableAutoAdjustMicParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoAdjustMicParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoAdjustMicParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoAdjustMicParams*>(
               &_EnableAutoAdjustMicParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(EnableAutoAdjustMicParams& a, EnableAutoAdjustMicParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoAdjustMicParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoAdjustMicParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoAdjustMicParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoAdjustMicParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoAdjustMicParams& from);
  void MergeFrom(const EnableAutoAdjustMicParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoAdjustMicParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoAdjustMicParams";
  }
  protected:
  explicit EnableAutoAdjustMicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoAdjustMicParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableStereoAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableStereoAudioParams) */ {
 public:
  inline EnableStereoAudioParams() : EnableStereoAudioParams(nullptr) {}
  ~EnableStereoAudioParams() override;
  explicit PROTOBUF_CONSTEXPR EnableStereoAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableStereoAudioParams(const EnableStereoAudioParams& from);
  EnableStereoAudioParams(EnableStereoAudioParams&& from) noexcept
    : EnableStereoAudioParams() {
    *this = ::std::move(from);
  }

  inline EnableStereoAudioParams& operator=(const EnableStereoAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableStereoAudioParams& operator=(EnableStereoAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableStereoAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableStereoAudioParams* internal_default_instance() {
    return reinterpret_cast<const EnableStereoAudioParams*>(
               &_EnableStereoAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(EnableStereoAudioParams& a, EnableStereoAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableStereoAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableStereoAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableStereoAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableStereoAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableStereoAudioParams& from);
  void MergeFrom(const EnableStereoAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableStereoAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableStereoAudioParams";
  }
  protected:
  explicit EnableStereoAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableStereoAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableMicOriginalInputParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableMicOriginalInputParams) */ {
 public:
  inline EnableMicOriginalInputParams() : EnableMicOriginalInputParams(nullptr) {}
  ~EnableMicOriginalInputParams() override;
  explicit PROTOBUF_CONSTEXPR EnableMicOriginalInputParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableMicOriginalInputParams(const EnableMicOriginalInputParams& from);
  EnableMicOriginalInputParams(EnableMicOriginalInputParams&& from) noexcept
    : EnableMicOriginalInputParams() {
    *this = ::std::move(from);
  }

  inline EnableMicOriginalInputParams& operator=(const EnableMicOriginalInputParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableMicOriginalInputParams& operator=(EnableMicOriginalInputParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableMicOriginalInputParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableMicOriginalInputParams* internal_default_instance() {
    return reinterpret_cast<const EnableMicOriginalInputParams*>(
               &_EnableMicOriginalInputParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(EnableMicOriginalInputParams& a, EnableMicOriginalInputParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableMicOriginalInputParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableMicOriginalInputParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableMicOriginalInputParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableMicOriginalInputParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableMicOriginalInputParams& from);
  void MergeFrom(const EnableMicOriginalInputParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableMicOriginalInputParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableMicOriginalInputParams";
  }
  protected:
  explicit EnableMicOriginalInputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableMicOriginalInputParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableHoldSpaceKeyToSpeakParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams) */ {
 public:
  inline EnableHoldSpaceKeyToSpeakParams() : EnableHoldSpaceKeyToSpeakParams(nullptr) {}
  ~EnableHoldSpaceKeyToSpeakParams() override;
  explicit PROTOBUF_CONSTEXPR EnableHoldSpaceKeyToSpeakParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableHoldSpaceKeyToSpeakParams(const EnableHoldSpaceKeyToSpeakParams& from);
  EnableHoldSpaceKeyToSpeakParams(EnableHoldSpaceKeyToSpeakParams&& from) noexcept
    : EnableHoldSpaceKeyToSpeakParams() {
    *this = ::std::move(from);
  }

  inline EnableHoldSpaceKeyToSpeakParams& operator=(const EnableHoldSpaceKeyToSpeakParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableHoldSpaceKeyToSpeakParams& operator=(EnableHoldSpaceKeyToSpeakParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableHoldSpaceKeyToSpeakParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableHoldSpaceKeyToSpeakParams* internal_default_instance() {
    return reinterpret_cast<const EnableHoldSpaceKeyToSpeakParams*>(
               &_EnableHoldSpaceKeyToSpeakParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(EnableHoldSpaceKeyToSpeakParams& a, EnableHoldSpaceKeyToSpeakParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableHoldSpaceKeyToSpeakParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableHoldSpaceKeyToSpeakParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableHoldSpaceKeyToSpeakParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableHoldSpaceKeyToSpeakParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableHoldSpaceKeyToSpeakParams& from);
  void MergeFrom(const EnableHoldSpaceKeyToSpeakParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableHoldSpaceKeyToSpeakParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams";
  }
  protected:
  explicit EnableHoldSpaceKeyToSpeakParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAlwaysMuteMicWhenJoinVoipParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams) */ {
 public:
  inline EnableAlwaysMuteMicWhenJoinVoipParams() : EnableAlwaysMuteMicWhenJoinVoipParams(nullptr) {}
  ~EnableAlwaysMuteMicWhenJoinVoipParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAlwaysMuteMicWhenJoinVoipParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAlwaysMuteMicWhenJoinVoipParams(const EnableAlwaysMuteMicWhenJoinVoipParams& from);
  EnableAlwaysMuteMicWhenJoinVoipParams(EnableAlwaysMuteMicWhenJoinVoipParams&& from) noexcept
    : EnableAlwaysMuteMicWhenJoinVoipParams() {
    *this = ::std::move(from);
  }

  inline EnableAlwaysMuteMicWhenJoinVoipParams& operator=(const EnableAlwaysMuteMicWhenJoinVoipParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAlwaysMuteMicWhenJoinVoipParams& operator=(EnableAlwaysMuteMicWhenJoinVoipParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAlwaysMuteMicWhenJoinVoipParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAlwaysMuteMicWhenJoinVoipParams* internal_default_instance() {
    return reinterpret_cast<const EnableAlwaysMuteMicWhenJoinVoipParams*>(
               &_EnableAlwaysMuteMicWhenJoinVoipParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(EnableAlwaysMuteMicWhenJoinVoipParams& a, EnableAlwaysMuteMicWhenJoinVoipParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAlwaysMuteMicWhenJoinVoipParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAlwaysMuteMicWhenJoinVoipParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAlwaysMuteMicWhenJoinVoipParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAlwaysMuteMicWhenJoinVoipParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAlwaysMuteMicWhenJoinVoipParams& from);
  void MergeFrom(const EnableAlwaysMuteMicWhenJoinVoipParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAlwaysMuteMicWhenJoinVoipParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams";
  }
  protected:
  explicit EnableAlwaysMuteMicWhenJoinVoipParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableSuppressAudioNotifyParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableSuppressAudioNotifyParams) */ {
 public:
  inline EnableSuppressAudioNotifyParams() : EnableSuppressAudioNotifyParams(nullptr) {}
  ~EnableSuppressAudioNotifyParams() override;
  explicit PROTOBUF_CONSTEXPR EnableSuppressAudioNotifyParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableSuppressAudioNotifyParams(const EnableSuppressAudioNotifyParams& from);
  EnableSuppressAudioNotifyParams(EnableSuppressAudioNotifyParams&& from) noexcept
    : EnableSuppressAudioNotifyParams() {
    *this = ::std::move(from);
  }

  inline EnableSuppressAudioNotifyParams& operator=(const EnableSuppressAudioNotifyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableSuppressAudioNotifyParams& operator=(EnableSuppressAudioNotifyParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableSuppressAudioNotifyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableSuppressAudioNotifyParams* internal_default_instance() {
    return reinterpret_cast<const EnableSuppressAudioNotifyParams*>(
               &_EnableSuppressAudioNotifyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(EnableSuppressAudioNotifyParams& a, EnableSuppressAudioNotifyParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableSuppressAudioNotifyParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableSuppressAudioNotifyParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableSuppressAudioNotifyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableSuppressAudioNotifyParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableSuppressAudioNotifyParams& from);
  void MergeFrom(const EnableSuppressAudioNotifyParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableSuppressAudioNotifyParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableSuppressAudioNotifyParams";
  }
  protected:
  explicit EnableSuppressAudioNotifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetEchoCancellationLevelParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetEchoCancellationLevelParams) */ {
 public:
  inline SetEchoCancellationLevelParams() : SetEchoCancellationLevelParams(nullptr) {}
  ~SetEchoCancellationLevelParams() override;
  explicit PROTOBUF_CONSTEXPR SetEchoCancellationLevelParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetEchoCancellationLevelParams(const SetEchoCancellationLevelParams& from);
  SetEchoCancellationLevelParams(SetEchoCancellationLevelParams&& from) noexcept
    : SetEchoCancellationLevelParams() {
    *this = ::std::move(from);
  }

  inline SetEchoCancellationLevelParams& operator=(const SetEchoCancellationLevelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEchoCancellationLevelParams& operator=(SetEchoCancellationLevelParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetEchoCancellationLevelParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEchoCancellationLevelParams* internal_default_instance() {
    return reinterpret_cast<const SetEchoCancellationLevelParams*>(
               &_SetEchoCancellationLevelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(SetEchoCancellationLevelParams& a, SetEchoCancellationLevelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEchoCancellationLevelParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEchoCancellationLevelParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEchoCancellationLevelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEchoCancellationLevelParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetEchoCancellationLevelParams& from);
  void MergeFrom(const SetEchoCancellationLevelParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetEchoCancellationLevelParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetEchoCancellationLevelParams";
  }
  protected:
  explicit SetEchoCancellationLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // optional int32 level = 1;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetEchoCancellationLevelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetMicVolParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetMicVolParams) */ {
 public:
  inline SetMicVolParams() : SetMicVolParams(nullptr) {}
  ~SetMicVolParams() override;
  explicit PROTOBUF_CONSTEXPR SetMicVolParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMicVolParams(const SetMicVolParams& from);
  SetMicVolParams(SetMicVolParams&& from) noexcept
    : SetMicVolParams() {
    *this = ::std::move(from);
  }

  inline SetMicVolParams& operator=(const SetMicVolParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMicVolParams& operator=(SetMicVolParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetMicVolParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMicVolParams* internal_default_instance() {
    return reinterpret_cast<const SetMicVolParams*>(
               &_SetMicVolParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(SetMicVolParams& a, SetMicVolParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMicVolParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMicVolParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMicVolParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMicVolParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetMicVolParams& from);
  void MergeFrom(const SetMicVolParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetMicVolParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetMicVolParams";
  }
  protected:
  explicit SetMicVolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional float value = 1;
  bool has_value() const;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetMicVolParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetSpeakerVolParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetSpeakerVolParams) */ {
 public:
  inline SetSpeakerVolParams() : SetSpeakerVolParams(nullptr) {}
  ~SetSpeakerVolParams() override;
  explicit PROTOBUF_CONSTEXPR SetSpeakerVolParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSpeakerVolParams(const SetSpeakerVolParams& from);
  SetSpeakerVolParams(SetSpeakerVolParams&& from) noexcept
    : SetSpeakerVolParams() {
    *this = ::std::move(from);
  }

  inline SetSpeakerVolParams& operator=(const SetSpeakerVolParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSpeakerVolParams& operator=(SetSpeakerVolParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetSpeakerVolParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSpeakerVolParams* internal_default_instance() {
    return reinterpret_cast<const SetSpeakerVolParams*>(
               &_SetSpeakerVolParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(SetSpeakerVolParams& a, SetSpeakerVolParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSpeakerVolParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSpeakerVolParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSpeakerVolParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSpeakerVolParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetSpeakerVolParams& from);
  void MergeFrom(const SetSpeakerVolParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetSpeakerVolParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetSpeakerVolParams";
  }
  protected:
  explicit SetSpeakerVolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional float value = 1;
  bool has_value() const;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetSpeakerVolParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableDualScreenModeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableDualScreenModeParams) */ {
 public:
  inline EnableDualScreenModeParams() : EnableDualScreenModeParams(nullptr) {}
  ~EnableDualScreenModeParams() override;
  explicit PROTOBUF_CONSTEXPR EnableDualScreenModeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableDualScreenModeParams(const EnableDualScreenModeParams& from);
  EnableDualScreenModeParams(EnableDualScreenModeParams&& from) noexcept
    : EnableDualScreenModeParams() {
    *this = ::std::move(from);
  }

  inline EnableDualScreenModeParams& operator=(const EnableDualScreenModeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableDualScreenModeParams& operator=(EnableDualScreenModeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableDualScreenModeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableDualScreenModeParams* internal_default_instance() {
    return reinterpret_cast<const EnableDualScreenModeParams*>(
               &_EnableDualScreenModeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(EnableDualScreenModeParams& a, EnableDualScreenModeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableDualScreenModeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableDualScreenModeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableDualScreenModeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableDualScreenModeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableDualScreenModeParams& from);
  void MergeFrom(const EnableDualScreenModeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableDualScreenModeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableDualScreenModeParams";
  }
  protected:
  explicit EnableDualScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableDualScreenModeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class TurnOffAeroModeInSharingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.TurnOffAeroModeInSharingParams) */ {
 public:
  inline TurnOffAeroModeInSharingParams() : TurnOffAeroModeInSharingParams(nullptr) {}
  ~TurnOffAeroModeInSharingParams() override;
  explicit PROTOBUF_CONSTEXPR TurnOffAeroModeInSharingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TurnOffAeroModeInSharingParams(const TurnOffAeroModeInSharingParams& from);
  TurnOffAeroModeInSharingParams(TurnOffAeroModeInSharingParams&& from) noexcept
    : TurnOffAeroModeInSharingParams() {
    *this = ::std::move(from);
  }

  inline TurnOffAeroModeInSharingParams& operator=(const TurnOffAeroModeInSharingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnOffAeroModeInSharingParams& operator=(TurnOffAeroModeInSharingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TurnOffAeroModeInSharingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnOffAeroModeInSharingParams* internal_default_instance() {
    return reinterpret_cast<const TurnOffAeroModeInSharingParams*>(
               &_TurnOffAeroModeInSharingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(TurnOffAeroModeInSharingParams& a, TurnOffAeroModeInSharingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnOffAeroModeInSharingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnOffAeroModeInSharingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnOffAeroModeInSharingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TurnOffAeroModeInSharingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TurnOffAeroModeInSharingParams& from);
  void MergeFrom(const TurnOffAeroModeInSharingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TurnOffAeroModeInSharingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.TurnOffAeroModeInSharingParams";
  }
  protected:
  explicit TurnOffAeroModeInSharingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBTurnOffFieldNumber = 1,
  };
  // optional bool bTurnOff = 1;
  bool has_bturnoff() const;
  void clear_bturnoff() ;
  bool bturnoff() const;
  void set_bturnoff(bool value);

  private:
  bool _internal_bturnoff() const;
  void _internal_set_bturnoff(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bturnoff_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoFitToWindowWhenViewSharingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams) */ {
 public:
  inline EnableAutoFitToWindowWhenViewSharingParams() : EnableAutoFitToWindowWhenViewSharingParams(nullptr) {}
  ~EnableAutoFitToWindowWhenViewSharingParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoFitToWindowWhenViewSharingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoFitToWindowWhenViewSharingParams(const EnableAutoFitToWindowWhenViewSharingParams& from);
  EnableAutoFitToWindowWhenViewSharingParams(EnableAutoFitToWindowWhenViewSharingParams&& from) noexcept
    : EnableAutoFitToWindowWhenViewSharingParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoFitToWindowWhenViewSharingParams& operator=(const EnableAutoFitToWindowWhenViewSharingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoFitToWindowWhenViewSharingParams& operator=(EnableAutoFitToWindowWhenViewSharingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoFitToWindowWhenViewSharingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoFitToWindowWhenViewSharingParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoFitToWindowWhenViewSharingParams*>(
               &_EnableAutoFitToWindowWhenViewSharingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(EnableAutoFitToWindowWhenViewSharingParams& a, EnableAutoFitToWindowWhenViewSharingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoFitToWindowWhenViewSharingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoFitToWindowWhenViewSharingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoFitToWindowWhenViewSharingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoFitToWindowWhenViewSharingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoFitToWindowWhenViewSharingParams& from);
  void MergeFrom(const EnableAutoFitToWindowWhenViewSharingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoFitToWindowWhenViewSharingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams";
  }
  protected:
  explicit EnableAutoFitToWindowWhenViewSharingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoFullScreenVideoWhenJoinMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams) */ {
 public:
  inline EnableAutoFullScreenVideoWhenJoinMeetingParams() : EnableAutoFullScreenVideoWhenJoinMeetingParams(nullptr) {}
  ~EnableAutoFullScreenVideoWhenJoinMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoFullScreenVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoFullScreenVideoWhenJoinMeetingParams(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from);
  EnableAutoFullScreenVideoWhenJoinMeetingParams(EnableAutoFullScreenVideoWhenJoinMeetingParams&& from) noexcept
    : EnableAutoFullScreenVideoWhenJoinMeetingParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoFullScreenVideoWhenJoinMeetingParams& operator=(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoFullScreenVideoWhenJoinMeetingParams& operator=(EnableAutoFullScreenVideoWhenJoinMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoFullScreenVideoWhenJoinMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoFullScreenVideoWhenJoinMeetingParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoFullScreenVideoWhenJoinMeetingParams*>(
               &_EnableAutoFullScreenVideoWhenJoinMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(EnableAutoFullScreenVideoWhenJoinMeetingParams& a, EnableAutoFullScreenVideoWhenJoinMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoFullScreenVideoWhenJoinMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoFullScreenVideoWhenJoinMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoFullScreenVideoWhenJoinMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoFullScreenVideoWhenJoinMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from);
  void MergeFrom(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoFullScreenVideoWhenJoinMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams";
  }
  protected:
  explicit EnableAutoFullScreenVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableSplitScreenModeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableSplitScreenModeParams) */ {
 public:
  inline EnableSplitScreenModeParams() : EnableSplitScreenModeParams(nullptr) {}
  ~EnableSplitScreenModeParams() override;
  explicit PROTOBUF_CONSTEXPR EnableSplitScreenModeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableSplitScreenModeParams(const EnableSplitScreenModeParams& from);
  EnableSplitScreenModeParams(EnableSplitScreenModeParams&& from) noexcept
    : EnableSplitScreenModeParams() {
    *this = ::std::move(from);
  }

  inline EnableSplitScreenModeParams& operator=(const EnableSplitScreenModeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableSplitScreenModeParams& operator=(EnableSplitScreenModeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableSplitScreenModeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableSplitScreenModeParams* internal_default_instance() {
    return reinterpret_cast<const EnableSplitScreenModeParams*>(
               &_EnableSplitScreenModeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(EnableSplitScreenModeParams& a, EnableSplitScreenModeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableSplitScreenModeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableSplitScreenModeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableSplitScreenModeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableSplitScreenModeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableSplitScreenModeParams& from);
  void MergeFrom(const EnableSplitScreenModeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableSplitScreenModeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableSplitScreenModeParams";
  }
  protected:
  explicit EnableSplitScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableSplitScreenModeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoFullScreenVideoWhenViewShareParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams) */ {
 public:
  inline EnableAutoFullScreenVideoWhenViewShareParams() : EnableAutoFullScreenVideoWhenViewShareParams(nullptr) {}
  ~EnableAutoFullScreenVideoWhenViewShareParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoFullScreenVideoWhenViewShareParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoFullScreenVideoWhenViewShareParams(const EnableAutoFullScreenVideoWhenViewShareParams& from);
  EnableAutoFullScreenVideoWhenViewShareParams(EnableAutoFullScreenVideoWhenViewShareParams&& from) noexcept
    : EnableAutoFullScreenVideoWhenViewShareParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoFullScreenVideoWhenViewShareParams& operator=(const EnableAutoFullScreenVideoWhenViewShareParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoFullScreenVideoWhenViewShareParams& operator=(EnableAutoFullScreenVideoWhenViewShareParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoFullScreenVideoWhenViewShareParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoFullScreenVideoWhenViewShareParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoFullScreenVideoWhenViewShareParams*>(
               &_EnableAutoFullScreenVideoWhenViewShareParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(EnableAutoFullScreenVideoWhenViewShareParams& a, EnableAutoFullScreenVideoWhenViewShareParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoFullScreenVideoWhenViewShareParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoFullScreenVideoWhenViewShareParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoFullScreenVideoWhenViewShareParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoFullScreenVideoWhenViewShareParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoFullScreenVideoWhenViewShareParams& from);
  void MergeFrom(const EnableAutoFullScreenVideoWhenViewShareParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoFullScreenVideoWhenViewShareParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams";
  }
  protected:
  explicit EnableAutoFullScreenVideoWhenViewShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableDisplayReminderWindowWhenExitParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams) */ {
 public:
  inline EnableDisplayReminderWindowWhenExitParams() : EnableDisplayReminderWindowWhenExitParams(nullptr) {}
  ~EnableDisplayReminderWindowWhenExitParams() override;
  explicit PROTOBUF_CONSTEXPR EnableDisplayReminderWindowWhenExitParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableDisplayReminderWindowWhenExitParams(const EnableDisplayReminderWindowWhenExitParams& from);
  EnableDisplayReminderWindowWhenExitParams(EnableDisplayReminderWindowWhenExitParams&& from) noexcept
    : EnableDisplayReminderWindowWhenExitParams() {
    *this = ::std::move(from);
  }

  inline EnableDisplayReminderWindowWhenExitParams& operator=(const EnableDisplayReminderWindowWhenExitParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableDisplayReminderWindowWhenExitParams& operator=(EnableDisplayReminderWindowWhenExitParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableDisplayReminderWindowWhenExitParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableDisplayReminderWindowWhenExitParams* internal_default_instance() {
    return reinterpret_cast<const EnableDisplayReminderWindowWhenExitParams*>(
               &_EnableDisplayReminderWindowWhenExitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(EnableDisplayReminderWindowWhenExitParams& a, EnableDisplayReminderWindowWhenExitParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableDisplayReminderWindowWhenExitParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableDisplayReminderWindowWhenExitParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableDisplayReminderWindowWhenExitParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableDisplayReminderWindowWhenExitParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableDisplayReminderWindowWhenExitParams& from);
  void MergeFrom(const EnableDisplayReminderWindowWhenExitParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableDisplayReminderWindowWhenExitParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams";
  }
  protected:
  explicit EnableDisplayReminderWindowWhenExitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableShowMyMeetingElapseTimeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams) */ {
 public:
  inline EnableShowMyMeetingElapseTimeParams() : EnableShowMyMeetingElapseTimeParams(nullptr) {}
  ~EnableShowMyMeetingElapseTimeParams() override;
  explicit PROTOBUF_CONSTEXPR EnableShowMyMeetingElapseTimeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableShowMyMeetingElapseTimeParams(const EnableShowMyMeetingElapseTimeParams& from);
  EnableShowMyMeetingElapseTimeParams(EnableShowMyMeetingElapseTimeParams&& from) noexcept
    : EnableShowMyMeetingElapseTimeParams() {
    *this = ::std::move(from);
  }

  inline EnableShowMyMeetingElapseTimeParams& operator=(const EnableShowMyMeetingElapseTimeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableShowMyMeetingElapseTimeParams& operator=(EnableShowMyMeetingElapseTimeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableShowMyMeetingElapseTimeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableShowMyMeetingElapseTimeParams* internal_default_instance() {
    return reinterpret_cast<const EnableShowMyMeetingElapseTimeParams*>(
               &_EnableShowMyMeetingElapseTimeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(EnableShowMyMeetingElapseTimeParams& a, EnableShowMyMeetingElapseTimeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableShowMyMeetingElapseTimeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableShowMyMeetingElapseTimeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableShowMyMeetingElapseTimeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableShowMyMeetingElapseTimeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableShowMyMeetingElapseTimeParams& from);
  void MergeFrom(const EnableShowMyMeetingElapseTimeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableShowMyMeetingElapseTimeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams";
  }
  protected:
  explicit EnableShowMyMeetingElapseTimeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAccelerateGPUWhenShareParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams) */ {
 public:
  inline EnableAccelerateGPUWhenShareParams() : EnableAccelerateGPUWhenShareParams(nullptr) {}
  ~EnableAccelerateGPUWhenShareParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAccelerateGPUWhenShareParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAccelerateGPUWhenShareParams(const EnableAccelerateGPUWhenShareParams& from);
  EnableAccelerateGPUWhenShareParams(EnableAccelerateGPUWhenShareParams&& from) noexcept
    : EnableAccelerateGPUWhenShareParams() {
    *this = ::std::move(from);
  }

  inline EnableAccelerateGPUWhenShareParams& operator=(const EnableAccelerateGPUWhenShareParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAccelerateGPUWhenShareParams& operator=(EnableAccelerateGPUWhenShareParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAccelerateGPUWhenShareParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAccelerateGPUWhenShareParams* internal_default_instance() {
    return reinterpret_cast<const EnableAccelerateGPUWhenShareParams*>(
               &_EnableAccelerateGPUWhenShareParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(EnableAccelerateGPUWhenShareParams& a, EnableAccelerateGPUWhenShareParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAccelerateGPUWhenShareParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAccelerateGPUWhenShareParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAccelerateGPUWhenShareParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAccelerateGPUWhenShareParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAccelerateGPUWhenShareParams& from);
  void MergeFrom(const EnableAccelerateGPUWhenShareParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAccelerateGPUWhenShareParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams";
  }
  protected:
  explicit EnableAccelerateGPUWhenShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableRemoteControlAllApplicationsParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams) */ {
 public:
  inline EnableRemoteControlAllApplicationsParams() : EnableRemoteControlAllApplicationsParams(nullptr) {}
  ~EnableRemoteControlAllApplicationsParams() override;
  explicit PROTOBUF_CONSTEXPR EnableRemoteControlAllApplicationsParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableRemoteControlAllApplicationsParams(const EnableRemoteControlAllApplicationsParams& from);
  EnableRemoteControlAllApplicationsParams(EnableRemoteControlAllApplicationsParams&& from) noexcept
    : EnableRemoteControlAllApplicationsParams() {
    *this = ::std::move(from);
  }

  inline EnableRemoteControlAllApplicationsParams& operator=(const EnableRemoteControlAllApplicationsParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableRemoteControlAllApplicationsParams& operator=(EnableRemoteControlAllApplicationsParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableRemoteControlAllApplicationsParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableRemoteControlAllApplicationsParams* internal_default_instance() {
    return reinterpret_cast<const EnableRemoteControlAllApplicationsParams*>(
               &_EnableRemoteControlAllApplicationsParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(EnableRemoteControlAllApplicationsParams& a, EnableRemoteControlAllApplicationsParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableRemoteControlAllApplicationsParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableRemoteControlAllApplicationsParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableRemoteControlAllApplicationsParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableRemoteControlAllApplicationsParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableRemoteControlAllApplicationsParams& from);
  void MergeFrom(const EnableRemoteControlAllApplicationsParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableRemoteControlAllApplicationsParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams";
  }
  protected:
  explicit EnableRemoteControlAllApplicationsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetRecordingPathParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetRecordingPathParams) */ {
 public:
  inline SetRecordingPathParams() : SetRecordingPathParams(nullptr) {}
  ~SetRecordingPathParams() override;
  explicit PROTOBUF_CONSTEXPR SetRecordingPathParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRecordingPathParams(const SetRecordingPathParams& from);
  SetRecordingPathParams(SetRecordingPathParams&& from) noexcept
    : SetRecordingPathParams() {
    *this = ::std::move(from);
  }

  inline SetRecordingPathParams& operator=(const SetRecordingPathParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRecordingPathParams& operator=(SetRecordingPathParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetRecordingPathParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRecordingPathParams* internal_default_instance() {
    return reinterpret_cast<const SetRecordingPathParams*>(
               &_SetRecordingPathParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(SetRecordingPathParams& a, SetRecordingPathParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRecordingPathParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRecordingPathParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRecordingPathParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRecordingPathParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetRecordingPathParams& from);
  void MergeFrom(const SetRecordingPathParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetRecordingPathParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetRecordingPathParams";
  }
  protected:
  explicit SetRecordingPathParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecPathFieldNumber = 1,
  };
  // optional string recPath = 1;
  bool has_recpath() const;
  void clear_recpath() ;
  const std::string& recpath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recpath(Arg_&& arg, Args_... args);
  std::string* mutable_recpath();
  PROTOBUF_NODISCARD std::string* release_recpath();
  void set_allocated_recpath(std::string* ptr);

  private:
  const std::string& _internal_recpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recpath(
      const std::string& value);
  std::string* _internal_mutable_recpath();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetRecordingPathParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recpath_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableSelectRecordFileLocationAfterMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams) */ {
 public:
  inline EnableSelectRecordFileLocationAfterMeetingParams() : EnableSelectRecordFileLocationAfterMeetingParams(nullptr) {}
  ~EnableSelectRecordFileLocationAfterMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR EnableSelectRecordFileLocationAfterMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableSelectRecordFileLocationAfterMeetingParams(const EnableSelectRecordFileLocationAfterMeetingParams& from);
  EnableSelectRecordFileLocationAfterMeetingParams(EnableSelectRecordFileLocationAfterMeetingParams&& from) noexcept
    : EnableSelectRecordFileLocationAfterMeetingParams() {
    *this = ::std::move(from);
  }

  inline EnableSelectRecordFileLocationAfterMeetingParams& operator=(const EnableSelectRecordFileLocationAfterMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableSelectRecordFileLocationAfterMeetingParams& operator=(EnableSelectRecordFileLocationAfterMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableSelectRecordFileLocationAfterMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableSelectRecordFileLocationAfterMeetingParams* internal_default_instance() {
    return reinterpret_cast<const EnableSelectRecordFileLocationAfterMeetingParams*>(
               &_EnableSelectRecordFileLocationAfterMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(EnableSelectRecordFileLocationAfterMeetingParams& a, EnableSelectRecordFileLocationAfterMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableSelectRecordFileLocationAfterMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableSelectRecordFileLocationAfterMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableSelectRecordFileLocationAfterMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableSelectRecordFileLocationAfterMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableSelectRecordFileLocationAfterMeetingParams& from);
  void MergeFrom(const EnableSelectRecordFileLocationAfterMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableSelectRecordFileLocationAfterMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams";
  }
  protected:
  explicit EnableSelectRecordFileLocationAfterMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableMultiAudioStreamRecordParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams) */ {
 public:
  inline EnableMultiAudioStreamRecordParams() : EnableMultiAudioStreamRecordParams(nullptr) {}
  ~EnableMultiAudioStreamRecordParams() override;
  explicit PROTOBUF_CONSTEXPR EnableMultiAudioStreamRecordParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableMultiAudioStreamRecordParams(const EnableMultiAudioStreamRecordParams& from);
  EnableMultiAudioStreamRecordParams(EnableMultiAudioStreamRecordParams&& from) noexcept
    : EnableMultiAudioStreamRecordParams() {
    *this = ::std::move(from);
  }

  inline EnableMultiAudioStreamRecordParams& operator=(const EnableMultiAudioStreamRecordParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableMultiAudioStreamRecordParams& operator=(EnableMultiAudioStreamRecordParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableMultiAudioStreamRecordParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableMultiAudioStreamRecordParams* internal_default_instance() {
    return reinterpret_cast<const EnableMultiAudioStreamRecordParams*>(
               &_EnableMultiAudioStreamRecordParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(EnableMultiAudioStreamRecordParams& a, EnableMultiAudioStreamRecordParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableMultiAudioStreamRecordParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableMultiAudioStreamRecordParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableMultiAudioStreamRecordParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableMultiAudioStreamRecordParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableMultiAudioStreamRecordParams& from);
  void MergeFrom(const EnableMultiAudioStreamRecordParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableMultiAudioStreamRecordParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableMultiAudioStreamRecordParams";
  }
  protected:
  explicit EnableMultiAudioStreamRecordParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAddTimestampWatermarkParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAddTimestampWatermarkParams) */ {
 public:
  inline EnableAddTimestampWatermarkParams() : EnableAddTimestampWatermarkParams(nullptr) {}
  ~EnableAddTimestampWatermarkParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAddTimestampWatermarkParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAddTimestampWatermarkParams(const EnableAddTimestampWatermarkParams& from);
  EnableAddTimestampWatermarkParams(EnableAddTimestampWatermarkParams&& from) noexcept
    : EnableAddTimestampWatermarkParams() {
    *this = ::std::move(from);
  }

  inline EnableAddTimestampWatermarkParams& operator=(const EnableAddTimestampWatermarkParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAddTimestampWatermarkParams& operator=(EnableAddTimestampWatermarkParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAddTimestampWatermarkParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAddTimestampWatermarkParams* internal_default_instance() {
    return reinterpret_cast<const EnableAddTimestampWatermarkParams*>(
               &_EnableAddTimestampWatermarkParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(EnableAddTimestampWatermarkParams& a, EnableAddTimestampWatermarkParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAddTimestampWatermarkParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAddTimestampWatermarkParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAddTimestampWatermarkParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAddTimestampWatermarkParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAddTimestampWatermarkParams& from);
  void MergeFrom(const EnableAddTimestampWatermarkParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAddTimestampWatermarkParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAddTimestampWatermarkParams";
  }
  protected:
  explicit EnableAddTimestampWatermarkParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableOptimizeFor3rdPartyVideoEditorParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams) */ {
 public:
  inline EnableOptimizeFor3rdPartyVideoEditorParams() : EnableOptimizeFor3rdPartyVideoEditorParams(nullptr) {}
  ~EnableOptimizeFor3rdPartyVideoEditorParams() override;
  explicit PROTOBUF_CONSTEXPR EnableOptimizeFor3rdPartyVideoEditorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableOptimizeFor3rdPartyVideoEditorParams(const EnableOptimizeFor3rdPartyVideoEditorParams& from);
  EnableOptimizeFor3rdPartyVideoEditorParams(EnableOptimizeFor3rdPartyVideoEditorParams&& from) noexcept
    : EnableOptimizeFor3rdPartyVideoEditorParams() {
    *this = ::std::move(from);
  }

  inline EnableOptimizeFor3rdPartyVideoEditorParams& operator=(const EnableOptimizeFor3rdPartyVideoEditorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableOptimizeFor3rdPartyVideoEditorParams& operator=(EnableOptimizeFor3rdPartyVideoEditorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableOptimizeFor3rdPartyVideoEditorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableOptimizeFor3rdPartyVideoEditorParams* internal_default_instance() {
    return reinterpret_cast<const EnableOptimizeFor3rdPartyVideoEditorParams*>(
               &_EnableOptimizeFor3rdPartyVideoEditorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(EnableOptimizeFor3rdPartyVideoEditorParams& a, EnableOptimizeFor3rdPartyVideoEditorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableOptimizeFor3rdPartyVideoEditorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableOptimizeFor3rdPartyVideoEditorParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableOptimizeFor3rdPartyVideoEditorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableOptimizeFor3rdPartyVideoEditorParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableOptimizeFor3rdPartyVideoEditorParams& from);
  void MergeFrom(const EnableOptimizeFor3rdPartyVideoEditorParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableOptimizeFor3rdPartyVideoEditorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams";
  }
  protected:
  explicit EnableOptimizeFor3rdPartyVideoEditorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableShowVideoThumbnailWhenShareParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams) */ {
 public:
  inline EnableShowVideoThumbnailWhenShareParams() : EnableShowVideoThumbnailWhenShareParams(nullptr) {}
  ~EnableShowVideoThumbnailWhenShareParams() override;
  explicit PROTOBUF_CONSTEXPR EnableShowVideoThumbnailWhenShareParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableShowVideoThumbnailWhenShareParams(const EnableShowVideoThumbnailWhenShareParams& from);
  EnableShowVideoThumbnailWhenShareParams(EnableShowVideoThumbnailWhenShareParams&& from) noexcept
    : EnableShowVideoThumbnailWhenShareParams() {
    *this = ::std::move(from);
  }

  inline EnableShowVideoThumbnailWhenShareParams& operator=(const EnableShowVideoThumbnailWhenShareParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableShowVideoThumbnailWhenShareParams& operator=(EnableShowVideoThumbnailWhenShareParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableShowVideoThumbnailWhenShareParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableShowVideoThumbnailWhenShareParams* internal_default_instance() {
    return reinterpret_cast<const EnableShowVideoThumbnailWhenShareParams*>(
               &_EnableShowVideoThumbnailWhenShareParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(EnableShowVideoThumbnailWhenShareParams& a, EnableShowVideoThumbnailWhenShareParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableShowVideoThumbnailWhenShareParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableShowVideoThumbnailWhenShareParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableShowVideoThumbnailWhenShareParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableShowVideoThumbnailWhenShareParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableShowVideoThumbnailWhenShareParams& from);
  void MergeFrom(const EnableShowVideoThumbnailWhenShareParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableShowVideoThumbnailWhenShareParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams";
  }
  protected:
  explicit EnableShowVideoThumbnailWhenShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnablePlaceVideoNextToShareInRecordParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams) */ {
 public:
  inline EnablePlaceVideoNextToShareInRecordParams() : EnablePlaceVideoNextToShareInRecordParams(nullptr) {}
  ~EnablePlaceVideoNextToShareInRecordParams() override;
  explicit PROTOBUF_CONSTEXPR EnablePlaceVideoNextToShareInRecordParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnablePlaceVideoNextToShareInRecordParams(const EnablePlaceVideoNextToShareInRecordParams& from);
  EnablePlaceVideoNextToShareInRecordParams(EnablePlaceVideoNextToShareInRecordParams&& from) noexcept
    : EnablePlaceVideoNextToShareInRecordParams() {
    *this = ::std::move(from);
  }

  inline EnablePlaceVideoNextToShareInRecordParams& operator=(const EnablePlaceVideoNextToShareInRecordParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnablePlaceVideoNextToShareInRecordParams& operator=(EnablePlaceVideoNextToShareInRecordParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnablePlaceVideoNextToShareInRecordParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnablePlaceVideoNextToShareInRecordParams* internal_default_instance() {
    return reinterpret_cast<const EnablePlaceVideoNextToShareInRecordParams*>(
               &_EnablePlaceVideoNextToShareInRecordParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(EnablePlaceVideoNextToShareInRecordParams& a, EnablePlaceVideoNextToShareInRecordParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnablePlaceVideoNextToShareInRecordParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnablePlaceVideoNextToShareInRecordParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnablePlaceVideoNextToShareInRecordParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnablePlaceVideoNextToShareInRecordParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnablePlaceVideoNextToShareInRecordParams& from);
  void MergeFrom(const EnablePlaceVideoNextToShareInRecordParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnablePlaceVideoNextToShareInRecordParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams";
  }
  protected:
  explicit EnablePlaceVideoNextToShareInRecordParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableAdvancedFeatures4GeneralSettingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams) */ {
 public:
  inline DisableAdvancedFeatures4GeneralSettingParams() : DisableAdvancedFeatures4GeneralSettingParams(nullptr) {}
  ~DisableAdvancedFeatures4GeneralSettingParams() override;
  explicit PROTOBUF_CONSTEXPR DisableAdvancedFeatures4GeneralSettingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableAdvancedFeatures4GeneralSettingParams(const DisableAdvancedFeatures4GeneralSettingParams& from);
  DisableAdvancedFeatures4GeneralSettingParams(DisableAdvancedFeatures4GeneralSettingParams&& from) noexcept
    : DisableAdvancedFeatures4GeneralSettingParams() {
    *this = ::std::move(from);
  }

  inline DisableAdvancedFeatures4GeneralSettingParams& operator=(const DisableAdvancedFeatures4GeneralSettingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableAdvancedFeatures4GeneralSettingParams& operator=(DisableAdvancedFeatures4GeneralSettingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableAdvancedFeatures4GeneralSettingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableAdvancedFeatures4GeneralSettingParams* internal_default_instance() {
    return reinterpret_cast<const DisableAdvancedFeatures4GeneralSettingParams*>(
               &_DisableAdvancedFeatures4GeneralSettingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(DisableAdvancedFeatures4GeneralSettingParams& a, DisableAdvancedFeatures4GeneralSettingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableAdvancedFeatures4GeneralSettingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableAdvancedFeatures4GeneralSettingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableAdvancedFeatures4GeneralSettingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableAdvancedFeatures4GeneralSettingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableAdvancedFeatures4GeneralSettingParams& from);
  void MergeFrom(const DisableAdvancedFeatures4GeneralSettingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableAdvancedFeatures4GeneralSettingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams";
  }
  protected:
  explicit DisableAdvancedFeatures4GeneralSettingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DisableAccountSettingTabPageParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DisableAccountSettingTabPageParams) */ {
 public:
  inline DisableAccountSettingTabPageParams() : DisableAccountSettingTabPageParams(nullptr) {}
  ~DisableAccountSettingTabPageParams() override;
  explicit PROTOBUF_CONSTEXPR DisableAccountSettingTabPageParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableAccountSettingTabPageParams(const DisableAccountSettingTabPageParams& from);
  DisableAccountSettingTabPageParams(DisableAccountSettingTabPageParams&& from) noexcept
    : DisableAccountSettingTabPageParams() {
    *this = ::std::move(from);
  }

  inline DisableAccountSettingTabPageParams& operator=(const DisableAccountSettingTabPageParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableAccountSettingTabPageParams& operator=(DisableAccountSettingTabPageParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableAccountSettingTabPageParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableAccountSettingTabPageParams* internal_default_instance() {
    return reinterpret_cast<const DisableAccountSettingTabPageParams*>(
               &_DisableAccountSettingTabPageParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(DisableAccountSettingTabPageParams& a, DisableAccountSettingTabPageParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableAccountSettingTabPageParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableAccountSettingTabPageParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableAccountSettingTabPageParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableAccountSettingTabPageParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableAccountSettingTabPageParams& from);
  void MergeFrom(const DisableAccountSettingTabPageParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableAccountSettingTabPageParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DisableAccountSettingTabPageParams";
  }
  protected:
  explicit DisableAccountSettingTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDisableFieldNumber = 1,
  };
  // optional bool bDisable = 1;
  bool has_bdisable() const;
  void clear_bdisable() ;
  bool bdisable() const;
  void set_bdisable(bool value);

  private:
  bool _internal_bdisable() const;
  void _internal_set_bdisable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdisable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class HideAutoCopyInviteLinkCheckBoxParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams) */ {
 public:
  inline HideAutoCopyInviteLinkCheckBoxParams() : HideAutoCopyInviteLinkCheckBoxParams(nullptr) {}
  ~HideAutoCopyInviteLinkCheckBoxParams() override;
  explicit PROTOBUF_CONSTEXPR HideAutoCopyInviteLinkCheckBoxParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HideAutoCopyInviteLinkCheckBoxParams(const HideAutoCopyInviteLinkCheckBoxParams& from);
  HideAutoCopyInviteLinkCheckBoxParams(HideAutoCopyInviteLinkCheckBoxParams&& from) noexcept
    : HideAutoCopyInviteLinkCheckBoxParams() {
    *this = ::std::move(from);
  }

  inline HideAutoCopyInviteLinkCheckBoxParams& operator=(const HideAutoCopyInviteLinkCheckBoxParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HideAutoCopyInviteLinkCheckBoxParams& operator=(HideAutoCopyInviteLinkCheckBoxParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HideAutoCopyInviteLinkCheckBoxParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HideAutoCopyInviteLinkCheckBoxParams* internal_default_instance() {
    return reinterpret_cast<const HideAutoCopyInviteLinkCheckBoxParams*>(
               &_HideAutoCopyInviteLinkCheckBoxParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(HideAutoCopyInviteLinkCheckBoxParams& a, HideAutoCopyInviteLinkCheckBoxParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HideAutoCopyInviteLinkCheckBoxParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HideAutoCopyInviteLinkCheckBoxParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HideAutoCopyInviteLinkCheckBoxParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HideAutoCopyInviteLinkCheckBoxParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HideAutoCopyInviteLinkCheckBoxParams& from);
  void MergeFrom(const HideAutoCopyInviteLinkCheckBoxParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HideAutoCopyInviteLinkCheckBoxParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams";
  }
  protected:
  explicit HideAutoCopyInviteLinkCheckBoxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBHideFieldNumber = 1,
  };
  // optional bool bHide = 1;
  bool has_bhide() const;
  void clear_bhide() ;
  bool bhide() const;
  void set_bhide(bool value);

  private:
  bool _internal_bhide() const;
  void _internal_set_bhide(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bhide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ConfigToShowUrlLinksInSettingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams) */ {
 public:
  inline ConfigToShowUrlLinksInSettingParams() : ConfigToShowUrlLinksInSettingParams(nullptr) {}
  ~ConfigToShowUrlLinksInSettingParams() override;
  explicit PROTOBUF_CONSTEXPR ConfigToShowUrlLinksInSettingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigToShowUrlLinksInSettingParams(const ConfigToShowUrlLinksInSettingParams& from);
  ConfigToShowUrlLinksInSettingParams(ConfigToShowUrlLinksInSettingParams&& from) noexcept
    : ConfigToShowUrlLinksInSettingParams() {
    *this = ::std::move(from);
  }

  inline ConfigToShowUrlLinksInSettingParams& operator=(const ConfigToShowUrlLinksInSettingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigToShowUrlLinksInSettingParams& operator=(ConfigToShowUrlLinksInSettingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ConfigToShowUrlLinksInSettingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigToShowUrlLinksInSettingParams* internal_default_instance() {
    return reinterpret_cast<const ConfigToShowUrlLinksInSettingParams*>(
               &_ConfigToShowUrlLinksInSettingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(ConfigToShowUrlLinksInSettingParams& a, ConfigToShowUrlLinksInSettingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigToShowUrlLinksInSettingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigToShowUrlLinksInSettingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigToShowUrlLinksInSettingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigToShowUrlLinksInSettingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ConfigToShowUrlLinksInSettingParams& from);
  void MergeFrom(const ConfigToShowUrlLinksInSettingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigToShowUrlLinksInSettingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams";
  }
  protected:
  explicit ConfigToShowUrlLinksInSettingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowOptionFieldNumber = 1,
  };
  // optional uint64 showOption = 1;
  bool has_showoption() const;
  void clear_showoption() ;
  ::uint64_t showoption() const;
  void set_showoption(::uint64_t value);

  private:
  ::uint64_t _internal_showoption() const;
  void _internal_set_showoption(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t showoption_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ConfSettingDialogShownTabPageParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams) */ {
 public:
  inline ConfSettingDialogShownTabPageParams() : ConfSettingDialogShownTabPageParams(nullptr) {}
  ~ConfSettingDialogShownTabPageParams() override;
  explicit PROTOBUF_CONSTEXPR ConfSettingDialogShownTabPageParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfSettingDialogShownTabPageParams(const ConfSettingDialogShownTabPageParams& from);
  ConfSettingDialogShownTabPageParams(ConfSettingDialogShownTabPageParams&& from) noexcept
    : ConfSettingDialogShownTabPageParams() {
    *this = ::std::move(from);
  }

  inline ConfSettingDialogShownTabPageParams& operator=(const ConfSettingDialogShownTabPageParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfSettingDialogShownTabPageParams& operator=(ConfSettingDialogShownTabPageParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ConfSettingDialogShownTabPageParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfSettingDialogShownTabPageParams* internal_default_instance() {
    return reinterpret_cast<const ConfSettingDialogShownTabPageParams*>(
               &_ConfSettingDialogShownTabPageParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(ConfSettingDialogShownTabPageParams& a, ConfSettingDialogShownTabPageParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfSettingDialogShownTabPageParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfSettingDialogShownTabPageParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfSettingDialogShownTabPageParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfSettingDialogShownTabPageParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ConfSettingDialogShownTabPageParams& from);
  void MergeFrom(const ConfSettingDialogShownTabPageParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfSettingDialogShownTabPageParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ConfSettingDialogShownTabPageParams";
  }
  protected:
  explicit ConfSettingDialogShownTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowOptionFieldNumber = 1,
  };
  // optional uint64 showOption = 1;
  bool has_showoption() const;
  void clear_showoption() ;
  ::uint64_t showoption() const;
  void set_showoption(::uint64_t value);

  private:
  ::uint64_t _internal_showoption() const;
  void _internal_set_showoption(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t showoption_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SelectVideoCameraParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SelectVideoCameraParams) */ {
 public:
  inline SelectVideoCameraParams() : SelectVideoCameraParams(nullptr) {}
  ~SelectVideoCameraParams() override;
  explicit PROTOBUF_CONSTEXPR SelectVideoCameraParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectVideoCameraParams(const SelectVideoCameraParams& from);
  SelectVideoCameraParams(SelectVideoCameraParams&& from) noexcept
    : SelectVideoCameraParams() {
    *this = ::std::move(from);
  }

  inline SelectVideoCameraParams& operator=(const SelectVideoCameraParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectVideoCameraParams& operator=(SelectVideoCameraParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SelectVideoCameraParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectVideoCameraParams* internal_default_instance() {
    return reinterpret_cast<const SelectVideoCameraParams*>(
               &_SelectVideoCameraParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(SelectVideoCameraParams& a, SelectVideoCameraParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectVideoCameraParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectVideoCameraParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectVideoCameraParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectVideoCameraParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SelectVideoCameraParams& from);
  void MergeFrom(const SelectVideoCameraParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectVideoCameraParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SelectVideoCameraParams";
  }
  protected:
  explicit SelectVideoCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SelectVideoCameraParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableVideoMirrorEffectParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableVideoMirrorEffectParams) */ {
 public:
  inline EnableVideoMirrorEffectParams() : EnableVideoMirrorEffectParams(nullptr) {}
  ~EnableVideoMirrorEffectParams() override;
  explicit PROTOBUF_CONSTEXPR EnableVideoMirrorEffectParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableVideoMirrorEffectParams(const EnableVideoMirrorEffectParams& from);
  EnableVideoMirrorEffectParams(EnableVideoMirrorEffectParams&& from) noexcept
    : EnableVideoMirrorEffectParams() {
    *this = ::std::move(from);
  }

  inline EnableVideoMirrorEffectParams& operator=(const EnableVideoMirrorEffectParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableVideoMirrorEffectParams& operator=(EnableVideoMirrorEffectParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableVideoMirrorEffectParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableVideoMirrorEffectParams* internal_default_instance() {
    return reinterpret_cast<const EnableVideoMirrorEffectParams*>(
               &_EnableVideoMirrorEffectParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(EnableVideoMirrorEffectParams& a, EnableVideoMirrorEffectParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableVideoMirrorEffectParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableVideoMirrorEffectParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableVideoMirrorEffectParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableVideoMirrorEffectParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableVideoMirrorEffectParams& from);
  void MergeFrom(const EnableVideoMirrorEffectParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableVideoMirrorEffectParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableVideoMirrorEffectParams";
  }
  protected:
  explicit EnableVideoMirrorEffectParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableFaceBeautyEffectParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableFaceBeautyEffectParams) */ {
 public:
  inline EnableFaceBeautyEffectParams() : EnableFaceBeautyEffectParams(nullptr) {}
  ~EnableFaceBeautyEffectParams() override;
  explicit PROTOBUF_CONSTEXPR EnableFaceBeautyEffectParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableFaceBeautyEffectParams(const EnableFaceBeautyEffectParams& from);
  EnableFaceBeautyEffectParams(EnableFaceBeautyEffectParams&& from) noexcept
    : EnableFaceBeautyEffectParams() {
    *this = ::std::move(from);
  }

  inline EnableFaceBeautyEffectParams& operator=(const EnableFaceBeautyEffectParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableFaceBeautyEffectParams& operator=(EnableFaceBeautyEffectParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableFaceBeautyEffectParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableFaceBeautyEffectParams* internal_default_instance() {
    return reinterpret_cast<const EnableFaceBeautyEffectParams*>(
               &_EnableFaceBeautyEffectParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(EnableFaceBeautyEffectParams& a, EnableFaceBeautyEffectParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableFaceBeautyEffectParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableFaceBeautyEffectParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableFaceBeautyEffectParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableFaceBeautyEffectParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableFaceBeautyEffectParams& from);
  void MergeFrom(const EnableFaceBeautyEffectParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableFaceBeautyEffectParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableFaceBeautyEffectParams";
  }
  protected:
  explicit EnableFaceBeautyEffectParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableHDVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableHDVideoParams) */ {
 public:
  inline EnableHDVideoParams() : EnableHDVideoParams(nullptr) {}
  ~EnableHDVideoParams() override;
  explicit PROTOBUF_CONSTEXPR EnableHDVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableHDVideoParams(const EnableHDVideoParams& from);
  EnableHDVideoParams(EnableHDVideoParams&& from) noexcept
    : EnableHDVideoParams() {
    *this = ::std::move(from);
  }

  inline EnableHDVideoParams& operator=(const EnableHDVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableHDVideoParams& operator=(EnableHDVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableHDVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableHDVideoParams* internal_default_instance() {
    return reinterpret_cast<const EnableHDVideoParams*>(
               &_EnableHDVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(EnableHDVideoParams& a, EnableHDVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableHDVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableHDVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableHDVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableHDVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableHDVideoParams& from);
  void MergeFrom(const EnableHDVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableHDVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableHDVideoParams";
  }
  protected:
  explicit EnableHDVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableHDVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAlwaysShowNameOnVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams) */ {
 public:
  inline EnableAlwaysShowNameOnVideoParams() : EnableAlwaysShowNameOnVideoParams(nullptr) {}
  ~EnableAlwaysShowNameOnVideoParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAlwaysShowNameOnVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAlwaysShowNameOnVideoParams(const EnableAlwaysShowNameOnVideoParams& from);
  EnableAlwaysShowNameOnVideoParams(EnableAlwaysShowNameOnVideoParams&& from) noexcept
    : EnableAlwaysShowNameOnVideoParams() {
    *this = ::std::move(from);
  }

  inline EnableAlwaysShowNameOnVideoParams& operator=(const EnableAlwaysShowNameOnVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAlwaysShowNameOnVideoParams& operator=(EnableAlwaysShowNameOnVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAlwaysShowNameOnVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAlwaysShowNameOnVideoParams* internal_default_instance() {
    return reinterpret_cast<const EnableAlwaysShowNameOnVideoParams*>(
               &_EnableAlwaysShowNameOnVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(EnableAlwaysShowNameOnVideoParams& a, EnableAlwaysShowNameOnVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAlwaysShowNameOnVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAlwaysShowNameOnVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAlwaysShowNameOnVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAlwaysShowNameOnVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAlwaysShowNameOnVideoParams& from);
  void MergeFrom(const EnableAlwaysShowNameOnVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAlwaysShowNameOnVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams";
  }
  protected:
  explicit EnableAlwaysShowNameOnVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableVideoPreviewDialogParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableVideoPreviewDialogParams) */ {
 public:
  inline EnableVideoPreviewDialogParams() : EnableVideoPreviewDialogParams(nullptr) {}
  ~EnableVideoPreviewDialogParams() override;
  explicit PROTOBUF_CONSTEXPR EnableVideoPreviewDialogParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableVideoPreviewDialogParams(const EnableVideoPreviewDialogParams& from);
  EnableVideoPreviewDialogParams(EnableVideoPreviewDialogParams&& from) noexcept
    : EnableVideoPreviewDialogParams() {
    *this = ::std::move(from);
  }

  inline EnableVideoPreviewDialogParams& operator=(const EnableVideoPreviewDialogParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableVideoPreviewDialogParams& operator=(EnableVideoPreviewDialogParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableVideoPreviewDialogParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableVideoPreviewDialogParams* internal_default_instance() {
    return reinterpret_cast<const EnableVideoPreviewDialogParams*>(
               &_EnableVideoPreviewDialogParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(EnableVideoPreviewDialogParams& a, EnableVideoPreviewDialogParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableVideoPreviewDialogParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableVideoPreviewDialogParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableVideoPreviewDialogParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableVideoPreviewDialogParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableVideoPreviewDialogParams& from);
  void MergeFrom(const EnableVideoPreviewDialogParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableVideoPreviewDialogParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableVideoPreviewDialogParams";
  }
  protected:
  explicit EnableVideoPreviewDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableAutoTurnOffVideoWhenJoinMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams) */ {
 public:
  inline EnableAutoTurnOffVideoWhenJoinMeetingParams() : EnableAutoTurnOffVideoWhenJoinMeetingParams(nullptr) {}
  ~EnableAutoTurnOffVideoWhenJoinMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAutoTurnOffVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAutoTurnOffVideoWhenJoinMeetingParams(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from);
  EnableAutoTurnOffVideoWhenJoinMeetingParams(EnableAutoTurnOffVideoWhenJoinMeetingParams&& from) noexcept
    : EnableAutoTurnOffVideoWhenJoinMeetingParams() {
    *this = ::std::move(from);
  }

  inline EnableAutoTurnOffVideoWhenJoinMeetingParams& operator=(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAutoTurnOffVideoWhenJoinMeetingParams& operator=(EnableAutoTurnOffVideoWhenJoinMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAutoTurnOffVideoWhenJoinMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAutoTurnOffVideoWhenJoinMeetingParams* internal_default_instance() {
    return reinterpret_cast<const EnableAutoTurnOffVideoWhenJoinMeetingParams*>(
               &_EnableAutoTurnOffVideoWhenJoinMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(EnableAutoTurnOffVideoWhenJoinMeetingParams& a, EnableAutoTurnOffVideoWhenJoinMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAutoTurnOffVideoWhenJoinMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAutoTurnOffVideoWhenJoinMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAutoTurnOffVideoWhenJoinMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAutoTurnOffVideoWhenJoinMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from);
  void MergeFrom(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAutoTurnOffVideoWhenJoinMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams";
  }
  protected:
  explicit EnableAutoTurnOffVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableSpotlightSelfParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableSpotlightSelfParams) */ {
 public:
  inline EnableSpotlightSelfParams() : EnableSpotlightSelfParams(nullptr) {}
  ~EnableSpotlightSelfParams() override;
  explicit PROTOBUF_CONSTEXPR EnableSpotlightSelfParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableSpotlightSelfParams(const EnableSpotlightSelfParams& from);
  EnableSpotlightSelfParams(EnableSpotlightSelfParams&& from) noexcept
    : EnableSpotlightSelfParams() {
    *this = ::std::move(from);
  }

  inline EnableSpotlightSelfParams& operator=(const EnableSpotlightSelfParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableSpotlightSelfParams& operator=(EnableSpotlightSelfParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableSpotlightSelfParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableSpotlightSelfParams* internal_default_instance() {
    return reinterpret_cast<const EnableSpotlightSelfParams*>(
               &_EnableSpotlightSelfParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(EnableSpotlightSelfParams& a, EnableSpotlightSelfParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableSpotlightSelfParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableSpotlightSelfParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableSpotlightSelfParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableSpotlightSelfParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableSpotlightSelfParams& from);
  void MergeFrom(const EnableSpotlightSelfParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableSpotlightSelfParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableSpotlightSelfParams";
  }
  protected:
  explicit EnableSpotlightSelfParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableSpotlightSelfParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableHardwareEncodeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableHardwareEncodeParams) */ {
 public:
  inline EnableHardwareEncodeParams() : EnableHardwareEncodeParams(nullptr) {}
  ~EnableHardwareEncodeParams() override;
  explicit PROTOBUF_CONSTEXPR EnableHardwareEncodeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableHardwareEncodeParams(const EnableHardwareEncodeParams& from);
  EnableHardwareEncodeParams(EnableHardwareEncodeParams&& from) noexcept
    : EnableHardwareEncodeParams() {
    *this = ::std::move(from);
  }

  inline EnableHardwareEncodeParams& operator=(const EnableHardwareEncodeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableHardwareEncodeParams& operator=(EnableHardwareEncodeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableHardwareEncodeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableHardwareEncodeParams* internal_default_instance() {
    return reinterpret_cast<const EnableHardwareEncodeParams*>(
               &_EnableHardwareEncodeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(EnableHardwareEncodeParams& a, EnableHardwareEncodeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableHardwareEncodeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableHardwareEncodeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableHardwareEncodeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableHardwareEncodeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableHardwareEncodeParams& from);
  void MergeFrom(const EnableHardwareEncodeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableHardwareEncodeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableHardwareEncodeParams";
  }
  protected:
  explicit EnableHardwareEncodeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
    kEncodeTypeFieldNumber = 2,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // optional int32 encodeType = 2;
  bool has_encodetype() const;
  void clear_encodetype() ;
  ::int32_t encodetype() const;
  void set_encodetype(::int32_t value);

  private:
  ::int32_t _internal_encodetype() const;
  void _internal_set_encodetype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableHardwareEncodeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
    ::int32_t encodetype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class IsHardwareEncodeEnabledParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.IsHardwareEncodeEnabledParams) */ {
 public:
  inline IsHardwareEncodeEnabledParams() : IsHardwareEncodeEnabledParams(nullptr) {}
  ~IsHardwareEncodeEnabledParams() override;
  explicit PROTOBUF_CONSTEXPR IsHardwareEncodeEnabledParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsHardwareEncodeEnabledParams(const IsHardwareEncodeEnabledParams& from);
  IsHardwareEncodeEnabledParams(IsHardwareEncodeEnabledParams&& from) noexcept
    : IsHardwareEncodeEnabledParams() {
    *this = ::std::move(from);
  }

  inline IsHardwareEncodeEnabledParams& operator=(const IsHardwareEncodeEnabledParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsHardwareEncodeEnabledParams& operator=(IsHardwareEncodeEnabledParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IsHardwareEncodeEnabledParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsHardwareEncodeEnabledParams* internal_default_instance() {
    return reinterpret_cast<const IsHardwareEncodeEnabledParams*>(
               &_IsHardwareEncodeEnabledParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(IsHardwareEncodeEnabledParams& a, IsHardwareEncodeEnabledParams& b) {
    a.Swap(&b);
  }
  inline void Swap(IsHardwareEncodeEnabledParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsHardwareEncodeEnabledParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsHardwareEncodeEnabledParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsHardwareEncodeEnabledParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IsHardwareEncodeEnabledParams& from);
  void MergeFrom(const IsHardwareEncodeEnabledParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsHardwareEncodeEnabledParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.IsHardwareEncodeEnabledParams";
  }
  protected:
  explicit IsHardwareEncodeEnabledParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodeTypeFieldNumber = 1,
  };
  // optional int32 encodeType = 1;
  bool has_encodetype() const;
  void clear_encodetype() ;
  ::int32_t encodetype() const;
  void set_encodetype(::int32_t value);

  private:
  ::int32_t _internal_encodetype() const;
  void _internal_set_encodetype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t encodetype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class Enable49VideoesInGallaryViewParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams) */ {
 public:
  inline Enable49VideoesInGallaryViewParams() : Enable49VideoesInGallaryViewParams(nullptr) {}
  ~Enable49VideoesInGallaryViewParams() override;
  explicit PROTOBUF_CONSTEXPR Enable49VideoesInGallaryViewParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Enable49VideoesInGallaryViewParams(const Enable49VideoesInGallaryViewParams& from);
  Enable49VideoesInGallaryViewParams(Enable49VideoesInGallaryViewParams&& from) noexcept
    : Enable49VideoesInGallaryViewParams() {
    *this = ::std::move(from);
  }

  inline Enable49VideoesInGallaryViewParams& operator=(const Enable49VideoesInGallaryViewParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enable49VideoesInGallaryViewParams& operator=(Enable49VideoesInGallaryViewParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Enable49VideoesInGallaryViewParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const Enable49VideoesInGallaryViewParams* internal_default_instance() {
    return reinterpret_cast<const Enable49VideoesInGallaryViewParams*>(
               &_Enable49VideoesInGallaryViewParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(Enable49VideoesInGallaryViewParams& a, Enable49VideoesInGallaryViewParams& b) {
    a.Swap(&b);
  }
  inline void Swap(Enable49VideoesInGallaryViewParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enable49VideoesInGallaryViewParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enable49VideoesInGallaryViewParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enable49VideoesInGallaryViewParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Enable49VideoesInGallaryViewParams& from);
  void MergeFrom(const Enable49VideoesInGallaryViewParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Enable49VideoesInGallaryViewParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.Enable49VideoesInGallaryViewParams";
  }
  protected:
  explicit Enable49VideoesInGallaryViewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableHideNoVideoUsersOnWallViewParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams) */ {
 public:
  inline EnableHideNoVideoUsersOnWallViewParams() : EnableHideNoVideoUsersOnWallViewParams(nullptr) {}
  ~EnableHideNoVideoUsersOnWallViewParams() override;
  explicit PROTOBUF_CONSTEXPR EnableHideNoVideoUsersOnWallViewParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableHideNoVideoUsersOnWallViewParams(const EnableHideNoVideoUsersOnWallViewParams& from);
  EnableHideNoVideoUsersOnWallViewParams(EnableHideNoVideoUsersOnWallViewParams&& from) noexcept
    : EnableHideNoVideoUsersOnWallViewParams() {
    *this = ::std::move(from);
  }

  inline EnableHideNoVideoUsersOnWallViewParams& operator=(const EnableHideNoVideoUsersOnWallViewParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableHideNoVideoUsersOnWallViewParams& operator=(EnableHideNoVideoUsersOnWallViewParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableHideNoVideoUsersOnWallViewParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableHideNoVideoUsersOnWallViewParams* internal_default_instance() {
    return reinterpret_cast<const EnableHideNoVideoUsersOnWallViewParams*>(
               &_EnableHideNoVideoUsersOnWallViewParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(EnableHideNoVideoUsersOnWallViewParams& a, EnableHideNoVideoUsersOnWallViewParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableHideNoVideoUsersOnWallViewParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableHideNoVideoUsersOnWallViewParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableHideNoVideoUsersOnWallViewParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableHideNoVideoUsersOnWallViewParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableHideNoVideoUsersOnWallViewParams& from);
  void MergeFrom(const EnableHideNoVideoUsersOnWallViewParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableHideNoVideoUsersOnWallViewParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams";
  }
  protected:
  explicit EnableHideNoVideoUsersOnWallViewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class GenerateSSOLoginWebURLParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.GenerateSSOLoginWebURLParams) */ {
 public:
  inline GenerateSSOLoginWebURLParams() : GenerateSSOLoginWebURLParams(nullptr) {}
  ~GenerateSSOLoginWebURLParams() override;
  explicit PROTOBUF_CONSTEXPR GenerateSSOLoginWebURLParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateSSOLoginWebURLParams(const GenerateSSOLoginWebURLParams& from);
  GenerateSSOLoginWebURLParams(GenerateSSOLoginWebURLParams&& from) noexcept
    : GenerateSSOLoginWebURLParams() {
    *this = ::std::move(from);
  }

  inline GenerateSSOLoginWebURLParams& operator=(const GenerateSSOLoginWebURLParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateSSOLoginWebURLParams& operator=(GenerateSSOLoginWebURLParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GenerateSSOLoginWebURLParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateSSOLoginWebURLParams* internal_default_instance() {
    return reinterpret_cast<const GenerateSSOLoginWebURLParams*>(
               &_GenerateSSOLoginWebURLParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(GenerateSSOLoginWebURLParams& a, GenerateSSOLoginWebURLParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateSSOLoginWebURLParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateSSOLoginWebURLParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateSSOLoginWebURLParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateSSOLoginWebURLParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GenerateSSOLoginWebURLParams& from);
  void MergeFrom(const GenerateSSOLoginWebURLParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenerateSSOLoginWebURLParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.GenerateSSOLoginWebURLParams";
  }
  protected:
  explicit GenerateSSOLoginWebURLParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixOfVanityUrlFieldNumber = 1,
  };
  // optional string prefixOfVanityUrl = 1;
  bool has_prefixofvanityurl() const;
  void clear_prefixofvanityurl() ;
  const std::string& prefixofvanityurl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefixofvanityurl(Arg_&& arg, Args_... args);
  std::string* mutable_prefixofvanityurl();
  PROTOBUF_NODISCARD std::string* release_prefixofvanityurl();
  void set_allocated_prefixofvanityurl(std::string* ptr);

  private:
  const std::string& _internal_prefixofvanityurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefixofvanityurl(
      const std::string& value);
  std::string* _internal_mutable_prefixofvanityurl();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefixofvanityurl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SSOLoginWithWebUriProtocolParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams) */ {
 public:
  inline SSOLoginWithWebUriProtocolParams() : SSOLoginWithWebUriProtocolParams(nullptr) {}
  ~SSOLoginWithWebUriProtocolParams() override;
  explicit PROTOBUF_CONSTEXPR SSOLoginWithWebUriProtocolParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSOLoginWithWebUriProtocolParams(const SSOLoginWithWebUriProtocolParams& from);
  SSOLoginWithWebUriProtocolParams(SSOLoginWithWebUriProtocolParams&& from) noexcept
    : SSOLoginWithWebUriProtocolParams() {
    *this = ::std::move(from);
  }

  inline SSOLoginWithWebUriProtocolParams& operator=(const SSOLoginWithWebUriProtocolParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSOLoginWithWebUriProtocolParams& operator=(SSOLoginWithWebUriProtocolParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SSOLoginWithWebUriProtocolParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSOLoginWithWebUriProtocolParams* internal_default_instance() {
    return reinterpret_cast<const SSOLoginWithWebUriProtocolParams*>(
               &_SSOLoginWithWebUriProtocolParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(SSOLoginWithWebUriProtocolParams& a, SSOLoginWithWebUriProtocolParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SSOLoginWithWebUriProtocolParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSOLoginWithWebUriProtocolParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSOLoginWithWebUriProtocolParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSOLoginWithWebUriProtocolParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SSOLoginWithWebUriProtocolParams& from);
  void MergeFrom(const SSOLoginWithWebUriProtocolParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SSOLoginWithWebUriProtocolParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams";
  }
  protected:
  explicit SSOLoginWithWebUriProtocolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriProtocolFieldNumber = 1,
  };
  // optional string uriProtocol = 1;
  bool has_uriprotocol() const;
  void clear_uriprotocol() ;
  const std::string& uriprotocol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uriprotocol(Arg_&& arg, Args_... args);
  std::string* mutable_uriprotocol();
  PROTOBUF_NODISCARD std::string* release_uriprotocol();
  void set_allocated_uriprotocol(std::string* ptr);

  private:
  const std::string& _internal_uriprotocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uriprotocol(
      const std::string& value);
  std::string* _internal_mutable_uriprotocol();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uriprotocol_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ShowAANPanelParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ShowAANPanelParams) */ {
 public:
  inline ShowAANPanelParams() : ShowAANPanelParams(nullptr) {}
  ~ShowAANPanelParams() override;
  explicit PROTOBUF_CONSTEXPR ShowAANPanelParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowAANPanelParams(const ShowAANPanelParams& from);
  ShowAANPanelParams(ShowAANPanelParams&& from) noexcept
    : ShowAANPanelParams() {
    *this = ::std::move(from);
  }

  inline ShowAANPanelParams& operator=(const ShowAANPanelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowAANPanelParams& operator=(ShowAANPanelParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowAANPanelParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowAANPanelParams* internal_default_instance() {
    return reinterpret_cast<const ShowAANPanelParams*>(
               &_ShowAANPanelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(ShowAANPanelParams& a, ShowAANPanelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowAANPanelParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowAANPanelParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowAANPanelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowAANPanelParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShowAANPanelParams& from);
  void MergeFrom(const ShowAANPanelParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowAANPanelParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ShowAANPanelParams";
  }
  protected:
  explicit ShowAANPanelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWindowIDFieldNumber = 3,
  };
  // optional uint32 x = 1;
  bool has_x() const;
  void clear_x() ;
  ::uint32_t x() const;
  void set_x(::uint32_t value);

  private:
  ::uint32_t _internal_x() const;
  void _internal_set_x(::uint32_t value);

  public:
  // optional uint32 y = 2;
  bool has_y() const;
  void clear_y() ;
  ::uint32_t y() const;
  void set_y(::uint32_t value);

  private:
  ::uint32_t _internal_y() const;
  void _internal_set_y(::uint32_t value);

  public:
  // optional uint64 WindowID = 3;
  bool has_windowid() const;
  void clear_windowid() ;
  ::uint64_t windowid() const;
  void set_windowid(::uint64_t value);

  private:
  ::uint64_t _internal_windowid() const;
  void _internal_set_windowid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ShowAANPanelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t x_;
    ::uint32_t y_;
    ::uint64_t windowid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableInviteLinkOnMeetingUIParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams) */ {
 public:
  inline EnableInviteLinkOnMeetingUIParams() : EnableInviteLinkOnMeetingUIParams(nullptr) {}
  ~EnableInviteLinkOnMeetingUIParams() override;
  explicit PROTOBUF_CONSTEXPR EnableInviteLinkOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableInviteLinkOnMeetingUIParams(const EnableInviteLinkOnMeetingUIParams& from);
  EnableInviteLinkOnMeetingUIParams(EnableInviteLinkOnMeetingUIParams&& from) noexcept
    : EnableInviteLinkOnMeetingUIParams() {
    *this = ::std::move(from);
  }

  inline EnableInviteLinkOnMeetingUIParams& operator=(const EnableInviteLinkOnMeetingUIParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableInviteLinkOnMeetingUIParams& operator=(EnableInviteLinkOnMeetingUIParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableInviteLinkOnMeetingUIParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableInviteLinkOnMeetingUIParams* internal_default_instance() {
    return reinterpret_cast<const EnableInviteLinkOnMeetingUIParams*>(
               &_EnableInviteLinkOnMeetingUIParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(EnableInviteLinkOnMeetingUIParams& a, EnableInviteLinkOnMeetingUIParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableInviteLinkOnMeetingUIParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableInviteLinkOnMeetingUIParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableInviteLinkOnMeetingUIParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableInviteLinkOnMeetingUIParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableInviteLinkOnMeetingUIParams& from);
  void MergeFrom(const EnableInviteLinkOnMeetingUIParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableInviteLinkOnMeetingUIParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams";
  }
  protected:
  explicit EnableInviteLinkOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetMeetingTopicParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetMeetingTopicParams) */ {
 public:
  inline SetMeetingTopicParams() : SetMeetingTopicParams(nullptr) {}
  ~SetMeetingTopicParams() override;
  explicit PROTOBUF_CONSTEXPR SetMeetingTopicParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMeetingTopicParams(const SetMeetingTopicParams& from);
  SetMeetingTopicParams(SetMeetingTopicParams&& from) noexcept
    : SetMeetingTopicParams() {
    *this = ::std::move(from);
  }

  inline SetMeetingTopicParams& operator=(const SetMeetingTopicParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMeetingTopicParams& operator=(SetMeetingTopicParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetMeetingTopicParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMeetingTopicParams* internal_default_instance() {
    return reinterpret_cast<const SetMeetingTopicParams*>(
               &_SetMeetingTopicParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(SetMeetingTopicParams& a, SetMeetingTopicParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMeetingTopicParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMeetingTopicParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMeetingTopicParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMeetingTopicParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetMeetingTopicParams& from);
  void MergeFrom(const SetMeetingTopicParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetMeetingTopicParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetMeetingTopicParams";
  }
  protected:
  explicit SetMeetingTopicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeetingTopicFieldNumber = 1,
  };
  // optional string meetingTopic = 1;
  bool has_meetingtopic() const;
  void clear_meetingtopic() ;
  const std::string& meetingtopic() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_meetingtopic(Arg_&& arg, Args_... args);
  std::string* mutable_meetingtopic();
  PROTOBUF_NODISCARD std::string* release_meetingtopic();
  void set_allocated_meetingtopic(std::string* ptr);

  private:
  const std::string& _internal_meetingtopic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meetingtopic(
      const std::string& value);
  std::string* _internal_mutable_meetingtopic();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetMeetingTopicParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meetingtopic_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetCustomizedCloudRecordingMgrUrlParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams) */ {
 public:
  inline SetCustomizedCloudRecordingMgrUrlParams() : SetCustomizedCloudRecordingMgrUrlParams(nullptr) {}
  ~SetCustomizedCloudRecordingMgrUrlParams() override;
  explicit PROTOBUF_CONSTEXPR SetCustomizedCloudRecordingMgrUrlParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCustomizedCloudRecordingMgrUrlParams(const SetCustomizedCloudRecordingMgrUrlParams& from);
  SetCustomizedCloudRecordingMgrUrlParams(SetCustomizedCloudRecordingMgrUrlParams&& from) noexcept
    : SetCustomizedCloudRecordingMgrUrlParams() {
    *this = ::std::move(from);
  }

  inline SetCustomizedCloudRecordingMgrUrlParams& operator=(const SetCustomizedCloudRecordingMgrUrlParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCustomizedCloudRecordingMgrUrlParams& operator=(SetCustomizedCloudRecordingMgrUrlParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetCustomizedCloudRecordingMgrUrlParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCustomizedCloudRecordingMgrUrlParams* internal_default_instance() {
    return reinterpret_cast<const SetCustomizedCloudRecordingMgrUrlParams*>(
               &_SetCustomizedCloudRecordingMgrUrlParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(SetCustomizedCloudRecordingMgrUrlParams& a, SetCustomizedCloudRecordingMgrUrlParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCustomizedCloudRecordingMgrUrlParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCustomizedCloudRecordingMgrUrlParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCustomizedCloudRecordingMgrUrlParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCustomizedCloudRecordingMgrUrlParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetCustomizedCloudRecordingMgrUrlParams& from);
  void MergeFrom(const SetCustomizedCloudRecordingMgrUrlParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetCustomizedCloudRecordingMgrUrlParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams";
  }
  protected:
  explicit SetCustomizedCloudRecordingMgrUrlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrmURLFieldNumber = 1,
  };
  // optional string crmURL = 1;
  bool has_crmurl() const;
  void clear_crmurl() ;
  const std::string& crmurl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crmurl(Arg_&& arg, Args_... args);
  std::string* mutable_crmurl();
  PROTOBUF_NODISCARD std::string* release_crmurl();
  void set_allocated_crmurl(std::string* ptr);

  private:
  const std::string& _internal_crmurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crmurl(
      const std::string& value);
  std::string* _internal_mutable_crmurl();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crmurl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetCustomizedInvitationDomainParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetCustomizedInvitationDomainParams) */ {
 public:
  inline SetCustomizedInvitationDomainParams() : SetCustomizedInvitationDomainParams(nullptr) {}
  ~SetCustomizedInvitationDomainParams() override;
  explicit PROTOBUF_CONSTEXPR SetCustomizedInvitationDomainParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCustomizedInvitationDomainParams(const SetCustomizedInvitationDomainParams& from);
  SetCustomizedInvitationDomainParams(SetCustomizedInvitationDomainParams&& from) noexcept
    : SetCustomizedInvitationDomainParams() {
    *this = ::std::move(from);
  }

  inline SetCustomizedInvitationDomainParams& operator=(const SetCustomizedInvitationDomainParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCustomizedInvitationDomainParams& operator=(SetCustomizedInvitationDomainParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetCustomizedInvitationDomainParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCustomizedInvitationDomainParams* internal_default_instance() {
    return reinterpret_cast<const SetCustomizedInvitationDomainParams*>(
               &_SetCustomizedInvitationDomainParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(SetCustomizedInvitationDomainParams& a, SetCustomizedInvitationDomainParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCustomizedInvitationDomainParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCustomizedInvitationDomainParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCustomizedInvitationDomainParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCustomizedInvitationDomainParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetCustomizedInvitationDomainParams& from);
  void MergeFrom(const SetCustomizedInvitationDomainParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetCustomizedInvitationDomainParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetCustomizedInvitationDomainParams";
  }
  protected:
  explicit SetCustomizedInvitationDomainParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationDomainFieldNumber = 1,
  };
  // optional string invitation_domain = 1;
  bool has_invitation_domain() const;
  void clear_invitation_domain() ;
  const std::string& invitation_domain() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_invitation_domain(Arg_&& arg, Args_... args);
  std::string* mutable_invitation_domain();
  PROTOBUF_NODISCARD std::string* release_invitation_domain();
  void set_allocated_invitation_domain(std::string* ptr);

  private:
  const std::string& _internal_invitation_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_domain(
      const std::string& value);
  std::string* _internal_mutable_invitation_domain();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetCustomizedInvitationDomainParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_domain_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetCustomizedPollingUrlParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetCustomizedPollingUrlParams) */ {
 public:
  inline SetCustomizedPollingUrlParams() : SetCustomizedPollingUrlParams(nullptr) {}
  ~SetCustomizedPollingUrlParams() override;
  explicit PROTOBUF_CONSTEXPR SetCustomizedPollingUrlParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCustomizedPollingUrlParams(const SetCustomizedPollingUrlParams& from);
  SetCustomizedPollingUrlParams(SetCustomizedPollingUrlParams&& from) noexcept
    : SetCustomizedPollingUrlParams() {
    *this = ::std::move(from);
  }

  inline SetCustomizedPollingUrlParams& operator=(const SetCustomizedPollingUrlParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCustomizedPollingUrlParams& operator=(SetCustomizedPollingUrlParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetCustomizedPollingUrlParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCustomizedPollingUrlParams* internal_default_instance() {
    return reinterpret_cast<const SetCustomizedPollingUrlParams*>(
               &_SetCustomizedPollingUrlParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(SetCustomizedPollingUrlParams& a, SetCustomizedPollingUrlParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCustomizedPollingUrlParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCustomizedPollingUrlParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCustomizedPollingUrlParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCustomizedPollingUrlParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetCustomizedPollingUrlParams& from);
  void MergeFrom(const SetCustomizedPollingUrlParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetCustomizedPollingUrlParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetCustomizedPollingUrlParams";
  }
  protected:
  explicit SetCustomizedPollingUrlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPollingURLFieldNumber = 1,
    kBCreateFieldNumber = 2,
  };
  // optional string pollingURL = 1;
  bool has_pollingurl() const;
  void clear_pollingurl() ;
  const std::string& pollingurl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pollingurl(Arg_&& arg, Args_... args);
  std::string* mutable_pollingurl();
  PROTOBUF_NODISCARD std::string* release_pollingurl();
  void set_allocated_pollingurl(std::string* ptr);

  private:
  const std::string& _internal_pollingurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pollingurl(
      const std::string& value);
  std::string* _internal_mutable_pollingurl();

  public:
  // optional bool bCreate = 2;
  bool has_bcreate() const;
  void clear_bcreate() ;
  bool bcreate() const;
  void set_bcreate(bool value);

  private:
  bool _internal_bcreate() const;
  void _internal_set_bcreate(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetCustomizedPollingUrlParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pollingurl_;
    bool bcreate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetAudioShareModeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetAudioShareModeParams) */ {
 public:
  inline SetAudioShareModeParams() : SetAudioShareModeParams(nullptr) {}
  ~SetAudioShareModeParams() override;
  explicit PROTOBUF_CONSTEXPR SetAudioShareModeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAudioShareModeParams(const SetAudioShareModeParams& from);
  SetAudioShareModeParams(SetAudioShareModeParams&& from) noexcept
    : SetAudioShareModeParams() {
    *this = ::std::move(from);
  }

  inline SetAudioShareModeParams& operator=(const SetAudioShareModeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAudioShareModeParams& operator=(SetAudioShareModeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetAudioShareModeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAudioShareModeParams* internal_default_instance() {
    return reinterpret_cast<const SetAudioShareModeParams*>(
               &_SetAudioShareModeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(SetAudioShareModeParams& a, SetAudioShareModeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAudioShareModeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAudioShareModeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAudioShareModeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAudioShareModeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetAudioShareModeParams& from);
  void MergeFrom(const SetAudioShareModeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetAudioShareModeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetAudioShareModeParams";
  }
  protected:
  explicit SetAudioShareModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // optional int32 mode = 1;
  bool has_mode() const;
  void clear_mode() ;
  ::int32_t mode() const;
  void set_mode(::int32_t value);

  private:
  ::int32_t _internal_mode() const;
  void _internal_set_mode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetAudioShareModeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StartLiveStreamParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StartLiveStreamParams) */ {
 public:
  inline StartLiveStreamParams() : StartLiveStreamParams(nullptr) {}
  ~StartLiveStreamParams() override;
  explicit PROTOBUF_CONSTEXPR StartLiveStreamParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartLiveStreamParams(const StartLiveStreamParams& from);
  StartLiveStreamParams(StartLiveStreamParams&& from) noexcept
    : StartLiveStreamParams() {
    *this = ::std::move(from);
  }

  inline StartLiveStreamParams& operator=(const StartLiveStreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLiveStreamParams& operator=(StartLiveStreamParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartLiveStreamParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartLiveStreamParams* internal_default_instance() {
    return reinterpret_cast<const StartLiveStreamParams*>(
               &_StartLiveStreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(StartLiveStreamParams& a, StartLiveStreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLiveStreamParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartLiveStreamParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartLiveStreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartLiveStreamParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartLiveStreamParams& from);
  void MergeFrom(const StartLiveStreamParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartLiveStreamParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StartLiveStreamParams";
  }
  protected:
  explicit StartLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiveStreamHandleFieldNumber = 1,
  };
  // optional int64 liveStreamHandle = 1;
  bool has_livestreamhandle() const;
  void clear_livestreamhandle() ;
  ::int64_t livestreamhandle() const;
  void set_livestreamhandle(::int64_t value);

  private:
  ::int64_t _internal_livestreamhandle() const;
  void _internal_set_livestreamhandle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StartLiveStreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t livestreamhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StartLiveStreamWithSteamingURLParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams) */ {
 public:
  inline StartLiveStreamWithSteamingURLParams() : StartLiveStreamWithSteamingURLParams(nullptr) {}
  ~StartLiveStreamWithSteamingURLParams() override;
  explicit PROTOBUF_CONSTEXPR StartLiveStreamWithSteamingURLParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartLiveStreamWithSteamingURLParams(const StartLiveStreamWithSteamingURLParams& from);
  StartLiveStreamWithSteamingURLParams(StartLiveStreamWithSteamingURLParams&& from) noexcept
    : StartLiveStreamWithSteamingURLParams() {
    *this = ::std::move(from);
  }

  inline StartLiveStreamWithSteamingURLParams& operator=(const StartLiveStreamWithSteamingURLParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLiveStreamWithSteamingURLParams& operator=(StartLiveStreamWithSteamingURLParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartLiveStreamWithSteamingURLParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartLiveStreamWithSteamingURLParams* internal_default_instance() {
    return reinterpret_cast<const StartLiveStreamWithSteamingURLParams*>(
               &_StartLiveStreamWithSteamingURLParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(StartLiveStreamWithSteamingURLParams& a, StartLiveStreamWithSteamingURLParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLiveStreamWithSteamingURLParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartLiveStreamWithSteamingURLParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartLiveStreamWithSteamingURLParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartLiveStreamWithSteamingURLParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartLiveStreamWithSteamingURLParams& from);
  void MergeFrom(const StartLiveStreamWithSteamingURLParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartLiveStreamWithSteamingURLParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams";
  }
  protected:
  explicit StartLiveStreamWithSteamingURLParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingURLFieldNumber = 1,
    kStreamingKeyFieldNumber = 2,
    kBroadcastURLFieldNumber = 3,
  };
  // optional string streamingURL = 1;
  bool has_streamingurl() const;
  void clear_streamingurl() ;
  const std::string& streamingurl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_streamingurl(Arg_&& arg, Args_... args);
  std::string* mutable_streamingurl();
  PROTOBUF_NODISCARD std::string* release_streamingurl();
  void set_allocated_streamingurl(std::string* ptr);

  private:
  const std::string& _internal_streamingurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_streamingurl(
      const std::string& value);
  std::string* _internal_mutable_streamingurl();

  public:
  // optional string streamingKey = 2;
  bool has_streamingkey() const;
  void clear_streamingkey() ;
  const std::string& streamingkey() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_streamingkey(Arg_&& arg, Args_... args);
  std::string* mutable_streamingkey();
  PROTOBUF_NODISCARD std::string* release_streamingkey();
  void set_allocated_streamingkey(std::string* ptr);

  private:
  const std::string& _internal_streamingkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_streamingkey(
      const std::string& value);
  std::string* _internal_mutable_streamingkey();

  public:
  // optional string broadcastURL = 3;
  bool has_broadcasturl() const;
  void clear_broadcasturl() ;
  const std::string& broadcasturl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_broadcasturl(Arg_&& arg, Args_... args);
  std::string* mutable_broadcasturl();
  PROTOBUF_NODISCARD std::string* release_broadcasturl();
  void set_allocated_broadcasturl(std::string* ptr);

  private:
  const std::string& _internal_broadcasturl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcasturl(
      const std::string& value);
  std::string* _internal_mutable_broadcasturl();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamingurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamingkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcasturl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class StartRawLiveStreamParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.StartRawLiveStreamParams) */ {
 public:
  inline StartRawLiveStreamParams() : StartRawLiveStreamParams(nullptr) {}
  ~StartRawLiveStreamParams() override;
  explicit PROTOBUF_CONSTEXPR StartRawLiveStreamParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRawLiveStreamParams(const StartRawLiveStreamParams& from);
  StartRawLiveStreamParams(StartRawLiveStreamParams&& from) noexcept
    : StartRawLiveStreamParams() {
    *this = ::std::move(from);
  }

  inline StartRawLiveStreamParams& operator=(const StartRawLiveStreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRawLiveStreamParams& operator=(StartRawLiveStreamParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartRawLiveStreamParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRawLiveStreamParams* internal_default_instance() {
    return reinterpret_cast<const StartRawLiveStreamParams*>(
               &_StartRawLiveStreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(StartRawLiveStreamParams& a, StartRawLiveStreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRawLiveStreamParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRawLiveStreamParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRawLiveStreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRawLiveStreamParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartRawLiveStreamParams& from);
  void MergeFrom(const StartRawLiveStreamParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartRawLiveStreamParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.StartRawLiveStreamParams";
  }
  protected:
  explicit StartRawLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastURLFieldNumber = 1,
  };
  // optional string broadcastURL = 1;
  bool has_broadcasturl() const;
  void clear_broadcasturl() ;
  const std::string& broadcasturl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_broadcasturl(Arg_&& arg, Args_... args);
  std::string* mutable_broadcasturl();
  PROTOBUF_NODISCARD std::string* release_broadcasturl();
  void set_allocated_broadcasturl(std::string* ptr);

  private:
  const std::string& _internal_broadcasturl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcasturl(
      const std::string& value);
  std::string* _internal_mutable_broadcasturl();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.StartRawLiveStreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcasturl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class GetLiveStreamItemInfoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.GetLiveStreamItemInfoParams) */ {
 public:
  inline GetLiveStreamItemInfoParams() : GetLiveStreamItemInfoParams(nullptr) {}
  ~GetLiveStreamItemInfoParams() override;
  explicit PROTOBUF_CONSTEXPR GetLiveStreamItemInfoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLiveStreamItemInfoParams(const GetLiveStreamItemInfoParams& from);
  GetLiveStreamItemInfoParams(GetLiveStreamItemInfoParams&& from) noexcept
    : GetLiveStreamItemInfoParams() {
    *this = ::std::move(from);
  }

  inline GetLiveStreamItemInfoParams& operator=(const GetLiveStreamItemInfoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLiveStreamItemInfoParams& operator=(GetLiveStreamItemInfoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetLiveStreamItemInfoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLiveStreamItemInfoParams* internal_default_instance() {
    return reinterpret_cast<const GetLiveStreamItemInfoParams*>(
               &_GetLiveStreamItemInfoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(GetLiveStreamItemInfoParams& a, GetLiveStreamItemInfoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLiveStreamItemInfoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLiveStreamItemInfoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLiveStreamItemInfoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLiveStreamItemInfoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetLiveStreamItemInfoParams& from);
  void MergeFrom(const GetLiveStreamItemInfoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLiveStreamItemInfoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.GetLiveStreamItemInfoParams";
  }
  protected:
  explicit GetLiveStreamItemInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiveStreamHandleFieldNumber = 1,
  };
  // optional int64 liveStreamHandle = 1;
  bool has_livestreamhandle() const;
  void clear_livestreamhandle() ;
  ::int64_t livestreamhandle() const;
  void set_livestreamhandle(::int64_t value);

  private:
  ::int64_t _internal_livestreamhandle() const;
  void _internal_set_livestreamhandle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.GetLiveStreamItemInfoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t livestreamhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RequestRawLiveStreamParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RequestRawLiveStreamParams) */ {
 public:
  inline RequestRawLiveStreamParams() : RequestRawLiveStreamParams(nullptr) {}
  ~RequestRawLiveStreamParams() override;
  explicit PROTOBUF_CONSTEXPR RequestRawLiveStreamParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestRawLiveStreamParams(const RequestRawLiveStreamParams& from);
  RequestRawLiveStreamParams(RequestRawLiveStreamParams&& from) noexcept
    : RequestRawLiveStreamParams() {
    *this = ::std::move(from);
  }

  inline RequestRawLiveStreamParams& operator=(const RequestRawLiveStreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRawLiveStreamParams& operator=(RequestRawLiveStreamParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequestRawLiveStreamParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestRawLiveStreamParams* internal_default_instance() {
    return reinterpret_cast<const RequestRawLiveStreamParams*>(
               &_RequestRawLiveStreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(RequestRawLiveStreamParams& a, RequestRawLiveStreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestRawLiveStreamParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestRawLiveStreamParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestRawLiveStreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestRawLiveStreamParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequestRawLiveStreamParams& from);
  void MergeFrom(const RequestRawLiveStreamParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestRawLiveStreamParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RequestRawLiveStreamParams";
  }
  protected:
  explicit RequestRawLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastURLFieldNumber = 1,
  };
  // optional string broadcastURL = 1;
  bool has_broadcasturl() const;
  void clear_broadcasturl() ;
  const std::string& broadcasturl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_broadcasturl(Arg_&& arg, Args_... args);
  std::string* mutable_broadcasturl();
  PROTOBUF_NODISCARD std::string* release_broadcasturl();
  void set_allocated_broadcasturl(std::string* ptr);

  private:
  const std::string& _internal_broadcasturl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcasturl(
      const std::string& value);
  std::string* _internal_mutable_broadcasturl();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RequestRawLiveStreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcasturl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RemoveRawLiveStreamPrivilegeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams) */ {
 public:
  inline RemoveRawLiveStreamPrivilegeParams() : RemoveRawLiveStreamPrivilegeParams(nullptr) {}
  ~RemoveRawLiveStreamPrivilegeParams() override;
  explicit PROTOBUF_CONSTEXPR RemoveRawLiveStreamPrivilegeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveRawLiveStreamPrivilegeParams(const RemoveRawLiveStreamPrivilegeParams& from);
  RemoveRawLiveStreamPrivilegeParams(RemoveRawLiveStreamPrivilegeParams&& from) noexcept
    : RemoveRawLiveStreamPrivilegeParams() {
    *this = ::std::move(from);
  }

  inline RemoveRawLiveStreamPrivilegeParams& operator=(const RemoveRawLiveStreamPrivilegeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRawLiveStreamPrivilegeParams& operator=(RemoveRawLiveStreamPrivilegeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoveRawLiveStreamPrivilegeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveRawLiveStreamPrivilegeParams* internal_default_instance() {
    return reinterpret_cast<const RemoveRawLiveStreamPrivilegeParams*>(
               &_RemoveRawLiveStreamPrivilegeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(RemoveRawLiveStreamPrivilegeParams& a, RemoveRawLiveStreamPrivilegeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRawLiveStreamPrivilegeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRawLiveStreamPrivilegeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveRawLiveStreamPrivilegeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveRawLiveStreamPrivilegeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoveRawLiveStreamPrivilegeParams& from);
  void MergeFrom(const RemoveRawLiveStreamPrivilegeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveRawLiveStreamPrivilegeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams";
  }
  protected:
  explicit RemoveRawLiveStreamPrivilegeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // optional uint32 userID = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetSupportDarkModeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetSupportDarkModeParams) */ {
 public:
  inline SetSupportDarkModeParams() : SetSupportDarkModeParams(nullptr) {}
  ~SetSupportDarkModeParams() override;
  explicit PROTOBUF_CONSTEXPR SetSupportDarkModeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSupportDarkModeParams(const SetSupportDarkModeParams& from);
  SetSupportDarkModeParams(SetSupportDarkModeParams&& from) noexcept
    : SetSupportDarkModeParams() {
    *this = ::std::move(from);
  }

  inline SetSupportDarkModeParams& operator=(const SetSupportDarkModeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSupportDarkModeParams& operator=(SetSupportDarkModeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetSupportDarkModeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSupportDarkModeParams* internal_default_instance() {
    return reinterpret_cast<const SetSupportDarkModeParams*>(
               &_SetSupportDarkModeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(SetSupportDarkModeParams& a, SetSupportDarkModeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSupportDarkModeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSupportDarkModeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSupportDarkModeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSupportDarkModeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetSupportDarkModeParams& from);
  void MergeFrom(const SetSupportDarkModeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetSupportDarkModeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetSupportDarkModeParams";
  }
  protected:
  explicit SetSupportDarkModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportFieldNumber = 1,
  };
  // optional bool support = 1;
  bool has_support() const;
  void clear_support() ;
  bool support() const;
  void set_support(bool value);

  private:
  bool _internal_support() const;
  void _internal_set_support(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetSupportDarkModeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool support_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetPipeInitParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetPipeInitParams) */ {
 public:
  inline SetPipeInitParams() : SetPipeInitParams(nullptr) {}
  ~SetPipeInitParams() override;
  explicit PROTOBUF_CONSTEXPR SetPipeInitParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPipeInitParams(const SetPipeInitParams& from);
  SetPipeInitParams(SetPipeInitParams&& from) noexcept
    : SetPipeInitParams() {
    *this = ::std::move(from);
  }

  inline SetPipeInitParams& operator=(const SetPipeInitParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPipeInitParams& operator=(SetPipeInitParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetPipeInitParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPipeInitParams* internal_default_instance() {
    return reinterpret_cast<const SetPipeInitParams*>(
               &_SetPipeInitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(SetPipeInitParams& a, SetPipeInitParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPipeInitParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPipeInitParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPipeInitParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPipeInitParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetPipeInitParams& from);
  void MergeFrom(const SetPipeInitParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetPipeInitParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetPipeInitParams";
  }
  protected:
  explicit SetPipeInitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoPipeNameFieldNumber = 1,
    kSharePipeNameFieldNumber = 2,
    kAudioPipeNameFieldNumber = 3,
    kMaxReadLengthFieldNumber = 4,
  };
  // optional string videoPipeName = 1;
  bool has_videopipename() const;
  void clear_videopipename() ;
  const std::string& videopipename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_videopipename(Arg_&& arg, Args_... args);
  std::string* mutable_videopipename();
  PROTOBUF_NODISCARD std::string* release_videopipename();
  void set_allocated_videopipename(std::string* ptr);

  private:
  const std::string& _internal_videopipename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_videopipename(
      const std::string& value);
  std::string* _internal_mutable_videopipename();

  public:
  // optional string sharePipeName = 2;
  bool has_sharepipename() const;
  void clear_sharepipename() ;
  const std::string& sharepipename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sharepipename(Arg_&& arg, Args_... args);
  std::string* mutable_sharepipename();
  PROTOBUF_NODISCARD std::string* release_sharepipename();
  void set_allocated_sharepipename(std::string* ptr);

  private:
  const std::string& _internal_sharepipename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sharepipename(
      const std::string& value);
  std::string* _internal_mutable_sharepipename();

  public:
  // optional string audioPipeName = 3;
  bool has_audiopipename() const;
  void clear_audiopipename() ;
  const std::string& audiopipename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audiopipename(Arg_&& arg, Args_... args);
  std::string* mutable_audiopipename();
  PROTOBUF_NODISCARD std::string* release_audiopipename();
  void set_allocated_audiopipename(std::string* ptr);

  private:
  const std::string& _internal_audiopipename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audiopipename(
      const std::string& value);
  std::string* _internal_mutable_audiopipename();

  public:
  // optional uint64 maxReadLength = 4;
  bool has_maxreadlength() const;
  void clear_maxreadlength() ;
  ::uint64_t maxreadlength() const;
  void set_maxreadlength(::uint64_t value);

  private:
  ::uint64_t _internal_maxreadlength() const;
  void _internal_set_maxreadlength(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetPipeInitParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr videopipename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sharepipename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audiopipename_;
    ::uint64_t maxreadlength_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetParticipantsChatPrivilegeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams) */ {
 public:
  inline SetParticipantsChatPrivilegeParams() : SetParticipantsChatPrivilegeParams(nullptr) {}
  ~SetParticipantsChatPrivilegeParams() override;
  explicit PROTOBUF_CONSTEXPR SetParticipantsChatPrivilegeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetParticipantsChatPrivilegeParams(const SetParticipantsChatPrivilegeParams& from);
  SetParticipantsChatPrivilegeParams(SetParticipantsChatPrivilegeParams&& from) noexcept
    : SetParticipantsChatPrivilegeParams() {
    *this = ::std::move(from);
  }

  inline SetParticipantsChatPrivilegeParams& operator=(const SetParticipantsChatPrivilegeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParticipantsChatPrivilegeParams& operator=(SetParticipantsChatPrivilegeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetParticipantsChatPrivilegeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetParticipantsChatPrivilegeParams* internal_default_instance() {
    return reinterpret_cast<const SetParticipantsChatPrivilegeParams*>(
               &_SetParticipantsChatPrivilegeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(SetParticipantsChatPrivilegeParams& a, SetParticipantsChatPrivilegeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParticipantsChatPrivilegeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParticipantsChatPrivilegeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetParticipantsChatPrivilegeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetParticipantsChatPrivilegeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetParticipantsChatPrivilegeParams& from);
  void MergeFrom(const SetParticipantsChatPrivilegeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetParticipantsChatPrivilegeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetParticipantsChatPrivilegeParams";
  }
  protected:
  explicit SetParticipantsChatPrivilegeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeFieldNumber = 1,
  };
  // optional int32 privilege = 1;
  bool has_privilege() const;
  void clear_privilege() ;
  ::int32_t privilege() const;
  void set_privilege(::int32_t value);

  private:
  ::int32_t _internal_privilege() const;
  void _internal_set_privilege(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t privilege_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ChatMessageIDParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ChatMessageIDParams) */ {
 public:
  inline ChatMessageIDParams() : ChatMessageIDParams(nullptr) {}
  ~ChatMessageIDParams() override;
  explicit PROTOBUF_CONSTEXPR ChatMessageIDParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessageIDParams(const ChatMessageIDParams& from);
  ChatMessageIDParams(ChatMessageIDParams&& from) noexcept
    : ChatMessageIDParams() {
    *this = ::std::move(from);
  }

  inline ChatMessageIDParams& operator=(const ChatMessageIDParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageIDParams& operator=(ChatMessageIDParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChatMessageIDParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessageIDParams* internal_default_instance() {
    return reinterpret_cast<const ChatMessageIDParams*>(
               &_ChatMessageIDParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(ChatMessageIDParams& a, ChatMessageIDParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageIDParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageIDParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessageIDParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessageIDParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChatMessageIDParams& from);
  void MergeFrom(const ChatMessageIDParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatMessageIDParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ChatMessageIDParams";
  }
  protected:
  explicit ChatMessageIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIDFieldNumber = 1,
  };
  // optional string msgID = 1;
  bool has_msgid() const;
  void clear_msgid() ;
  const std::string& msgid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msgid(Arg_&& arg, Args_... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* ptr);

  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(
      const std::string& value);
  std::string* _internal_mutable_msgid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ChatMessageIDParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetChatMessageBuilderParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetChatMessageBuilderParams) */ {
 public:
  inline SetChatMessageBuilderParams() : SetChatMessageBuilderParams(nullptr) {}
  ~SetChatMessageBuilderParams() override;
  explicit PROTOBUF_CONSTEXPR SetChatMessageBuilderParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetChatMessageBuilderParams(const SetChatMessageBuilderParams& from);
  SetChatMessageBuilderParams(SetChatMessageBuilderParams&& from) noexcept
    : SetChatMessageBuilderParams() {
    *this = ::std::move(from);
  }

  inline SetChatMessageBuilderParams& operator=(const SetChatMessageBuilderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetChatMessageBuilderParams& operator=(SetChatMessageBuilderParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetChatMessageBuilderParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetChatMessageBuilderParams* internal_default_instance() {
    return reinterpret_cast<const SetChatMessageBuilderParams*>(
               &_SetChatMessageBuilderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(SetChatMessageBuilderParams& a, SetChatMessageBuilderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetChatMessageBuilderParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetChatMessageBuilderParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetChatMessageBuilderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetChatMessageBuilderParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetChatMessageBuilderParams& from);
  void MergeFrom(const SetChatMessageBuilderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetChatMessageBuilderParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetChatMessageBuilderParams";
  }
  protected:
  explicit SetChatMessageBuilderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kThreadIdFieldNumber = 3,
    kReceiverFieldNumber = 2,
    kTypeFieldNumber = 4,
    kPositionStartFieldNumber = 5,
    kPositionEndFieldNumber = 6,
    kBClearStylesFieldNumber = 7,
    kBClearFieldNumber = 8,
  };
  // optional string content = 1;
  bool has_content() const;
  void clear_content() ;
  const std::string& content() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // optional string threadId = 3;
  bool has_threadid() const;
  void clear_threadid() ;
  const std::string& threadid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_threadid(Arg_&& arg, Args_... args);
  std::string* mutable_threadid();
  PROTOBUF_NODISCARD std::string* release_threadid();
  void set_allocated_threadid(std::string* ptr);

  private:
  const std::string& _internal_threadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threadid(
      const std::string& value);
  std::string* _internal_mutable_threadid();

  public:
  // optional uint32 receiver = 2;
  bool has_receiver() const;
  void clear_receiver() ;
  ::uint32_t receiver() const;
  void set_receiver(::uint32_t value);

  private:
  ::uint32_t _internal_receiver() const;
  void _internal_set_receiver(::uint32_t value);

  public:
  // optional int32 type = 4;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // optional int32 positionStart = 5;
  bool has_positionstart() const;
  void clear_positionstart() ;
  ::int32_t positionstart() const;
  void set_positionstart(::int32_t value);

  private:
  ::int32_t _internal_positionstart() const;
  void _internal_set_positionstart(::int32_t value);

  public:
  // optional int32 positionEnd = 6;
  bool has_positionend() const;
  void clear_positionend() ;
  ::int32_t positionend() const;
  void set_positionend(::int32_t value);

  private:
  ::int32_t _internal_positionend() const;
  void _internal_set_positionend(::int32_t value);

  public:
  // optional bool bClearStyles = 7;
  bool has_bclearstyles() const;
  void clear_bclearstyles() ;
  bool bclearstyles() const;
  void set_bclearstyles(bool value);

  private:
  bool _internal_bclearstyles() const;
  void _internal_set_bclearstyles(bool value);

  public:
  // optional bool bClear = 8;
  bool has_bclear() const;
  void clear_bclear() ;
  bool bclear() const;
  void set_bclear(bool value);

  private:
  bool _internal_bclear() const;
  void _internal_set_bclear(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetChatMessageBuilderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threadid_;
    ::uint32_t receiver_;
    ::int32_t type_;
    ::int32_t positionstart_;
    ::int32_t positionend_;
    bool bclearstyles_;
    bool bclear_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class EnableWaitingRoomOnEntryParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams) */ {
 public:
  inline EnableWaitingRoomOnEntryParams() : EnableWaitingRoomOnEntryParams(nullptr) {}
  ~EnableWaitingRoomOnEntryParams() override;
  explicit PROTOBUF_CONSTEXPR EnableWaitingRoomOnEntryParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableWaitingRoomOnEntryParams(const EnableWaitingRoomOnEntryParams& from);
  EnableWaitingRoomOnEntryParams(EnableWaitingRoomOnEntryParams&& from) noexcept
    : EnableWaitingRoomOnEntryParams() {
    *this = ::std::move(from);
  }

  inline EnableWaitingRoomOnEntryParams& operator=(const EnableWaitingRoomOnEntryParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableWaitingRoomOnEntryParams& operator=(EnableWaitingRoomOnEntryParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableWaitingRoomOnEntryParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableWaitingRoomOnEntryParams* internal_default_instance() {
    return reinterpret_cast<const EnableWaitingRoomOnEntryParams*>(
               &_EnableWaitingRoomOnEntryParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(EnableWaitingRoomOnEntryParams& a, EnableWaitingRoomOnEntryParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableWaitingRoomOnEntryParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableWaitingRoomOnEntryParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableWaitingRoomOnEntryParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableWaitingRoomOnEntryParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableWaitingRoomOnEntryParams& from);
  void MergeFrom(const EnableWaitingRoomOnEntryParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableWaitingRoomOnEntryParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.EnableWaitingRoomOnEntryParams";
  }
  protected:
  explicit EnableWaitingRoomOnEntryParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class GetWaitingRoomUserInfoByIDParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams) */ {
 public:
  inline GetWaitingRoomUserInfoByIDParams() : GetWaitingRoomUserInfoByIDParams(nullptr) {}
  ~GetWaitingRoomUserInfoByIDParams() override;
  explicit PROTOBUF_CONSTEXPR GetWaitingRoomUserInfoByIDParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWaitingRoomUserInfoByIDParams(const GetWaitingRoomUserInfoByIDParams& from);
  GetWaitingRoomUserInfoByIDParams(GetWaitingRoomUserInfoByIDParams&& from) noexcept
    : GetWaitingRoomUserInfoByIDParams() {
    *this = ::std::move(from);
  }

  inline GetWaitingRoomUserInfoByIDParams& operator=(const GetWaitingRoomUserInfoByIDParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWaitingRoomUserInfoByIDParams& operator=(GetWaitingRoomUserInfoByIDParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetWaitingRoomUserInfoByIDParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWaitingRoomUserInfoByIDParams* internal_default_instance() {
    return reinterpret_cast<const GetWaitingRoomUserInfoByIDParams*>(
               &_GetWaitingRoomUserInfoByIDParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(GetWaitingRoomUserInfoByIDParams& a, GetWaitingRoomUserInfoByIDParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWaitingRoomUserInfoByIDParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWaitingRoomUserInfoByIDParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWaitingRoomUserInfoByIDParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWaitingRoomUserInfoByIDParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetWaitingRoomUserInfoByIDParams& from);
  void MergeFrom(const GetWaitingRoomUserInfoByIDParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetWaitingRoomUserInfoByIDParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams";
  }
  protected:
  explicit GetWaitingRoomUserInfoByIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // optional uint32 userid = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class AdmitToMeetingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.AdmitToMeetingParams) */ {
 public:
  inline AdmitToMeetingParams() : AdmitToMeetingParams(nullptr) {}
  ~AdmitToMeetingParams() override;
  explicit PROTOBUF_CONSTEXPR AdmitToMeetingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdmitToMeetingParams(const AdmitToMeetingParams& from);
  AdmitToMeetingParams(AdmitToMeetingParams&& from) noexcept
    : AdmitToMeetingParams() {
    *this = ::std::move(from);
  }

  inline AdmitToMeetingParams& operator=(const AdmitToMeetingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdmitToMeetingParams& operator=(AdmitToMeetingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AdmitToMeetingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdmitToMeetingParams* internal_default_instance() {
    return reinterpret_cast<const AdmitToMeetingParams*>(
               &_AdmitToMeetingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(AdmitToMeetingParams& a, AdmitToMeetingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AdmitToMeetingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdmitToMeetingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdmitToMeetingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdmitToMeetingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AdmitToMeetingParams& from);
  void MergeFrom(const AdmitToMeetingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdmitToMeetingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.AdmitToMeetingParams";
  }
  protected:
  explicit AdmitToMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // optional uint32 userid = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.AdmitToMeetingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class PutInWaitingRoomParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.PutInWaitingRoomParams) */ {
 public:
  inline PutInWaitingRoomParams() : PutInWaitingRoomParams(nullptr) {}
  ~PutInWaitingRoomParams() override;
  explicit PROTOBUF_CONSTEXPR PutInWaitingRoomParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutInWaitingRoomParams(const PutInWaitingRoomParams& from);
  PutInWaitingRoomParams(PutInWaitingRoomParams&& from) noexcept
    : PutInWaitingRoomParams() {
    *this = ::std::move(from);
  }

  inline PutInWaitingRoomParams& operator=(const PutInWaitingRoomParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutInWaitingRoomParams& operator=(PutInWaitingRoomParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PutInWaitingRoomParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutInWaitingRoomParams* internal_default_instance() {
    return reinterpret_cast<const PutInWaitingRoomParams*>(
               &_PutInWaitingRoomParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(PutInWaitingRoomParams& a, PutInWaitingRoomParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PutInWaitingRoomParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutInWaitingRoomParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutInWaitingRoomParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutInWaitingRoomParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PutInWaitingRoomParams& from);
  void MergeFrom(const PutInWaitingRoomParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutInWaitingRoomParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.PutInWaitingRoomParams";
  }
  protected:
  explicit PutInWaitingRoomParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // optional uint32 userid = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.PutInWaitingRoomParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class RenameUserParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.RenameUserParams) */ {
 public:
  inline RenameUserParams() : RenameUserParams(nullptr) {}
  ~RenameUserParams() override;
  explicit PROTOBUF_CONSTEXPR RenameUserParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenameUserParams(const RenameUserParams& from);
  RenameUserParams(RenameUserParams&& from) noexcept
    : RenameUserParams() {
    *this = ::std::move(from);
  }

  inline RenameUserParams& operator=(const RenameUserParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameUserParams& operator=(RenameUserParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RenameUserParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenameUserParams* internal_default_instance() {
    return reinterpret_cast<const RenameUserParams*>(
               &_RenameUserParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(RenameUserParams& a, RenameUserParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameUserParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameUserParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenameUserParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenameUserParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RenameUserParams& from);
  void MergeFrom(const RenameUserParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenameUserParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.RenameUserParams";
  }
  protected:
  explicit RenameUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewNameFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // optional string newName = 2;
  bool has_newname() const;
  void clear_newname() ;
  const std::string& newname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_newname(Arg_&& arg, Args_... args);
  std::string* mutable_newname();
  PROTOBUF_NODISCARD std::string* release_newname();
  void set_allocated_newname(std::string* ptr);

  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(
      const std::string& value);
  std::string* _internal_mutable_newname();

  public:
  // optional uint32 userid = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.RenameUserParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class ExpelUserParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.ExpelUserParams) */ {
 public:
  inline ExpelUserParams() : ExpelUserParams(nullptr) {}
  ~ExpelUserParams() override;
  explicit PROTOBUF_CONSTEXPR ExpelUserParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpelUserParams(const ExpelUserParams& from);
  ExpelUserParams(ExpelUserParams&& from) noexcept
    : ExpelUserParams() {
    *this = ::std::move(from);
  }

  inline ExpelUserParams& operator=(const ExpelUserParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpelUserParams& operator=(ExpelUserParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExpelUserParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpelUserParams* internal_default_instance() {
    return reinterpret_cast<const ExpelUserParams*>(
               &_ExpelUserParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(ExpelUserParams& a, ExpelUserParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpelUserParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpelUserParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpelUserParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpelUserParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExpelUserParams& from);
  void MergeFrom(const ExpelUserParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExpelUserParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.ExpelUserParams";
  }
  protected:
  explicit ExpelUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // optional uint32 userid = 1;
  bool has_userid() const;
  void clear_userid() ;
  ::uint32_t userid() const;
  void set_userid(::uint32_t value);

  private:
  ::uint32_t _internal_userid() const;
  void _internal_set_userid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.ExpelUserParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class AllowParticipantsToRequestCloudRecordingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams) */ {
 public:
  inline AllowParticipantsToRequestCloudRecordingParams() : AllowParticipantsToRequestCloudRecordingParams(nullptr) {}
  ~AllowParticipantsToRequestCloudRecordingParams() override;
  explicit PROTOBUF_CONSTEXPR AllowParticipantsToRequestCloudRecordingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllowParticipantsToRequestCloudRecordingParams(const AllowParticipantsToRequestCloudRecordingParams& from);
  AllowParticipantsToRequestCloudRecordingParams(AllowParticipantsToRequestCloudRecordingParams&& from) noexcept
    : AllowParticipantsToRequestCloudRecordingParams() {
    *this = ::std::move(from);
  }

  inline AllowParticipantsToRequestCloudRecordingParams& operator=(const AllowParticipantsToRequestCloudRecordingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowParticipantsToRequestCloudRecordingParams& operator=(AllowParticipantsToRequestCloudRecordingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AllowParticipantsToRequestCloudRecordingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllowParticipantsToRequestCloudRecordingParams* internal_default_instance() {
    return reinterpret_cast<const AllowParticipantsToRequestCloudRecordingParams*>(
               &_AllowParticipantsToRequestCloudRecordingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  friend void swap(AllowParticipantsToRequestCloudRecordingParams& a, AllowParticipantsToRequestCloudRecordingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowParticipantsToRequestCloudRecordingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowParticipantsToRequestCloudRecordingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllowParticipantsToRequestCloudRecordingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllowParticipantsToRequestCloudRecordingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AllowParticipantsToRequestCloudRecordingParams& from);
  void MergeFrom(const AllowParticipantsToRequestCloudRecordingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllowParticipantsToRequestCloudRecordingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams";
  }
  protected:
  explicit AllowParticipantsToRequestCloudRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBAllowFieldNumber = 1,
  };
  // optional bool bAllow = 1;
  bool has_ballow() const;
  void clear_ballow() ;
  bool ballow() const;
  void set_ballow(bool value);

  private:
  bool _internal_ballow() const;
  void _internal_set_ballow(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool ballow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DenyRequestStartCloudRecordingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams) */ {
 public:
  inline DenyRequestStartCloudRecordingParams() : DenyRequestStartCloudRecordingParams(nullptr) {}
  ~DenyRequestStartCloudRecordingParams() override;
  explicit PROTOBUF_CONSTEXPR DenyRequestStartCloudRecordingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DenyRequestStartCloudRecordingParams(const DenyRequestStartCloudRecordingParams& from);
  DenyRequestStartCloudRecordingParams(DenyRequestStartCloudRecordingParams&& from) noexcept
    : DenyRequestStartCloudRecordingParams() {
    *this = ::std::move(from);
  }

  inline DenyRequestStartCloudRecordingParams& operator=(const DenyRequestStartCloudRecordingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenyRequestStartCloudRecordingParams& operator=(DenyRequestStartCloudRecordingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DenyRequestStartCloudRecordingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DenyRequestStartCloudRecordingParams* internal_default_instance() {
    return reinterpret_cast<const DenyRequestStartCloudRecordingParams*>(
               &_DenyRequestStartCloudRecordingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(DenyRequestStartCloudRecordingParams& a, DenyRequestStartCloudRecordingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DenyRequestStartCloudRecordingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenyRequestStartCloudRecordingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DenyRequestStartCloudRecordingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DenyRequestStartCloudRecordingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DenyRequestStartCloudRecordingParams& from);
  void MergeFrom(const DenyRequestStartCloudRecordingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenyRequestStartCloudRecordingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DenyRequestStartCloudRecordingParams";
  }
  protected:
  explicit DenyRequestStartCloudRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDenyAllFieldNumber = 1,
  };
  // optional bool bDenyAll = 1;
  bool has_bdenyall() const;
  void clear_bdenyall() ;
  bool bdenyall() const;
  void set_bdenyall(bool value);

  private:
  bool _internal_bdenyall() const;
  void _internal_set_bdenyall(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdenyall_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class SetEnableOptionParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.SetEnableOptionParams) */ {
 public:
  inline SetEnableOptionParams() : SetEnableOptionParams(nullptr) {}
  ~SetEnableOptionParams() override;
  explicit PROTOBUF_CONSTEXPR SetEnableOptionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetEnableOptionParams(const SetEnableOptionParams& from);
  SetEnableOptionParams(SetEnableOptionParams&& from) noexcept
    : SetEnableOptionParams() {
    *this = ::std::move(from);
  }

  inline SetEnableOptionParams& operator=(const SetEnableOptionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEnableOptionParams& operator=(SetEnableOptionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetEnableOptionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEnableOptionParams* internal_default_instance() {
    return reinterpret_cast<const SetEnableOptionParams*>(
               &_SetEnableOptionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  friend void swap(SetEnableOptionParams& a, SetEnableOptionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEnableOptionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEnableOptionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEnableOptionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEnableOptionParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetEnableOptionParams& from);
  void MergeFrom(const SetEnableOptionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetEnableOptionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.SetEnableOptionParams";
  }
  protected:
  explicit SetEnableOptionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionFieldNumber = 1,
  };
  // optional uint32 option = 1;
  bool has_option() const;
  void clear_option() ;
  ::uint32_t option() const;
  void set_option(::uint32_t value);

  private:
  ::uint32_t _internal_option() const;
  void _internal_set_option(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.SetEnableOptionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t option_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class DeclineEnableParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.DeclineEnableParams) */ {
 public:
  inline DeclineEnableParams() : DeclineEnableParams(nullptr) {}
  ~DeclineEnableParams() override;
  explicit PROTOBUF_CONSTEXPR DeclineEnableParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeclineEnableParams(const DeclineEnableParams& from);
  DeclineEnableParams(DeclineEnableParams&& from) noexcept
    : DeclineEnableParams() {
    *this = ::std::move(from);
  }

  inline DeclineEnableParams& operator=(const DeclineEnableParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeclineEnableParams& operator=(DeclineEnableParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeclineEnableParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeclineEnableParams* internal_default_instance() {
    return reinterpret_cast<const DeclineEnableParams*>(
               &_DeclineEnableParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  friend void swap(DeclineEnableParams& a, DeclineEnableParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DeclineEnableParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeclineEnableParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeclineEnableParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeclineEnableParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DeclineEnableParams& from);
  void MergeFrom(const DeclineEnableParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeclineEnableParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.DeclineEnableParams";
  }
  protected:
  explicit DeclineEnableParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBDeclineAllFieldNumber = 1,
  };
  // optional bool bDeclineAll = 1;
  bool has_bdeclineall() const;
  void clear_bdeclineall() ;
  bool bdeclineall() const;
  void set_bdeclineall(bool value);

  private:
  bool _internal_bdeclineall() const;
  void _internal_set_bdeclineall(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.DeclineEnableParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bdeclineall_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};// -------------------------------------------------------------------

class InputScreenNameParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.sdk.proto.InputScreenNameParams) */ {
 public:
  inline InputScreenNameParams() : InputScreenNameParams(nullptr) {}
  ~InputScreenNameParams() override;
  explicit PROTOBUF_CONSTEXPR InputScreenNameParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputScreenNameParams(const InputScreenNameParams& from);
  InputScreenNameParams(InputScreenNameParams&& from) noexcept
    : InputScreenNameParams() {
    *this = ::std::move(from);
  }

  inline InputScreenNameParams& operator=(const InputScreenNameParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputScreenNameParams& operator=(InputScreenNameParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InputScreenNameParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputScreenNameParams* internal_default_instance() {
    return reinterpret_cast<const InputScreenNameParams*>(
               &_InputScreenNameParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(InputScreenNameParams& a, InputScreenNameParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InputScreenNameParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputScreenNameParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputScreenNameParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputScreenNameParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InputScreenNameParams& from);
  void MergeFrom(const InputScreenNameParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputScreenNameParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.sdk.proto.InputScreenNameParams";
  }
  protected:
  explicit InputScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenNameFieldNumber = 1,
  };
  // optional string screenName = 1;
  bool has_screenname() const;
  void clear_screenname() ;
  const std::string& screenname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_screenname(Arg_&& arg, Args_... args);
  std::string* mutable_screenname();
  PROTOBUF_NODISCARD std::string* release_screenname();
  void set_allocated_screenname(std::string* ptr);

  private:
  const std::string& _internal_screenname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_screenname(
      const std::string& value);
  std::string* _internal_mutable_screenname();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.sdk.proto.InputScreenNameParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fsdk_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InitSDKParams

// optional string path = 1;
inline bool InitSDKParams::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InitSDKParams::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InitSDKParams::path() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitSDKParams::set_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.path)
}
inline std::string* InitSDKParams::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InitSDKParams.path)
  return _s;
}
inline const std::string& InitSDKParams::_internal_path() const {
  return _impl_.path_.Get();
}
inline void InitSDKParams::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* InitSDKParams::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* InitSDKParams::release_path() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InitSDKParams.path)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InitSDKParams::set_allocated_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InitSDKParams.path)
}

// optional string domain = 2;
inline bool InitSDKParams::has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InitSDKParams::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InitSDKParams::domain() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.domain)
  return _internal_domain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitSDKParams::set_domain(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.domain_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.domain)
}
inline std::string* InitSDKParams::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InitSDKParams.domain)
  return _s;
}
inline const std::string& InitSDKParams::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void InitSDKParams::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* InitSDKParams::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.domain_.Mutable( GetArenaForAllocation());
}
inline std::string* InitSDKParams::release_domain() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InitSDKParams.domain)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.domain_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InitSDKParams::set_allocated_domain(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.domain_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.domain_.IsDefault()) {
          _impl_.domain_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InitSDKParams.domain)
}

// optional string customizedLanguageName = 3;
inline bool InitSDKParams::has_customizedlanguagename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void InitSDKParams::clear_customizedlanguagename() {
  _impl_.customizedlanguagename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& InitSDKParams::customizedlanguagename() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.customizedLanguageName)
  return _internal_customizedlanguagename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitSDKParams::set_customizedlanguagename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.customizedlanguagename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.customizedLanguageName)
}
inline std::string* InitSDKParams::mutable_customizedlanguagename() {
  std::string* _s = _internal_mutable_customizedlanguagename();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InitSDKParams.customizedLanguageName)
  return _s;
}
inline const std::string& InitSDKParams::_internal_customizedlanguagename() const {
  return _impl_.customizedlanguagename_.Get();
}
inline void InitSDKParams::_internal_set_customizedlanguagename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.customizedlanguagename_.Set(value, GetArenaForAllocation());
}
inline std::string* InitSDKParams::_internal_mutable_customizedlanguagename() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.customizedlanguagename_.Mutable( GetArenaForAllocation());
}
inline std::string* InitSDKParams::release_customizedlanguagename() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InitSDKParams.customizedLanguageName)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.customizedlanguagename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customizedlanguagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InitSDKParams::set_allocated_customizedlanguagename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.customizedlanguagename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customizedlanguagename_.IsDefault()) {
          _impl_.customizedlanguagename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InitSDKParams.customizedLanguageName)
}

// optional string customizedLanguageInfo = 4;
inline bool InitSDKParams::has_customizedlanguageinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void InitSDKParams::clear_customizedlanguageinfo() {
  _impl_.customizedlanguageinfo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& InitSDKParams::customizedlanguageinfo() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.customizedLanguageInfo)
  return _internal_customizedlanguageinfo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitSDKParams::set_customizedlanguageinfo(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.customizedlanguageinfo_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.customizedLanguageInfo)
}
inline std::string* InitSDKParams::mutable_customizedlanguageinfo() {
  std::string* _s = _internal_mutable_customizedlanguageinfo();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InitSDKParams.customizedLanguageInfo)
  return _s;
}
inline const std::string& InitSDKParams::_internal_customizedlanguageinfo() const {
  return _impl_.customizedlanguageinfo_.Get();
}
inline void InitSDKParams::_internal_set_customizedlanguageinfo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.customizedlanguageinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* InitSDKParams::_internal_mutable_customizedlanguageinfo() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.customizedlanguageinfo_.Mutable( GetArenaForAllocation());
}
inline std::string* InitSDKParams::release_customizedlanguageinfo() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InitSDKParams.customizedLanguageInfo)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.customizedlanguageinfo_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customizedlanguageinfo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InitSDKParams::set_allocated_customizedlanguageinfo(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.customizedlanguageinfo_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customizedlanguageinfo_.IsDefault()) {
          _impl_.customizedlanguageinfo_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InitSDKParams.customizedLanguageInfo)
}

// optional int32 customizedLanguageType = 5;
inline bool InitSDKParams::has_customizedlanguagetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void InitSDKParams::clear_customizedlanguagetype() {
  _impl_.customizedlanguagetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t InitSDKParams::customizedlanguagetype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.customizedLanguageType)
  return _internal_customizedlanguagetype();
}
inline void InitSDKParams::set_customizedlanguagetype(::int32_t value) {
  _internal_set_customizedlanguagetype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.customizedLanguageType)
}
inline ::int32_t InitSDKParams::_internal_customizedlanguagetype() const {
  return _impl_.customizedlanguagetype_;
}
inline void InitSDKParams::_internal_set_customizedlanguagetype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.customizedlanguagetype_ = value;
}

// optional string strSupportUrl = 6;
inline bool InitSDKParams::has_strsupporturl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void InitSDKParams::clear_strsupporturl() {
  _impl_.strsupporturl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& InitSDKParams::strsupporturl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.strSupportUrl)
  return _internal_strsupporturl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitSDKParams::set_strsupporturl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.strsupporturl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.strSupportUrl)
}
inline std::string* InitSDKParams::mutable_strsupporturl() {
  std::string* _s = _internal_mutable_strsupporturl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InitSDKParams.strSupportUrl)
  return _s;
}
inline const std::string& InitSDKParams::_internal_strsupporturl() const {
  return _impl_.strsupporturl_.Get();
}
inline void InitSDKParams::_internal_set_strsupporturl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;


  _impl_.strsupporturl_.Set(value, GetArenaForAllocation());
}
inline std::string* InitSDKParams::_internal_mutable_strsupporturl() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.strsupporturl_.Mutable( GetArenaForAllocation());
}
inline std::string* InitSDKParams::release_strsupporturl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InitSDKParams.strSupportUrl)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.strsupporturl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strsupporturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InitSDKParams::set_allocated_strsupporturl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.strsupporturl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strsupporturl_.IsDefault()) {
          _impl_.strsupporturl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InitSDKParams.strSupportUrl)
}

// optional int32 langID = 7;
inline bool InitSDKParams::has_langid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void InitSDKParams::clear_langid() {
  _impl_.langid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t InitSDKParams::langid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.langID)
  return _internal_langid();
}
inline void InitSDKParams::set_langid(::int32_t value) {
  _internal_set_langid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.langID)
}
inline ::int32_t InitSDKParams::_internal_langid() const {
  return _impl_.langid_;
}
inline void InitSDKParams::_internal_set_langid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.langid_ = value;
}

// optional bool enableLog = 8;
inline bool InitSDKParams::has_enablelog() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void InitSDKParams::clear_enablelog() {
  _impl_.enablelog_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool InitSDKParams::enablelog() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.enableLog)
  return _internal_enablelog();
}
inline void InitSDKParams::set_enablelog(bool value) {
  _internal_set_enablelog(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.enableLog)
}
inline bool InitSDKParams::_internal_enablelog() const {
  return _impl_.enablelog_;
}
inline void InitSDKParams::_internal_set_enablelog(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.enablelog_ = value;
}

// optional int32 appLocale = 9;
inline bool InitSDKParams::has_applocale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void InitSDKParams::clear_applocale() {
  _impl_.applocale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t InitSDKParams::applocale() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.appLocale)
  return _internal_applocale();
}
inline void InitSDKParams::set_applocale(::int32_t value) {
  _internal_set_applocale(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.appLocale)
}
inline ::int32_t InitSDKParams::_internal_applocale() const {
  return _impl_.applocale_;
}
inline void InitSDKParams::_internal_set_applocale(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.applocale_ = value;
}

// optional int32 logFileSize = 10;
inline bool InitSDKParams::has_logfilesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void InitSDKParams::clear_logfilesize() {
  _impl_.logfilesize_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t InitSDKParams::logfilesize() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.logFileSize)
  return _internal_logfilesize();
}
inline void InitSDKParams::set_logfilesize(::int32_t value) {
  _internal_set_logfilesize(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.logFileSize)
}
inline ::int32_t InitSDKParams::_internal_logfilesize() const {
  return _impl_.logfilesize_;
}
inline void InitSDKParams::_internal_set_logfilesize(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.logfilesize_ = value;
}

// optional bool enableGeneralDump = 11;
inline bool InitSDKParams::has_enablegeneraldump() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void InitSDKParams::clear_enablegeneraldump() {
  _impl_.enablegeneraldump_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool InitSDKParams::enablegeneraldump() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.enableGeneralDump)
  return _internal_enablegeneraldump();
}
inline void InitSDKParams::set_enablegeneraldump(bool value) {
  _internal_set_enablegeneraldump(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.enableGeneralDump)
}
inline bool InitSDKParams::_internal_enablegeneraldump() const {
  return _impl_.enablegeneraldump_;
}
inline void InitSDKParams::_internal_set_enablegeneraldump(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.enablegeneraldump_ = value;
}

// optional bool permonitorAwarenessMode = 12;
inline bool InitSDKParams::has_permonitorawarenessmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void InitSDKParams::clear_permonitorawarenessmode() {
  _impl_.permonitorawarenessmode_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool InitSDKParams::permonitorawarenessmode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.permonitorAwarenessMode)
  return _internal_permonitorawarenessmode();
}
inline void InitSDKParams::set_permonitorawarenessmode(bool value) {
  _internal_set_permonitorawarenessmode(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.permonitorAwarenessMode)
}
inline bool InitSDKParams::_internal_permonitorawarenessmode() const {
  return _impl_.permonitorawarenessmode_;
}
inline void InitSDKParams::_internal_set_permonitorawarenessmode(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.permonitorawarenessmode_ = value;
}

// optional int32 videoRenderMode = 13;
inline bool InitSDKParams::has_videorendermode() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void InitSDKParams::clear_videorendermode() {
  _impl_.videorendermode_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t InitSDKParams::videorendermode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.videoRenderMode)
  return _internal_videorendermode();
}
inline void InitSDKParams::set_videorendermode(::int32_t value) {
  _internal_set_videorendermode(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.videoRenderMode)
}
inline ::int32_t InitSDKParams::_internal_videorendermode() const {
  return _impl_.videorendermode_;
}
inline void InitSDKParams::_internal_set_videorendermode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.videorendermode_ = value;
}

// optional int32 videoRawdataMemoryMode = 14;
inline bool InitSDKParams::has_videorawdatamemorymode() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void InitSDKParams::clear_videorawdatamemorymode() {
  _impl_.videorawdatamemorymode_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t InitSDKParams::videorawdatamemorymode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.videoRawdataMemoryMode)
  return _internal_videorawdatamemorymode();
}
inline void InitSDKParams::set_videorawdatamemorymode(::int32_t value) {
  _internal_set_videorawdatamemorymode(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.videoRawdataMemoryMode)
}
inline ::int32_t InitSDKParams::_internal_videorawdatamemorymode() const {
  return _impl_.videorawdatamemorymode_;
}
inline void InitSDKParams::_internal_set_videorawdatamemorymode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.videorawdatamemorymode_ = value;
}

// optional int32 shareRawdataMemoryMode = 15;
inline bool InitSDKParams::has_sharerawdatamemorymode() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void InitSDKParams::clear_sharerawdatamemorymode() {
  _impl_.sharerawdatamemorymode_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t InitSDKParams::sharerawdatamemorymode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.shareRawdataMemoryMode)
  return _internal_sharerawdatamemorymode();
}
inline void InitSDKParams::set_sharerawdatamemorymode(::int32_t value) {
  _internal_set_sharerawdatamemorymode(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.shareRawdataMemoryMode)
}
inline ::int32_t InitSDKParams::_internal_sharerawdatamemorymode() const {
  return _impl_.sharerawdatamemorymode_;
}
inline void InitSDKParams::_internal_set_sharerawdatamemorymode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.sharerawdatamemorymode_ = value;
}

// optional int32 audioRawdataMemoryMode = 16;
inline bool InitSDKParams::has_audiorawdatamemorymode() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void InitSDKParams::clear_audiorawdatamemorymode() {
  _impl_.audiorawdatamemorymode_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t InitSDKParams::audiorawdatamemorymode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.audioRawdataMemoryMode)
  return _internal_audiorawdatamemorymode();
}
inline void InitSDKParams::set_audiorawdatamemorymode(::int32_t value) {
  _internal_set_audiorawdatamemorymode(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.audioRawdataMemoryMode)
}
inline ::int32_t InitSDKParams::_internal_audiorawdatamemorymode() const {
  return _impl_.audiorawdatamemorymode_;
}
inline void InitSDKParams::_internal_set_audiorawdatamemorymode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.audiorawdatamemorymode_ = value;
}

// optional bool enableRawdataIntermediateMode = 17;
inline bool InitSDKParams::has_enablerawdataintermediatemode() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void InitSDKParams::clear_enablerawdataintermediatemode() {
  _impl_.enablerawdataintermediatemode_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool InitSDKParams::enablerawdataintermediatemode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.enableRawdataIntermediateMode)
  return _internal_enablerawdataintermediatemode();
}
inline void InitSDKParams::set_enablerawdataintermediatemode(bool value) {
  _internal_set_enablerawdataintermediatemode(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.enableRawdataIntermediateMode)
}
inline bool InitSDKParams::_internal_enablerawdataintermediatemode() const {
  return _impl_.enablerawdataintermediatemode_;
}
inline void InitSDKParams::_internal_set_enablerawdataintermediatemode(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.enablerawdataintermediatemode_ = value;
}

// optional int32 renderPostProcessing = 18;
inline bool InitSDKParams::has_renderpostprocessing() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void InitSDKParams::clear_renderpostprocessing() {
  _impl_.renderpostprocessing_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t InitSDKParams::renderpostprocessing() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.renderPostProcessing)
  return _internal_renderpostprocessing();
}
inline void InitSDKParams::set_renderpostprocessing(::int32_t value) {
  _internal_set_renderpostprocessing(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.renderPostProcessing)
}
inline ::int32_t InitSDKParams::_internal_renderpostprocessing() const {
  return _impl_.renderpostprocessing_;
}
inline void InitSDKParams::_internal_set_renderpostprocessing(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.renderpostprocessing_ = value;
}

// optional int32 videoCaptureMethod = 19;
inline bool InitSDKParams::has_videocapturemethod() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void InitSDKParams::clear_videocapturemethod() {
  _impl_.videocapturemethod_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t InitSDKParams::videocapturemethod() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.videoCaptureMethod)
  return _internal_videocapturemethod();
}
inline void InitSDKParams::set_videocapturemethod(::int32_t value) {
  _internal_set_videocapturemethod(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.videoCaptureMethod)
}
inline ::int32_t InitSDKParams::_internal_videocapturemethod() const {
  return _impl_.videocapturemethod_;
}
inline void InitSDKParams::_internal_set_videocapturemethod(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.videocapturemethod_ = value;
}

// optional string customLocalizationFilePath = 20;
inline bool InitSDKParams::has_customlocalizationfilepath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void InitSDKParams::clear_customlocalizationfilepath() {
  _impl_.customlocalizationfilepath_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& InitSDKParams::customlocalizationfilepath() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.customLocalizationFilePath)
  return _internal_customlocalizationfilepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitSDKParams::set_customlocalizationfilepath(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.customlocalizationfilepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.customLocalizationFilePath)
}
inline std::string* InitSDKParams::mutable_customlocalizationfilepath() {
  std::string* _s = _internal_mutable_customlocalizationfilepath();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InitSDKParams.customLocalizationFilePath)
  return _s;
}
inline const std::string& InitSDKParams::_internal_customlocalizationfilepath() const {
  return _impl_.customlocalizationfilepath_.Get();
}
inline void InitSDKParams::_internal_set_customlocalizationfilepath(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;


  _impl_.customlocalizationfilepath_.Set(value, GetArenaForAllocation());
}
inline std::string* InitSDKParams::_internal_mutable_customlocalizationfilepath() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.customlocalizationfilepath_.Mutable( GetArenaForAllocation());
}
inline std::string* InitSDKParams::release_customlocalizationfilepath() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InitSDKParams.customLocalizationFilePath)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.customlocalizationfilepath_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customlocalizationfilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InitSDKParams::set_allocated_customlocalizationfilepath(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.customlocalizationfilepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customlocalizationfilepath_.IsDefault()) {
          _impl_.customlocalizationfilepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InitSDKParams.customLocalizationFilePath)
}

// optional bool useCustomUI = 21;
inline bool InitSDKParams::has_usecustomui() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void InitSDKParams::clear_usecustomui() {
  _impl_.usecustomui_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool InitSDKParams::usecustomui() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.useCustomUI)
  return _internal_usecustomui();
}
inline void InitSDKParams::set_usecustomui(bool value) {
  _internal_set_usecustomui(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.useCustomUI)
}
inline bool InitSDKParams::_internal_usecustomui() const {
  return _impl_.usecustomui_;
}
inline void InitSDKParams::_internal_set_usecustomui(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.usecustomui_ = value;
}

// optional string strBrandingName = 22;
inline bool InitSDKParams::has_strbrandingname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void InitSDKParams::clear_strbrandingname() {
  _impl_.strbrandingname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& InitSDKParams::strbrandingname() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InitSDKParams.strBrandingName)
  return _internal_strbrandingname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitSDKParams::set_strbrandingname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.strbrandingname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InitSDKParams.strBrandingName)
}
inline std::string* InitSDKParams::mutable_strbrandingname() {
  std::string* _s = _internal_mutable_strbrandingname();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InitSDKParams.strBrandingName)
  return _s;
}
inline const std::string& InitSDKParams::_internal_strbrandingname() const {
  return _impl_.strbrandingname_.Get();
}
inline void InitSDKParams::_internal_set_strbrandingname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;


  _impl_.strbrandingname_.Set(value, GetArenaForAllocation());
}
inline std::string* InitSDKParams::_internal_mutable_strbrandingname() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.strbrandingname_.Mutable( GetArenaForAllocation());
}
inline std::string* InitSDKParams::release_strbrandingname() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InitSDKParams.strBrandingName)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.strbrandingname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strbrandingname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InitSDKParams::set_allocated_strbrandingname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.strbrandingname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strbrandingname_.IsDefault()) {
          _impl_.strbrandingname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InitSDKParams.strBrandingName)
}

// -------------------------------------------------------------------

// AuthWithJwtTokenParams

// optional string sdkJwtToken = 1;
inline bool AuthWithJwtTokenParams::has_sdkjwttoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AuthWithJwtTokenParams::clear_sdkjwttoken() {
  _impl_.sdkjwttoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthWithJwtTokenParams::sdkjwttoken() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AuthWithJwtTokenParams.sdkJwtToken)
  return _internal_sdkjwttoken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthWithJwtTokenParams::set_sdkjwttoken(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sdkjwttoken_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AuthWithJwtTokenParams.sdkJwtToken)
}
inline std::string* AuthWithJwtTokenParams::mutable_sdkjwttoken() {
  std::string* _s = _internal_mutable_sdkjwttoken();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.AuthWithJwtTokenParams.sdkJwtToken)
  return _s;
}
inline const std::string& AuthWithJwtTokenParams::_internal_sdkjwttoken() const {
  return _impl_.sdkjwttoken_.Get();
}
inline void AuthWithJwtTokenParams::_internal_set_sdkjwttoken(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.sdkjwttoken_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthWithJwtTokenParams::_internal_mutable_sdkjwttoken() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sdkjwttoken_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthWithJwtTokenParams::release_sdkjwttoken() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.AuthWithJwtTokenParams.sdkJwtToken)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sdkjwttoken_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdkjwttoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AuthWithJwtTokenParams::set_allocated_sdkjwttoken(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sdkjwttoken_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sdkjwttoken_.IsDefault()) {
          _impl_.sdkjwttoken_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.AuthWithJwtTokenParams.sdkJwtToken)
}

// -------------------------------------------------------------------

// LoginWithSSOTokenParams

// optional string ssoToken = 1;
inline bool LoginWithSSOTokenParams::has_ssotoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LoginWithSSOTokenParams::clear_ssotoken() {
  _impl_.ssotoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginWithSSOTokenParams::ssotoken() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.LoginWithSSOTokenParams.ssoToken)
  return _internal_ssotoken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginWithSSOTokenParams::set_ssotoken(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ssotoken_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.LoginWithSSOTokenParams.ssoToken)
}
inline std::string* LoginWithSSOTokenParams::mutable_ssotoken() {
  std::string* _s = _internal_mutable_ssotoken();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.LoginWithSSOTokenParams.ssoToken)
  return _s;
}
inline const std::string& LoginWithSSOTokenParams::_internal_ssotoken() const {
  return _impl_.ssotoken_.Get();
}
inline void LoginWithSSOTokenParams::_internal_set_ssotoken(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.ssotoken_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginWithSSOTokenParams::_internal_mutable_ssotoken() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ssotoken_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginWithSSOTokenParams::release_ssotoken() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.LoginWithSSOTokenParams.ssoToken)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.ssotoken_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ssotoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LoginWithSSOTokenParams::set_allocated_ssotoken(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ssotoken_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ssotoken_.IsDefault()) {
          _impl_.ssotoken_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.LoginWithSSOTokenParams.ssoToken)
}

// optional bool rememberMe = 2;
inline bool LoginWithSSOTokenParams::has_rememberme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LoginWithSSOTokenParams::clear_rememberme() {
  _impl_.rememberme_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool LoginWithSSOTokenParams::rememberme() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.LoginWithSSOTokenParams.rememberMe)
  return _internal_rememberme();
}
inline void LoginWithSSOTokenParams::set_rememberme(bool value) {
  _internal_set_rememberme(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.LoginWithSSOTokenParams.rememberMe)
}
inline bool LoginWithSSOTokenParams::_internal_rememberme() const {
  return _impl_.rememberme_;
}
inline void LoginWithSSOTokenParams::_internal_set_rememberme(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rememberme_ = value;
}

// -------------------------------------------------------------------

// StartMeetingParams

// optional uint64 meetingNumber = 1;
inline bool StartMeetingParams::has_meetingnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void StartMeetingParams::clear_meetingnumber() {
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t StartMeetingParams::meetingnumber() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartMeetingParams.meetingNumber)
  return _internal_meetingnumber();
}
inline void StartMeetingParams::set_meetingnumber(::uint64_t value) {
  _internal_set_meetingnumber(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartMeetingParams.meetingNumber)
}
inline ::uint64_t StartMeetingParams::_internal_meetingnumber() const {
  return _impl_.meetingnumber_;
}
inline void StartMeetingParams::_internal_set_meetingnumber(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.meetingnumber_ = value;
}

// optional string hDirectShareAppWnd = 2;
inline bool StartMeetingParams::has_hdirectshareappwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartMeetingParams::clear_hdirectshareappwnd() {
  _impl_.hdirectshareappwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartMeetingParams::hdirectshareappwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartMeetingParams.hDirectShareAppWnd)
  return _internal_hdirectshareappwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartMeetingParams::set_hdirectshareappwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hdirectshareappwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartMeetingParams.hDirectShareAppWnd)
}
inline std::string* StartMeetingParams::mutable_hdirectshareappwnd() {
  std::string* _s = _internal_mutable_hdirectshareappwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartMeetingParams.hDirectShareAppWnd)
  return _s;
}
inline const std::string& StartMeetingParams::_internal_hdirectshareappwnd() const {
  return _impl_.hdirectshareappwnd_.Get();
}
inline void StartMeetingParams::_internal_set_hdirectshareappwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.hdirectshareappwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* StartMeetingParams::_internal_mutable_hdirectshareappwnd() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hdirectshareappwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* StartMeetingParams::release_hdirectshareappwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartMeetingParams.hDirectShareAppWnd)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hdirectshareappwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartMeetingParams::set_allocated_hdirectshareappwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hdirectshareappwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hdirectshareappwnd_.IsDefault()) {
          _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartMeetingParams.hDirectShareAppWnd)
}

// optional string customerKey = 3;
inline bool StartMeetingParams::has_customerkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StartMeetingParams::clear_customerkey() {
  _impl_.customerkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StartMeetingParams::customerkey() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartMeetingParams.customerKey)
  return _internal_customerkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartMeetingParams::set_customerkey(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.customerkey_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartMeetingParams.customerKey)
}
inline std::string* StartMeetingParams::mutable_customerkey() {
  std::string* _s = _internal_mutable_customerkey();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartMeetingParams.customerKey)
  return _s;
}
inline const std::string& StartMeetingParams::_internal_customerkey() const {
  return _impl_.customerkey_.Get();
}
inline void StartMeetingParams::_internal_set_customerkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.customerkey_.Set(value, GetArenaForAllocation());
}
inline std::string* StartMeetingParams::_internal_mutable_customerkey() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.customerkey_.Mutable( GetArenaForAllocation());
}
inline std::string* StartMeetingParams::release_customerkey() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartMeetingParams.customerKey)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.customerkey_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartMeetingParams::set_allocated_customerkey(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.customerkey_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customerkey_.IsDefault()) {
          _impl_.customerkey_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartMeetingParams.customerKey)
}

// optional bool isVideoOff = 4;
inline bool StartMeetingParams::has_isvideooff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void StartMeetingParams::clear_isvideooff() {
  _impl_.isvideooff_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool StartMeetingParams::isvideooff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartMeetingParams.isVideoOff)
  return _internal_isvideooff();
}
inline void StartMeetingParams::set_isvideooff(bool value) {
  _internal_set_isvideooff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartMeetingParams.isVideoOff)
}
inline bool StartMeetingParams::_internal_isvideooff() const {
  return _impl_.isvideooff_;
}
inline void StartMeetingParams::_internal_set_isvideooff(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.isvideooff_ = value;
}

// optional bool isAudioOff = 5;
inline bool StartMeetingParams::has_isaudiooff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void StartMeetingParams::clear_isaudiooff() {
  _impl_.isaudiooff_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool StartMeetingParams::isaudiooff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartMeetingParams.isAudioOff)
  return _internal_isaudiooff();
}
inline void StartMeetingParams::set_isaudiooff(bool value) {
  _internal_set_isaudiooff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartMeetingParams.isAudioOff)
}
inline bool StartMeetingParams::_internal_isaudiooff() const {
  return _impl_.isaudiooff_;
}
inline void StartMeetingParams::_internal_set_isaudiooff(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.isaudiooff_ = value;
}

// optional bool isDirectShareDesktop = 6;
inline bool StartMeetingParams::has_isdirectsharedesktop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void StartMeetingParams::clear_isdirectsharedesktop() {
  _impl_.isdirectsharedesktop_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool StartMeetingParams::isdirectsharedesktop() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartMeetingParams.isDirectShareDesktop)
  return _internal_isdirectsharedesktop();
}
inline void StartMeetingParams::set_isdirectsharedesktop(bool value) {
  _internal_set_isdirectsharedesktop(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartMeetingParams.isDirectShareDesktop)
}
inline bool StartMeetingParams::_internal_isdirectsharedesktop() const {
  return _impl_.isdirectsharedesktop_;
}
inline void StartMeetingParams::_internal_set_isdirectsharedesktop(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.isdirectsharedesktop_ = value;
}

// -------------------------------------------------------------------

// StartWithoutLoginParams

// optional string userZAK = 1;
inline bool StartWithoutLoginParams::has_userzak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_userzak() {
  _impl_.userzak_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartWithoutLoginParams::userzak() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.userZAK)
  return _internal_userzak();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartWithoutLoginParams::set_userzak(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userzak_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.userZAK)
}
inline std::string* StartWithoutLoginParams::mutable_userzak() {
  std::string* _s = _internal_mutable_userzak();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartWithoutLoginParams.userZAK)
  return _s;
}
inline const std::string& StartWithoutLoginParams::_internal_userzak() const {
  return _impl_.userzak_.Get();
}
inline void StartWithoutLoginParams::_internal_set_userzak(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.userzak_.Set(value, GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::_internal_mutable_userzak() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.userzak_.Mutable( GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::release_userzak() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartWithoutLoginParams.userZAK)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.userzak_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userzak_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartWithoutLoginParams::set_allocated_userzak(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userzak_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userzak_.IsDefault()) {
          _impl_.userzak_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartWithoutLoginParams.userZAK)
}

// optional string userName = 2;
inline bool StartWithoutLoginParams::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StartWithoutLoginParams::username() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.userName)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartWithoutLoginParams::set_username(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.userName)
}
inline std::string* StartWithoutLoginParams::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartWithoutLoginParams.userName)
  return _s;
}
inline const std::string& StartWithoutLoginParams::_internal_username() const {
  return _impl_.username_.Get();
}
inline void StartWithoutLoginParams::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::release_username() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartWithoutLoginParams.userName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartWithoutLoginParams::set_allocated_username(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartWithoutLoginParams.userName)
}

// optional int32 nodeUserType = 3;
inline bool StartWithoutLoginParams::has_nodeusertype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_nodeusertype() {
  _impl_.nodeusertype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t StartWithoutLoginParams::nodeusertype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.nodeUserType)
  return _internal_nodeusertype();
}
inline void StartWithoutLoginParams::set_nodeusertype(::int32_t value) {
  _internal_set_nodeusertype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.nodeUserType)
}
inline ::int32_t StartWithoutLoginParams::_internal_nodeusertype() const {
  return _impl_.nodeusertype_;
}
inline void StartWithoutLoginParams::_internal_set_nodeusertype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.nodeusertype_ = value;
}

// optional uint64 meetingNumber = 4;
inline bool StartWithoutLoginParams::has_meetingnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_meetingnumber() {
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t StartWithoutLoginParams::meetingnumber() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.meetingNumber)
  return _internal_meetingnumber();
}
inline void StartWithoutLoginParams::set_meetingnumber(::uint64_t value) {
  _internal_set_meetingnumber(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.meetingNumber)
}
inline ::uint64_t StartWithoutLoginParams::_internal_meetingnumber() const {
  return _impl_.meetingnumber_;
}
inline void StartWithoutLoginParams::_internal_set_meetingnumber(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.meetingnumber_ = value;
}

// optional string sdkVanityID = 5;
inline bool StartWithoutLoginParams::has_sdkvanityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_sdkvanityid() {
  _impl_.sdkvanityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StartWithoutLoginParams::sdkvanityid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.sdkVanityID)
  return _internal_sdkvanityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartWithoutLoginParams::set_sdkvanityid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sdkvanityid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.sdkVanityID)
}
inline std::string* StartWithoutLoginParams::mutable_sdkvanityid() {
  std::string* _s = _internal_mutable_sdkvanityid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartWithoutLoginParams.sdkVanityID)
  return _s;
}
inline const std::string& StartWithoutLoginParams::_internal_sdkvanityid() const {
  return _impl_.sdkvanityid_.Get();
}
inline void StartWithoutLoginParams::_internal_set_sdkvanityid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.sdkvanityid_.Set(value, GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::_internal_mutable_sdkvanityid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.sdkvanityid_.Mutable( GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::release_sdkvanityid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartWithoutLoginParams.sdkVanityID)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.sdkvanityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdkvanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartWithoutLoginParams::set_allocated_sdkvanityid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sdkvanityid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sdkvanityid_.IsDefault()) {
          _impl_.sdkvanityid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartWithoutLoginParams.sdkVanityID)
}

// optional string hDirectShareAppWnd = 6;
inline bool StartWithoutLoginParams::has_hdirectshareappwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_hdirectshareappwnd() {
  _impl_.hdirectshareappwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& StartWithoutLoginParams::hdirectshareappwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.hDirectShareAppWnd)
  return _internal_hdirectshareappwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartWithoutLoginParams::set_hdirectshareappwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hdirectshareappwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.hDirectShareAppWnd)
}
inline std::string* StartWithoutLoginParams::mutable_hdirectshareappwnd() {
  std::string* _s = _internal_mutable_hdirectshareappwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartWithoutLoginParams.hDirectShareAppWnd)
  return _s;
}
inline const std::string& StartWithoutLoginParams::_internal_hdirectshareappwnd() const {
  return _impl_.hdirectshareappwnd_.Get();
}
inline void StartWithoutLoginParams::_internal_set_hdirectshareappwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.hdirectshareappwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::_internal_mutable_hdirectshareappwnd() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.hdirectshareappwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::release_hdirectshareappwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartWithoutLoginParams.hDirectShareAppWnd)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.hdirectshareappwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartWithoutLoginParams::set_allocated_hdirectshareappwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hdirectshareappwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hdirectshareappwnd_.IsDefault()) {
          _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartWithoutLoginParams.hDirectShareAppWnd)
}

// optional string customerKey = 7;
inline bool StartWithoutLoginParams::has_customerkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_customerkey() {
  _impl_.customerkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& StartWithoutLoginParams::customerkey() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.customerKey)
  return _internal_customerkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartWithoutLoginParams::set_customerkey(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.customerkey_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.customerKey)
}
inline std::string* StartWithoutLoginParams::mutable_customerkey() {
  std::string* _s = _internal_mutable_customerkey();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartWithoutLoginParams.customerKey)
  return _s;
}
inline const std::string& StartWithoutLoginParams::_internal_customerkey() const {
  return _impl_.customerkey_.Get();
}
inline void StartWithoutLoginParams::_internal_set_customerkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;


  _impl_.customerkey_.Set(value, GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::_internal_mutable_customerkey() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.customerkey_.Mutable( GetArenaForAllocation());
}
inline std::string* StartWithoutLoginParams::release_customerkey() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartWithoutLoginParams.customerKey)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.customerkey_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartWithoutLoginParams::set_allocated_customerkey(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.customerkey_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customerkey_.IsDefault()) {
          _impl_.customerkey_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartWithoutLoginParams.customerKey)
}

// optional bool isDirectShareDesktop = 8;
inline bool StartWithoutLoginParams::has_isdirectsharedesktop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_isdirectsharedesktop() {
  _impl_.isdirectsharedesktop_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool StartWithoutLoginParams::isdirectsharedesktop() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.isDirectShareDesktop)
  return _internal_isdirectsharedesktop();
}
inline void StartWithoutLoginParams::set_isdirectsharedesktop(bool value) {
  _internal_set_isdirectsharedesktop(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.isDirectShareDesktop)
}
inline bool StartWithoutLoginParams::_internal_isdirectsharedesktop() const {
  return _impl_.isdirectsharedesktop_;
}
inline void StartWithoutLoginParams::_internal_set_isdirectsharedesktop(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.isdirectsharedesktop_ = value;
}

// optional bool isVideoOff = 9;
inline bool StartWithoutLoginParams::has_isvideooff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_isvideooff() {
  _impl_.isvideooff_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool StartWithoutLoginParams::isvideooff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.isVideoOff)
  return _internal_isvideooff();
}
inline void StartWithoutLoginParams::set_isvideooff(bool value) {
  _internal_set_isvideooff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.isVideoOff)
}
inline bool StartWithoutLoginParams::_internal_isvideooff() const {
  return _impl_.isvideooff_;
}
inline void StartWithoutLoginParams::_internal_set_isvideooff(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.isvideooff_ = value;
}

// optional bool isAudioOff = 10;
inline bool StartWithoutLoginParams::has_isaudiooff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void StartWithoutLoginParams::clear_isaudiooff() {
  _impl_.isaudiooff_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool StartWithoutLoginParams::isaudiooff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartWithoutLoginParams.isAudioOff)
  return _internal_isaudiooff();
}
inline void StartWithoutLoginParams::set_isaudiooff(bool value) {
  _internal_set_isaudiooff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartWithoutLoginParams.isAudioOff)
}
inline bool StartWithoutLoginParams::_internal_isaudiooff() const {
  return _impl_.isaudiooff_;
}
inline void StartWithoutLoginParams::_internal_set_isaudiooff(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.isaudiooff_ = value;
}

// -------------------------------------------------------------------

// JoinMeetingParams

// optional uint64 meetingNumber = 1;
inline bool JoinMeetingParams::has_meetingnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_meetingnumber() {
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t JoinMeetingParams::meetingnumber() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.meetingNumber)
  return _internal_meetingnumber();
}
inline void JoinMeetingParams::set_meetingnumber(::uint64_t value) {
  _internal_set_meetingnumber(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.meetingNumber)
}
inline ::uint64_t JoinMeetingParams::_internal_meetingnumber() const {
  return _impl_.meetingnumber_;
}
inline void JoinMeetingParams::_internal_set_meetingnumber(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.meetingnumber_ = value;
}

// optional string vanityID = 2;
inline bool JoinMeetingParams::has_vanityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_vanityid() {
  _impl_.vanityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinMeetingParams::vanityid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.vanityID)
  return _internal_vanityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinMeetingParams::set_vanityid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vanityid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.vanityID)
}
inline std::string* JoinMeetingParams::mutable_vanityid() {
  std::string* _s = _internal_mutable_vanityid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinMeetingParams.vanityID)
  return _s;
}
inline const std::string& JoinMeetingParams::_internal_vanityid() const {
  return _impl_.vanityid_.Get();
}
inline void JoinMeetingParams::_internal_set_vanityid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.vanityid_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::_internal_mutable_vanityid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.vanityid_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::release_vanityid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinMeetingParams.vanityID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.vanityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinMeetingParams::set_allocated_vanityid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vanityid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vanityid_.IsDefault()) {
          _impl_.vanityid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinMeetingParams.vanityID)
}

// optional string userName = 3;
inline bool JoinMeetingParams::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& JoinMeetingParams::username() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.userName)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinMeetingParams::set_username(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.userName)
}
inline std::string* JoinMeetingParams::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinMeetingParams.userName)
  return _s;
}
inline const std::string& JoinMeetingParams::_internal_username() const {
  return _impl_.username_.Get();
}
inline void JoinMeetingParams::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::release_username() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinMeetingParams.userName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinMeetingParams::set_allocated_username(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinMeetingParams.userName)
}

// optional string psw = 4;
inline bool JoinMeetingParams::has_psw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_psw() {
  _impl_.psw_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& JoinMeetingParams::psw() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.psw)
  return _internal_psw();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinMeetingParams::set_psw(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.psw_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.psw)
}
inline std::string* JoinMeetingParams::mutable_psw() {
  std::string* _s = _internal_mutable_psw();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinMeetingParams.psw)
  return _s;
}
inline const std::string& JoinMeetingParams::_internal_psw() const {
  return _impl_.psw_.Get();
}
inline void JoinMeetingParams::_internal_set_psw(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.psw_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::_internal_mutable_psw() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.psw_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::release_psw() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinMeetingParams.psw)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.psw_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinMeetingParams::set_allocated_psw(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.psw_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.psw_.IsDefault()) {
          _impl_.psw_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinMeetingParams.psw)
}

// optional string hDirectShareAppWnd = 5;
inline bool JoinMeetingParams::has_hdirectshareappwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_hdirectshareappwnd() {
  _impl_.hdirectshareappwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& JoinMeetingParams::hdirectshareappwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.hDirectShareAppWnd)
  return _internal_hdirectshareappwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinMeetingParams::set_hdirectshareappwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hdirectshareappwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.hDirectShareAppWnd)
}
inline std::string* JoinMeetingParams::mutable_hdirectshareappwnd() {
  std::string* _s = _internal_mutable_hdirectshareappwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinMeetingParams.hDirectShareAppWnd)
  return _s;
}
inline const std::string& JoinMeetingParams::_internal_hdirectshareappwnd() const {
  return _impl_.hdirectshareappwnd_.Get();
}
inline void JoinMeetingParams::_internal_set_hdirectshareappwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.hdirectshareappwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::_internal_mutable_hdirectshareappwnd() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.hdirectshareappwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::release_hdirectshareappwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinMeetingParams.hDirectShareAppWnd)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.hdirectshareappwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinMeetingParams::set_allocated_hdirectshareappwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hdirectshareappwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hdirectshareappwnd_.IsDefault()) {
          _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinMeetingParams.hDirectShareAppWnd)
}

// optional string customerKey = 6;
inline bool JoinMeetingParams::has_customerkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_customerkey() {
  _impl_.customerkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& JoinMeetingParams::customerkey() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.customerKey)
  return _internal_customerkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinMeetingParams::set_customerkey(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.customerkey_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.customerKey)
}
inline std::string* JoinMeetingParams::mutable_customerkey() {
  std::string* _s = _internal_mutable_customerkey();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinMeetingParams.customerKey)
  return _s;
}
inline const std::string& JoinMeetingParams::_internal_customerkey() const {
  return _impl_.customerkey_.Get();
}
inline void JoinMeetingParams::_internal_set_customerkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;


  _impl_.customerkey_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::_internal_mutable_customerkey() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.customerkey_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::release_customerkey() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinMeetingParams.customerKey)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.customerkey_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinMeetingParams::set_allocated_customerkey(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.customerkey_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customerkey_.IsDefault()) {
          _impl_.customerkey_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinMeetingParams.customerKey)
}

// optional string webinarToken = 7;
inline bool JoinMeetingParams::has_webinartoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_webinartoken() {
  _impl_.webinartoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& JoinMeetingParams::webinartoken() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.webinarToken)
  return _internal_webinartoken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinMeetingParams::set_webinartoken(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.webinartoken_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.webinarToken)
}
inline std::string* JoinMeetingParams::mutable_webinartoken() {
  std::string* _s = _internal_mutable_webinartoken();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinMeetingParams.webinarToken)
  return _s;
}
inline const std::string& JoinMeetingParams::_internal_webinartoken() const {
  return _impl_.webinartoken_.Get();
}
inline void JoinMeetingParams::_internal_set_webinartoken(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;


  _impl_.webinartoken_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::_internal_mutable_webinartoken() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.webinartoken_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::release_webinartoken() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinMeetingParams.webinarToken)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.webinartoken_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.webinartoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinMeetingParams::set_allocated_webinartoken(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.webinartoken_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.webinartoken_.IsDefault()) {
          _impl_.webinartoken_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinMeetingParams.webinarToken)
}

// optional bool isVideoOff = 8;
inline bool JoinMeetingParams::has_isvideooff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_isvideooff() {
  _impl_.isvideooff_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool JoinMeetingParams::isvideooff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.isVideoOff)
  return _internal_isvideooff();
}
inline void JoinMeetingParams::set_isvideooff(bool value) {
  _internal_set_isvideooff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.isVideoOff)
}
inline bool JoinMeetingParams::_internal_isvideooff() const {
  return _impl_.isvideooff_;
}
inline void JoinMeetingParams::_internal_set_isvideooff(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.isvideooff_ = value;
}

// optional bool isAudioOff = 9;
inline bool JoinMeetingParams::has_isaudiooff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_isaudiooff() {
  _impl_.isaudiooff_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool JoinMeetingParams::isaudiooff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.isAudioOff)
  return _internal_isaudiooff();
}
inline void JoinMeetingParams::set_isaudiooff(bool value) {
  _internal_set_isaudiooff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.isAudioOff)
}
inline bool JoinMeetingParams::_internal_isaudiooff() const {
  return _impl_.isaudiooff_;
}
inline void JoinMeetingParams::_internal_set_isaudiooff(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.isaudiooff_ = value;
}

// optional bool isDirectShareDesktop = 10;
inline bool JoinMeetingParams::has_isdirectsharedesktop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_isdirectsharedesktop() {
  _impl_.isdirectsharedesktop_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool JoinMeetingParams::isdirectsharedesktop() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.isDirectShareDesktop)
  return _internal_isdirectsharedesktop();
}
inline void JoinMeetingParams::set_isdirectsharedesktop(bool value) {
  _internal_set_isdirectsharedesktop(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.isDirectShareDesktop)
}
inline bool JoinMeetingParams::_internal_isdirectsharedesktop() const {
  return _impl_.isdirectsharedesktop_;
}
inline void JoinMeetingParams::_internal_set_isdirectsharedesktop(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.isdirectsharedesktop_ = value;
}

// optional string appPrivilegeToken = 11;
inline bool JoinMeetingParams::has_appprivilegetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_appprivilegetoken() {
  _impl_.appprivilegetoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& JoinMeetingParams::appprivilegetoken() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.appPrivilegeToken)
  return _internal_appprivilegetoken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinMeetingParams::set_appprivilegetoken(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.appprivilegetoken_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.appPrivilegeToken)
}
inline std::string* JoinMeetingParams::mutable_appprivilegetoken() {
  std::string* _s = _internal_mutable_appprivilegetoken();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinMeetingParams.appPrivilegeToken)
  return _s;
}
inline const std::string& JoinMeetingParams::_internal_appprivilegetoken() const {
  return _impl_.appprivilegetoken_.Get();
}
inline void JoinMeetingParams::_internal_set_appprivilegetoken(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;


  _impl_.appprivilegetoken_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::_internal_mutable_appprivilegetoken() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.appprivilegetoken_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::release_appprivilegetoken() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinMeetingParams.appPrivilegeToken)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.appprivilegetoken_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appprivilegetoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinMeetingParams::set_allocated_appprivilegetoken(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.appprivilegetoken_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.appprivilegetoken_.IsDefault()) {
          _impl_.appprivilegetoken_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinMeetingParams.appPrivilegeToken)
}

// optional string join_token = 12;
inline bool JoinMeetingParams::has_join_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void JoinMeetingParams::clear_join_token() {
  _impl_.join_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& JoinMeetingParams::join_token() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinMeetingParams.join_token)
  return _internal_join_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinMeetingParams::set_join_token(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.join_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinMeetingParams.join_token)
}
inline std::string* JoinMeetingParams::mutable_join_token() {
  std::string* _s = _internal_mutable_join_token();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinMeetingParams.join_token)
  return _s;
}
inline const std::string& JoinMeetingParams::_internal_join_token() const {
  return _impl_.join_token_.Get();
}
inline void JoinMeetingParams::_internal_set_join_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;


  _impl_.join_token_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::_internal_mutable_join_token() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.join_token_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinMeetingParams::release_join_token() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinMeetingParams.join_token)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.join_token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.join_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinMeetingParams::set_allocated_join_token(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.join_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.join_token_.IsDefault()) {
          _impl_.join_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinMeetingParams.join_token)
}

// -------------------------------------------------------------------

// JoinWithoutLoginParams

// optional uint64 meetingNumber = 1;
inline bool JoinWithoutLoginParams::has_meetingnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_meetingnumber() {
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t JoinWithoutLoginParams::meetingnumber() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.meetingNumber)
  return _internal_meetingnumber();
}
inline void JoinWithoutLoginParams::set_meetingnumber(::uint64_t value) {
  _internal_set_meetingnumber(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.meetingNumber)
}
inline ::uint64_t JoinWithoutLoginParams::_internal_meetingnumber() const {
  return _impl_.meetingnumber_;
}
inline void JoinWithoutLoginParams::_internal_set_meetingnumber(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.meetingnumber_ = value;
}

// optional string vanityID = 2;
inline bool JoinWithoutLoginParams::has_vanityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_vanityid() {
  _impl_.vanityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinWithoutLoginParams::vanityid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.vanityID)
  return _internal_vanityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_vanityid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vanityid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.vanityID)
}
inline std::string* JoinWithoutLoginParams::mutable_vanityid() {
  std::string* _s = _internal_mutable_vanityid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.vanityID)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_vanityid() const {
  return _impl_.vanityid_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_vanityid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.vanityid_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_vanityid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.vanityid_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_vanityid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.vanityID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.vanityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vanityid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_vanityid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vanityid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vanityid_.IsDefault()) {
          _impl_.vanityid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.vanityID)
}

// optional string userName = 3;
inline bool JoinWithoutLoginParams::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& JoinWithoutLoginParams::username() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.userName)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_username(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.userName)
}
inline std::string* JoinWithoutLoginParams::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.userName)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_username() const {
  return _impl_.username_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_username() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.userName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_username(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.userName)
}

// optional string psw = 4;
inline bool JoinWithoutLoginParams::has_psw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_psw() {
  _impl_.psw_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& JoinWithoutLoginParams::psw() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.psw)
  return _internal_psw();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_psw(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.psw_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.psw)
}
inline std::string* JoinWithoutLoginParams::mutable_psw() {
  std::string* _s = _internal_mutable_psw();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.psw)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_psw() const {
  return _impl_.psw_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_psw(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.psw_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_psw() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.psw_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_psw() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.psw)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.psw_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_psw(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.psw_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.psw_.IsDefault()) {
          _impl_.psw_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.psw)
}

// optional string hDirectShareAppWnd = 5;
inline bool JoinWithoutLoginParams::has_hdirectshareappwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_hdirectshareappwnd() {
  _impl_.hdirectshareappwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& JoinWithoutLoginParams::hdirectshareappwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.hDirectShareAppWnd)
  return _internal_hdirectshareappwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_hdirectshareappwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hdirectshareappwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.hDirectShareAppWnd)
}
inline std::string* JoinWithoutLoginParams::mutable_hdirectshareappwnd() {
  std::string* _s = _internal_mutable_hdirectshareappwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.hDirectShareAppWnd)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_hdirectshareappwnd() const {
  return _impl_.hdirectshareappwnd_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_hdirectshareappwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.hdirectshareappwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_hdirectshareappwnd() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.hdirectshareappwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_hdirectshareappwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.hDirectShareAppWnd)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.hdirectshareappwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_hdirectshareappwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hdirectshareappwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hdirectshareappwnd_.IsDefault()) {
          _impl_.hdirectshareappwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.hDirectShareAppWnd)
}

// optional string userZAK = 6;
inline bool JoinWithoutLoginParams::has_userzak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_userzak() {
  _impl_.userzak_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& JoinWithoutLoginParams::userzak() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.userZAK)
  return _internal_userzak();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_userzak(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.userzak_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.userZAK)
}
inline std::string* JoinWithoutLoginParams::mutable_userzak() {
  std::string* _s = _internal_mutable_userzak();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.userZAK)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_userzak() const {
  return _impl_.userzak_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_userzak(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;


  _impl_.userzak_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_userzak() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.userzak_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_userzak() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.userZAK)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.userzak_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userzak_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_userzak(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.userzak_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userzak_.IsDefault()) {
          _impl_.userzak_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.userZAK)
}

// optional string customerKey = 7;
inline bool JoinWithoutLoginParams::has_customerkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_customerkey() {
  _impl_.customerkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& JoinWithoutLoginParams::customerkey() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.customerKey)
  return _internal_customerkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_customerkey(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.customerkey_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.customerKey)
}
inline std::string* JoinWithoutLoginParams::mutable_customerkey() {
  std::string* _s = _internal_mutable_customerkey();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.customerKey)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_customerkey() const {
  return _impl_.customerkey_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_customerkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;


  _impl_.customerkey_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_customerkey() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.customerkey_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_customerkey() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.customerKey)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.customerkey_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customerkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_customerkey(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.customerkey_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customerkey_.IsDefault()) {
          _impl_.customerkey_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.customerKey)
}

// optional string webinarToken = 8;
inline bool JoinWithoutLoginParams::has_webinartoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_webinartoken() {
  _impl_.webinartoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& JoinWithoutLoginParams::webinartoken() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.webinarToken)
  return _internal_webinartoken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_webinartoken(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.webinartoken_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.webinarToken)
}
inline std::string* JoinWithoutLoginParams::mutable_webinartoken() {
  std::string* _s = _internal_mutable_webinartoken();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.webinarToken)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_webinartoken() const {
  return _impl_.webinartoken_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_webinartoken(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;


  _impl_.webinartoken_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_webinartoken() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.webinartoken_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_webinartoken() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.webinarToken)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.webinartoken_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.webinartoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_webinartoken(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.webinartoken_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.webinartoken_.IsDefault()) {
          _impl_.webinartoken_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.webinarToken)
}

// optional bool isDirectShareDesktop = 9;
inline bool JoinWithoutLoginParams::has_isdirectsharedesktop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_isdirectsharedesktop() {
  _impl_.isdirectsharedesktop_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool JoinWithoutLoginParams::isdirectsharedesktop() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.isDirectShareDesktop)
  return _internal_isdirectsharedesktop();
}
inline void JoinWithoutLoginParams::set_isdirectsharedesktop(bool value) {
  _internal_set_isdirectsharedesktop(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.isDirectShareDesktop)
}
inline bool JoinWithoutLoginParams::_internal_isdirectsharedesktop() const {
  return _impl_.isdirectsharedesktop_;
}
inline void JoinWithoutLoginParams::_internal_set_isdirectsharedesktop(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.isdirectsharedesktop_ = value;
}

// optional bool isVideoOff = 10;
inline bool JoinWithoutLoginParams::has_isvideooff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_isvideooff() {
  _impl_.isvideooff_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool JoinWithoutLoginParams::isvideooff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.isVideoOff)
  return _internal_isvideooff();
}
inline void JoinWithoutLoginParams::set_isvideooff(bool value) {
  _internal_set_isvideooff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.isVideoOff)
}
inline bool JoinWithoutLoginParams::_internal_isvideooff() const {
  return _impl_.isvideooff_;
}
inline void JoinWithoutLoginParams::_internal_set_isvideooff(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.isvideooff_ = value;
}

// optional bool isAudioOff = 11;
inline bool JoinWithoutLoginParams::has_isaudiooff() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_isaudiooff() {
  _impl_.isaudiooff_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool JoinWithoutLoginParams::isaudiooff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.isAudioOff)
  return _internal_isaudiooff();
}
inline void JoinWithoutLoginParams::set_isaudiooff(bool value) {
  _internal_set_isaudiooff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.isAudioOff)
}
inline bool JoinWithoutLoginParams::_internal_isaudiooff() const {
  return _impl_.isaudiooff_;
}
inline void JoinWithoutLoginParams::_internal_set_isaudiooff(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.isaudiooff_ = value;
}

// optional string appPrivilegeToken = 12;
inline bool JoinWithoutLoginParams::has_appprivilegetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_appprivilegetoken() {
  _impl_.appprivilegetoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& JoinWithoutLoginParams::appprivilegetoken() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.appPrivilegeToken)
  return _internal_appprivilegetoken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_appprivilegetoken(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.appprivilegetoken_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.appPrivilegeToken)
}
inline std::string* JoinWithoutLoginParams::mutable_appprivilegetoken() {
  std::string* _s = _internal_mutable_appprivilegetoken();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.appPrivilegeToken)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_appprivilegetoken() const {
  return _impl_.appprivilegetoken_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_appprivilegetoken(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;


  _impl_.appprivilegetoken_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_appprivilegetoken() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.appprivilegetoken_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_appprivilegetoken() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.appPrivilegeToken)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.appprivilegetoken_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appprivilegetoken_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_appprivilegetoken(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.appprivilegetoken_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.appprivilegetoken_.IsDefault()) {
          _impl_.appprivilegetoken_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.appPrivilegeToken)
}

// optional string join_token = 13;
inline bool JoinWithoutLoginParams::has_join_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void JoinWithoutLoginParams::clear_join_token() {
  _impl_.join_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& JoinWithoutLoginParams::join_token() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.JoinWithoutLoginParams.join_token)
  return _internal_join_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinWithoutLoginParams::set_join_token(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.join_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.JoinWithoutLoginParams.join_token)
}
inline std::string* JoinWithoutLoginParams::mutable_join_token() {
  std::string* _s = _internal_mutable_join_token();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.JoinWithoutLoginParams.join_token)
  return _s;
}
inline const std::string& JoinWithoutLoginParams::_internal_join_token() const {
  return _impl_.join_token_.Get();
}
inline void JoinWithoutLoginParams::_internal_set_join_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;


  _impl_.join_token_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::_internal_mutable_join_token() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.join_token_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinWithoutLoginParams::release_join_token() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.JoinWithoutLoginParams.join_token)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.join_token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.join_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void JoinWithoutLoginParams::set_allocated_join_token(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.join_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.join_token_.IsDefault()) {
          _impl_.join_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.JoinWithoutLoginParams.join_token)
}

// -------------------------------------------------------------------

// LeaveMeetingParams

// optional bool bEnd = 1;
inline bool LeaveMeetingParams::has_bend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LeaveMeetingParams::clear_bend() {
  _impl_.bend_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool LeaveMeetingParams::bend() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.LeaveMeetingParams.bEnd)
  return _internal_bend();
}
inline void LeaveMeetingParams::set_bend(bool value) {
  _internal_set_bend(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.LeaveMeetingParams.bEnd)
}
inline bool LeaveMeetingParams::_internal_bend() const {
  return _impl_.bend_;
}
inline void LeaveMeetingParams::_internal_set_bend(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bend_ = value;
}

// -------------------------------------------------------------------

// HandleZoomWebUriProtocolActionParams

// optional string protocolAction = 1;
inline bool HandleZoomWebUriProtocolActionParams::has_protocolaction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HandleZoomWebUriProtocolActionParams::clear_protocolaction() {
  _impl_.protocolaction_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HandleZoomWebUriProtocolActionParams::protocolaction() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.protocolAction)
  return _internal_protocolaction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandleZoomWebUriProtocolActionParams::set_protocolaction(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.protocolaction_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.protocolAction)
}
inline std::string* HandleZoomWebUriProtocolActionParams::mutable_protocolaction() {
  std::string* _s = _internal_mutable_protocolaction();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.protocolAction)
  return _s;
}
inline const std::string& HandleZoomWebUriProtocolActionParams::_internal_protocolaction() const {
  return _impl_.protocolaction_.Get();
}
inline void HandleZoomWebUriProtocolActionParams::_internal_set_protocolaction(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.protocolaction_.Set(value, GetArenaForAllocation());
}
inline std::string* HandleZoomWebUriProtocolActionParams::_internal_mutable_protocolaction() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.protocolaction_.Mutable( GetArenaForAllocation());
}
inline std::string* HandleZoomWebUriProtocolActionParams::release_protocolaction() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.protocolAction)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.protocolaction_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocolaction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HandleZoomWebUriProtocolActionParams::set_allocated_protocolaction(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.protocolaction_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.protocolaction_.IsDefault()) {
          _impl_.protocolaction_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.protocolAction)
}

// -------------------------------------------------------------------

// ShowChatDlgParams

// optional string hParent = 1;
inline bool ShowChatDlgParams::has_hparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShowChatDlgParams::clear_hparent() {
  _impl_.hparent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShowChatDlgParams::hparent() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowChatDlgParams.hParent)
  return _internal_hparent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowChatDlgParams::set_hparent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hparent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowChatDlgParams.hParent)
}
inline std::string* ShowChatDlgParams::mutable_hparent() {
  std::string* _s = _internal_mutable_hparent();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowChatDlgParams.hParent)
  return _s;
}
inline const std::string& ShowChatDlgParams::_internal_hparent() const {
  return _impl_.hparent_.Get();
}
inline void ShowChatDlgParams::_internal_set_hparent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.hparent_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::_internal_mutable_hparent() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hparent_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::release_hparent() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowChatDlgParams.hParent)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hparent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowChatDlgParams::set_allocated_hparent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hparent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hparent_.IsDefault()) {
          _impl_.hparent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowChatDlgParams.hParent)
}

// optional string rectLeft = 2;
inline bool ShowChatDlgParams::has_rectleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ShowChatDlgParams::clear_rectleft() {
  _impl_.rectleft_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShowChatDlgParams::rectleft() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowChatDlgParams.rectLeft)
  return _internal_rectleft();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowChatDlgParams::set_rectleft(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rectleft_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowChatDlgParams.rectLeft)
}
inline std::string* ShowChatDlgParams::mutable_rectleft() {
  std::string* _s = _internal_mutable_rectleft();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowChatDlgParams.rectLeft)
  return _s;
}
inline const std::string& ShowChatDlgParams::_internal_rectleft() const {
  return _impl_.rectleft_.Get();
}
inline void ShowChatDlgParams::_internal_set_rectleft(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.rectleft_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::_internal_mutable_rectleft() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.rectleft_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::release_rectleft() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowChatDlgParams.rectLeft)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.rectleft_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rectleft_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowChatDlgParams::set_allocated_rectleft(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rectleft_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rectleft_.IsDefault()) {
          _impl_.rectleft_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowChatDlgParams.rectLeft)
}

// optional string rectTop = 3;
inline bool ShowChatDlgParams::has_recttop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ShowChatDlgParams::clear_recttop() {
  _impl_.recttop_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ShowChatDlgParams::recttop() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowChatDlgParams.rectTop)
  return _internal_recttop();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowChatDlgParams::set_recttop(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.recttop_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowChatDlgParams.rectTop)
}
inline std::string* ShowChatDlgParams::mutable_recttop() {
  std::string* _s = _internal_mutable_recttop();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowChatDlgParams.rectTop)
  return _s;
}
inline const std::string& ShowChatDlgParams::_internal_recttop() const {
  return _impl_.recttop_.Get();
}
inline void ShowChatDlgParams::_internal_set_recttop(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.recttop_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::_internal_mutable_recttop() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.recttop_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::release_recttop() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowChatDlgParams.rectTop)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.recttop_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recttop_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowChatDlgParams::set_allocated_recttop(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.recttop_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recttop_.IsDefault()) {
          _impl_.recttop_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowChatDlgParams.rectTop)
}

// optional string rectRight = 4;
inline bool ShowChatDlgParams::has_rectright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ShowChatDlgParams::clear_rectright() {
  _impl_.rectright_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ShowChatDlgParams::rectright() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowChatDlgParams.rectRight)
  return _internal_rectright();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowChatDlgParams::set_rectright(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rectright_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowChatDlgParams.rectRight)
}
inline std::string* ShowChatDlgParams::mutable_rectright() {
  std::string* _s = _internal_mutable_rectright();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowChatDlgParams.rectRight)
  return _s;
}
inline const std::string& ShowChatDlgParams::_internal_rectright() const {
  return _impl_.rectright_.Get();
}
inline void ShowChatDlgParams::_internal_set_rectright(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.rectright_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::_internal_mutable_rectright() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.rectright_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::release_rectright() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowChatDlgParams.rectRight)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.rectright_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rectright_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowChatDlgParams::set_allocated_rectright(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rectright_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rectright_.IsDefault()) {
          _impl_.rectright_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowChatDlgParams.rectRight)
}

// optional string rectBottom = 5;
inline bool ShowChatDlgParams::has_rectbottom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ShowChatDlgParams::clear_rectbottom() {
  _impl_.rectbottom_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ShowChatDlgParams::rectbottom() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowChatDlgParams.rectBottom)
  return _internal_rectbottom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowChatDlgParams::set_rectbottom(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rectbottom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowChatDlgParams.rectBottom)
}
inline std::string* ShowChatDlgParams::mutable_rectbottom() {
  std::string* _s = _internal_mutable_rectbottom();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowChatDlgParams.rectBottom)
  return _s;
}
inline const std::string& ShowChatDlgParams::_internal_rectbottom() const {
  return _impl_.rectbottom_.Get();
}
inline void ShowChatDlgParams::_internal_set_rectbottom(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;


  _impl_.rectbottom_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::_internal_mutable_rectbottom() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.rectbottom_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowChatDlgParams::release_rectbottom() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowChatDlgParams.rectBottom)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.rectbottom_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rectbottom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowChatDlgParams::set_allocated_rectbottom(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.rectbottom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rectbottom_.IsDefault()) {
          _impl_.rectbottom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowChatDlgParams.rectBottom)
}

// -------------------------------------------------------------------

// EnterFullScreenParams

// optional bool bFirstView = 1;
inline bool EnterFullScreenParams::has_bfirstview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnterFullScreenParams::clear_bfirstview() {
  _impl_.bfirstview_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnterFullScreenParams::bfirstview() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnterFullScreenParams.bFirstView)
  return _internal_bfirstview();
}
inline void EnterFullScreenParams::set_bfirstview(bool value) {
  _internal_set_bfirstview(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnterFullScreenParams.bFirstView)
}
inline bool EnterFullScreenParams::_internal_bfirstview() const {
  return _impl_.bfirstview_;
}
inline void EnterFullScreenParams::_internal_set_bfirstview(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bfirstview_ = value;
}

// optional bool bSecView = 2;
inline bool EnterFullScreenParams::has_bsecview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EnterFullScreenParams::clear_bsecview() {
  _impl_.bsecview_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool EnterFullScreenParams::bsecview() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnterFullScreenParams.bSecView)
  return _internal_bsecview();
}
inline void EnterFullScreenParams::set_bsecview(bool value) {
  _internal_set_bsecview(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnterFullScreenParams.bSecView)
}
inline bool EnterFullScreenParams::_internal_bsecview() const {
  return _impl_.bsecview_;
}
inline void EnterFullScreenParams::_internal_set_bsecview(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bsecview_ = value;
}

// -------------------------------------------------------------------

// ExitFullScreenParams

// optional bool bFirstView = 1;
inline bool ExitFullScreenParams::has_bfirstview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ExitFullScreenParams::clear_bfirstview() {
  _impl_.bfirstview_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ExitFullScreenParams::bfirstview() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ExitFullScreenParams.bFirstView)
  return _internal_bfirstview();
}
inline void ExitFullScreenParams::set_bfirstview(bool value) {
  _internal_set_bfirstview(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ExitFullScreenParams.bFirstView)
}
inline bool ExitFullScreenParams::_internal_bfirstview() const {
  return _impl_.bfirstview_;
}
inline void ExitFullScreenParams::_internal_set_bfirstview(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bfirstview_ = value;
}

// optional bool bSecView = 2;
inline bool ExitFullScreenParams::has_bsecview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ExitFullScreenParams::clear_bsecview() {
  _impl_.bsecview_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ExitFullScreenParams::bsecview() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ExitFullScreenParams.bSecView)
  return _internal_bsecview();
}
inline void ExitFullScreenParams::set_bsecview(bool value) {
  _internal_set_bsecview(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ExitFullScreenParams.bSecView)
}
inline bool ExitFullScreenParams::_internal_bsecview() const {
  return _impl_.bsecview_;
}
inline void ExitFullScreenParams::_internal_set_bsecview(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bsecview_ = value;
}

// -------------------------------------------------------------------

// MoveFloatVideoWndParams

// optional string left = 1;
inline bool MoveFloatVideoWndParams::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MoveFloatVideoWndParams::clear_left() {
  _impl_.left_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MoveFloatVideoWndParams::left() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.MoveFloatVideoWndParams.left)
  return _internal_left();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MoveFloatVideoWndParams::set_left(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.left_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.MoveFloatVideoWndParams.left)
}
inline std::string* MoveFloatVideoWndParams::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.MoveFloatVideoWndParams.left)
  return _s;
}
inline const std::string& MoveFloatVideoWndParams::_internal_left() const {
  return _impl_.left_.Get();
}
inline void MoveFloatVideoWndParams::_internal_set_left(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.left_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveFloatVideoWndParams::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.left_.Mutable( GetArenaForAllocation());
}
inline std::string* MoveFloatVideoWndParams::release_left() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.MoveFloatVideoWndParams.left)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.left_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MoveFloatVideoWndParams::set_allocated_left(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.left_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.left_.IsDefault()) {
          _impl_.left_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.MoveFloatVideoWndParams.left)
}

// optional string top = 2;
inline bool MoveFloatVideoWndParams::has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MoveFloatVideoWndParams::clear_top() {
  _impl_.top_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MoveFloatVideoWndParams::top() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.MoveFloatVideoWndParams.top)
  return _internal_top();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MoveFloatVideoWndParams::set_top(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.MoveFloatVideoWndParams.top)
}
inline std::string* MoveFloatVideoWndParams::mutable_top() {
  std::string* _s = _internal_mutable_top();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.MoveFloatVideoWndParams.top)
  return _s;
}
inline const std::string& MoveFloatVideoWndParams::_internal_top() const {
  return _impl_.top_.Get();
}
inline void MoveFloatVideoWndParams::_internal_set_top(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.top_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveFloatVideoWndParams::_internal_mutable_top() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.top_.Mutable( GetArenaForAllocation());
}
inline std::string* MoveFloatVideoWndParams::release_top() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.MoveFloatVideoWndParams.top)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.top_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MoveFloatVideoWndParams::set_allocated_top(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.top_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.top_.IsDefault()) {
          _impl_.top_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.MoveFloatVideoWndParams.top)
}

// -------------------------------------------------------------------

// ShowSharingToolbarParams

// optional bool bShow = 1;
inline bool ShowSharingToolbarParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShowSharingToolbarParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ShowSharingToolbarParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowSharingToolbarParams.bShow)
  return _internal_bshow();
}
inline void ShowSharingToolbarParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowSharingToolbarParams.bShow)
}
inline bool ShowSharingToolbarParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void ShowSharingToolbarParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// ChangeFloatoActiveSpkVideoSizeParams

// optional int32 floatVideoType = 1;
inline bool ChangeFloatoActiveSpkVideoSizeParams::has_floatvideotype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChangeFloatoActiveSpkVideoSizeParams::clear_floatvideotype() {
  _impl_.floatvideotype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ChangeFloatoActiveSpkVideoSizeParams::floatvideotype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.floatVideoType)
  return _internal_floatvideotype();
}
inline void ChangeFloatoActiveSpkVideoSizeParams::set_floatvideotype(::int32_t value) {
  _internal_set_floatvideotype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.floatVideoType)
}
inline ::int32_t ChangeFloatoActiveSpkVideoSizeParams::_internal_floatvideotype() const {
  return _impl_.floatvideotype_;
}
inline void ChangeFloatoActiveSpkVideoSizeParams::_internal_set_floatvideotype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.floatvideotype_ = value;
}

// -------------------------------------------------------------------

// ShowParticipantsListWndParams

// optional bool bShow = 1;
inline bool ShowParticipantsListWndParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShowParticipantsListWndParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ShowParticipantsListWndParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowParticipantsListWndParams.bShow)
  return _internal_bshow();
}
inline void ShowParticipantsListWndParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowParticipantsListWndParams.bShow)
}
inline bool ShowParticipantsListWndParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void ShowParticipantsListWndParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// ShowBottomFloatToolbarWndParams

// optional bool bShow = 1;
inline bool ShowBottomFloatToolbarWndParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShowBottomFloatToolbarWndParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ShowBottomFloatToolbarWndParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.bShow)
  return _internal_bshow();
}
inline void ShowBottomFloatToolbarWndParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.bShow)
}
inline bool ShowBottomFloatToolbarWndParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void ShowBottomFloatToolbarWndParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// ShowPreOrNextPageVideoParams

// optional bool bPageUp = 1;
inline bool ShowPreOrNextPageVideoParams::has_bpageup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShowPreOrNextPageVideoParams::clear_bpageup() {
  _impl_.bpageup_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ShowPreOrNextPageVideoParams::bpageup() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowPreOrNextPageVideoParams.bPageUp)
  return _internal_bpageup();
}
inline void ShowPreOrNextPageVideoParams::set_bpageup(bool value) {
  _internal_set_bpageup(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowPreOrNextPageVideoParams.bPageUp)
}
inline bool ShowPreOrNextPageVideoParams::_internal_bpageup() const {
  return _impl_.bpageup_;
}
inline void ShowPreOrNextPageVideoParams::_internal_set_bpageup(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bpageup_ = value;
}

// -------------------------------------------------------------------

// ShowSharingFrameWindowsParams

// optional bool bShow = 1;
inline bool ShowSharingFrameWindowsParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShowSharingFrameWindowsParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ShowSharingFrameWindowsParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowSharingFrameWindowsParams.bShow)
  return _internal_bshow();
}
inline void ShowSharingFrameWindowsParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowSharingFrameWindowsParams.bShow)
}
inline bool ShowSharingFrameWindowsParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void ShowSharingFrameWindowsParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// SwitchSplitScreenModeParams

// optional bool bSplit = 1;
inline bool SwitchSplitScreenModeParams::has_bsplit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SwitchSplitScreenModeParams::clear_bsplit() {
  _impl_.bsplit_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SwitchSplitScreenModeParams::bsplit() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SwitchSplitScreenModeParams.bSplit)
  return _internal_bsplit();
}
inline void SwitchSplitScreenModeParams::set_bsplit(bool value) {
  _internal_set_bsplit(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SwitchSplitScreenModeParams.bSplit)
}
inline bool SwitchSplitScreenModeParams::_internal_bsplit() const {
  return _impl_.bsplit_;
}
inline void SwitchSplitScreenModeParams::_internal_set_bsplit(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bsplit_ = value;
}

// -------------------------------------------------------------------

// SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams

// optional int32 minimizeUIMOde = 1;
inline bool SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::has_minimizeuimode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::clear_minimizeuimode() {
  _impl_.minimizeuimode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::minimizeuimode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.minimizeUIMOde)
  return _internal_minimizeuimode();
}
inline void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::set_minimizeuimode(::int32_t value) {
  _internal_set_minimizeuimode(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.minimizeUIMOde)
}
inline ::int32_t SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::_internal_minimizeuimode() const {
  return _impl_.minimizeuimode_;
}
inline void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::_internal_set_minimizeuimode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.minimizeuimode_ = value;
}

// -------------------------------------------------------------------

// SwapToShowShareViewOrVideoParams

// optional bool bToDisplayShare = 1;
inline bool SwapToShowShareViewOrVideoParams::has_btodisplayshare() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SwapToShowShareViewOrVideoParams::clear_btodisplayshare() {
  _impl_.btodisplayshare_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SwapToShowShareViewOrVideoParams::btodisplayshare() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.bToDisplayShare)
  return _internal_btodisplayshare();
}
inline void SwapToShowShareViewOrVideoParams::set_btodisplayshare(bool value) {
  _internal_set_btodisplayshare(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.bToDisplayShare)
}
inline bool SwapToShowShareViewOrVideoParams::_internal_btodisplayshare() const {
  return _impl_.btodisplayshare_;
}
inline void SwapToShowShareViewOrVideoParams::_internal_set_btodisplayshare(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.btodisplayshare_ = value;
}

// -------------------------------------------------------------------

// ShowSettingDlgParams

// optional string hParent = 1;
inline bool ShowSettingDlgParams::has_hparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShowSettingDlgParams::clear_hparent() {
  _impl_.hparent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShowSettingDlgParams::hparent() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowSettingDlgParams.hParent)
  return _internal_hparent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowSettingDlgParams::set_hparent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hparent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowSettingDlgParams.hParent)
}
inline std::string* ShowSettingDlgParams::mutable_hparent() {
  std::string* _s = _internal_mutable_hparent();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowSettingDlgParams.hParent)
  return _s;
}
inline const std::string& ShowSettingDlgParams::_internal_hparent() const {
  return _impl_.hparent_.Get();
}
inline void ShowSettingDlgParams::_internal_set_hparent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.hparent_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowSettingDlgParams::_internal_mutable_hparent() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hparent_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowSettingDlgParams::release_hparent() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowSettingDlgParams.hParent)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hparent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowSettingDlgParams::set_allocated_hparent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hparent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hparent_.IsDefault()) {
          _impl_.hparent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowSettingDlgParams.hParent)
}

// optional string left = 2;
inline bool ShowSettingDlgParams::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ShowSettingDlgParams::clear_left() {
  _impl_.left_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShowSettingDlgParams::left() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowSettingDlgParams.left)
  return _internal_left();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowSettingDlgParams::set_left(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.left_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowSettingDlgParams.left)
}
inline std::string* ShowSettingDlgParams::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowSettingDlgParams.left)
  return _s;
}
inline const std::string& ShowSettingDlgParams::_internal_left() const {
  return _impl_.left_.Get();
}
inline void ShowSettingDlgParams::_internal_set_left(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.left_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowSettingDlgParams::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.left_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowSettingDlgParams::release_left() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowSettingDlgParams.left)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.left_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowSettingDlgParams::set_allocated_left(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.left_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.left_.IsDefault()) {
          _impl_.left_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowSettingDlgParams.left)
}

// optional string top = 3;
inline bool ShowSettingDlgParams::has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ShowSettingDlgParams::clear_top() {
  _impl_.top_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ShowSettingDlgParams::top() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowSettingDlgParams.top)
  return _internal_top();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowSettingDlgParams::set_top(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.top_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowSettingDlgParams.top)
}
inline std::string* ShowSettingDlgParams::mutable_top() {
  std::string* _s = _internal_mutable_top();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowSettingDlgParams.top)
  return _s;
}
inline const std::string& ShowSettingDlgParams::_internal_top() const {
  return _impl_.top_.Get();
}
inline void ShowSettingDlgParams::_internal_set_top(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.top_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowSettingDlgParams::_internal_mutable_top() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.top_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowSettingDlgParams::release_top() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowSettingDlgParams.top)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.top_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowSettingDlgParams::set_allocated_top(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.top_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.top_.IsDefault()) {
          _impl_.top_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowSettingDlgParams.top)
}

// optional string hSettingWnd = 4;
inline bool ShowSettingDlgParams::has_hsettingwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ShowSettingDlgParams::clear_hsettingwnd() {
  _impl_.hsettingwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ShowSettingDlgParams::hsettingwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowSettingDlgParams.hSettingWnd)
  return _internal_hsettingwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShowSettingDlgParams::set_hsettingwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hsettingwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowSettingDlgParams.hSettingWnd)
}
inline std::string* ShowSettingDlgParams::mutable_hsettingwnd() {
  std::string* _s = _internal_mutable_hsettingwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ShowSettingDlgParams.hSettingWnd)
  return _s;
}
inline const std::string& ShowSettingDlgParams::_internal_hsettingwnd() const {
  return _impl_.hsettingwnd_.Get();
}
inline void ShowSettingDlgParams::_internal_set_hsettingwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.hsettingwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* ShowSettingDlgParams::_internal_mutable_hsettingwnd() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.hsettingwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* ShowSettingDlgParams::release_hsettingwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ShowSettingDlgParams.hSettingWnd)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.hsettingwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hsettingwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ShowSettingDlgParams::set_allocated_hsettingwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hsettingwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hsettingwnd_.IsDefault()) {
          _impl_.hsettingwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ShowSettingDlgParams.hSettingWnd)
}

// optional bool bShow = 5;
inline bool ShowSettingDlgParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ShowSettingDlgParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ShowSettingDlgParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowSettingDlgParams.bShow)
  return _internal_bshow();
}
inline void ShowSettingDlgParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowSettingDlgParams.bShow)
}
inline bool ShowSettingDlgParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void ShowSettingDlgParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// ScheduleMeetingWithWndParams

// optional string hSelfWnd = 1;
inline bool ScheduleMeetingWithWndParams::has_hselfwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ScheduleMeetingWithWndParams::clear_hselfwnd() {
  _impl_.hselfwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScheduleMeetingWithWndParams::hselfwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hSelfWnd)
  return _internal_hselfwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScheduleMeetingWithWndParams::set_hselfwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hselfwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hSelfWnd)
}
inline std::string* ScheduleMeetingWithWndParams::mutable_hselfwnd() {
  std::string* _s = _internal_mutable_hselfwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hSelfWnd)
  return _s;
}
inline const std::string& ScheduleMeetingWithWndParams::_internal_hselfwnd() const {
  return _impl_.hselfwnd_.Get();
}
inline void ScheduleMeetingWithWndParams::_internal_set_hselfwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.hselfwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleMeetingWithWndParams::_internal_mutable_hselfwnd() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hselfwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* ScheduleMeetingWithWndParams::release_hselfwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hSelfWnd)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hselfwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ScheduleMeetingWithWndParams::set_allocated_hselfwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hselfwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hselfwnd_.IsDefault()) {
          _impl_.hselfwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hSelfWnd)
}

// optional string hParent = 2;
inline bool ScheduleMeetingWithWndParams::has_hparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ScheduleMeetingWithWndParams::clear_hparent() {
  _impl_.hparent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ScheduleMeetingWithWndParams::hparent() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hParent)
  return _internal_hparent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScheduleMeetingWithWndParams::set_hparent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hparent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hParent)
}
inline std::string* ScheduleMeetingWithWndParams::mutable_hparent() {
  std::string* _s = _internal_mutable_hparent();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hParent)
  return _s;
}
inline const std::string& ScheduleMeetingWithWndParams::_internal_hparent() const {
  return _impl_.hparent_.Get();
}
inline void ScheduleMeetingWithWndParams::_internal_set_hparent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.hparent_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleMeetingWithWndParams::_internal_mutable_hparent() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.hparent_.Mutable( GetArenaForAllocation());
}
inline std::string* ScheduleMeetingWithWndParams::release_hparent() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hParent)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.hparent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ScheduleMeetingWithWndParams::set_allocated_hparent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hparent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hparent_.IsDefault()) {
          _impl_.hparent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ScheduleMeetingWithWndParams.hParent)
}

// optional string left = 3;
inline bool ScheduleMeetingWithWndParams::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ScheduleMeetingWithWndParams::clear_left() {
  _impl_.left_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ScheduleMeetingWithWndParams::left() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ScheduleMeetingWithWndParams.left)
  return _internal_left();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScheduleMeetingWithWndParams::set_left(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.left_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ScheduleMeetingWithWndParams.left)
}
inline std::string* ScheduleMeetingWithWndParams::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ScheduleMeetingWithWndParams.left)
  return _s;
}
inline const std::string& ScheduleMeetingWithWndParams::_internal_left() const {
  return _impl_.left_.Get();
}
inline void ScheduleMeetingWithWndParams::_internal_set_left(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.left_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleMeetingWithWndParams::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.left_.Mutable( GetArenaForAllocation());
}
inline std::string* ScheduleMeetingWithWndParams::release_left() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ScheduleMeetingWithWndParams.left)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.left_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ScheduleMeetingWithWndParams::set_allocated_left(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.left_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.left_.IsDefault()) {
          _impl_.left_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ScheduleMeetingWithWndParams.left)
}

// optional string top = 4;
inline bool ScheduleMeetingWithWndParams::has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ScheduleMeetingWithWndParams::clear_top() {
  _impl_.top_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ScheduleMeetingWithWndParams::top() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ScheduleMeetingWithWndParams.top)
  return _internal_top();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScheduleMeetingWithWndParams::set_top(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.top_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ScheduleMeetingWithWndParams.top)
}
inline std::string* ScheduleMeetingWithWndParams::mutable_top() {
  std::string* _s = _internal_mutable_top();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ScheduleMeetingWithWndParams.top)
  return _s;
}
inline const std::string& ScheduleMeetingWithWndParams::_internal_top() const {
  return _impl_.top_.Get();
}
inline void ScheduleMeetingWithWndParams::_internal_set_top(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.top_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleMeetingWithWndParams::_internal_mutable_top() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.top_.Mutable( GetArenaForAllocation());
}
inline std::string* ScheduleMeetingWithWndParams::release_top() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ScheduleMeetingWithWndParams.top)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.top_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ScheduleMeetingWithWndParams::set_allocated_top(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.top_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.top_.IsDefault()) {
          _impl_.top_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ScheduleMeetingWithWndParams.top)
}

// -------------------------------------------------------------------

// EditMeetingParams

// optional uint64 meetingNumber = 1;
inline bool EditMeetingParams::has_meetingnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EditMeetingParams::clear_meetingnumber() {
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t EditMeetingParams::meetingnumber() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EditMeetingParams.meetingNumber)
  return _internal_meetingnumber();
}
inline void EditMeetingParams::set_meetingnumber(::uint64_t value) {
  _internal_set_meetingnumber(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EditMeetingParams.meetingNumber)
}
inline ::uint64_t EditMeetingParams::_internal_meetingnumber() const {
  return _impl_.meetingnumber_;
}
inline void EditMeetingParams::_internal_set_meetingnumber(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.meetingnumber_ = value;
}

// -------------------------------------------------------------------

// EditMeetingWithWndParams

// optional string hSelfWnd = 1;
inline bool EditMeetingWithWndParams::has_hselfwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EditMeetingWithWndParams::clear_hselfwnd() {
  _impl_.hselfwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EditMeetingWithWndParams::hselfwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EditMeetingWithWndParams.hSelfWnd)
  return _internal_hselfwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMeetingWithWndParams::set_hselfwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hselfwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EditMeetingWithWndParams.hSelfWnd)
}
inline std::string* EditMeetingWithWndParams::mutable_hselfwnd() {
  std::string* _s = _internal_mutable_hselfwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.EditMeetingWithWndParams.hSelfWnd)
  return _s;
}
inline const std::string& EditMeetingWithWndParams::_internal_hselfwnd() const {
  return _impl_.hselfwnd_.Get();
}
inline void EditMeetingWithWndParams::_internal_set_hselfwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.hselfwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMeetingWithWndParams::_internal_mutable_hselfwnd() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hselfwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMeetingWithWndParams::release_hselfwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.EditMeetingWithWndParams.hSelfWnd)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hselfwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EditMeetingWithWndParams::set_allocated_hselfwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hselfwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hselfwnd_.IsDefault()) {
          _impl_.hselfwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.EditMeetingWithWndParams.hSelfWnd)
}

// optional string hParent = 2;
inline bool EditMeetingWithWndParams::has_hparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EditMeetingWithWndParams::clear_hparent() {
  _impl_.hparent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EditMeetingWithWndParams::hparent() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EditMeetingWithWndParams.hParent)
  return _internal_hparent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMeetingWithWndParams::set_hparent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hparent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EditMeetingWithWndParams.hParent)
}
inline std::string* EditMeetingWithWndParams::mutable_hparent() {
  std::string* _s = _internal_mutable_hparent();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.EditMeetingWithWndParams.hParent)
  return _s;
}
inline const std::string& EditMeetingWithWndParams::_internal_hparent() const {
  return _impl_.hparent_.Get();
}
inline void EditMeetingWithWndParams::_internal_set_hparent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.hparent_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMeetingWithWndParams::_internal_mutable_hparent() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.hparent_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMeetingWithWndParams::release_hparent() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.EditMeetingWithWndParams.hParent)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.hparent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EditMeetingWithWndParams::set_allocated_hparent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hparent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hparent_.IsDefault()) {
          _impl_.hparent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.EditMeetingWithWndParams.hParent)
}

// optional string left = 3;
inline bool EditMeetingWithWndParams::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EditMeetingWithWndParams::clear_left() {
  _impl_.left_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EditMeetingWithWndParams::left() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EditMeetingWithWndParams.left)
  return _internal_left();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMeetingWithWndParams::set_left(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.left_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EditMeetingWithWndParams.left)
}
inline std::string* EditMeetingWithWndParams::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.EditMeetingWithWndParams.left)
  return _s;
}
inline const std::string& EditMeetingWithWndParams::_internal_left() const {
  return _impl_.left_.Get();
}
inline void EditMeetingWithWndParams::_internal_set_left(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.left_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMeetingWithWndParams::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.left_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMeetingWithWndParams::release_left() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.EditMeetingWithWndParams.left)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.left_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EditMeetingWithWndParams::set_allocated_left(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.left_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.left_.IsDefault()) {
          _impl_.left_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.EditMeetingWithWndParams.left)
}

// optional string top = 4;
inline bool EditMeetingWithWndParams::has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void EditMeetingWithWndParams::clear_top() {
  _impl_.top_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EditMeetingWithWndParams::top() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EditMeetingWithWndParams.top)
  return _internal_top();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMeetingWithWndParams::set_top(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.top_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EditMeetingWithWndParams.top)
}
inline std::string* EditMeetingWithWndParams::mutable_top() {
  std::string* _s = _internal_mutable_top();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.EditMeetingWithWndParams.top)
  return _s;
}
inline const std::string& EditMeetingWithWndParams::_internal_top() const {
  return _impl_.top_.Get();
}
inline void EditMeetingWithWndParams::_internal_set_top(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.top_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMeetingWithWndParams::_internal_mutable_top() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.top_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMeetingWithWndParams::release_top() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.EditMeetingWithWndParams.top)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.top_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EditMeetingWithWndParams::set_allocated_top(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.top_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.top_.IsDefault()) {
          _impl_.top_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.EditMeetingWithWndParams.top)
}

// optional uint64 meetingNumber = 5;
inline bool EditMeetingWithWndParams::has_meetingnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void EditMeetingWithWndParams::clear_meetingnumber() {
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t EditMeetingWithWndParams::meetingnumber() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EditMeetingWithWndParams.meetingNumber)
  return _internal_meetingnumber();
}
inline void EditMeetingWithWndParams::set_meetingnumber(::uint64_t value) {
  _internal_set_meetingnumber(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EditMeetingWithWndParams.meetingNumber)
}
inline ::uint64_t EditMeetingWithWndParams::_internal_meetingnumber() const {
  return _impl_.meetingnumber_;
}
inline void EditMeetingWithWndParams::_internal_set_meetingnumber(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.meetingnumber_ = value;
}

// -------------------------------------------------------------------

// DeleteMeetingParams

// optional uint64 meetingNumber = 1;
inline bool DeleteMeetingParams::has_meetingnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DeleteMeetingParams::clear_meetingnumber() {
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t DeleteMeetingParams::meetingnumber() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DeleteMeetingParams.meetingNumber)
  return _internal_meetingnumber();
}
inline void DeleteMeetingParams::set_meetingnumber(::uint64_t value) {
  _internal_set_meetingnumber(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DeleteMeetingParams.meetingNumber)
}
inline ::uint64_t DeleteMeetingParams::_internal_meetingnumber() const {
  return _impl_.meetingnumber_;
}
inline void DeleteMeetingParams::_internal_set_meetingnumber(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.meetingnumber_ = value;
}

// -------------------------------------------------------------------

// AddCustomizedPictureResourceParams

// optional string strPNGID = 1;
inline bool AddCustomizedPictureResourceParams::has_strpngid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AddCustomizedPictureResourceParams::clear_strpngid() {
  _impl_.strpngid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddCustomizedPictureResourceParams::strpngid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGID)
  return _internal_strpngid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddCustomizedPictureResourceParams::set_strpngid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strpngid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGID)
}
inline std::string* AddCustomizedPictureResourceParams::mutable_strpngid() {
  std::string* _s = _internal_mutable_strpngid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGID)
  return _s;
}
inline const std::string& AddCustomizedPictureResourceParams::_internal_strpngid() const {
  return _impl_.strpngid_.Get();
}
inline void AddCustomizedPictureResourceParams::_internal_set_strpngid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strpngid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddCustomizedPictureResourceParams::_internal_mutable_strpngid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strpngid_.Mutable( GetArenaForAllocation());
}
inline std::string* AddCustomizedPictureResourceParams::release_strpngid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strpngid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strpngid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AddCustomizedPictureResourceParams::set_allocated_strpngid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strpngid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strpngid_.IsDefault()) {
          _impl_.strpngid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGID)
}

// optional string strPNGPath = 2;
inline bool AddCustomizedPictureResourceParams::has_strpngpath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AddCustomizedPictureResourceParams::clear_strpngpath() {
  _impl_.strpngpath_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddCustomizedPictureResourceParams::strpngpath() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGPath)
  return _internal_strpngpath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddCustomizedPictureResourceParams::set_strpngpath(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.strpngpath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGPath)
}
inline std::string* AddCustomizedPictureResourceParams::mutable_strpngpath() {
  std::string* _s = _internal_mutable_strpngpath();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGPath)
  return _s;
}
inline const std::string& AddCustomizedPictureResourceParams::_internal_strpngpath() const {
  return _impl_.strpngpath_.Get();
}
inline void AddCustomizedPictureResourceParams::_internal_set_strpngpath(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.strpngpath_.Set(value, GetArenaForAllocation());
}
inline std::string* AddCustomizedPictureResourceParams::_internal_mutable_strpngpath() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.strpngpath_.Mutable( GetArenaForAllocation());
}
inline std::string* AddCustomizedPictureResourceParams::release_strpngpath() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGPath)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.strpngpath_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strpngpath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AddCustomizedPictureResourceParams::set_allocated_strpngpath(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.strpngpath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strpngpath_.IsDefault()) {
          _impl_.strpngpath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.AddCustomizedPictureResourceParams.strPNGPath)
}

// -------------------------------------------------------------------

// AddCustomizedStringResourceParams

// optional int32 customizedStringType = 1;
inline bool AddCustomizedStringResourceParams::has_customizedstringtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AddCustomizedStringResourceParams::clear_customizedstringtype() {
  _impl_.customizedstringtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t AddCustomizedStringResourceParams::customizedstringtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AddCustomizedStringResourceParams.customizedStringType)
  return _internal_customizedstringtype();
}
inline void AddCustomizedStringResourceParams::set_customizedstringtype(::int32_t value) {
  _internal_set_customizedstringtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AddCustomizedStringResourceParams.customizedStringType)
}
inline ::int32_t AddCustomizedStringResourceParams::_internal_customizedstringtype() const {
  return _impl_.customizedstringtype_;
}
inline void AddCustomizedStringResourceParams::_internal_set_customizedstringtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.customizedstringtype_ = value;
}

// optional string strCustomizedString = 2;
inline bool AddCustomizedStringResourceParams::has_strcustomizedstring() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AddCustomizedStringResourceParams::clear_strcustomizedstring() {
  _impl_.strcustomizedstring_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddCustomizedStringResourceParams::strcustomizedstring() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AddCustomizedStringResourceParams.strCustomizedString)
  return _internal_strcustomizedstring();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddCustomizedStringResourceParams::set_strcustomizedstring(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strcustomizedstring_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AddCustomizedStringResourceParams.strCustomizedString)
}
inline std::string* AddCustomizedStringResourceParams::mutable_strcustomizedstring() {
  std::string* _s = _internal_mutable_strcustomizedstring();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.AddCustomizedStringResourceParams.strCustomizedString)
  return _s;
}
inline const std::string& AddCustomizedStringResourceParams::_internal_strcustomizedstring() const {
  return _impl_.strcustomizedstring_.Get();
}
inline void AddCustomizedStringResourceParams::_internal_set_strcustomizedstring(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strcustomizedstring_.Set(value, GetArenaForAllocation());
}
inline std::string* AddCustomizedStringResourceParams::_internal_mutable_strcustomizedstring() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strcustomizedstring_.Mutable( GetArenaForAllocation());
}
inline std::string* AddCustomizedStringResourceParams::release_strcustomizedstring() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.AddCustomizedStringResourceParams.strCustomizedString)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strcustomizedstring_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strcustomizedstring_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AddCustomizedStringResourceParams::set_allocated_strcustomizedstring(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strcustomizedstring_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strcustomizedstring_.IsDefault()) {
          _impl_.strcustomizedstring_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.AddCustomizedStringResourceParams.strCustomizedString)
}

// -------------------------------------------------------------------

// AddCustomizedURLResourceParams

// optional int32 customizedURLType = 1;
inline bool AddCustomizedURLResourceParams::has_customizedurltype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AddCustomizedURLResourceParams::clear_customizedurltype() {
  _impl_.customizedurltype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t AddCustomizedURLResourceParams::customizedurltype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AddCustomizedURLResourceParams.customizedURLType)
  return _internal_customizedurltype();
}
inline void AddCustomizedURLResourceParams::set_customizedurltype(::int32_t value) {
  _internal_set_customizedurltype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AddCustomizedURLResourceParams.customizedURLType)
}
inline ::int32_t AddCustomizedURLResourceParams::_internal_customizedurltype() const {
  return _impl_.customizedurltype_;
}
inline void AddCustomizedURLResourceParams::_internal_set_customizedurltype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.customizedurltype_ = value;
}

// optional string strCustomizedURL = 2;
inline bool AddCustomizedURLResourceParams::has_strcustomizedurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AddCustomizedURLResourceParams::clear_strcustomizedurl() {
  _impl_.strcustomizedurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddCustomizedURLResourceParams::strcustomizedurl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AddCustomizedURLResourceParams.strCustomizedURL)
  return _internal_strcustomizedurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddCustomizedURLResourceParams::set_strcustomizedurl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strcustomizedurl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AddCustomizedURLResourceParams.strCustomizedURL)
}
inline std::string* AddCustomizedURLResourceParams::mutable_strcustomizedurl() {
  std::string* _s = _internal_mutable_strcustomizedurl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.AddCustomizedURLResourceParams.strCustomizedURL)
  return _s;
}
inline const std::string& AddCustomizedURLResourceParams::_internal_strcustomizedurl() const {
  return _impl_.strcustomizedurl_.Get();
}
inline void AddCustomizedURLResourceParams::_internal_set_strcustomizedurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strcustomizedurl_.Set(value, GetArenaForAllocation());
}
inline std::string* AddCustomizedURLResourceParams::_internal_mutable_strcustomizedurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strcustomizedurl_.Mutable( GetArenaForAllocation());
}
inline std::string* AddCustomizedURLResourceParams::release_strcustomizedurl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.AddCustomizedURLResourceParams.strCustomizedURL)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strcustomizedurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strcustomizedurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AddCustomizedURLResourceParams::set_allocated_strcustomizedurl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strcustomizedurl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strcustomizedurl_.IsDefault()) {
          _impl_.strcustomizedurl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.AddCustomizedURLResourceParams.strCustomizedURL)
}

// -------------------------------------------------------------------

// TryWithMeetingNumberParams

// optional uint64 meetingNumber = 1;
inline bool TryWithMeetingNumberParams::has_meetingnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TryWithMeetingNumberParams::clear_meetingnumber() {
  _impl_.meetingnumber_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TryWithMeetingNumberParams::meetingnumber() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.TryWithMeetingNumberParams.meetingNumber)
  return _internal_meetingnumber();
}
inline void TryWithMeetingNumberParams::set_meetingnumber(::uint64_t value) {
  _internal_set_meetingnumber(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.TryWithMeetingNumberParams.meetingNumber)
}
inline ::uint64_t TryWithMeetingNumberParams::_internal_meetingnumber() const {
  return _impl_.meetingnumber_;
}
inline void TryWithMeetingNumberParams::_internal_set_meetingnumber(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.meetingnumber_ = value;
}

// -------------------------------------------------------------------

// TryWithPairingCodeParams

// optional string paringCode = 1;
inline bool TryWithPairingCodeParams::has_paringcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TryWithPairingCodeParams::clear_paringcode() {
  _impl_.paringcode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TryWithPairingCodeParams::paringcode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.TryWithPairingCodeParams.paringCode)
  return _internal_paringcode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TryWithPairingCodeParams::set_paringcode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.paringcode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.TryWithPairingCodeParams.paringCode)
}
inline std::string* TryWithPairingCodeParams::mutable_paringcode() {
  std::string* _s = _internal_mutable_paringcode();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.TryWithPairingCodeParams.paringCode)
  return _s;
}
inline const std::string& TryWithPairingCodeParams::_internal_paringcode() const {
  return _impl_.paringcode_.Get();
}
inline void TryWithPairingCodeParams::_internal_set_paringcode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.paringcode_.Set(value, GetArenaForAllocation());
}
inline std::string* TryWithPairingCodeParams::_internal_mutable_paringcode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.paringcode_.Mutable( GetArenaForAllocation());
}
inline std::string* TryWithPairingCodeParams::release_paringcode() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.TryWithPairingCodeParams.paringCode)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.paringcode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paringcode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TryWithPairingCodeParams::set_allocated_paringcode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.paringcode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.paringcode_.IsDefault()) {
          _impl_.paringcode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.TryWithPairingCodeParams.paringCode)
}

// -------------------------------------------------------------------

// StartAnnotationParams

// optional int32 viewType = 1;
inline bool StartAnnotationParams::has_viewtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void StartAnnotationParams::clear_viewtype() {
  _impl_.viewtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t StartAnnotationParams::viewtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartAnnotationParams.viewType)
  return _internal_viewtype();
}
inline void StartAnnotationParams::set_viewtype(::int32_t value) {
  _internal_set_viewtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartAnnotationParams.viewType)
}
inline ::int32_t StartAnnotationParams::_internal_viewtype() const {
  return _impl_.viewtype_;
}
inline void StartAnnotationParams::_internal_set_viewtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.viewtype_ = value;
}

// optional string left = 2;
inline bool StartAnnotationParams::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartAnnotationParams::clear_left() {
  _impl_.left_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartAnnotationParams::left() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartAnnotationParams.left)
  return _internal_left();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartAnnotationParams::set_left(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.left_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartAnnotationParams.left)
}
inline std::string* StartAnnotationParams::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartAnnotationParams.left)
  return _s;
}
inline const std::string& StartAnnotationParams::_internal_left() const {
  return _impl_.left_.Get();
}
inline void StartAnnotationParams::_internal_set_left(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.left_.Set(value, GetArenaForAllocation());
}
inline std::string* StartAnnotationParams::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.left_.Mutable( GetArenaForAllocation());
}
inline std::string* StartAnnotationParams::release_left() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartAnnotationParams.left)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.left_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartAnnotationParams::set_allocated_left(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.left_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.left_.IsDefault()) {
          _impl_.left_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartAnnotationParams.left)
}

// optional string top = 3;
inline bool StartAnnotationParams::has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StartAnnotationParams::clear_top() {
  _impl_.top_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StartAnnotationParams::top() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartAnnotationParams.top)
  return _internal_top();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartAnnotationParams::set_top(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartAnnotationParams.top)
}
inline std::string* StartAnnotationParams::mutable_top() {
  std::string* _s = _internal_mutable_top();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartAnnotationParams.top)
  return _s;
}
inline const std::string& StartAnnotationParams::_internal_top() const {
  return _impl_.top_.Get();
}
inline void StartAnnotationParams::_internal_set_top(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.top_.Set(value, GetArenaForAllocation());
}
inline std::string* StartAnnotationParams::_internal_mutable_top() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.top_.Mutable( GetArenaForAllocation());
}
inline std::string* StartAnnotationParams::release_top() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartAnnotationParams.top)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.top_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartAnnotationParams::set_allocated_top(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.top_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.top_.IsDefault()) {
          _impl_.top_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartAnnotationParams.top)
}

// -------------------------------------------------------------------

// StopAnnotationParams

// optional int32 viewType = 1;
inline bool StopAnnotationParams::has_viewtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StopAnnotationParams::clear_viewtype() {
  _impl_.viewtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t StopAnnotationParams::viewtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StopAnnotationParams.viewType)
  return _internal_viewtype();
}
inline void StopAnnotationParams::set_viewtype(::int32_t value) {
  _internal_set_viewtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StopAnnotationParams.viewType)
}
inline ::int32_t StopAnnotationParams::_internal_viewtype() const {
  return _impl_.viewtype_;
}
inline void StopAnnotationParams::_internal_set_viewtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.viewtype_ = value;
}

// -------------------------------------------------------------------

// SetToolParams

// optional int32 viewType = 1;
inline bool SetToolParams::has_viewtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetToolParams::clear_viewtype() {
  _impl_.viewtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetToolParams::viewtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetToolParams.viewType)
  return _internal_viewtype();
}
inline void SetToolParams::set_viewtype(::int32_t value) {
  _internal_set_viewtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetToolParams.viewType)
}
inline ::int32_t SetToolParams::_internal_viewtype() const {
  return _impl_.viewtype_;
}
inline void SetToolParams::_internal_set_viewtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.viewtype_ = value;
}

// optional int32 toolType = 2;
inline bool SetToolParams::has_tooltype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetToolParams::clear_tooltype() {
  _impl_.tooltype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SetToolParams::tooltype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetToolParams.toolType)
  return _internal_tooltype();
}
inline void SetToolParams::set_tooltype(::int32_t value) {
  _internal_set_tooltype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetToolParams.toolType)
}
inline ::int32_t SetToolParams::_internal_tooltype() const {
  return _impl_.tooltype_;
}
inline void SetToolParams::_internal_set_tooltype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tooltype_ = value;
}

// -------------------------------------------------------------------

// ClearAnnotationParams

// optional int32 viewType = 1;
inline bool ClearAnnotationParams::has_viewtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClearAnnotationParams::clear_viewtype() {
  _impl_.viewtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ClearAnnotationParams::viewtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ClearAnnotationParams.viewType)
  return _internal_viewtype();
}
inline void ClearAnnotationParams::set_viewtype(::int32_t value) {
  _internal_set_viewtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ClearAnnotationParams.viewType)
}
inline ::int32_t ClearAnnotationParams::_internal_viewtype() const {
  return _impl_.viewtype_;
}
inline void ClearAnnotationParams::_internal_set_viewtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.viewtype_ = value;
}

// optional int32 clearType = 2;
inline bool ClearAnnotationParams::has_cleartype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ClearAnnotationParams::clear_cleartype() {
  _impl_.cleartype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ClearAnnotationParams::cleartype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ClearAnnotationParams.clearType)
  return _internal_cleartype();
}
inline void ClearAnnotationParams::set_cleartype(::int32_t value) {
  _internal_set_cleartype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ClearAnnotationParams.clearType)
}
inline ::int32_t ClearAnnotationParams::_internal_cleartype() const {
  return _impl_.cleartype_;
}
inline void ClearAnnotationParams::_internal_set_cleartype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cleartype_ = value;
}

// -------------------------------------------------------------------

// SetColorParams

// optional int32 viewType = 1;
inline bool SetColorParams::has_viewtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetColorParams::clear_viewtype() {
  _impl_.viewtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SetColorParams::viewtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetColorParams.viewType)
  return _internal_viewtype();
}
inline void SetColorParams::set_viewtype(::int32_t value) {
  _internal_set_viewtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetColorParams.viewType)
}
inline ::int32_t SetColorParams::_internal_viewtype() const {
  return _impl_.viewtype_;
}
inline void SetColorParams::_internal_set_viewtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.viewtype_ = value;
}

// optional string color = 2;
inline bool SetColorParams::has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetColorParams::clear_color() {
  _impl_.color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetColorParams::color() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetColorParams.color)
  return _internal_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetColorParams::set_color(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.color_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetColorParams.color)
}
inline std::string* SetColorParams::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetColorParams.color)
  return _s;
}
inline const std::string& SetColorParams::_internal_color() const {
  return _impl_.color_.Get();
}
inline void SetColorParams::_internal_set_color(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* SetColorParams::_internal_mutable_color() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.color_.Mutable( GetArenaForAllocation());
}
inline std::string* SetColorParams::release_color() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetColorParams.color)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.color_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.color_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetColorParams::set_allocated_color(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.color_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.color_.IsDefault()) {
          _impl_.color_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetColorParams.color)
}

// -------------------------------------------------------------------

// SetLineWidthParams

// optional int32 viewType = 1;
inline bool SetLineWidthParams::has_viewtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetLineWidthParams::clear_viewtype() {
  _impl_.viewtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SetLineWidthParams::viewtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetLineWidthParams.viewType)
  return _internal_viewtype();
}
inline void SetLineWidthParams::set_viewtype(::int32_t value) {
  _internal_set_viewtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetLineWidthParams.viewType)
}
inline ::int32_t SetLineWidthParams::_internal_viewtype() const {
  return _impl_.viewtype_;
}
inline void SetLineWidthParams::_internal_set_viewtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.viewtype_ = value;
}

// optional string lineWidth = 2;
inline bool SetLineWidthParams::has_linewidth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetLineWidthParams::clear_linewidth() {
  _impl_.linewidth_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetLineWidthParams::linewidth() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetLineWidthParams.lineWidth)
  return _internal_linewidth();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetLineWidthParams::set_linewidth(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.linewidth_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetLineWidthParams.lineWidth)
}
inline std::string* SetLineWidthParams::mutable_linewidth() {
  std::string* _s = _internal_mutable_linewidth();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetLineWidthParams.lineWidth)
  return _s;
}
inline const std::string& SetLineWidthParams::_internal_linewidth() const {
  return _impl_.linewidth_.Get();
}
inline void SetLineWidthParams::_internal_set_linewidth(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.linewidth_.Set(value, GetArenaForAllocation());
}
inline std::string* SetLineWidthParams::_internal_mutable_linewidth() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.linewidth_.Mutable( GetArenaForAllocation());
}
inline std::string* SetLineWidthParams::release_linewidth() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetLineWidthParams.lineWidth)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.linewidth_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linewidth_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetLineWidthParams::set_allocated_linewidth(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.linewidth_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.linewidth_.IsDefault()) {
          _impl_.linewidth_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetLineWidthParams.lineWidth)
}

// -------------------------------------------------------------------

// UndoParams

// optional int32 viewType = 1;
inline bool UndoParams::has_viewtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UndoParams::clear_viewtype() {
  _impl_.viewtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t UndoParams::viewtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.UndoParams.viewType)
  return _internal_viewtype();
}
inline void UndoParams::set_viewtype(::int32_t value) {
  _internal_set_viewtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.UndoParams.viewType)
}
inline ::int32_t UndoParams::_internal_viewtype() const {
  return _impl_.viewtype_;
}
inline void UndoParams::_internal_set_viewtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.viewtype_ = value;
}

// -------------------------------------------------------------------

// RedoParams

// optional int32 viewType = 1;
inline bool RedoParams::has_viewtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedoParams::clear_viewtype() {
  _impl_.viewtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t RedoParams::viewtype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedoParams.viewType)
  return _internal_viewtype();
}
inline void RedoParams::set_viewtype(::int32_t value) {
  _internal_set_viewtype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedoParams.viewType)
}
inline ::int32_t RedoParams::_internal_viewtype() const {
  return _impl_.viewtype_;
}
inline void RedoParams::_internal_set_viewtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.viewtype_ = value;
}

// -------------------------------------------------------------------

// MuteAudioParams

// optional int32 userID = 1;
inline bool MuteAudioParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MuteAudioParams::clear_userid() {
  _impl_.userid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t MuteAudioParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.MuteAudioParams.userID)
  return _internal_userid();
}
inline void MuteAudioParams::set_userid(::int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.MuteAudioParams.userID)
}
inline ::int32_t MuteAudioParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void MuteAudioParams::_internal_set_userid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// optional bool allowUnmuteBySelf = 2;
inline bool MuteAudioParams::has_allowunmutebyself() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MuteAudioParams::clear_allowunmutebyself() {
  _impl_.allowunmutebyself_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool MuteAudioParams::allowunmutebyself() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.MuteAudioParams.allowUnmuteBySelf)
  return _internal_allowunmutebyself();
}
inline void MuteAudioParams::set_allowunmutebyself(bool value) {
  _internal_set_allowunmutebyself(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.MuteAudioParams.allowUnmuteBySelf)
}
inline bool MuteAudioParams::_internal_allowunmutebyself() const {
  return _impl_.allowunmutebyself_;
}
inline void MuteAudioParams::_internal_set_allowunmutebyself(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allowunmutebyself_ = value;
}

// -------------------------------------------------------------------

// UnmuteAudioParams

// optional int32 userID = 1;
inline bool UnmuteAudioParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UnmuteAudioParams::clear_userid() {
  _impl_.userid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t UnmuteAudioParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.UnmuteAudioParams.userID)
  return _internal_userid();
}
inline void UnmuteAudioParams::set_userid(::int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.UnmuteAudioParams.userID)
}
inline ::int32_t UnmuteAudioParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void UnmuteAudioParams::_internal_set_userid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// EnablePlayChimeWhenEnterOrExitParams

// optional bool bEnable = 1;
inline bool EnablePlayChimeWhenEnterOrExitParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnablePlayChimeWhenEnterOrExitParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnablePlayChimeWhenEnterOrExitParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.bEnable)
  return _internal_benable();
}
inline void EnablePlayChimeWhenEnterOrExitParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.bEnable)
}
inline bool EnablePlayChimeWhenEnterOrExitParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnablePlayChimeWhenEnterOrExitParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableInviteButtonOnMeetingUIParams

// optional bool bEnable = 1;
inline bool EnableInviteButtonOnMeetingUIParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableInviteButtonOnMeetingUIParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableInviteButtonOnMeetingUIParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams.bEnable)
  return _internal_benable();
}
inline void EnableInviteButtonOnMeetingUIParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams.bEnable)
}
inline bool EnableInviteButtonOnMeetingUIParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableInviteButtonOnMeetingUIParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// SetFloatVideoPosParams

// optional string left = 1;
inline bool SetFloatVideoPosParams::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetFloatVideoPosParams::clear_left() {
  _impl_.left_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetFloatVideoPosParams::left() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetFloatVideoPosParams.left)
  return _internal_left();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatVideoPosParams::set_left(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.left_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetFloatVideoPosParams.left)
}
inline std::string* SetFloatVideoPosParams::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetFloatVideoPosParams.left)
  return _s;
}
inline const std::string& SetFloatVideoPosParams::_internal_left() const {
  return _impl_.left_.Get();
}
inline void SetFloatVideoPosParams::_internal_set_left(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.left_.Set(value, GetArenaForAllocation());
}
inline std::string* SetFloatVideoPosParams::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.left_.Mutable( GetArenaForAllocation());
}
inline std::string* SetFloatVideoPosParams::release_left() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetFloatVideoPosParams.left)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.left_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetFloatVideoPosParams::set_allocated_left(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.left_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.left_.IsDefault()) {
          _impl_.left_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetFloatVideoPosParams.left)
}

// optional string top = 2;
inline bool SetFloatVideoPosParams::has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetFloatVideoPosParams::clear_top() {
  _impl_.top_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetFloatVideoPosParams::top() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetFloatVideoPosParams.top)
  return _internal_top();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatVideoPosParams::set_top(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetFloatVideoPosParams.top)
}
inline std::string* SetFloatVideoPosParams::mutable_top() {
  std::string* _s = _internal_mutable_top();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetFloatVideoPosParams.top)
  return _s;
}
inline const std::string& SetFloatVideoPosParams::_internal_top() const {
  return _impl_.top_.Get();
}
inline void SetFloatVideoPosParams::_internal_set_top(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.top_.Set(value, GetArenaForAllocation());
}
inline std::string* SetFloatVideoPosParams::_internal_mutable_top() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.top_.Mutable( GetArenaForAllocation());
}
inline std::string* SetFloatVideoPosParams::release_top() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetFloatVideoPosParams.top)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.top_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetFloatVideoPosParams::set_allocated_top(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.top_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.top_.IsDefault()) {
          _impl_.top_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetFloatVideoPosParams.top)
}

// optional string hSelfWnd = 3;
inline bool SetFloatVideoPosParams::has_hselfwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SetFloatVideoPosParams::clear_hselfwnd() {
  _impl_.hselfwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SetFloatVideoPosParams::hselfwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetFloatVideoPosParams.hSelfWnd)
  return _internal_hselfwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatVideoPosParams::set_hselfwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hselfwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetFloatVideoPosParams.hSelfWnd)
}
inline std::string* SetFloatVideoPosParams::mutable_hselfwnd() {
  std::string* _s = _internal_mutable_hselfwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetFloatVideoPosParams.hSelfWnd)
  return _s;
}
inline const std::string& SetFloatVideoPosParams::_internal_hselfwnd() const {
  return _impl_.hselfwnd_.Get();
}
inline void SetFloatVideoPosParams::_internal_set_hselfwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.hselfwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* SetFloatVideoPosParams::_internal_mutable_hselfwnd() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.hselfwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* SetFloatVideoPosParams::release_hselfwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetFloatVideoPosParams.hSelfWnd)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.hselfwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetFloatVideoPosParams::set_allocated_hselfwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.hselfwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hselfwnd_.IsDefault()) {
          _impl_.hselfwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetFloatVideoPosParams.hSelfWnd)
}

// optional string hParent = 4;
inline bool SetFloatVideoPosParams::has_hparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SetFloatVideoPosParams::clear_hparent() {
  _impl_.hparent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SetFloatVideoPosParams::hparent() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetFloatVideoPosParams.hParent)
  return _internal_hparent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatVideoPosParams::set_hparent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hparent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetFloatVideoPosParams.hParent)
}
inline std::string* SetFloatVideoPosParams::mutable_hparent() {
  std::string* _s = _internal_mutable_hparent();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetFloatVideoPosParams.hParent)
  return _s;
}
inline const std::string& SetFloatVideoPosParams::_internal_hparent() const {
  return _impl_.hparent_.Get();
}
inline void SetFloatVideoPosParams::_internal_set_hparent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.hparent_.Set(value, GetArenaForAllocation());
}
inline std::string* SetFloatVideoPosParams::_internal_mutable_hparent() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.hparent_.Mutable( GetArenaForAllocation());
}
inline std::string* SetFloatVideoPosParams::release_hparent() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetFloatVideoPosParams.hParent)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.hparent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetFloatVideoPosParams::set_allocated_hparent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hparent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hparent_.IsDefault()) {
          _impl_.hparent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetFloatVideoPosParams.hParent)
}

// -------------------------------------------------------------------

// SetBottomFloatToolBarWndVisibilityParams

// optional bool bShow = 1;
inline bool SetBottomFloatToolBarWndVisibilityParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetBottomFloatToolBarWndVisibilityParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetBottomFloatToolBarWndVisibilityParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.bShow)
  return _internal_bshow();
}
inline void SetBottomFloatToolBarWndVisibilityParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.bShow)
}
inline bool SetBottomFloatToolBarWndVisibilityParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetBottomFloatToolBarWndVisibilityParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// SetSharingToolBarVisibilityParams

// optional bool bShow = 1;
inline bool SetSharingToolBarVisibilityParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetSharingToolBarVisibilityParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetSharingToolBarVisibilityParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetSharingToolBarVisibilityParams.bShow)
  return _internal_bshow();
}
inline void SetSharingToolBarVisibilityParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetSharingToolBarVisibilityParams.bShow)
}
inline bool SetSharingToolBarVisibilityParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetSharingToolBarVisibilityParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// SetDirectShareMonitorIDParams

// optional string monitorID = 1;
inline bool SetDirectShareMonitorIDParams::has_monitorid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetDirectShareMonitorIDParams::clear_monitorid() {
  _impl_.monitorid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetDirectShareMonitorIDParams::monitorid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetDirectShareMonitorIDParams.monitorID)
  return _internal_monitorid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetDirectShareMonitorIDParams::set_monitorid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.monitorid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetDirectShareMonitorIDParams.monitorID)
}
inline std::string* SetDirectShareMonitorIDParams::mutable_monitorid() {
  std::string* _s = _internal_mutable_monitorid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetDirectShareMonitorIDParams.monitorID)
  return _s;
}
inline const std::string& SetDirectShareMonitorIDParams::_internal_monitorid() const {
  return _impl_.monitorid_.Get();
}
inline void SetDirectShareMonitorIDParams::_internal_set_monitorid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.monitorid_.Set(value, GetArenaForAllocation());
}
inline std::string* SetDirectShareMonitorIDParams::_internal_mutable_monitorid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.monitorid_.Mutable( GetArenaForAllocation());
}
inline std::string* SetDirectShareMonitorIDParams::release_monitorid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetDirectShareMonitorIDParams.monitorID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.monitorid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetDirectShareMonitorIDParams::set_allocated_monitorid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.monitorid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.monitorid_.IsDefault()) {
          _impl_.monitorid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetDirectShareMonitorIDParams.monitorID)
}

// -------------------------------------------------------------------

// SetMeetingUIPosParams

// optional string left = 1;
inline bool SetMeetingUIPosParams::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetMeetingUIPosParams::clear_left() {
  _impl_.left_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetMeetingUIPosParams::left() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetMeetingUIPosParams.left)
  return _internal_left();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetMeetingUIPosParams::set_left(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.left_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetMeetingUIPosParams.left)
}
inline std::string* SetMeetingUIPosParams::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetMeetingUIPosParams.left)
  return _s;
}
inline const std::string& SetMeetingUIPosParams::_internal_left() const {
  return _impl_.left_.Get();
}
inline void SetMeetingUIPosParams::_internal_set_left(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.left_.Set(value, GetArenaForAllocation());
}
inline std::string* SetMeetingUIPosParams::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.left_.Mutable( GetArenaForAllocation());
}
inline std::string* SetMeetingUIPosParams::release_left() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetMeetingUIPosParams.left)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.left_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetMeetingUIPosParams::set_allocated_left(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.left_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.left_.IsDefault()) {
          _impl_.left_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetMeetingUIPosParams.left)
}

// optional string top = 2;
inline bool SetMeetingUIPosParams::has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetMeetingUIPosParams::clear_top() {
  _impl_.top_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetMeetingUIPosParams::top() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetMeetingUIPosParams.top)
  return _internal_top();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetMeetingUIPosParams::set_top(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetMeetingUIPosParams.top)
}
inline std::string* SetMeetingUIPosParams::mutable_top() {
  std::string* _s = _internal_mutable_top();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetMeetingUIPosParams.top)
  return _s;
}
inline const std::string& SetMeetingUIPosParams::_internal_top() const {
  return _impl_.top_.Get();
}
inline void SetMeetingUIPosParams::_internal_set_top(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.top_.Set(value, GetArenaForAllocation());
}
inline std::string* SetMeetingUIPosParams::_internal_mutable_top() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.top_.Mutable( GetArenaForAllocation());
}
inline std::string* SetMeetingUIPosParams::release_top() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetMeetingUIPosParams.top)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.top_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.top_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetMeetingUIPosParams::set_allocated_top(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.top_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.top_.IsDefault()) {
          _impl_.top_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetMeetingUIPosParams.top)
}

// optional string hSelfWnd = 3;
inline bool SetMeetingUIPosParams::has_hselfwnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SetMeetingUIPosParams::clear_hselfwnd() {
  _impl_.hselfwnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SetMeetingUIPosParams::hselfwnd() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetMeetingUIPosParams.hSelfWnd)
  return _internal_hselfwnd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetMeetingUIPosParams::set_hselfwnd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hselfwnd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetMeetingUIPosParams.hSelfWnd)
}
inline std::string* SetMeetingUIPosParams::mutable_hselfwnd() {
  std::string* _s = _internal_mutable_hselfwnd();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetMeetingUIPosParams.hSelfWnd)
  return _s;
}
inline const std::string& SetMeetingUIPosParams::_internal_hselfwnd() const {
  return _impl_.hselfwnd_.Get();
}
inline void SetMeetingUIPosParams::_internal_set_hselfwnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.hselfwnd_.Set(value, GetArenaForAllocation());
}
inline std::string* SetMeetingUIPosParams::_internal_mutable_hselfwnd() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.hselfwnd_.Mutable( GetArenaForAllocation());
}
inline std::string* SetMeetingUIPosParams::release_hselfwnd() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetMeetingUIPosParams.hSelfWnd)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.hselfwnd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hselfwnd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetMeetingUIPosParams::set_allocated_hselfwnd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.hselfwnd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hselfwnd_.IsDefault()) {
          _impl_.hselfwnd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetMeetingUIPosParams.hSelfWnd)
}

// optional string hParent = 4;
inline bool SetMeetingUIPosParams::has_hparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SetMeetingUIPosParams::clear_hparent() {
  _impl_.hparent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SetMeetingUIPosParams::hparent() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetMeetingUIPosParams.hParent)
  return _internal_hparent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetMeetingUIPosParams::set_hparent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hparent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetMeetingUIPosParams.hParent)
}
inline std::string* SetMeetingUIPosParams::mutable_hparent() {
  std::string* _s = _internal_mutable_hparent();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetMeetingUIPosParams.hParent)
  return _s;
}
inline const std::string& SetMeetingUIPosParams::_internal_hparent() const {
  return _impl_.hparent_.Get();
}
inline void SetMeetingUIPosParams::_internal_set_hparent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.hparent_.Set(value, GetArenaForAllocation());
}
inline std::string* SetMeetingUIPosParams::_internal_mutable_hparent() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.hparent_.Mutable( GetArenaForAllocation());
}
inline std::string* SetMeetingUIPosParams::release_hparent() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetMeetingUIPosParams.hParent)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.hparent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hparent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetMeetingUIPosParams::set_allocated_hparent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hparent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hparent_.IsDefault()) {
          _impl_.hparent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetMeetingUIPosParams.hParent)
}

// -------------------------------------------------------------------

// DisableWaitingForHostDialogParams

// optional bool bDisable = 1;
inline bool DisableWaitingForHostDialogParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableWaitingForHostDialogParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableWaitingForHostDialogParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableWaitingForHostDialogParams.bDisable)
  return _internal_bdisable();
}
inline void DisableWaitingForHostDialogParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableWaitingForHostDialogParams.bDisable)
}
inline bool DisableWaitingForHostDialogParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableWaitingForHostDialogParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// DisablePopupMeetingWrongPSWDlgParams

// optional bool bDisable = 1;
inline bool DisablePopupMeetingWrongPSWDlgParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisablePopupMeetingWrongPSWDlgParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisablePopupMeetingWrongPSWDlgParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.bDisable)
  return _internal_bdisable();
}
inline void DisablePopupMeetingWrongPSWDlgParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.bDisable)
}
inline bool DisablePopupMeetingWrongPSWDlgParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisablePopupMeetingWrongPSWDlgParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// EnableAutoEndOtherMeetingWhenStartMeetingParams

// optional bool bEnable = 1;
inline bool EnableAutoEndOtherMeetingWhenStartMeetingParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoEndOtherMeetingWhenStartMeetingParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoEndOtherMeetingWhenStartMeetingParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoEndOtherMeetingWhenStartMeetingParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.bEnable)
}
inline bool EnableAutoEndOtherMeetingWhenStartMeetingParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoEndOtherMeetingWhenStartMeetingParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableLButtonDBClick4SwitchFullScreenModeParams

// optional bool bEnable = 1;
inline bool EnableLButtonDBClick4SwitchFullScreenModeParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableLButtonDBClick4SwitchFullScreenModeParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableLButtonDBClick4SwitchFullScreenModeParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.bEnable)
  return _internal_benable();
}
inline void EnableLButtonDBClick4SwitchFullScreenModeParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.bEnable)
}
inline bool EnableLButtonDBClick4SwitchFullScreenModeParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableLButtonDBClick4SwitchFullScreenModeParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// SetFloatVideoWndVisibilityParams

// optional bool bShow = 1;
inline bool SetFloatVideoWndVisibilityParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetFloatVideoWndVisibilityParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetFloatVideoWndVisibilityParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.bShow)
  return _internal_bshow();
}
inline void SetFloatVideoWndVisibilityParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.bShow)
}
inline bool SetFloatVideoWndVisibilityParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetFloatVideoWndVisibilityParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// PrePopulateWebinarRegistrationInfoParams

// optional string email = 1;
inline bool PrePopulateWebinarRegistrationInfoParams::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PrePopulateWebinarRegistrationInfoParams::clear_email() {
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrePopulateWebinarRegistrationInfoParams::email() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrePopulateWebinarRegistrationInfoParams::set_email(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.email)
}
inline std::string* PrePopulateWebinarRegistrationInfoParams::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.email)
  return _s;
}
inline const std::string& PrePopulateWebinarRegistrationInfoParams::_internal_email() const {
  return _impl_.email_.Get();
}
inline void PrePopulateWebinarRegistrationInfoParams::_internal_set_email(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* PrePopulateWebinarRegistrationInfoParams::_internal_mutable_email() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* PrePopulateWebinarRegistrationInfoParams::release_email() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.email)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.email_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PrePopulateWebinarRegistrationInfoParams::set_allocated_email(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.email)
}

// optional string userName = 2;
inline bool PrePopulateWebinarRegistrationInfoParams::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PrePopulateWebinarRegistrationInfoParams::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrePopulateWebinarRegistrationInfoParams::username() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.userName)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrePopulateWebinarRegistrationInfoParams::set_username(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.userName)
}
inline std::string* PrePopulateWebinarRegistrationInfoParams::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.userName)
  return _s;
}
inline const std::string& PrePopulateWebinarRegistrationInfoParams::_internal_username() const {
  return _impl_.username_.Get();
}
inline void PrePopulateWebinarRegistrationInfoParams::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* PrePopulateWebinarRegistrationInfoParams::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* PrePopulateWebinarRegistrationInfoParams::release_username() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.userName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PrePopulateWebinarRegistrationInfoParams::set_allocated_username(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.userName)
}

// -------------------------------------------------------------------

// EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams

// optional bool bEnable = 1;
inline bool EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.bEnable)
}
inline bool EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAutoAdjustMicVolumeWhenJoinAudioParams

// optional bool bEnable = 1;
inline bool EnableAutoAdjustMicVolumeWhenJoinAudioParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoAdjustMicVolumeWhenJoinAudioParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoAdjustMicVolumeWhenJoinAudioParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoAdjustMicVolumeWhenJoinAudioParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.bEnable)
}
inline bool EnableAutoAdjustMicVolumeWhenJoinAudioParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoAdjustMicVolumeWhenJoinAudioParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// ConfigDSCPParams

// optional int32 dscpAudio = 1;
inline bool ConfigDSCPParams::has_dscpaudio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigDSCPParams::clear_dscpaudio() {
  _impl_.dscpaudio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ConfigDSCPParams::dscpaudio() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ConfigDSCPParams.dscpAudio)
  return _internal_dscpaudio();
}
inline void ConfigDSCPParams::set_dscpaudio(::int32_t value) {
  _internal_set_dscpaudio(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ConfigDSCPParams.dscpAudio)
}
inline ::int32_t ConfigDSCPParams::_internal_dscpaudio() const {
  return _impl_.dscpaudio_;
}
inline void ConfigDSCPParams::_internal_set_dscpaudio(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dscpaudio_ = value;
}

// optional int32 dscpVideo = 2;
inline bool ConfigDSCPParams::has_dscpvideo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigDSCPParams::clear_dscpvideo() {
  _impl_.dscpvideo_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ConfigDSCPParams::dscpvideo() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ConfigDSCPParams.dscpVideo)
  return _internal_dscpvideo();
}
inline void ConfigDSCPParams::set_dscpvideo(::int32_t value) {
  _internal_set_dscpvideo(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ConfigDSCPParams.dscpVideo)
}
inline ::int32_t ConfigDSCPParams::_internal_dscpvideo() const {
  return _impl_.dscpvideo_;
}
inline void ConfigDSCPParams::_internal_set_dscpvideo(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dscpvideo_ = value;
}

// optional bool bReset = 3;
inline bool ConfigDSCPParams::has_breset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigDSCPParams::clear_breset() {
  _impl_.breset_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ConfigDSCPParams::breset() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ConfigDSCPParams.bReset)
  return _internal_breset();
}
inline void ConfigDSCPParams::set_breset(bool value) {
  _internal_set_breset(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ConfigDSCPParams.bReset)
}
inline bool ConfigDSCPParams::_internal_breset() const {
  return _impl_.breset_;
}
inline void ConfigDSCPParams::_internal_set_breset(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.breset_ = value;
}

// -------------------------------------------------------------------

// EnableHIdeFullPhoneNumber4PureCallinUserParams

// optional bool bEnable = 1;
inline bool EnableHIdeFullPhoneNumber4PureCallinUserParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableHIdeFullPhoneNumber4PureCallinUserParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableHIdeFullPhoneNumber4PureCallinUserParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.bEnable)
  return _internal_benable();
}
inline void EnableHIdeFullPhoneNumber4PureCallinUserParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.bEnable)
}
inline bool EnableHIdeFullPhoneNumber4PureCallinUserParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableHIdeFullPhoneNumber4PureCallinUserParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableShareIOSDeviceParams

// optional bool bEnable = 1;
inline bool EnableShareIOSDeviceParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableShareIOSDeviceParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableShareIOSDeviceParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableShareIOSDeviceParams.bEnable)
  return _internal_benable();
}
inline void EnableShareIOSDeviceParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableShareIOSDeviceParams.bEnable)
}
inline bool EnableShareIOSDeviceParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableShareIOSDeviceParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableShareWhiteBoardParams

// optional bool bEnable = 1;
inline bool EnableShareWhiteBoardParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableShareWhiteBoardParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableShareWhiteBoardParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableShareWhiteBoardParams.bEnable)
  return _internal_benable();
}
inline void EnableShareWhiteBoardParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableShareWhiteBoardParams.bEnable)
}
inline bool EnableShareWhiteBoardParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableShareWhiteBoardParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableLengthLimitationOfMeetingNumberParams

// optional bool bEnable = 1;
inline bool EnableLengthLimitationOfMeetingNumberParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableLengthLimitationOfMeetingNumberParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableLengthLimitationOfMeetingNumberParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.bEnable)
  return _internal_benable();
}
inline void EnableLengthLimitationOfMeetingNumberParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.bEnable)
}
inline bool EnableLengthLimitationOfMeetingNumberParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableLengthLimitationOfMeetingNumberParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// ForceDisableMultiShareParams

// optional bool bDisable = 1;
inline bool ForceDisableMultiShareParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ForceDisableMultiShareParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ForceDisableMultiShareParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ForceDisableMultiShareParams.bDisable)
  return _internal_bdisable();
}
inline void ForceDisableMultiShareParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ForceDisableMultiShareParams.bDisable)
}
inline bool ForceDisableMultiShareParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void ForceDisableMultiShareParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// EnableLocalRecordingConverProgressBarDialogParams

// optional bool bEnable = 1;
inline bool EnableLocalRecordingConverProgressBarDialogParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableLocalRecordingConverProgressBarDialogParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableLocalRecordingConverProgressBarDialogParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.bEnable)
  return _internal_benable();
}
inline void EnableLocalRecordingConverProgressBarDialogParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.bEnable)
}
inline bool EnableLocalRecordingConverProgressBarDialogParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableLocalRecordingConverProgressBarDialogParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// SetMaxDurationForOnlyHostInMeetingParams

// optional int32 nDuration = 1;
inline bool SetMaxDurationForOnlyHostInMeetingParams::has_nduration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetMaxDurationForOnlyHostInMeetingParams::clear_nduration() {
  _impl_.nduration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetMaxDurationForOnlyHostInMeetingParams::nduration() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.nDuration)
  return _internal_nduration();
}
inline void SetMaxDurationForOnlyHostInMeetingParams::set_nduration(::int32_t value) {
  _internal_set_nduration(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.nDuration)
}
inline ::int32_t SetMaxDurationForOnlyHostInMeetingParams::_internal_nduration() const {
  return _impl_.nduration_;
}
inline void SetMaxDurationForOnlyHostInMeetingParams::_internal_set_nduration(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nduration_ = value;
}

// -------------------------------------------------------------------

// EnableApproveRemoteControlDlgParams

// optional bool bEnable = 1;
inline bool EnableApproveRemoteControlDlgParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableApproveRemoteControlDlgParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableApproveRemoteControlDlgParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.bEnable)
  return _internal_benable();
}
inline void EnableApproveRemoteControlDlgParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.bEnable)
}
inline bool EnableApproveRemoteControlDlgParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableApproveRemoteControlDlgParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableDeclineRemoteControlResponseDlgParams

// optional bool bEnable = 1;
inline bool EnableDeclineRemoteControlResponseDlgParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableDeclineRemoteControlResponseDlgParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableDeclineRemoteControlResponseDlgParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.bEnable)
  return _internal_benable();
}
inline void EnableDeclineRemoteControlResponseDlgParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.bEnable)
}
inline bool EnableDeclineRemoteControlResponseDlgParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableDeclineRemoteControlResponseDlgParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableLeaveMeetingOptionForHostParams

// optional bool bEnable = 1;
inline bool EnableLeaveMeetingOptionForHostParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableLeaveMeetingOptionForHostParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableLeaveMeetingOptionForHostParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.bEnable)
  return _internal_benable();
}
inline void EnableLeaveMeetingOptionForHostParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.bEnable)
}
inline bool EnableLeaveMeetingOptionForHostParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableLeaveMeetingOptionForHostParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableVideoButtonOnMeetingUIParams

// optional bool bEnable = 1;
inline bool EnableVideoButtonOnMeetingUIParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableVideoButtonOnMeetingUIParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableVideoButtonOnMeetingUIParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.bEnable)
  return _internal_benable();
}
inline void EnableVideoButtonOnMeetingUIParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.bEnable)
}
inline bool EnableVideoButtonOnMeetingUIParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableVideoButtonOnMeetingUIParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAudioButtonOnMeetingUIParams

// optional bool bEnable = 1;
inline bool EnableAudioButtonOnMeetingUIParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAudioButtonOnMeetingUIParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAudioButtonOnMeetingUIParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.bEnable)
  return _internal_benable();
}
inline void EnableAudioButtonOnMeetingUIParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.bEnable)
}
inline bool EnableAudioButtonOnMeetingUIParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAudioButtonOnMeetingUIParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableEnterAndExitFullScreenButtonOnMeetingUIParams

// optional bool bEnable = 1;
inline bool EnableEnterAndExitFullScreenButtonOnMeetingUIParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableEnterAndExitFullScreenButtonOnMeetingUIParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.bEnable)
  return _internal_benable();
}
inline void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.bEnable)
}
inline bool EnableEnterAndExitFullScreenButtonOnMeetingUIParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// RedirectClickShareBTNEventParams

// optional bool bRedirect = 1;
inline bool RedirectClickShareBTNEventParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectClickShareBTNEventParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectClickShareBTNEventParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectClickShareBTNEventParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectClickShareBTNEventParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectClickShareBTNEventParams.bRedirect)
}
inline bool RedirectClickShareBTNEventParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectClickShareBTNEventParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectClickEndMeetingBTNEventParams

// optional bool bRedirect = 1;
inline bool RedirectClickEndMeetingBTNEventParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectClickEndMeetingBTNEventParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectClickEndMeetingBTNEventParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectClickEndMeetingBTNEventParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.bRedirect)
}
inline bool RedirectClickEndMeetingBTNEventParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectClickEndMeetingBTNEventParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectFreeMeetingEndingReminderDlgParams

// optional bool bRedirect = 1;
inline bool RedirectFreeMeetingEndingReminderDlgParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectFreeMeetingEndingReminderDlgParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectFreeMeetingEndingReminderDlgParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectFreeMeetingEndingReminderDlgParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.bRedirect)
}
inline bool RedirectFreeMeetingEndingReminderDlgParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectFreeMeetingEndingReminderDlgParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectClickCustomLiveStreamMenuEventParams

// optional bool bRedirect = 1;
inline bool RedirectClickCustomLiveStreamMenuEventParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectClickCustomLiveStreamMenuEventParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectClickCustomLiveStreamMenuEventParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectClickCustomLiveStreamMenuEventParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.bRedirect)
}
inline bool RedirectClickCustomLiveStreamMenuEventParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectClickCustomLiveStreamMenuEventParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectClickParticipantListBTNEventParams

// optional bool bRedirect = 1;
inline bool RedirectClickParticipantListBTNEventParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectClickParticipantListBTNEventParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectClickParticipantListBTNEventParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectClickParticipantListBTNEventParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.bRedirect)
}
inline bool RedirectClickParticipantListBTNEventParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectClickParticipantListBTNEventParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectClickCCBTNEventParams

// optional bool bRedirect = 1;
inline bool RedirectClickCCBTNEventParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectClickCCBTNEventParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectClickCCBTNEventParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectClickCCBTNEventParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectClickCCBTNEventParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectClickCCBTNEventParams.bRedirect)
}
inline bool RedirectClickCCBTNEventParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectClickCCBTNEventParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectClickAudioBTNEventParams

// optional bool bRedirect = 1;
inline bool RedirectClickAudioBTNEventParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectClickAudioBTNEventParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectClickAudioBTNEventParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectClickAudioBTNEventParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectClickAudioBTNEventParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectClickAudioBTNEventParams.bRedirect)
}
inline bool RedirectClickAudioBTNEventParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectClickAudioBTNEventParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectClickAudioMenuBTNEventParams

// optional bool bRedirect = 1;
inline bool RedirectClickAudioMenuBTNEventParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectClickAudioMenuBTNEventParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectClickAudioMenuBTNEventParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectClickAudioMenuBTNEventParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.bRedirect)
}
inline bool RedirectClickAudioMenuBTNEventParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectClickAudioMenuBTNEventParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectMeetingWarningMsgParams

// optional bool bRedirectBadNetwork = 1;
inline bool RedirectMeetingWarningMsgParams::has_bredirectbadnetwork() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectMeetingWarningMsgParams::clear_bredirectbadnetwork() {
  _impl_.bredirectbadnetwork_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectMeetingWarningMsgParams::bredirectbadnetwork() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectMeetingWarningMsgParams.bRedirectBadNetwork)
  return _internal_bredirectbadnetwork();
}
inline void RedirectMeetingWarningMsgParams::set_bredirectbadnetwork(bool value) {
  _internal_set_bredirectbadnetwork(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectMeetingWarningMsgParams.bRedirectBadNetwork)
}
inline bool RedirectMeetingWarningMsgParams::_internal_bredirectbadnetwork() const {
  return _impl_.bredirectbadnetwork_;
}
inline void RedirectMeetingWarningMsgParams::_internal_set_bredirectbadnetwork(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirectbadnetwork_ = value;
}

// optional bool bRedirectWarnHighCPU = 2;
inline bool RedirectMeetingWarningMsgParams::has_bredirectwarnhighcpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RedirectMeetingWarningMsgParams::clear_bredirectwarnhighcpu() {
  _impl_.bredirectwarnhighcpu_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool RedirectMeetingWarningMsgParams::bredirectwarnhighcpu() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectMeetingWarningMsgParams.bRedirectWarnHighCPU)
  return _internal_bredirectwarnhighcpu();
}
inline void RedirectMeetingWarningMsgParams::set_bredirectwarnhighcpu(bool value) {
  _internal_set_bredirectwarnhighcpu(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectMeetingWarningMsgParams.bRedirectWarnHighCPU)
}
inline bool RedirectMeetingWarningMsgParams::_internal_bredirectwarnhighcpu() const {
  return _impl_.bredirectwarnhighcpu_;
}
inline void RedirectMeetingWarningMsgParams::_internal_set_bredirectwarnhighcpu(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bredirectwarnhighcpu_ = value;
}

// -------------------------------------------------------------------

// EnableToolTipsShowParams

// optional bool bEnable = 1;
inline bool EnableToolTipsShowParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableToolTipsShowParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableToolTipsShowParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableToolTipsShowParams.bEnable)
  return _internal_benable();
}
inline void EnableToolTipsShowParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableToolTipsShowParams.bEnable)
}
inline bool EnableToolTipsShowParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableToolTipsShowParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAirplayInstructionWindowParams

// optional bool bEnable = 1;
inline bool EnableAirplayInstructionWindowParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAirplayInstructionWindowParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAirplayInstructionWindowParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAirplayInstructionWindowParams.bEnable)
  return _internal_benable();
}
inline void EnableAirplayInstructionWindowParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAirplayInstructionWindowParams.bEnable)
}
inline bool EnableAirplayInstructionWindowParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAirplayInstructionWindowParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableClaimHostFeatureParams

// optional bool bEnable = 1;
inline bool EnableClaimHostFeatureParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableClaimHostFeatureParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableClaimHostFeatureParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableClaimHostFeatureParams.bEnable)
  return _internal_benable();
}
inline void EnableClaimHostFeatureParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableClaimHostFeatureParams.bEnable)
}
inline bool EnableClaimHostFeatureParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableClaimHostFeatureParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAutoHideJoinAudioDialogParams

// optional bool bEnable = 1;
inline bool EnableAutoHideJoinAudioDialogParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoHideJoinAudioDialogParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoHideJoinAudioDialogParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoHideJoinAudioDialogParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.bEnable)
}
inline bool EnableAutoHideJoinAudioDialogParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoHideJoinAudioDialogParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// AlwaysShowIconOnTaskBarParams

// optional bool bAlwaysShow = 1;
inline bool AlwaysShowIconOnTaskBarParams::has_balwaysshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AlwaysShowIconOnTaskBarParams::clear_balwaysshow() {
  _impl_.balwaysshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool AlwaysShowIconOnTaskBarParams::balwaysshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.bAlwaysShow)
  return _internal_balwaysshow();
}
inline void AlwaysShowIconOnTaskBarParams::set_balwaysshow(bool value) {
  _internal_set_balwaysshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.bAlwaysShow)
}
inline bool AlwaysShowIconOnTaskBarParams::_internal_balwaysshow() const {
  return _impl_.balwaysshow_;
}
inline void AlwaysShowIconOnTaskBarParams::_internal_set_balwaysshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.balwaysshow_ = value;
}

// -------------------------------------------------------------------

// DisableSplitScreenModeUIElementsParams

// optional bool bDisable = 1;
inline bool DisableSplitScreenModeUIElementsParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableSplitScreenModeUIElementsParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableSplitScreenModeUIElementsParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.bDisable)
  return _internal_bdisable();
}
inline void DisableSplitScreenModeUIElementsParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.bDisable)
}
inline bool DisableSplitScreenModeUIElementsParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableSplitScreenModeUIElementsParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// SetShowAudioUseComputerSoundChkboxParams

// optional bool bShow = 1;
inline bool SetShowAudioUseComputerSoundChkboxParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetShowAudioUseComputerSoundChkboxParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetShowAudioUseComputerSoundChkboxParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.bShow)
  return _internal_bshow();
}
inline void SetShowAudioUseComputerSoundChkboxParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.bShow)
}
inline bool SetShowAudioUseComputerSoundChkboxParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetShowAudioUseComputerSoundChkboxParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// SetShowCallInTabParams

// optional bool bShow = 1;
inline bool SetShowCallInTabParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetShowCallInTabParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetShowCallInTabParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetShowCallInTabParams.bShow)
  return _internal_bshow();
}
inline void SetShowCallInTabParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetShowCallInTabParams.bShow)
}
inline bool SetShowCallInTabParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetShowCallInTabParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// SetShowCallMeTabParams

// optional bool bShow = 1;
inline bool SetShowCallMeTabParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetShowCallMeTabParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetShowCallMeTabParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetShowCallMeTabParams.bShow)
  return _internal_bshow();
}
inline void SetShowCallMeTabParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetShowCallMeTabParams.bShow)
}
inline bool SetShowCallMeTabParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetShowCallMeTabParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// DisableTopMostAttr4SettingDialogParams

// optional bool bDisable = 1;
inline bool DisableTopMostAttr4SettingDialogParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableTopMostAttr4SettingDialogParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableTopMostAttr4SettingDialogParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.bDisable)
  return _internal_bdisable();
}
inline void DisableTopMostAttr4SettingDialogParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.bDisable)
}
inline bool DisableTopMostAttr4SettingDialogParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableTopMostAttr4SettingDialogParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// EnableGrabShareWithoutReminderParams

// optional bool bEnable = 1;
inline bool EnableGrabShareWithoutReminderParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableGrabShareWithoutReminderParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableGrabShareWithoutReminderParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.bEnable)
  return _internal_benable();
}
inline void EnableGrabShareWithoutReminderParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.bEnable)
}
inline bool EnableGrabShareWithoutReminderParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableGrabShareWithoutReminderParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableShowShareSwitchMultiToSingleConfirmDlgParams

// optional bool bEnable = 1;
inline bool EnableShowShareSwitchMultiToSingleConfirmDlgParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableShowShareSwitchMultiToSingleConfirmDlgParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableShowShareSwitchMultiToSingleConfirmDlgParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.bEnable)
  return _internal_benable();
}
inline void EnableShowShareSwitchMultiToSingleConfirmDlgParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.bEnable)
}
inline bool EnableShowShareSwitchMultiToSingleConfirmDlgParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableShowShareSwitchMultiToSingleConfirmDlgParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// DisableFreeMeetingRemainTimeNotifyParams

// optional bool bDisable = 1;
inline bool DisableFreeMeetingRemainTimeNotifyParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableFreeMeetingRemainTimeNotifyParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableFreeMeetingRemainTimeNotifyParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.bDisable)
  return _internal_bdisable();
}
inline void DisableFreeMeetingRemainTimeNotifyParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.bDisable)
}
inline bool DisableFreeMeetingRemainTimeNotifyParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableFreeMeetingRemainTimeNotifyParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// HideChatItemOnMeetingUIParams

// optional bool bHide = 1;
inline bool HideChatItemOnMeetingUIParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideChatItemOnMeetingUIParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideChatItemOnMeetingUIParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideChatItemOnMeetingUIParams.bHide)
  return _internal_bhide();
}
inline void HideChatItemOnMeetingUIParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideChatItemOnMeetingUIParams.bHide)
}
inline bool HideChatItemOnMeetingUIParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideChatItemOnMeetingUIParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// HideRecordItemOnMeetingUIParams

// optional bool bHide = 1;
inline bool HideRecordItemOnMeetingUIParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideRecordItemOnMeetingUIParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideRecordItemOnMeetingUIParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.bHide)
  return _internal_bhide();
}
inline void HideRecordItemOnMeetingUIParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.bHide)
}
inline bool HideRecordItemOnMeetingUIParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideRecordItemOnMeetingUIParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// HideUpgradeFreeMeetingButtonParams

// optional bool bHide = 1;
inline bool HideUpgradeFreeMeetingButtonParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideUpgradeFreeMeetingButtonParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideUpgradeFreeMeetingButtonParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.bHide)
  return _internal_bhide();
}
inline void HideUpgradeFreeMeetingButtonParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.bHide)
}
inline bool HideUpgradeFreeMeetingButtonParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideUpgradeFreeMeetingButtonParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// SetShowInviteDlgTabPageParams

// optional int32 tabPage = 1;
inline bool SetShowInviteDlgTabPageParams::has_tabpage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetShowInviteDlgTabPageParams::clear_tabpage() {
  _impl_.tabpage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetShowInviteDlgTabPageParams::tabpage() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetShowInviteDlgTabPageParams.tabPage)
  return _internal_tabpage();
}
inline void SetShowInviteDlgTabPageParams::set_tabpage(::int32_t value) {
  _internal_set_tabpage(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetShowInviteDlgTabPageParams.tabPage)
}
inline ::int32_t SetShowInviteDlgTabPageParams::_internal_tabpage() const {
  return _impl_.tabpage_;
}
inline void SetShowInviteDlgTabPageParams::_internal_set_tabpage(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tabpage_ = value;
}

// optional bool bShow = 2;
inline bool SetShowInviteDlgTabPageParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetShowInviteDlgTabPageParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool SetShowInviteDlgTabPageParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetShowInviteDlgTabPageParams.bShow)
  return _internal_bshow();
}
inline void SetShowInviteDlgTabPageParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetShowInviteDlgTabPageParams.bShow)
}
inline bool SetShowInviteDlgTabPageParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetShowInviteDlgTabPageParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// SetShowH323SubTabPageParams

// optional int32 tabPage = 1;
inline bool SetShowH323SubTabPageParams::has_tabpage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetShowH323SubTabPageParams::clear_tabpage() {
  _impl_.tabpage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetShowH323SubTabPageParams::tabpage() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetShowH323SubTabPageParams.tabPage)
  return _internal_tabpage();
}
inline void SetShowH323SubTabPageParams::set_tabpage(::int32_t value) {
  _internal_set_tabpage(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetShowH323SubTabPageParams.tabPage)
}
inline ::int32_t SetShowH323SubTabPageParams::_internal_tabpage() const {
  return _impl_.tabpage_;
}
inline void SetShowH323SubTabPageParams::_internal_set_tabpage(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tabpage_ = value;
}

// optional bool bShow = 2;
inline bool SetShowH323SubTabPageParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetShowH323SubTabPageParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool SetShowH323SubTabPageParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetShowH323SubTabPageParams.bShow)
  return _internal_bshow();
}
inline void SetShowH323SubTabPageParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetShowH323SubTabPageParams.bShow)
}
inline bool SetShowH323SubTabPageParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetShowH323SubTabPageParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// HideSwitchCameraButtonParams

// optional bool bHide = 1;
inline bool HideSwitchCameraButtonParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideSwitchCameraButtonParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideSwitchCameraButtonParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideSwitchCameraButtonParams.bHide)
  return _internal_bhide();
}
inline void HideSwitchCameraButtonParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideSwitchCameraButtonParams.bHide)
}
inline bool HideSwitchCameraButtonParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideSwitchCameraButtonParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// HideCopyUrlOnInviteWindowParams

// optional bool bHide = 1;
inline bool HideCopyUrlOnInviteWindowParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideCopyUrlOnInviteWindowParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideCopyUrlOnInviteWindowParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.bHide)
  return _internal_bhide();
}
inline void HideCopyUrlOnInviteWindowParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.bHide)
}
inline bool HideCopyUrlOnInviteWindowParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideCopyUrlOnInviteWindowParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// HideCopyInvitationOnInviteWindowParams

// optional bool bHide = 1;
inline bool HideCopyInvitationOnInviteWindowParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideCopyInvitationOnInviteWindowParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideCopyInvitationOnInviteWindowParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.bHide)
  return _internal_bhide();
}
inline void HideCopyInvitationOnInviteWindowParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.bHide)
}
inline bool HideCopyInvitationOnInviteWindowParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideCopyInvitationOnInviteWindowParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// HideKeypadButtonOnMeetingWindowParams

// optional bool bHide = 1;
inline bool HideKeypadButtonOnMeetingWindowParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideKeypadButtonOnMeetingWindowParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideKeypadButtonOnMeetingWindowParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.bHide)
  return _internal_bhide();
}
inline void HideKeypadButtonOnMeetingWindowParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.bHide)
}
inline bool HideKeypadButtonOnMeetingWindowParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideKeypadButtonOnMeetingWindowParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// HideRemoteControlOnMeetingUIParams

// optional bool bHide = 1;
inline bool HideRemoteControlOnMeetingUIParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideRemoteControlOnMeetingUIParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideRemoteControlOnMeetingUIParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.bHide)
  return _internal_bhide();
}
inline void HideRemoteControlOnMeetingUIParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.bHide)
}
inline bool HideRemoteControlOnMeetingUIParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideRemoteControlOnMeetingUIParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// HideQAOnMeetingUIParams

// optional bool bHide = 1;
inline bool HideQAOnMeetingUIParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideQAOnMeetingUIParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideQAOnMeetingUIParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideQAOnMeetingUIParams.bHide)
  return _internal_bhide();
}
inline void HideQAOnMeetingUIParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideQAOnMeetingUIParams.bHide)
}
inline bool HideQAOnMeetingUIParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideQAOnMeetingUIParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// HidePollOnMeetingUIParams

// optional bool bHide = 1;
inline bool HidePollOnMeetingUIParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HidePollOnMeetingUIParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HidePollOnMeetingUIParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HidePollOnMeetingUIParams.bHide)
  return _internal_bhide();
}
inline void HidePollOnMeetingUIParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HidePollOnMeetingUIParams.bHide)
}
inline bool HidePollOnMeetingUIParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HidePollOnMeetingUIParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// EnableInputMeetingPasswordDlgParams

// optional bool bEnable = 1;
inline bool EnableInputMeetingPasswordDlgParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableInputMeetingPasswordDlgParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableInputMeetingPasswordDlgParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.bEnable)
  return _internal_benable();
}
inline void EnableInputMeetingPasswordDlgParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.bEnable)
}
inline bool EnableInputMeetingPasswordDlgParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableInputMeetingPasswordDlgParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableInputMeetingScreenNameDlgParams

// optional bool bEnable = 1;
inline bool EnableInputMeetingScreenNameDlgParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableInputMeetingScreenNameDlgParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableInputMeetingScreenNameDlgParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.bEnable)
  return _internal_benable();
}
inline void EnableInputMeetingScreenNameDlgParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.bEnable)
}
inline bool EnableInputMeetingScreenNameDlgParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableInputMeetingScreenNameDlgParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// RedirectWebinarNeedRegisterParams

// optional bool bRedirect = 1;
inline bool RedirectWebinarNeedRegisterParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectWebinarNeedRegisterParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectWebinarNeedRegisterParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectWebinarNeedRegisterParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.bRedirect)
}
inline bool RedirectWebinarNeedRegisterParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectWebinarNeedRegisterParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// RedirectEndOtherMeetingParams

// optional bool bRedirect = 1;
inline bool RedirectEndOtherMeetingParams::has_bredirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RedirectEndOtherMeetingParams::clear_bredirect() {
  _impl_.bredirect_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RedirectEndOtherMeetingParams::bredirect() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RedirectEndOtherMeetingParams.bRedirect)
  return _internal_bredirect();
}
inline void RedirectEndOtherMeetingParams::set_bredirect(bool value) {
  _internal_set_bredirect(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RedirectEndOtherMeetingParams.bRedirect)
}
inline bool RedirectEndOtherMeetingParams::_internal_bredirect() const {
  return _impl_.bredirect_;
}
inline void RedirectEndOtherMeetingParams::_internal_set_bredirect(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bredirect_ = value;
}

// -------------------------------------------------------------------

// EnableForceAutoStartMyVideoWhenJoinMeetingParams

// optional bool bEnable = 1;
inline bool EnableForceAutoStartMyVideoWhenJoinMeetingParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableForceAutoStartMyVideoWhenJoinMeetingParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableForceAutoStartMyVideoWhenJoinMeetingParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.bEnable)
  return _internal_benable();
}
inline void EnableForceAutoStartMyVideoWhenJoinMeetingParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.bEnable)
}
inline bool EnableForceAutoStartMyVideoWhenJoinMeetingParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableForceAutoStartMyVideoWhenJoinMeetingParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableForceAutoStopMyVideoWhenJoinMeetingParams

// optional bool bEnable = 1;
inline bool EnableForceAutoStopMyVideoWhenJoinMeetingParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableForceAutoStopMyVideoWhenJoinMeetingParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableForceAutoStopMyVideoWhenJoinMeetingParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.bEnable)
  return _internal_benable();
}
inline void EnableForceAutoStopMyVideoWhenJoinMeetingParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.bEnable)
}
inline bool EnableForceAutoStopMyVideoWhenJoinMeetingParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableForceAutoStopMyVideoWhenJoinMeetingParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams

// optional bool bDisable = 1;
inline bool DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.bDisable)
  return _internal_bdisable();
}
inline void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.bDisable)
}
inline bool DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// DisableShowJoinMeetingWndParams

// optional bool bDisable = 1;
inline bool DisableShowJoinMeetingWndParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableShowJoinMeetingWndParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableShowJoinMeetingWndParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableShowJoinMeetingWndParams.bDisable)
  return _internal_bdisable();
}
inline void DisableShowJoinMeetingWndParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableShowJoinMeetingWndParams.bDisable)
}
inline bool DisableShowJoinMeetingWndParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableShowJoinMeetingWndParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// DisableToolbarInviteButtonClickOriginActionParams

// optional bool bDisable = 1;
inline bool DisableToolbarInviteButtonClickOriginActionParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableToolbarInviteButtonClickOriginActionParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableToolbarInviteButtonClickOriginActionParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.bDisable)
  return _internal_bdisable();
}
inline void DisableToolbarInviteButtonClickOriginActionParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.bDisable)
}
inline bool DisableToolbarInviteButtonClickOriginActionParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableToolbarInviteButtonClickOriginActionParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// SetShowVideoOptimizeChkboxParams

// optional bool bShow = 1;
inline bool SetShowVideoOptimizeChkboxParams::has_bshow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetShowVideoOptimizeChkboxParams::clear_bshow() {
  _impl_.bshow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetShowVideoOptimizeChkboxParams::bshow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.bShow)
  return _internal_bshow();
}
inline void SetShowVideoOptimizeChkboxParams::set_bshow(bool value) {
  _internal_set_bshow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.bShow)
}
inline bool SetShowVideoOptimizeChkboxParams::_internal_bshow() const {
  return _impl_.bshow_;
}
inline void SetShowVideoOptimizeChkboxParams::_internal_set_bshow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bshow_ = value;
}

// -------------------------------------------------------------------

// InputMeetingPasswordAndScreenNameParams

// optional string psw = 1;
inline bool InputMeetingPasswordAndScreenNameParams::has_psw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InputMeetingPasswordAndScreenNameParams::clear_psw() {
  _impl_.psw_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputMeetingPasswordAndScreenNameParams::psw() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.psw)
  return _internal_psw();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputMeetingPasswordAndScreenNameParams::set_psw(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.psw_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.psw)
}
inline std::string* InputMeetingPasswordAndScreenNameParams::mutable_psw() {
  std::string* _s = _internal_mutable_psw();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.psw)
  return _s;
}
inline const std::string& InputMeetingPasswordAndScreenNameParams::_internal_psw() const {
  return _impl_.psw_.Get();
}
inline void InputMeetingPasswordAndScreenNameParams::_internal_set_psw(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.psw_.Set(value, GetArenaForAllocation());
}
inline std::string* InputMeetingPasswordAndScreenNameParams::_internal_mutable_psw() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.psw_.Mutable( GetArenaForAllocation());
}
inline std::string* InputMeetingPasswordAndScreenNameParams::release_psw() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.psw)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.psw_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.psw_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InputMeetingPasswordAndScreenNameParams::set_allocated_psw(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.psw_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.psw_.IsDefault()) {
          _impl_.psw_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.psw)
}

// optional string screenName = 2;
inline bool InputMeetingPasswordAndScreenNameParams::has_screenname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InputMeetingPasswordAndScreenNameParams::clear_screenname() {
  _impl_.screenname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InputMeetingPasswordAndScreenNameParams::screenname() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.screenName)
  return _internal_screenname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputMeetingPasswordAndScreenNameParams::set_screenname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.screenname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.screenName)
}
inline std::string* InputMeetingPasswordAndScreenNameParams::mutable_screenname() {
  std::string* _s = _internal_mutable_screenname();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.screenName)
  return _s;
}
inline const std::string& InputMeetingPasswordAndScreenNameParams::_internal_screenname() const {
  return _impl_.screenname_.Get();
}
inline void InputMeetingPasswordAndScreenNameParams::_internal_set_screenname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.screenname_.Set(value, GetArenaForAllocation());
}
inline std::string* InputMeetingPasswordAndScreenNameParams::_internal_mutable_screenname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.screenname_.Mutable( GetArenaForAllocation());
}
inline std::string* InputMeetingPasswordAndScreenNameParams::release_screenname() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.screenName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.screenname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InputMeetingPasswordAndScreenNameParams::set_allocated_screenname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.screenname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.screenname_.IsDefault()) {
          _impl_.screenname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.screenName)
}

// -------------------------------------------------------------------

// InputMeetingIDAndScreenNameParams

// optional string meetingID = 1;
inline bool InputMeetingIDAndScreenNameParams::has_meetingid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InputMeetingIDAndScreenNameParams::clear_meetingid() {
  _impl_.meetingid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputMeetingIDAndScreenNameParams::meetingid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.meetingID)
  return _internal_meetingid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputMeetingIDAndScreenNameParams::set_meetingid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.meetingid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.meetingID)
}
inline std::string* InputMeetingIDAndScreenNameParams::mutable_meetingid() {
  std::string* _s = _internal_mutable_meetingid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.meetingID)
  return _s;
}
inline const std::string& InputMeetingIDAndScreenNameParams::_internal_meetingid() const {
  return _impl_.meetingid_.Get();
}
inline void InputMeetingIDAndScreenNameParams::_internal_set_meetingid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.meetingid_.Set(value, GetArenaForAllocation());
}
inline std::string* InputMeetingIDAndScreenNameParams::_internal_mutable_meetingid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.meetingid_.Mutable( GetArenaForAllocation());
}
inline std::string* InputMeetingIDAndScreenNameParams::release_meetingid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.meetingID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.meetingid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meetingid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InputMeetingIDAndScreenNameParams::set_allocated_meetingid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.meetingid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.meetingid_.IsDefault()) {
          _impl_.meetingid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.meetingID)
}

// optional string screenName = 2;
inline bool InputMeetingIDAndScreenNameParams::has_screenname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InputMeetingIDAndScreenNameParams::clear_screenname() {
  _impl_.screenname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InputMeetingIDAndScreenNameParams::screenname() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.screenName)
  return _internal_screenname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputMeetingIDAndScreenNameParams::set_screenname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.screenname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.screenName)
}
inline std::string* InputMeetingIDAndScreenNameParams::mutable_screenname() {
  std::string* _s = _internal_mutable_screenname();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.screenName)
  return _s;
}
inline const std::string& InputMeetingIDAndScreenNameParams::_internal_screenname() const {
  return _impl_.screenname_.Get();
}
inline void InputMeetingIDAndScreenNameParams::_internal_set_screenname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.screenname_.Set(value, GetArenaForAllocation());
}
inline std::string* InputMeetingIDAndScreenNameParams::_internal_mutable_screenname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.screenname_.Mutable( GetArenaForAllocation());
}
inline std::string* InputMeetingIDAndScreenNameParams::release_screenname() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.screenName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.screenname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InputMeetingIDAndScreenNameParams::set_allocated_screenname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.screenname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.screenname_.IsDefault()) {
          _impl_.screenname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.screenName)
}

// -------------------------------------------------------------------

// InputMeetingScreenNameParams

// optional string screenName = 1;
inline bool InputMeetingScreenNameParams::has_screenname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InputMeetingScreenNameParams::clear_screenname() {
  _impl_.screenname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputMeetingScreenNameParams::screenname() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InputMeetingScreenNameParams.screenName)
  return _internal_screenname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputMeetingScreenNameParams::set_screenname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.screenname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InputMeetingScreenNameParams.screenName)
}
inline std::string* InputMeetingScreenNameParams::mutable_screenname() {
  std::string* _s = _internal_mutable_screenname();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InputMeetingScreenNameParams.screenName)
  return _s;
}
inline const std::string& InputMeetingScreenNameParams::_internal_screenname() const {
  return _impl_.screenname_.Get();
}
inline void InputMeetingScreenNameParams::_internal_set_screenname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.screenname_.Set(value, GetArenaForAllocation());
}
inline std::string* InputMeetingScreenNameParams::_internal_mutable_screenname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.screenname_.Mutable( GetArenaForAllocation());
}
inline std::string* InputMeetingScreenNameParams::release_screenname() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InputMeetingScreenNameParams.screenName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.screenname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InputMeetingScreenNameParams::set_allocated_screenname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.screenname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.screenname_.IsDefault()) {
          _impl_.screenname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InputMeetingScreenNameParams.screenName)
}

// -------------------------------------------------------------------

// InputWebinarRegisterEmailAndScreenNameParams

// optional string email = 1;
inline bool InputWebinarRegisterEmailAndScreenNameParams::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InputWebinarRegisterEmailAndScreenNameParams::clear_email() {
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputWebinarRegisterEmailAndScreenNameParams::email() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputWebinarRegisterEmailAndScreenNameParams::set_email(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.email)
}
inline std::string* InputWebinarRegisterEmailAndScreenNameParams::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.email)
  return _s;
}
inline const std::string& InputWebinarRegisterEmailAndScreenNameParams::_internal_email() const {
  return _impl_.email_.Get();
}
inline void InputWebinarRegisterEmailAndScreenNameParams::_internal_set_email(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* InputWebinarRegisterEmailAndScreenNameParams::_internal_mutable_email() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* InputWebinarRegisterEmailAndScreenNameParams::release_email() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.email)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.email_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InputWebinarRegisterEmailAndScreenNameParams::set_allocated_email(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.email)
}

// optional string screenName = 2;
inline bool InputWebinarRegisterEmailAndScreenNameParams::has_screenname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InputWebinarRegisterEmailAndScreenNameParams::clear_screenname() {
  _impl_.screenname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InputWebinarRegisterEmailAndScreenNameParams::screenname() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.screenName)
  return _internal_screenname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputWebinarRegisterEmailAndScreenNameParams::set_screenname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.screenname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.screenName)
}
inline std::string* InputWebinarRegisterEmailAndScreenNameParams::mutable_screenname() {
  std::string* _s = _internal_mutable_screenname();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.screenName)
  return _s;
}
inline const std::string& InputWebinarRegisterEmailAndScreenNameParams::_internal_screenname() const {
  return _impl_.screenname_.Get();
}
inline void InputWebinarRegisterEmailAndScreenNameParams::_internal_set_screenname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.screenname_.Set(value, GetArenaForAllocation());
}
inline std::string* InputWebinarRegisterEmailAndScreenNameParams::_internal_mutable_screenname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.screenname_.Mutable( GetArenaForAllocation());
}
inline std::string* InputWebinarRegisterEmailAndScreenNameParams::release_screenname() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.screenName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.screenname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InputWebinarRegisterEmailAndScreenNameParams::set_allocated_screenname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.screenname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.screenname_.IsDefault()) {
          _impl_.screenname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.screenName)
}

// -------------------------------------------------------------------

// CallOutH323Params

// optional string deviceName = 1;
inline bool CallOutH323Params::has_devicename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallOutH323Params::clear_devicename() {
  _impl_.devicename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallOutH323Params::devicename() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.CallOutH323Params.deviceName)
  return _internal_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallOutH323Params::set_devicename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.CallOutH323Params.deviceName)
}
inline std::string* CallOutH323Params::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.CallOutH323Params.deviceName)
  return _s;
}
inline const std::string& CallOutH323Params::_internal_devicename() const {
  return _impl_.devicename_.Get();
}
inline void CallOutH323Params::_internal_set_devicename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* CallOutH323Params::_internal_mutable_devicename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.devicename_.Mutable( GetArenaForAllocation());
}
inline std::string* CallOutH323Params::release_devicename() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.CallOutH323Params.deviceName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.devicename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallOutH323Params::set_allocated_devicename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.devicename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devicename_.IsDefault()) {
          _impl_.devicename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.CallOutH323Params.deviceName)
}

// optional string deviceIP = 2;
inline bool CallOutH323Params::has_deviceip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallOutH323Params::clear_deviceip() {
  _impl_.deviceip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CallOutH323Params::deviceip() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.CallOutH323Params.deviceIP)
  return _internal_deviceip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallOutH323Params::set_deviceip(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.deviceip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.CallOutH323Params.deviceIP)
}
inline std::string* CallOutH323Params::mutable_deviceip() {
  std::string* _s = _internal_mutable_deviceip();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.CallOutH323Params.deviceIP)
  return _s;
}
inline const std::string& CallOutH323Params::_internal_deviceip() const {
  return _impl_.deviceip_.Get();
}
inline void CallOutH323Params::_internal_set_deviceip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.deviceip_.Set(value, GetArenaForAllocation());
}
inline std::string* CallOutH323Params::_internal_mutable_deviceip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.deviceip_.Mutable( GetArenaForAllocation());
}
inline std::string* CallOutH323Params::release_deviceip() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.CallOutH323Params.deviceIP)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.deviceip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallOutH323Params::set_allocated_deviceip(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.deviceip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceip_.IsDefault()) {
          _impl_.deviceip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.CallOutH323Params.deviceIP)
}

// optional string deviceE164num = 3;
inline bool CallOutH323Params::has_devicee164num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CallOutH323Params::clear_devicee164num() {
  _impl_.devicee164num_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CallOutH323Params::devicee164num() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.CallOutH323Params.deviceE164num)
  return _internal_devicee164num();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallOutH323Params::set_devicee164num(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.devicee164num_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.CallOutH323Params.deviceE164num)
}
inline std::string* CallOutH323Params::mutable_devicee164num() {
  std::string* _s = _internal_mutable_devicee164num();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.CallOutH323Params.deviceE164num)
  return _s;
}
inline const std::string& CallOutH323Params::_internal_devicee164num() const {
  return _impl_.devicee164num_.Get();
}
inline void CallOutH323Params::_internal_set_devicee164num(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.devicee164num_.Set(value, GetArenaForAllocation());
}
inline std::string* CallOutH323Params::_internal_mutable_devicee164num() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.devicee164num_.Mutable( GetArenaForAllocation());
}
inline std::string* CallOutH323Params::release_devicee164num() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.CallOutH323Params.deviceE164num)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.devicee164num_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicee164num_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallOutH323Params::set_allocated_devicee164num(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.devicee164num_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devicee164num_.IsDefault()) {
          _impl_.devicee164num_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.CallOutH323Params.deviceE164num)
}

// optional int32 h323DeviceType = 4;
inline bool CallOutH323Params::has_h323devicetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CallOutH323Params::clear_h323devicetype() {
  _impl_.h323devicetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CallOutH323Params::h323devicetype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.CallOutH323Params.h323DeviceType)
  return _internal_h323devicetype();
}
inline void CallOutH323Params::set_h323devicetype(::int32_t value) {
  _internal_set_h323devicetype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.CallOutH323Params.h323DeviceType)
}
inline ::int32_t CallOutH323Params::_internal_h323devicetype() const {
  return _impl_.h323devicetype_;
}
inline void CallOutH323Params::_internal_set_h323devicetype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.h323devicetype_ = value;
}

// -------------------------------------------------------------------

// GetUserInfoByUserIDParams

// optional uint32 userID = 1;
inline bool GetUserInfoByUserIDParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetUserInfoByUserIDParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t GetUserInfoByUserIDParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.GetUserInfoByUserIDParams.userID)
  return _internal_userid();
}
inline void GetUserInfoByUserIDParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.GetUserInfoByUserIDParams.userID)
}
inline ::uint32_t GetUserInfoByUserIDParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void GetUserInfoByUserIDParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// CanStartRecordingParams

// optional bool bCloudRecording = 1;
inline bool CanStartRecordingParams::has_bcloudrecording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CanStartRecordingParams::clear_bcloudrecording() {
  _impl_.bcloudrecording_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CanStartRecordingParams::bcloudrecording() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.CanStartRecordingParams.bCloudRecording)
  return _internal_bcloudrecording();
}
inline void CanStartRecordingParams::set_bcloudrecording(bool value) {
  _internal_set_bcloudrecording(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.CanStartRecordingParams.bCloudRecording)
}
inline bool CanStartRecordingParams::_internal_bcloudrecording() const {
  return _impl_.bcloudrecording_;
}
inline void CanStartRecordingParams::_internal_set_bcloudrecording(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bcloudrecording_ = value;
}

// optional uint32 userID = 2;
inline bool CanStartRecordingParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CanStartRecordingParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CanStartRecordingParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.CanStartRecordingParams.userID)
  return _internal_userid();
}
inline void CanStartRecordingParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.CanStartRecordingParams.userID)
}
inline ::uint32_t CanStartRecordingParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void CanStartRecordingParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// IsSupportLocalRecordingParams

// optional uint32 userID = 1;
inline bool IsSupportLocalRecordingParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IsSupportLocalRecordingParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t IsSupportLocalRecordingParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.IsSupportLocalRecordingParams.userID)
  return _internal_userid();
}
inline void IsSupportLocalRecordingParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.IsSupportLocalRecordingParams.userID)
}
inline ::uint32_t IsSupportLocalRecordingParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void IsSupportLocalRecordingParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// AllowLocalRecordingParams

// optional int32 userID = 1;
inline bool AllowLocalRecordingParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AllowLocalRecordingParams::clear_userid() {
  _impl_.userid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t AllowLocalRecordingParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AllowLocalRecordingParams.userID)
  return _internal_userid();
}
inline void AllowLocalRecordingParams::set_userid(::int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AllowLocalRecordingParams.userID)
}
inline ::int32_t AllowLocalRecordingParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void AllowLocalRecordingParams::_internal_set_userid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// DisAllowLocalRecordingParams

// optional uint32 userID = 1;
inline bool DisAllowLocalRecordingParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisAllowLocalRecordingParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t DisAllowLocalRecordingParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisAllowLocalRecordingParams.userID)
  return _internal_userid();
}
inline void DisAllowLocalRecordingParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisAllowLocalRecordingParams.userID)
}
inline ::uint32_t DisAllowLocalRecordingParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void DisAllowLocalRecordingParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// StartAppShareParams

// optional string hShareApp = 1;
inline bool StartAppShareParams::has_hshareapp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartAppShareParams::clear_hshareapp() {
  _impl_.hshareapp_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartAppShareParams::hshareapp() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartAppShareParams.hShareApp)
  return _internal_hshareapp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartAppShareParams::set_hshareapp(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hshareapp_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartAppShareParams.hShareApp)
}
inline std::string* StartAppShareParams::mutable_hshareapp() {
  std::string* _s = _internal_mutable_hshareapp();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartAppShareParams.hShareApp)
  return _s;
}
inline const std::string& StartAppShareParams::_internal_hshareapp() const {
  return _impl_.hshareapp_.Get();
}
inline void StartAppShareParams::_internal_set_hshareapp(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.hshareapp_.Set(value, GetArenaForAllocation());
}
inline std::string* StartAppShareParams::_internal_mutable_hshareapp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hshareapp_.Mutable( GetArenaForAllocation());
}
inline std::string* StartAppShareParams::release_hshareapp() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartAppShareParams.hShareApp)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hshareapp_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hshareapp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartAppShareParams::set_allocated_hshareapp(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hshareapp_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hshareapp_.IsDefault()) {
          _impl_.hshareapp_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartAppShareParams.hShareApp)
}

// -------------------------------------------------------------------

// StartMonitorShareParams

// optional string monitorID = 1;
inline bool StartMonitorShareParams::has_monitorid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartMonitorShareParams::clear_monitorid() {
  _impl_.monitorid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartMonitorShareParams::monitorid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartMonitorShareParams.monitorID)
  return _internal_monitorid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartMonitorShareParams::set_monitorid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.monitorid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartMonitorShareParams.monitorID)
}
inline std::string* StartMonitorShareParams::mutable_monitorid() {
  std::string* _s = _internal_mutable_monitorid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartMonitorShareParams.monitorID)
  return _s;
}
inline const std::string& StartMonitorShareParams::_internal_monitorid() const {
  return _impl_.monitorid_.Get();
}
inline void StartMonitorShareParams::_internal_set_monitorid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.monitorid_.Set(value, GetArenaForAllocation());
}
inline std::string* StartMonitorShareParams::_internal_mutable_monitorid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.monitorid_.Mutable( GetArenaForAllocation());
}
inline std::string* StartMonitorShareParams::release_monitorid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartMonitorShareParams.monitorID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.monitorid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartMonitorShareParams::set_allocated_monitorid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.monitorid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.monitorid_.IsDefault()) {
          _impl_.monitorid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartMonitorShareParams.monitorID)
}

// -------------------------------------------------------------------

// MuteVideoParams

// optional uint32 userID = 1;
inline bool MuteVideoParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MuteVideoParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MuteVideoParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.MuteVideoParams.userID)
  return _internal_userid();
}
inline void MuteVideoParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.MuteVideoParams.userID)
}
inline ::uint32_t MuteVideoParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void MuteVideoParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// UnMuteVideoParams

// optional uint32 userID = 1;
inline bool UnMuteVideoParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UnMuteVideoParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t UnMuteVideoParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.UnMuteVideoParams.userID)
  return _internal_userid();
}
inline void UnMuteVideoParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.UnMuteVideoParams.userID)
}
inline ::uint32_t UnMuteVideoParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void UnMuteVideoParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// PinVideoParams

// optional bool bPin = 1;
inline bool PinVideoParams::has_bpin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PinVideoParams::clear_bpin() {
  _impl_.bpin_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PinVideoParams::bpin() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.PinVideoParams.bPin)
  return _internal_bpin();
}
inline void PinVideoParams::set_bpin(bool value) {
  _internal_set_bpin(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.PinVideoParams.bPin)
}
inline bool PinVideoParams::_internal_bpin() const {
  return _impl_.bpin_;
}
inline void PinVideoParams::_internal_set_bpin(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bpin_ = value;
}

// optional bool bFirstView = 2;
inline bool PinVideoParams::has_bfirstview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PinVideoParams::clear_bfirstview() {
  _impl_.bfirstview_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PinVideoParams::bfirstview() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.PinVideoParams.bFirstView)
  return _internal_bfirstview();
}
inline void PinVideoParams::set_bfirstview(bool value) {
  _internal_set_bfirstview(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.PinVideoParams.bFirstView)
}
inline bool PinVideoParams::_internal_bfirstview() const {
  return _impl_.bfirstview_;
}
inline void PinVideoParams::_internal_set_bfirstview(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bfirstview_ = value;
}

// optional uint32 userID = 3;
inline bool PinVideoParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PinVideoParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PinVideoParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.PinVideoParams.userID)
  return _internal_userid();
}
inline void PinVideoParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.PinVideoParams.userID)
}
inline ::uint32_t PinVideoParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void PinVideoParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// SpotlightVideoParams

// optional bool bSpotlight = 1;
inline bool SpotlightVideoParams::has_bspotlight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SpotlightVideoParams::clear_bspotlight() {
  _impl_.bspotlight_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SpotlightVideoParams::bspotlight() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SpotlightVideoParams.bSpotlight)
  return _internal_bspotlight();
}
inline void SpotlightVideoParams::set_bspotlight(bool value) {
  _internal_set_bspotlight(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SpotlightVideoParams.bSpotlight)
}
inline bool SpotlightVideoParams::_internal_bspotlight() const {
  return _impl_.bspotlight_;
}
inline void SpotlightVideoParams::_internal_set_bspotlight(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bspotlight_ = value;
}

// optional uint32 userID = 2;
inline bool SpotlightVideoParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SpotlightVideoParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SpotlightVideoParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SpotlightVideoParams.userID)
  return _internal_userid();
}
inline void SpotlightVideoParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SpotlightVideoParams.userID)
}
inline ::uint32_t SpotlightVideoParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void SpotlightVideoParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// HideOrShowNoVideoUserOnVideoWallParams

// optional bool bHide = 1;
inline bool HideOrShowNoVideoUserOnVideoWallParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideOrShowNoVideoUserOnVideoWallParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideOrShowNoVideoUserOnVideoWallParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.bHide)
  return _internal_bhide();
}
inline void HideOrShowNoVideoUserOnVideoWallParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.bHide)
}
inline bool HideOrShowNoVideoUserOnVideoWallParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideOrShowNoVideoUserOnVideoWallParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// CreateRendererParams

// optional uint64 recvHandle = 1;
inline bool CreateRendererParams::has_recvhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CreateRendererParams::clear_recvhandle() {
  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t CreateRendererParams::recvhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.CreateRendererParams.recvHandle)
  return _internal_recvhandle();
}
inline void CreateRendererParams::set_recvhandle(::uint64_t value) {
  _internal_set_recvhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.CreateRendererParams.recvHandle)
}
inline ::uint64_t CreateRendererParams::_internal_recvhandle() const {
  return _impl_.recvhandle_;
}
inline void CreateRendererParams::_internal_set_recvhandle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recvhandle_ = value;
}

// -------------------------------------------------------------------

// DestroyRendererParams

// optional uint64 recvHandle = 1;
inline bool DestroyRendererParams::has_recvhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DestroyRendererParams::clear_recvhandle() {
  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t DestroyRendererParams::recvhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DestroyRendererParams.recvHandle)
  return _internal_recvhandle();
}
inline void DestroyRendererParams::set_recvhandle(::uint64_t value) {
  _internal_set_recvhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DestroyRendererParams.recvHandle)
}
inline ::uint64_t DestroyRendererParams::_internal_recvhandle() const {
  return _impl_.recvhandle_;
}
inline void DestroyRendererParams::_internal_set_recvhandle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recvhandle_ = value;
}

// -------------------------------------------------------------------

// SubscribeParams

// optional uint32 userID = 1;
inline bool SubscribeParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SubscribeParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SubscribeParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SubscribeParams.userID)
  return _internal_userid();
}
inline void SubscribeParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SubscribeParams.userID)
}
inline ::uint32_t SubscribeParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void SubscribeParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// optional int32 rawDataType = 2;
inline bool SubscribeParams::has_rawdatatype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SubscribeParams::clear_rawdatatype() {
  _impl_.rawdatatype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SubscribeParams::rawdatatype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SubscribeParams.rawDataType)
  return _internal_rawdatatype();
}
inline void SubscribeParams::set_rawdatatype(::int32_t value) {
  _internal_set_rawdatatype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SubscribeParams.rawDataType)
}
inline ::int32_t SubscribeParams::_internal_rawdatatype() const {
  return _impl_.rawdatatype_;
}
inline void SubscribeParams::_internal_set_rawdatatype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rawdatatype_ = value;
}

// optional uint64 recvHandle = 3;
inline bool SubscribeParams::has_recvhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SubscribeParams::clear_recvhandle() {
  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t SubscribeParams::recvhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SubscribeParams.recvHandle)
  return _internal_recvhandle();
}
inline void SubscribeParams::set_recvhandle(::uint64_t value) {
  _internal_set_recvhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SubscribeParams.recvHandle)
}
inline ::uint64_t SubscribeParams::_internal_recvhandle() const {
  return _impl_.recvhandle_;
}
inline void SubscribeParams::_internal_set_recvhandle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.recvhandle_ = value;
}

// -------------------------------------------------------------------

// UnSubscribeParams

// optional uint64 recvHandle = 1;
inline bool UnSubscribeParams::has_recvhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UnSubscribeParams::clear_recvhandle() {
  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t UnSubscribeParams::recvhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.UnSubscribeParams.recvHandle)
  return _internal_recvhandle();
}
inline void UnSubscribeParams::set_recvhandle(::uint64_t value) {
  _internal_set_recvhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.UnSubscribeParams.recvHandle)
}
inline ::uint64_t UnSubscribeParams::_internal_recvhandle() const {
  return _impl_.recvhandle_;
}
inline void UnSubscribeParams::_internal_set_recvhandle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recvhandle_ = value;
}

// -------------------------------------------------------------------

// SetRawDataResolutionParams

// optional int32 resolution = 1;
inline bool SetRawDataResolutionParams::has_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetRawDataResolutionParams::clear_resolution() {
  _impl_.resolution_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SetRawDataResolutionParams::resolution() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetRawDataResolutionParams.resolution)
  return _internal_resolution();
}
inline void SetRawDataResolutionParams::set_resolution(::int32_t value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetRawDataResolutionParams.resolution)
}
inline ::int32_t SetRawDataResolutionParams::_internal_resolution() const {
  return _impl_.resolution_;
}
inline void SetRawDataResolutionParams::_internal_set_resolution(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.resolution_ = value;
}

// optional uint64 recvHandle = 2;
inline bool SetRawDataResolutionParams::has_recvhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetRawDataResolutionParams::clear_recvhandle() {
  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t SetRawDataResolutionParams::recvhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetRawDataResolutionParams.recvHandle)
  return _internal_recvhandle();
}
inline void SetRawDataResolutionParams::set_recvhandle(::uint64_t value) {
  _internal_set_recvhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetRawDataResolutionParams.recvHandle)
}
inline ::uint64_t SetRawDataResolutionParams::_internal_recvhandle() const {
  return _impl_.recvhandle_;
}
inline void SetRawDataResolutionParams::_internal_set_recvhandle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recvhandle_ = value;
}

// -------------------------------------------------------------------

// GetResolutionParams

// optional uint64 recvHandle = 1;
inline bool GetResolutionParams::has_recvhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetResolutionParams::clear_recvhandle() {
  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t GetResolutionParams::recvhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.GetResolutionParams.recvHandle)
  return _internal_recvhandle();
}
inline void GetResolutionParams::set_recvhandle(::uint64_t value) {
  _internal_set_recvhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.GetResolutionParams.recvHandle)
}
inline ::uint64_t GetResolutionParams::_internal_recvhandle() const {
  return _impl_.recvhandle_;
}
inline void GetResolutionParams::_internal_set_recvhandle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recvhandle_ = value;
}

// -------------------------------------------------------------------

// GetRawDataTypeParams

// optional uint64 recvHandle = 1;
inline bool GetRawDataTypeParams::has_recvhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetRawDataTypeParams::clear_recvhandle() {
  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t GetRawDataTypeParams::recvhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.GetRawDataTypeParams.recvHandle)
  return _internal_recvhandle();
}
inline void GetRawDataTypeParams::set_recvhandle(::uint64_t value) {
  _internal_set_recvhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.GetRawDataTypeParams.recvHandle)
}
inline ::uint64_t GetRawDataTypeParams::_internal_recvhandle() const {
  return _impl_.recvhandle_;
}
inline void GetRawDataTypeParams::_internal_set_recvhandle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recvhandle_ = value;
}

// -------------------------------------------------------------------

// GetUserIdParams

// optional uint64 recvHandle = 1;
inline bool GetUserIdParams::has_recvhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetUserIdParams::clear_recvhandle() {
  _impl_.recvhandle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t GetUserIdParams::recvhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.GetUserIdParams.recvHandle)
  return _internal_recvhandle();
}
inline void GetUserIdParams::set_recvhandle(::uint64_t value) {
  _internal_set_recvhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.GetUserIdParams.recvHandle)
}
inline ::uint64_t GetUserIdParams::_internal_recvhandle() const {
  return _impl_.recvhandle_;
}
inline void GetUserIdParams::_internal_set_recvhandle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recvhandle_ = value;
}

// -------------------------------------------------------------------

// EnableZoomAuthRealNameMeetingUIShownParams

// optional bool bEnable = 1;
inline bool EnableZoomAuthRealNameMeetingUIShownParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableZoomAuthRealNameMeetingUIShownParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableZoomAuthRealNameMeetingUIShownParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.bEnable)
  return _internal_benable();
}
inline void EnableZoomAuthRealNameMeetingUIShownParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.bEnable)
}
inline bool EnableZoomAuthRealNameMeetingUIShownParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableZoomAuthRealNameMeetingUIShownParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// RetrieveParams

// optional string countryCode = 1;
inline bool RetrieveParams::has_countrycode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RetrieveParams::clear_countrycode() {
  _impl_.countrycode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RetrieveParams::countrycode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RetrieveParams.countryCode)
  return _internal_countrycode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RetrieveParams::set_countrycode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.countrycode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RetrieveParams.countryCode)
}
inline std::string* RetrieveParams::mutable_countrycode() {
  std::string* _s = _internal_mutable_countrycode();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.RetrieveParams.countryCode)
  return _s;
}
inline const std::string& RetrieveParams::_internal_countrycode() const {
  return _impl_.countrycode_.Get();
}
inline void RetrieveParams::_internal_set_countrycode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.countrycode_.Set(value, GetArenaForAllocation());
}
inline std::string* RetrieveParams::_internal_mutable_countrycode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.countrycode_.Mutable( GetArenaForAllocation());
}
inline std::string* RetrieveParams::release_countrycode() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.RetrieveParams.countryCode)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.countrycode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RetrieveParams::set_allocated_countrycode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.countrycode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.countrycode_.IsDefault()) {
          _impl_.countrycode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.RetrieveParams.countryCode)
}

// optional string phoneNum = 2;
inline bool RetrieveParams::has_phonenum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RetrieveParams::clear_phonenum() {
  _impl_.phonenum_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RetrieveParams::phonenum() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RetrieveParams.phoneNum)
  return _internal_phonenum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RetrieveParams::set_phonenum(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phonenum_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RetrieveParams.phoneNum)
}
inline std::string* RetrieveParams::mutable_phonenum() {
  std::string* _s = _internal_mutable_phonenum();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.RetrieveParams.phoneNum)
  return _s;
}
inline const std::string& RetrieveParams::_internal_phonenum() const {
  return _impl_.phonenum_.Get();
}
inline void RetrieveParams::_internal_set_phonenum(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.phonenum_.Set(value, GetArenaForAllocation());
}
inline std::string* RetrieveParams::_internal_mutable_phonenum() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.phonenum_.Mutable( GetArenaForAllocation());
}
inline std::string* RetrieveParams::release_phonenum() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.RetrieveParams.phoneNum)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.phonenum_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RetrieveParams::set_allocated_phonenum(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.phonenum_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonenum_.IsDefault()) {
          _impl_.phonenum_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.RetrieveParams.phoneNum)
}

// -------------------------------------------------------------------

// VerifyParams

// optional string countryCode = 1;
inline bool VerifyParams::has_countrycode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VerifyParams::clear_countrycode() {
  _impl_.countrycode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VerifyParams::countrycode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.VerifyParams.countryCode)
  return _internal_countrycode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyParams::set_countrycode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.countrycode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.VerifyParams.countryCode)
}
inline std::string* VerifyParams::mutable_countrycode() {
  std::string* _s = _internal_mutable_countrycode();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.VerifyParams.countryCode)
  return _s;
}
inline const std::string& VerifyParams::_internal_countrycode() const {
  return _impl_.countrycode_.Get();
}
inline void VerifyParams::_internal_set_countrycode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.countrycode_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyParams::_internal_mutable_countrycode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.countrycode_.Mutable( GetArenaForAllocation());
}
inline std::string* VerifyParams::release_countrycode() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.VerifyParams.countryCode)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.countrycode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VerifyParams::set_allocated_countrycode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.countrycode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.countrycode_.IsDefault()) {
          _impl_.countrycode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.VerifyParams.countryCode)
}

// optional string phoneNum = 2;
inline bool VerifyParams::has_phonenum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VerifyParams::clear_phonenum() {
  _impl_.phonenum_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VerifyParams::phonenum() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.VerifyParams.phoneNum)
  return _internal_phonenum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyParams::set_phonenum(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phonenum_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.VerifyParams.phoneNum)
}
inline std::string* VerifyParams::mutable_phonenum() {
  std::string* _s = _internal_mutable_phonenum();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.VerifyParams.phoneNum)
  return _s;
}
inline const std::string& VerifyParams::_internal_phonenum() const {
  return _impl_.phonenum_.Get();
}
inline void VerifyParams::_internal_set_phonenum(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.phonenum_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyParams::_internal_mutable_phonenum() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.phonenum_.Mutable( GetArenaForAllocation());
}
inline std::string* VerifyParams::release_phonenum() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.VerifyParams.phoneNum)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.phonenum_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VerifyParams::set_allocated_phonenum(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.phonenum_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonenum_.IsDefault()) {
          _impl_.phonenum_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.VerifyParams.phoneNum)
}

// optional string verificationCode = 3;
inline bool VerifyParams::has_verificationcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VerifyParams::clear_verificationcode() {
  _impl_.verificationcode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VerifyParams::verificationcode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.VerifyParams.verificationCode)
  return _internal_verificationcode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyParams::set_verificationcode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.verificationcode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.VerifyParams.verificationCode)
}
inline std::string* VerifyParams::mutable_verificationcode() {
  std::string* _s = _internal_mutable_verificationcode();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.VerifyParams.verificationCode)
  return _s;
}
inline const std::string& VerifyParams::_internal_verificationcode() const {
  return _impl_.verificationcode_.Get();
}
inline void VerifyParams::_internal_set_verificationcode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.verificationcode_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyParams::_internal_mutable_verificationcode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.verificationcode_.Mutable( GetArenaForAllocation());
}
inline std::string* VerifyParams::release_verificationcode() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.VerifyParams.verificationCode)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.verificationcode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verificationcode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VerifyParams::set_allocated_verificationcode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.verificationcode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.verificationcode_.IsDefault()) {
          _impl_.verificationcode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.VerifyParams.verificationCode)
}

// -------------------------------------------------------------------

// SetDefaultCellPhoneInfoParams

// optional string countryCode = 1;
inline bool SetDefaultCellPhoneInfoParams::has_countrycode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetDefaultCellPhoneInfoParams::clear_countrycode() {
  _impl_.countrycode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetDefaultCellPhoneInfoParams::countrycode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.countryCode)
  return _internal_countrycode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetDefaultCellPhoneInfoParams::set_countrycode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.countrycode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.countryCode)
}
inline std::string* SetDefaultCellPhoneInfoParams::mutable_countrycode() {
  std::string* _s = _internal_mutable_countrycode();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.countryCode)
  return _s;
}
inline const std::string& SetDefaultCellPhoneInfoParams::_internal_countrycode() const {
  return _impl_.countrycode_.Get();
}
inline void SetDefaultCellPhoneInfoParams::_internal_set_countrycode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.countrycode_.Set(value, GetArenaForAllocation());
}
inline std::string* SetDefaultCellPhoneInfoParams::_internal_mutable_countrycode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.countrycode_.Mutable( GetArenaForAllocation());
}
inline std::string* SetDefaultCellPhoneInfoParams::release_countrycode() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.countryCode)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.countrycode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetDefaultCellPhoneInfoParams::set_allocated_countrycode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.countrycode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.countrycode_.IsDefault()) {
          _impl_.countrycode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.countryCode)
}

// optional string phoneNum = 2;
inline bool SetDefaultCellPhoneInfoParams::has_phonenum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetDefaultCellPhoneInfoParams::clear_phonenum() {
  _impl_.phonenum_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetDefaultCellPhoneInfoParams::phonenum() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.phoneNum)
  return _internal_phonenum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetDefaultCellPhoneInfoParams::set_phonenum(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phonenum_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.phoneNum)
}
inline std::string* SetDefaultCellPhoneInfoParams::mutable_phonenum() {
  std::string* _s = _internal_mutable_phonenum();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.phoneNum)
  return _s;
}
inline const std::string& SetDefaultCellPhoneInfoParams::_internal_phonenum() const {
  return _impl_.phonenum_.Get();
}
inline void SetDefaultCellPhoneInfoParams::_internal_set_phonenum(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.phonenum_.Set(value, GetArenaForAllocation());
}
inline std::string* SetDefaultCellPhoneInfoParams::_internal_mutable_phonenum() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.phonenum_.Mutable( GetArenaForAllocation());
}
inline std::string* SetDefaultCellPhoneInfoParams::release_phonenum() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.phoneNum)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.phonenum_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetDefaultCellPhoneInfoParams::set_allocated_phonenum(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.phonenum_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonenum_.IsDefault()) {
          _impl_.phonenum_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.phoneNum)
}

// -------------------------------------------------------------------

// EnableAlwaysShowMeetingControlsParams

// optional bool bEnable = 1;
inline bool EnableAlwaysShowMeetingControlsParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAlwaysShowMeetingControlsParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAlwaysShowMeetingControlsParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.bEnable)
  return _internal_benable();
}
inline void EnableAlwaysShowMeetingControlsParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.bEnable)
}
inline bool EnableAlwaysShowMeetingControlsParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAlwaysShowMeetingControlsParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// SelectMicParams

// optional string deviceID = 1;
inline bool SelectMicParams::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SelectMicParams::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelectMicParams::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SelectMicParams.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectMicParams::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SelectMicParams.deviceID)
}
inline std::string* SelectMicParams::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SelectMicParams.deviceID)
  return _s;
}
inline const std::string& SelectMicParams::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void SelectMicParams::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectMicParams::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectMicParams::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SelectMicParams.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectMicParams::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SelectMicParams.deviceID)
}

// optional string deviceName = 2;
inline bool SelectMicParams::has_devicename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SelectMicParams::clear_devicename() {
  _impl_.devicename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SelectMicParams::devicename() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SelectMicParams.deviceName)
  return _internal_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectMicParams::set_devicename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SelectMicParams.deviceName)
}
inline std::string* SelectMicParams::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SelectMicParams.deviceName)
  return _s;
}
inline const std::string& SelectMicParams::_internal_devicename() const {
  return _impl_.devicename_.Get();
}
inline void SelectMicParams::_internal_set_devicename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectMicParams::_internal_mutable_devicename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.devicename_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectMicParams::release_devicename() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SelectMicParams.deviceName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.devicename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectMicParams::set_allocated_devicename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.devicename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devicename_.IsDefault()) {
          _impl_.devicename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SelectMicParams.deviceName)
}

// -------------------------------------------------------------------

// SelectSpeakerParams

// optional string deviceID = 1;
inline bool SelectSpeakerParams::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SelectSpeakerParams::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelectSpeakerParams::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SelectSpeakerParams.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectSpeakerParams::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SelectSpeakerParams.deviceID)
}
inline std::string* SelectSpeakerParams::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SelectSpeakerParams.deviceID)
  return _s;
}
inline const std::string& SelectSpeakerParams::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void SelectSpeakerParams::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectSpeakerParams::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectSpeakerParams::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SelectSpeakerParams.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectSpeakerParams::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SelectSpeakerParams.deviceID)
}

// optional string deviceName = 2;
inline bool SelectSpeakerParams::has_devicename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SelectSpeakerParams::clear_devicename() {
  _impl_.devicename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SelectSpeakerParams::devicename() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SelectSpeakerParams.deviceName)
  return _internal_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectSpeakerParams::set_devicename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SelectSpeakerParams.deviceName)
}
inline std::string* SelectSpeakerParams::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SelectSpeakerParams.deviceName)
  return _s;
}
inline const std::string& SelectSpeakerParams::_internal_devicename() const {
  return _impl_.devicename_.Get();
}
inline void SelectSpeakerParams::_internal_set_devicename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectSpeakerParams::_internal_mutable_devicename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.devicename_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectSpeakerParams::release_devicename() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SelectSpeakerParams.deviceName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.devicename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectSpeakerParams::set_allocated_devicename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.devicename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devicename_.IsDefault()) {
          _impl_.devicename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SelectSpeakerParams.deviceName)
}

// -------------------------------------------------------------------

// EnableAutoJoinAudioParams

// optional bool bEnable = 1;
inline bool EnableAutoJoinAudioParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoJoinAudioParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoJoinAudioParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoJoinAudioParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoJoinAudioParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoJoinAudioParams.bEnable)
}
inline bool EnableAutoJoinAudioParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoJoinAudioParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAutoAdjustMicParams

// optional bool bEnable = 1;
inline bool EnableAutoAdjustMicParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoAdjustMicParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoAdjustMicParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoAdjustMicParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoAdjustMicParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoAdjustMicParams.bEnable)
}
inline bool EnableAutoAdjustMicParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoAdjustMicParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableStereoAudioParams

// optional bool bEnable = 1;
inline bool EnableStereoAudioParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableStereoAudioParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableStereoAudioParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableStereoAudioParams.bEnable)
  return _internal_benable();
}
inline void EnableStereoAudioParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableStereoAudioParams.bEnable)
}
inline bool EnableStereoAudioParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableStereoAudioParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableMicOriginalInputParams

// optional bool bEnable = 1;
inline bool EnableMicOriginalInputParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableMicOriginalInputParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableMicOriginalInputParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableMicOriginalInputParams.bEnable)
  return _internal_benable();
}
inline void EnableMicOriginalInputParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableMicOriginalInputParams.bEnable)
}
inline bool EnableMicOriginalInputParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableMicOriginalInputParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableHoldSpaceKeyToSpeakParams

// optional bool bEnable = 1;
inline bool EnableHoldSpaceKeyToSpeakParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableHoldSpaceKeyToSpeakParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableHoldSpaceKeyToSpeakParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.bEnable)
  return _internal_benable();
}
inline void EnableHoldSpaceKeyToSpeakParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.bEnable)
}
inline bool EnableHoldSpaceKeyToSpeakParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableHoldSpaceKeyToSpeakParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAlwaysMuteMicWhenJoinVoipParams

// optional bool bEnable = 1;
inline bool EnableAlwaysMuteMicWhenJoinVoipParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAlwaysMuteMicWhenJoinVoipParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAlwaysMuteMicWhenJoinVoipParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.bEnable)
  return _internal_benable();
}
inline void EnableAlwaysMuteMicWhenJoinVoipParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.bEnable)
}
inline bool EnableAlwaysMuteMicWhenJoinVoipParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAlwaysMuteMicWhenJoinVoipParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableSuppressAudioNotifyParams

// optional bool bEnable = 1;
inline bool EnableSuppressAudioNotifyParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableSuppressAudioNotifyParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableSuppressAudioNotifyParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableSuppressAudioNotifyParams.bEnable)
  return _internal_benable();
}
inline void EnableSuppressAudioNotifyParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableSuppressAudioNotifyParams.bEnable)
}
inline bool EnableSuppressAudioNotifyParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableSuppressAudioNotifyParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// SetEchoCancellationLevelParams

// optional int32 level = 1;
inline bool SetEchoCancellationLevelParams::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetEchoCancellationLevelParams::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetEchoCancellationLevelParams::level() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetEchoCancellationLevelParams.level)
  return _internal_level();
}
inline void SetEchoCancellationLevelParams::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetEchoCancellationLevelParams.level)
}
inline ::int32_t SetEchoCancellationLevelParams::_internal_level() const {
  return _impl_.level_;
}
inline void SetEchoCancellationLevelParams::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// SetMicVolParams

// optional float value = 1;
inline bool SetMicVolParams::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetMicVolParams::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float SetMicVolParams::value() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetMicVolParams.value)
  return _internal_value();
}
inline void SetMicVolParams::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetMicVolParams.value)
}
inline float SetMicVolParams::_internal_value() const {
  return _impl_.value_;
}
inline void SetMicVolParams::_internal_set_value(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetSpeakerVolParams

// optional float value = 1;
inline bool SetSpeakerVolParams::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetSpeakerVolParams::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float SetSpeakerVolParams::value() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetSpeakerVolParams.value)
  return _internal_value();
}
inline void SetSpeakerVolParams::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetSpeakerVolParams.value)
}
inline float SetSpeakerVolParams::_internal_value() const {
  return _impl_.value_;
}
inline void SetSpeakerVolParams::_internal_set_value(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// EnableDualScreenModeParams

// optional bool bEnable = 1;
inline bool EnableDualScreenModeParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableDualScreenModeParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableDualScreenModeParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableDualScreenModeParams.bEnable)
  return _internal_benable();
}
inline void EnableDualScreenModeParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableDualScreenModeParams.bEnable)
}
inline bool EnableDualScreenModeParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableDualScreenModeParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// TurnOffAeroModeInSharingParams

// optional bool bTurnOff = 1;
inline bool TurnOffAeroModeInSharingParams::has_bturnoff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TurnOffAeroModeInSharingParams::clear_bturnoff() {
  _impl_.bturnoff_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool TurnOffAeroModeInSharingParams::bturnoff() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.TurnOffAeroModeInSharingParams.bTurnOff)
  return _internal_bturnoff();
}
inline void TurnOffAeroModeInSharingParams::set_bturnoff(bool value) {
  _internal_set_bturnoff(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.TurnOffAeroModeInSharingParams.bTurnOff)
}
inline bool TurnOffAeroModeInSharingParams::_internal_bturnoff() const {
  return _impl_.bturnoff_;
}
inline void TurnOffAeroModeInSharingParams::_internal_set_bturnoff(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bturnoff_ = value;
}

// -------------------------------------------------------------------

// EnableAutoFitToWindowWhenViewSharingParams

// optional bool bEnable = 1;
inline bool EnableAutoFitToWindowWhenViewSharingParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoFitToWindowWhenViewSharingParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoFitToWindowWhenViewSharingParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoFitToWindowWhenViewSharingParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.bEnable)
}
inline bool EnableAutoFitToWindowWhenViewSharingParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoFitToWindowWhenViewSharingParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAutoFullScreenVideoWhenJoinMeetingParams

// optional bool bEnable = 1;
inline bool EnableAutoFullScreenVideoWhenJoinMeetingParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoFullScreenVideoWhenJoinMeetingParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoFullScreenVideoWhenJoinMeetingParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoFullScreenVideoWhenJoinMeetingParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.bEnable)
}
inline bool EnableAutoFullScreenVideoWhenJoinMeetingParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoFullScreenVideoWhenJoinMeetingParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableSplitScreenModeParams

// optional bool bEnable = 1;
inline bool EnableSplitScreenModeParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableSplitScreenModeParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableSplitScreenModeParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableSplitScreenModeParams.bEnable)
  return _internal_benable();
}
inline void EnableSplitScreenModeParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableSplitScreenModeParams.bEnable)
}
inline bool EnableSplitScreenModeParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableSplitScreenModeParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAutoFullScreenVideoWhenViewShareParams

// optional bool bEnable = 1;
inline bool EnableAutoFullScreenVideoWhenViewShareParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoFullScreenVideoWhenViewShareParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoFullScreenVideoWhenViewShareParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoFullScreenVideoWhenViewShareParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.bEnable)
}
inline bool EnableAutoFullScreenVideoWhenViewShareParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoFullScreenVideoWhenViewShareParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableDisplayReminderWindowWhenExitParams

// optional bool bEnable = 1;
inline bool EnableDisplayReminderWindowWhenExitParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableDisplayReminderWindowWhenExitParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableDisplayReminderWindowWhenExitParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.bEnable)
  return _internal_benable();
}
inline void EnableDisplayReminderWindowWhenExitParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.bEnable)
}
inline bool EnableDisplayReminderWindowWhenExitParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableDisplayReminderWindowWhenExitParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableShowMyMeetingElapseTimeParams

// optional bool bEnable = 1;
inline bool EnableShowMyMeetingElapseTimeParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableShowMyMeetingElapseTimeParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableShowMyMeetingElapseTimeParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.bEnable)
  return _internal_benable();
}
inline void EnableShowMyMeetingElapseTimeParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.bEnable)
}
inline bool EnableShowMyMeetingElapseTimeParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableShowMyMeetingElapseTimeParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAccelerateGPUWhenShareParams

// optional bool bEnable = 1;
inline bool EnableAccelerateGPUWhenShareParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAccelerateGPUWhenShareParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAccelerateGPUWhenShareParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.bEnable)
  return _internal_benable();
}
inline void EnableAccelerateGPUWhenShareParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.bEnable)
}
inline bool EnableAccelerateGPUWhenShareParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAccelerateGPUWhenShareParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableRemoteControlAllApplicationsParams

// optional bool bEnable = 1;
inline bool EnableRemoteControlAllApplicationsParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableRemoteControlAllApplicationsParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableRemoteControlAllApplicationsParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.bEnable)
  return _internal_benable();
}
inline void EnableRemoteControlAllApplicationsParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.bEnable)
}
inline bool EnableRemoteControlAllApplicationsParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableRemoteControlAllApplicationsParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// SetRecordingPathParams

// optional string recPath = 1;
inline bool SetRecordingPathParams::has_recpath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetRecordingPathParams::clear_recpath() {
  _impl_.recpath_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetRecordingPathParams::recpath() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetRecordingPathParams.recPath)
  return _internal_recpath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetRecordingPathParams::set_recpath(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recpath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetRecordingPathParams.recPath)
}
inline std::string* SetRecordingPathParams::mutable_recpath() {
  std::string* _s = _internal_mutable_recpath();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetRecordingPathParams.recPath)
  return _s;
}
inline const std::string& SetRecordingPathParams::_internal_recpath() const {
  return _impl_.recpath_.Get();
}
inline void SetRecordingPathParams::_internal_set_recpath(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.recpath_.Set(value, GetArenaForAllocation());
}
inline std::string* SetRecordingPathParams::_internal_mutable_recpath() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.recpath_.Mutable( GetArenaForAllocation());
}
inline std::string* SetRecordingPathParams::release_recpath() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetRecordingPathParams.recPath)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.recpath_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recpath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetRecordingPathParams::set_allocated_recpath(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.recpath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recpath_.IsDefault()) {
          _impl_.recpath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetRecordingPathParams.recPath)
}

// -------------------------------------------------------------------

// EnableSelectRecordFileLocationAfterMeetingParams

// optional bool bEnable = 1;
inline bool EnableSelectRecordFileLocationAfterMeetingParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableSelectRecordFileLocationAfterMeetingParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableSelectRecordFileLocationAfterMeetingParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.bEnable)
  return _internal_benable();
}
inline void EnableSelectRecordFileLocationAfterMeetingParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.bEnable)
}
inline bool EnableSelectRecordFileLocationAfterMeetingParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableSelectRecordFileLocationAfterMeetingParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableMultiAudioStreamRecordParams

// optional bool bEnable = 1;
inline bool EnableMultiAudioStreamRecordParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableMultiAudioStreamRecordParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableMultiAudioStreamRecordParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.bEnable)
  return _internal_benable();
}
inline void EnableMultiAudioStreamRecordParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.bEnable)
}
inline bool EnableMultiAudioStreamRecordParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableMultiAudioStreamRecordParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAddTimestampWatermarkParams

// optional bool bEnable = 1;
inline bool EnableAddTimestampWatermarkParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAddTimestampWatermarkParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAddTimestampWatermarkParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAddTimestampWatermarkParams.bEnable)
  return _internal_benable();
}
inline void EnableAddTimestampWatermarkParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAddTimestampWatermarkParams.bEnable)
}
inline bool EnableAddTimestampWatermarkParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAddTimestampWatermarkParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableOptimizeFor3rdPartyVideoEditorParams

// optional bool bEnable = 1;
inline bool EnableOptimizeFor3rdPartyVideoEditorParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableOptimizeFor3rdPartyVideoEditorParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableOptimizeFor3rdPartyVideoEditorParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.bEnable)
  return _internal_benable();
}
inline void EnableOptimizeFor3rdPartyVideoEditorParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.bEnable)
}
inline bool EnableOptimizeFor3rdPartyVideoEditorParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableOptimizeFor3rdPartyVideoEditorParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableShowVideoThumbnailWhenShareParams

// optional bool bEnable = 1;
inline bool EnableShowVideoThumbnailWhenShareParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableShowVideoThumbnailWhenShareParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableShowVideoThumbnailWhenShareParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.bEnable)
  return _internal_benable();
}
inline void EnableShowVideoThumbnailWhenShareParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.bEnable)
}
inline bool EnableShowVideoThumbnailWhenShareParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableShowVideoThumbnailWhenShareParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnablePlaceVideoNextToShareInRecordParams

// optional bool bEnable = 1;
inline bool EnablePlaceVideoNextToShareInRecordParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnablePlaceVideoNextToShareInRecordParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnablePlaceVideoNextToShareInRecordParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.bEnable)
  return _internal_benable();
}
inline void EnablePlaceVideoNextToShareInRecordParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.bEnable)
}
inline bool EnablePlaceVideoNextToShareInRecordParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnablePlaceVideoNextToShareInRecordParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// DisableAdvancedFeatures4GeneralSettingParams

// optional bool bDisable = 1;
inline bool DisableAdvancedFeatures4GeneralSettingParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableAdvancedFeatures4GeneralSettingParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableAdvancedFeatures4GeneralSettingParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.bDisable)
  return _internal_bdisable();
}
inline void DisableAdvancedFeatures4GeneralSettingParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.bDisable)
}
inline bool DisableAdvancedFeatures4GeneralSettingParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableAdvancedFeatures4GeneralSettingParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// DisableAccountSettingTabPageParams

// optional bool bDisable = 1;
inline bool DisableAccountSettingTabPageParams::has_bdisable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableAccountSettingTabPageParams::clear_bdisable() {
  _impl_.bdisable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DisableAccountSettingTabPageParams::bdisable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DisableAccountSettingTabPageParams.bDisable)
  return _internal_bdisable();
}
inline void DisableAccountSettingTabPageParams::set_bdisable(bool value) {
  _internal_set_bdisable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DisableAccountSettingTabPageParams.bDisable)
}
inline bool DisableAccountSettingTabPageParams::_internal_bdisable() const {
  return _impl_.bdisable_;
}
inline void DisableAccountSettingTabPageParams::_internal_set_bdisable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdisable_ = value;
}

// -------------------------------------------------------------------

// HideAutoCopyInviteLinkCheckBoxParams

// optional bool bHide = 1;
inline bool HideAutoCopyInviteLinkCheckBoxParams::has_bhide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HideAutoCopyInviteLinkCheckBoxParams::clear_bhide() {
  _impl_.bhide_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HideAutoCopyInviteLinkCheckBoxParams::bhide() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams.bHide)
  return _internal_bhide();
}
inline void HideAutoCopyInviteLinkCheckBoxParams::set_bhide(bool value) {
  _internal_set_bhide(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams.bHide)
}
inline bool HideAutoCopyInviteLinkCheckBoxParams::_internal_bhide() const {
  return _impl_.bhide_;
}
inline void HideAutoCopyInviteLinkCheckBoxParams::_internal_set_bhide(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bhide_ = value;
}

// -------------------------------------------------------------------

// ConfigToShowUrlLinksInSettingParams

// optional uint64 showOption = 1;
inline bool ConfigToShowUrlLinksInSettingParams::has_showoption() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigToShowUrlLinksInSettingParams::clear_showoption() {
  _impl_.showoption_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ConfigToShowUrlLinksInSettingParams::showoption() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams.showOption)
  return _internal_showoption();
}
inline void ConfigToShowUrlLinksInSettingParams::set_showoption(::uint64_t value) {
  _internal_set_showoption(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams.showOption)
}
inline ::uint64_t ConfigToShowUrlLinksInSettingParams::_internal_showoption() const {
  return _impl_.showoption_;
}
inline void ConfigToShowUrlLinksInSettingParams::_internal_set_showoption(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.showoption_ = value;
}

// -------------------------------------------------------------------

// ConfSettingDialogShownTabPageParams

// optional uint64 showOption = 1;
inline bool ConfSettingDialogShownTabPageParams::has_showoption() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfSettingDialogShownTabPageParams::clear_showoption() {
  _impl_.showoption_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ConfSettingDialogShownTabPageParams::showoption() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.showOption)
  return _internal_showoption();
}
inline void ConfSettingDialogShownTabPageParams::set_showoption(::uint64_t value) {
  _internal_set_showoption(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.showOption)
}
inline ::uint64_t ConfSettingDialogShownTabPageParams::_internal_showoption() const {
  return _impl_.showoption_;
}
inline void ConfSettingDialogShownTabPageParams::_internal_set_showoption(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.showoption_ = value;
}

// -------------------------------------------------------------------

// SelectVideoCameraParams

// optional string deviceID = 1;
inline bool SelectVideoCameraParams::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SelectVideoCameraParams::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelectVideoCameraParams::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SelectVideoCameraParams.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectVideoCameraParams::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SelectVideoCameraParams.deviceID)
}
inline std::string* SelectVideoCameraParams::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SelectVideoCameraParams.deviceID)
  return _s;
}
inline const std::string& SelectVideoCameraParams::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void SelectVideoCameraParams::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectVideoCameraParams::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectVideoCameraParams::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SelectVideoCameraParams.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectVideoCameraParams::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SelectVideoCameraParams.deviceID)
}

// -------------------------------------------------------------------

// EnableVideoMirrorEffectParams

// optional bool bEnable = 1;
inline bool EnableVideoMirrorEffectParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableVideoMirrorEffectParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableVideoMirrorEffectParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableVideoMirrorEffectParams.bEnable)
  return _internal_benable();
}
inline void EnableVideoMirrorEffectParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableVideoMirrorEffectParams.bEnable)
}
inline bool EnableVideoMirrorEffectParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableVideoMirrorEffectParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableFaceBeautyEffectParams

// optional bool bEnable = 1;
inline bool EnableFaceBeautyEffectParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableFaceBeautyEffectParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableFaceBeautyEffectParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableFaceBeautyEffectParams.bEnable)
  return _internal_benable();
}
inline void EnableFaceBeautyEffectParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableFaceBeautyEffectParams.bEnable)
}
inline bool EnableFaceBeautyEffectParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableFaceBeautyEffectParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableHDVideoParams

// optional bool bEnable = 1;
inline bool EnableHDVideoParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableHDVideoParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableHDVideoParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableHDVideoParams.bEnable)
  return _internal_benable();
}
inline void EnableHDVideoParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableHDVideoParams.bEnable)
}
inline bool EnableHDVideoParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableHDVideoParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAlwaysShowNameOnVideoParams

// optional bool bEnable = 1;
inline bool EnableAlwaysShowNameOnVideoParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAlwaysShowNameOnVideoParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAlwaysShowNameOnVideoParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.bEnable)
  return _internal_benable();
}
inline void EnableAlwaysShowNameOnVideoParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.bEnable)
}
inline bool EnableAlwaysShowNameOnVideoParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAlwaysShowNameOnVideoParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableVideoPreviewDialogParams

// optional bool bEnable = 1;
inline bool EnableVideoPreviewDialogParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableVideoPreviewDialogParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableVideoPreviewDialogParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableVideoPreviewDialogParams.bEnable)
  return _internal_benable();
}
inline void EnableVideoPreviewDialogParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableVideoPreviewDialogParams.bEnable)
}
inline bool EnableVideoPreviewDialogParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableVideoPreviewDialogParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAutoTurnOffVideoWhenJoinMeetingParams

// optional bool bEnable = 1;
inline bool EnableAutoTurnOffVideoWhenJoinMeetingParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAutoTurnOffVideoWhenJoinMeetingParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAutoTurnOffVideoWhenJoinMeetingParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.bEnable)
  return _internal_benable();
}
inline void EnableAutoTurnOffVideoWhenJoinMeetingParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.bEnable)
}
inline bool EnableAutoTurnOffVideoWhenJoinMeetingParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAutoTurnOffVideoWhenJoinMeetingParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableSpotlightSelfParams

// optional bool bEnable = 1;
inline bool EnableSpotlightSelfParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableSpotlightSelfParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableSpotlightSelfParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableSpotlightSelfParams.bEnable)
  return _internal_benable();
}
inline void EnableSpotlightSelfParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableSpotlightSelfParams.bEnable)
}
inline bool EnableSpotlightSelfParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableSpotlightSelfParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableHardwareEncodeParams

// optional bool bEnable = 1;
inline bool EnableHardwareEncodeParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableHardwareEncodeParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableHardwareEncodeParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableHardwareEncodeParams.bEnable)
  return _internal_benable();
}
inline void EnableHardwareEncodeParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableHardwareEncodeParams.bEnable)
}
inline bool EnableHardwareEncodeParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableHardwareEncodeParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// optional int32 encodeType = 2;
inline bool EnableHardwareEncodeParams::has_encodetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EnableHardwareEncodeParams::clear_encodetype() {
  _impl_.encodetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t EnableHardwareEncodeParams::encodetype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableHardwareEncodeParams.encodeType)
  return _internal_encodetype();
}
inline void EnableHardwareEncodeParams::set_encodetype(::int32_t value) {
  _internal_set_encodetype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableHardwareEncodeParams.encodeType)
}
inline ::int32_t EnableHardwareEncodeParams::_internal_encodetype() const {
  return _impl_.encodetype_;
}
inline void EnableHardwareEncodeParams::_internal_set_encodetype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.encodetype_ = value;
}

// -------------------------------------------------------------------

// IsHardwareEncodeEnabledParams

// optional int32 encodeType = 1;
inline bool IsHardwareEncodeEnabledParams::has_encodetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IsHardwareEncodeEnabledParams::clear_encodetype() {
  _impl_.encodetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t IsHardwareEncodeEnabledParams::encodetype() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.IsHardwareEncodeEnabledParams.encodeType)
  return _internal_encodetype();
}
inline void IsHardwareEncodeEnabledParams::set_encodetype(::int32_t value) {
  _internal_set_encodetype(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.IsHardwareEncodeEnabledParams.encodeType)
}
inline ::int32_t IsHardwareEncodeEnabledParams::_internal_encodetype() const {
  return _impl_.encodetype_;
}
inline void IsHardwareEncodeEnabledParams::_internal_set_encodetype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.encodetype_ = value;
}

// -------------------------------------------------------------------

// Enable49VideoesInGallaryViewParams

// optional bool bEnable = 1;
inline bool Enable49VideoesInGallaryViewParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Enable49VideoesInGallaryViewParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Enable49VideoesInGallaryViewParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.bEnable)
  return _internal_benable();
}
inline void Enable49VideoesInGallaryViewParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.bEnable)
}
inline bool Enable49VideoesInGallaryViewParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void Enable49VideoesInGallaryViewParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableHideNoVideoUsersOnWallViewParams

// optional bool bEnable = 1;
inline bool EnableHideNoVideoUsersOnWallViewParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableHideNoVideoUsersOnWallViewParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableHideNoVideoUsersOnWallViewParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.bEnable)
  return _internal_benable();
}
inline void EnableHideNoVideoUsersOnWallViewParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.bEnable)
}
inline bool EnableHideNoVideoUsersOnWallViewParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableHideNoVideoUsersOnWallViewParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// GenerateSSOLoginWebURLParams

// optional string prefixOfVanityUrl = 1;
inline bool GenerateSSOLoginWebURLParams::has_prefixofvanityurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GenerateSSOLoginWebURLParams::clear_prefixofvanityurl() {
  _impl_.prefixofvanityurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenerateSSOLoginWebURLParams::prefixofvanityurl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.GenerateSSOLoginWebURLParams.prefixOfVanityUrl)
  return _internal_prefixofvanityurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenerateSSOLoginWebURLParams::set_prefixofvanityurl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prefixofvanityurl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.GenerateSSOLoginWebURLParams.prefixOfVanityUrl)
}
inline std::string* GenerateSSOLoginWebURLParams::mutable_prefixofvanityurl() {
  std::string* _s = _internal_mutable_prefixofvanityurl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.GenerateSSOLoginWebURLParams.prefixOfVanityUrl)
  return _s;
}
inline const std::string& GenerateSSOLoginWebURLParams::_internal_prefixofvanityurl() const {
  return _impl_.prefixofvanityurl_.Get();
}
inline void GenerateSSOLoginWebURLParams::_internal_set_prefixofvanityurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.prefixofvanityurl_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateSSOLoginWebURLParams::_internal_mutable_prefixofvanityurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.prefixofvanityurl_.Mutable( GetArenaForAllocation());
}
inline std::string* GenerateSSOLoginWebURLParams::release_prefixofvanityurl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.GenerateSSOLoginWebURLParams.prefixOfVanityUrl)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.prefixofvanityurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prefixofvanityurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GenerateSSOLoginWebURLParams::set_allocated_prefixofvanityurl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.prefixofvanityurl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prefixofvanityurl_.IsDefault()) {
          _impl_.prefixofvanityurl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.GenerateSSOLoginWebURLParams.prefixOfVanityUrl)
}

// -------------------------------------------------------------------

// SSOLoginWithWebUriProtocolParams

// optional string uriProtocol = 1;
inline bool SSOLoginWithWebUriProtocolParams::has_uriprotocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSOLoginWithWebUriProtocolParams::clear_uriprotocol() {
  _impl_.uriprotocol_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSOLoginWithWebUriProtocolParams::uriprotocol() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams.uriProtocol)
  return _internal_uriprotocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SSOLoginWithWebUriProtocolParams::set_uriprotocol(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uriprotocol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams.uriProtocol)
}
inline std::string* SSOLoginWithWebUriProtocolParams::mutable_uriprotocol() {
  std::string* _s = _internal_mutable_uriprotocol();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams.uriProtocol)
  return _s;
}
inline const std::string& SSOLoginWithWebUriProtocolParams::_internal_uriprotocol() const {
  return _impl_.uriprotocol_.Get();
}
inline void SSOLoginWithWebUriProtocolParams::_internal_set_uriprotocol(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.uriprotocol_.Set(value, GetArenaForAllocation());
}
inline std::string* SSOLoginWithWebUriProtocolParams::_internal_mutable_uriprotocol() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uriprotocol_.Mutable( GetArenaForAllocation());
}
inline std::string* SSOLoginWithWebUriProtocolParams::release_uriprotocol() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams.uriProtocol)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.uriprotocol_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uriprotocol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SSOLoginWithWebUriProtocolParams::set_allocated_uriprotocol(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uriprotocol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uriprotocol_.IsDefault()) {
          _impl_.uriprotocol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams.uriProtocol)
}

// -------------------------------------------------------------------

// ShowAANPanelParams

// optional uint32 x = 1;
inline bool ShowAANPanelParams::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShowAANPanelParams::clear_x() {
  _impl_.x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ShowAANPanelParams::x() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowAANPanelParams.x)
  return _internal_x();
}
inline void ShowAANPanelParams::set_x(::uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowAANPanelParams.x)
}
inline ::uint32_t ShowAANPanelParams::_internal_x() const {
  return _impl_.x_;
}
inline void ShowAANPanelParams::_internal_set_x(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}

// optional uint32 y = 2;
inline bool ShowAANPanelParams::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ShowAANPanelParams::clear_y() {
  _impl_.y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ShowAANPanelParams::y() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowAANPanelParams.y)
  return _internal_y();
}
inline void ShowAANPanelParams::set_y(::uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowAANPanelParams.y)
}
inline ::uint32_t ShowAANPanelParams::_internal_y() const {
  return _impl_.y_;
}
inline void ShowAANPanelParams::_internal_set_y(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}

// optional uint64 WindowID = 3;
inline bool ShowAANPanelParams::has_windowid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ShowAANPanelParams::clear_windowid() {
  _impl_.windowid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ShowAANPanelParams::windowid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ShowAANPanelParams.WindowID)
  return _internal_windowid();
}
inline void ShowAANPanelParams::set_windowid(::uint64_t value) {
  _internal_set_windowid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ShowAANPanelParams.WindowID)
}
inline ::uint64_t ShowAANPanelParams::_internal_windowid() const {
  return _impl_.windowid_;
}
inline void ShowAANPanelParams::_internal_set_windowid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.windowid_ = value;
}

// -------------------------------------------------------------------

// EnableInviteLinkOnMeetingUIParams

// optional bool bEnable = 1;
inline bool EnableInviteLinkOnMeetingUIParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableInviteLinkOnMeetingUIParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableInviteLinkOnMeetingUIParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams.bEnable)
  return _internal_benable();
}
inline void EnableInviteLinkOnMeetingUIParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams.bEnable)
}
inline bool EnableInviteLinkOnMeetingUIParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableInviteLinkOnMeetingUIParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// SetMeetingTopicParams

// optional string meetingTopic = 1;
inline bool SetMeetingTopicParams::has_meetingtopic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetMeetingTopicParams::clear_meetingtopic() {
  _impl_.meetingtopic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetMeetingTopicParams::meetingtopic() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetMeetingTopicParams.meetingTopic)
  return _internal_meetingtopic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetMeetingTopicParams::set_meetingtopic(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.meetingtopic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetMeetingTopicParams.meetingTopic)
}
inline std::string* SetMeetingTopicParams::mutable_meetingtopic() {
  std::string* _s = _internal_mutable_meetingtopic();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetMeetingTopicParams.meetingTopic)
  return _s;
}
inline const std::string& SetMeetingTopicParams::_internal_meetingtopic() const {
  return _impl_.meetingtopic_.Get();
}
inline void SetMeetingTopicParams::_internal_set_meetingtopic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.meetingtopic_.Set(value, GetArenaForAllocation());
}
inline std::string* SetMeetingTopicParams::_internal_mutable_meetingtopic() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.meetingtopic_.Mutable( GetArenaForAllocation());
}
inline std::string* SetMeetingTopicParams::release_meetingtopic() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetMeetingTopicParams.meetingTopic)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.meetingtopic_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meetingtopic_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetMeetingTopicParams::set_allocated_meetingtopic(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.meetingtopic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.meetingtopic_.IsDefault()) {
          _impl_.meetingtopic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetMeetingTopicParams.meetingTopic)
}

// -------------------------------------------------------------------

// SetCustomizedCloudRecordingMgrUrlParams

// optional string crmURL = 1;
inline bool SetCustomizedCloudRecordingMgrUrlParams::has_crmurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetCustomizedCloudRecordingMgrUrlParams::clear_crmurl() {
  _impl_.crmurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetCustomizedCloudRecordingMgrUrlParams::crmurl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams.crmURL)
  return _internal_crmurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetCustomizedCloudRecordingMgrUrlParams::set_crmurl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.crmurl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams.crmURL)
}
inline std::string* SetCustomizedCloudRecordingMgrUrlParams::mutable_crmurl() {
  std::string* _s = _internal_mutable_crmurl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams.crmURL)
  return _s;
}
inline const std::string& SetCustomizedCloudRecordingMgrUrlParams::_internal_crmurl() const {
  return _impl_.crmurl_.Get();
}
inline void SetCustomizedCloudRecordingMgrUrlParams::_internal_set_crmurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.crmurl_.Set(value, GetArenaForAllocation());
}
inline std::string* SetCustomizedCloudRecordingMgrUrlParams::_internal_mutable_crmurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.crmurl_.Mutable( GetArenaForAllocation());
}
inline std::string* SetCustomizedCloudRecordingMgrUrlParams::release_crmurl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams.crmURL)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.crmurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.crmurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetCustomizedCloudRecordingMgrUrlParams::set_allocated_crmurl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.crmurl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.crmurl_.IsDefault()) {
          _impl_.crmurl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetCustomizedCloudRecordingMgrUrlParams.crmURL)
}

// -------------------------------------------------------------------

// SetCustomizedInvitationDomainParams

// optional string invitation_domain = 1;
inline bool SetCustomizedInvitationDomainParams::has_invitation_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetCustomizedInvitationDomainParams::clear_invitation_domain() {
  _impl_.invitation_domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetCustomizedInvitationDomainParams::invitation_domain() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetCustomizedInvitationDomainParams.invitation_domain)
  return _internal_invitation_domain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetCustomizedInvitationDomainParams::set_invitation_domain(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.invitation_domain_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetCustomizedInvitationDomainParams.invitation_domain)
}
inline std::string* SetCustomizedInvitationDomainParams::mutable_invitation_domain() {
  std::string* _s = _internal_mutable_invitation_domain();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetCustomizedInvitationDomainParams.invitation_domain)
  return _s;
}
inline const std::string& SetCustomizedInvitationDomainParams::_internal_invitation_domain() const {
  return _impl_.invitation_domain_.Get();
}
inline void SetCustomizedInvitationDomainParams::_internal_set_invitation_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.invitation_domain_.Set(value, GetArenaForAllocation());
}
inline std::string* SetCustomizedInvitationDomainParams::_internal_mutable_invitation_domain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.invitation_domain_.Mutable( GetArenaForAllocation());
}
inline std::string* SetCustomizedInvitationDomainParams::release_invitation_domain() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetCustomizedInvitationDomainParams.invitation_domain)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.invitation_domain_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.invitation_domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetCustomizedInvitationDomainParams::set_allocated_invitation_domain(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.invitation_domain_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.invitation_domain_.IsDefault()) {
          _impl_.invitation_domain_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetCustomizedInvitationDomainParams.invitation_domain)
}

// -------------------------------------------------------------------

// SetCustomizedPollingUrlParams

// optional string pollingURL = 1;
inline bool SetCustomizedPollingUrlParams::has_pollingurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetCustomizedPollingUrlParams::clear_pollingurl() {
  _impl_.pollingurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetCustomizedPollingUrlParams::pollingurl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetCustomizedPollingUrlParams.pollingURL)
  return _internal_pollingurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetCustomizedPollingUrlParams::set_pollingurl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pollingurl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetCustomizedPollingUrlParams.pollingURL)
}
inline std::string* SetCustomizedPollingUrlParams::mutable_pollingurl() {
  std::string* _s = _internal_mutable_pollingurl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetCustomizedPollingUrlParams.pollingURL)
  return _s;
}
inline const std::string& SetCustomizedPollingUrlParams::_internal_pollingurl() const {
  return _impl_.pollingurl_.Get();
}
inline void SetCustomizedPollingUrlParams::_internal_set_pollingurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.pollingurl_.Set(value, GetArenaForAllocation());
}
inline std::string* SetCustomizedPollingUrlParams::_internal_mutable_pollingurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pollingurl_.Mutable( GetArenaForAllocation());
}
inline std::string* SetCustomizedPollingUrlParams::release_pollingurl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetCustomizedPollingUrlParams.pollingURL)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.pollingurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pollingurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetCustomizedPollingUrlParams::set_allocated_pollingurl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pollingurl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pollingurl_.IsDefault()) {
          _impl_.pollingurl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetCustomizedPollingUrlParams.pollingURL)
}

// optional bool bCreate = 2;
inline bool SetCustomizedPollingUrlParams::has_bcreate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetCustomizedPollingUrlParams::clear_bcreate() {
  _impl_.bcreate_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool SetCustomizedPollingUrlParams::bcreate() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetCustomizedPollingUrlParams.bCreate)
  return _internal_bcreate();
}
inline void SetCustomizedPollingUrlParams::set_bcreate(bool value) {
  _internal_set_bcreate(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetCustomizedPollingUrlParams.bCreate)
}
inline bool SetCustomizedPollingUrlParams::_internal_bcreate() const {
  return _impl_.bcreate_;
}
inline void SetCustomizedPollingUrlParams::_internal_set_bcreate(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bcreate_ = value;
}

// -------------------------------------------------------------------

// SetAudioShareModeParams

// optional int32 mode = 1;
inline bool SetAudioShareModeParams::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetAudioShareModeParams::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetAudioShareModeParams::mode() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetAudioShareModeParams.mode)
  return _internal_mode();
}
inline void SetAudioShareModeParams::set_mode(::int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetAudioShareModeParams.mode)
}
inline ::int32_t SetAudioShareModeParams::_internal_mode() const {
  return _impl_.mode_;
}
inline void SetAudioShareModeParams::_internal_set_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// StartLiveStreamParams

// optional int64 liveStreamHandle = 1;
inline bool StartLiveStreamParams::has_livestreamhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartLiveStreamParams::clear_livestreamhandle() {
  _impl_.livestreamhandle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t StartLiveStreamParams::livestreamhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartLiveStreamParams.liveStreamHandle)
  return _internal_livestreamhandle();
}
inline void StartLiveStreamParams::set_livestreamhandle(::int64_t value) {
  _internal_set_livestreamhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartLiveStreamParams.liveStreamHandle)
}
inline ::int64_t StartLiveStreamParams::_internal_livestreamhandle() const {
  return _impl_.livestreamhandle_;
}
inline void StartLiveStreamParams::_internal_set_livestreamhandle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.livestreamhandle_ = value;
}

// -------------------------------------------------------------------

// StartLiveStreamWithSteamingURLParams

// optional string streamingURL = 1;
inline bool StartLiveStreamWithSteamingURLParams::has_streamingurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartLiveStreamWithSteamingURLParams::clear_streamingurl() {
  _impl_.streamingurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartLiveStreamWithSteamingURLParams::streamingurl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingURL)
  return _internal_streamingurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartLiveStreamWithSteamingURLParams::set_streamingurl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.streamingurl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingURL)
}
inline std::string* StartLiveStreamWithSteamingURLParams::mutable_streamingurl() {
  std::string* _s = _internal_mutable_streamingurl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingURL)
  return _s;
}
inline const std::string& StartLiveStreamWithSteamingURLParams::_internal_streamingurl() const {
  return _impl_.streamingurl_.Get();
}
inline void StartLiveStreamWithSteamingURLParams::_internal_set_streamingurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.streamingurl_.Set(value, GetArenaForAllocation());
}
inline std::string* StartLiveStreamWithSteamingURLParams::_internal_mutable_streamingurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.streamingurl_.Mutable( GetArenaForAllocation());
}
inline std::string* StartLiveStreamWithSteamingURLParams::release_streamingurl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingURL)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.streamingurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.streamingurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartLiveStreamWithSteamingURLParams::set_allocated_streamingurl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.streamingurl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.streamingurl_.IsDefault()) {
          _impl_.streamingurl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingURL)
}

// optional string streamingKey = 2;
inline bool StartLiveStreamWithSteamingURLParams::has_streamingkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StartLiveStreamWithSteamingURLParams::clear_streamingkey() {
  _impl_.streamingkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StartLiveStreamWithSteamingURLParams::streamingkey() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingKey)
  return _internal_streamingkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartLiveStreamWithSteamingURLParams::set_streamingkey(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.streamingkey_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingKey)
}
inline std::string* StartLiveStreamWithSteamingURLParams::mutable_streamingkey() {
  std::string* _s = _internal_mutable_streamingkey();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingKey)
  return _s;
}
inline const std::string& StartLiveStreamWithSteamingURLParams::_internal_streamingkey() const {
  return _impl_.streamingkey_.Get();
}
inline void StartLiveStreamWithSteamingURLParams::_internal_set_streamingkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.streamingkey_.Set(value, GetArenaForAllocation());
}
inline std::string* StartLiveStreamWithSteamingURLParams::_internal_mutable_streamingkey() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.streamingkey_.Mutable( GetArenaForAllocation());
}
inline std::string* StartLiveStreamWithSteamingURLParams::release_streamingkey() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingKey)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.streamingkey_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.streamingkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartLiveStreamWithSteamingURLParams::set_allocated_streamingkey(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.streamingkey_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.streamingkey_.IsDefault()) {
          _impl_.streamingkey_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.streamingKey)
}

// optional string broadcastURL = 3;
inline bool StartLiveStreamWithSteamingURLParams::has_broadcasturl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void StartLiveStreamWithSteamingURLParams::clear_broadcasturl() {
  _impl_.broadcasturl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StartLiveStreamWithSteamingURLParams::broadcasturl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.broadcastURL)
  return _internal_broadcasturl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartLiveStreamWithSteamingURLParams::set_broadcasturl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.broadcasturl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.broadcastURL)
}
inline std::string* StartLiveStreamWithSteamingURLParams::mutable_broadcasturl() {
  std::string* _s = _internal_mutable_broadcasturl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.broadcastURL)
  return _s;
}
inline const std::string& StartLiveStreamWithSteamingURLParams::_internal_broadcasturl() const {
  return _impl_.broadcasturl_.Get();
}
inline void StartLiveStreamWithSteamingURLParams::_internal_set_broadcasturl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.broadcasturl_.Set(value, GetArenaForAllocation());
}
inline std::string* StartLiveStreamWithSteamingURLParams::_internal_mutable_broadcasturl() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.broadcasturl_.Mutable( GetArenaForAllocation());
}
inline std::string* StartLiveStreamWithSteamingURLParams::release_broadcasturl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.broadcastURL)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.broadcasturl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartLiveStreamWithSteamingURLParams::set_allocated_broadcasturl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.broadcasturl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.broadcasturl_.IsDefault()) {
          _impl_.broadcasturl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartLiveStreamWithSteamingURLParams.broadcastURL)
}

// -------------------------------------------------------------------

// StartRawLiveStreamParams

// optional string broadcastURL = 1;
inline bool StartRawLiveStreamParams::has_broadcasturl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartRawLiveStreamParams::clear_broadcasturl() {
  _impl_.broadcasturl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartRawLiveStreamParams::broadcasturl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.StartRawLiveStreamParams.broadcastURL)
  return _internal_broadcasturl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartRawLiveStreamParams::set_broadcasturl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.broadcasturl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.StartRawLiveStreamParams.broadcastURL)
}
inline std::string* StartRawLiveStreamParams::mutable_broadcasturl() {
  std::string* _s = _internal_mutable_broadcasturl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.StartRawLiveStreamParams.broadcastURL)
  return _s;
}
inline const std::string& StartRawLiveStreamParams::_internal_broadcasturl() const {
  return _impl_.broadcasturl_.Get();
}
inline void StartRawLiveStreamParams::_internal_set_broadcasturl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.broadcasturl_.Set(value, GetArenaForAllocation());
}
inline std::string* StartRawLiveStreamParams::_internal_mutable_broadcasturl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.broadcasturl_.Mutable( GetArenaForAllocation());
}
inline std::string* StartRawLiveStreamParams::release_broadcasturl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.StartRawLiveStreamParams.broadcastURL)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.broadcasturl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartRawLiveStreamParams::set_allocated_broadcasturl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.broadcasturl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.broadcasturl_.IsDefault()) {
          _impl_.broadcasturl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.StartRawLiveStreamParams.broadcastURL)
}

// -------------------------------------------------------------------

// GetLiveStreamItemInfoParams

// optional int64 liveStreamHandle = 1;
inline bool GetLiveStreamItemInfoParams::has_livestreamhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetLiveStreamItemInfoParams::clear_livestreamhandle() {
  _impl_.livestreamhandle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t GetLiveStreamItemInfoParams::livestreamhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.GetLiveStreamItemInfoParams.liveStreamHandle)
  return _internal_livestreamhandle();
}
inline void GetLiveStreamItemInfoParams::set_livestreamhandle(::int64_t value) {
  _internal_set_livestreamhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.GetLiveStreamItemInfoParams.liveStreamHandle)
}
inline ::int64_t GetLiveStreamItemInfoParams::_internal_livestreamhandle() const {
  return _impl_.livestreamhandle_;
}
inline void GetLiveStreamItemInfoParams::_internal_set_livestreamhandle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.livestreamhandle_ = value;
}

// -------------------------------------------------------------------

// RequestRawLiveStreamParams

// optional string broadcastURL = 1;
inline bool RequestRawLiveStreamParams::has_broadcasturl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RequestRawLiveStreamParams::clear_broadcasturl() {
  _impl_.broadcasturl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestRawLiveStreamParams::broadcasturl() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RequestRawLiveStreamParams.broadcastURL)
  return _internal_broadcasturl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestRawLiveStreamParams::set_broadcasturl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.broadcasturl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RequestRawLiveStreamParams.broadcastURL)
}
inline std::string* RequestRawLiveStreamParams::mutable_broadcasturl() {
  std::string* _s = _internal_mutable_broadcasturl();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.RequestRawLiveStreamParams.broadcastURL)
  return _s;
}
inline const std::string& RequestRawLiveStreamParams::_internal_broadcasturl() const {
  return _impl_.broadcasturl_.Get();
}
inline void RequestRawLiveStreamParams::_internal_set_broadcasturl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.broadcasturl_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestRawLiveStreamParams::_internal_mutable_broadcasturl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.broadcasturl_.Mutable( GetArenaForAllocation());
}
inline std::string* RequestRawLiveStreamParams::release_broadcasturl() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.RequestRawLiveStreamParams.broadcastURL)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.broadcasturl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RequestRawLiveStreamParams::set_allocated_broadcasturl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.broadcasturl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.broadcasturl_.IsDefault()) {
          _impl_.broadcasturl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.RequestRawLiveStreamParams.broadcastURL)
}

// -------------------------------------------------------------------

// RemoveRawLiveStreamPrivilegeParams

// optional uint32 userID = 1;
inline bool RemoveRawLiveStreamPrivilegeParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RemoveRawLiveStreamPrivilegeParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t RemoveRawLiveStreamPrivilegeParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams.userID)
  return _internal_userid();
}
inline void RemoveRawLiveStreamPrivilegeParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RemoveRawLiveStreamPrivilegeParams.userID)
}
inline ::uint32_t RemoveRawLiveStreamPrivilegeParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void RemoveRawLiveStreamPrivilegeParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// SetSupportDarkModeParams

// optional bool support = 1;
inline bool SetSupportDarkModeParams::has_support() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetSupportDarkModeParams::clear_support() {
  _impl_.support_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetSupportDarkModeParams::support() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetSupportDarkModeParams.support)
  return _internal_support();
}
inline void SetSupportDarkModeParams::set_support(bool value) {
  _internal_set_support(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetSupportDarkModeParams.support)
}
inline bool SetSupportDarkModeParams::_internal_support() const {
  return _impl_.support_;
}
inline void SetSupportDarkModeParams::_internal_set_support(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.support_ = value;
}

// -------------------------------------------------------------------

// SetPipeInitParams

// optional string videoPipeName = 1;
inline bool SetPipeInitParams::has_videopipename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetPipeInitParams::clear_videopipename() {
  _impl_.videopipename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetPipeInitParams::videopipename() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetPipeInitParams.videoPipeName)
  return _internal_videopipename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetPipeInitParams::set_videopipename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.videopipename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetPipeInitParams.videoPipeName)
}
inline std::string* SetPipeInitParams::mutable_videopipename() {
  std::string* _s = _internal_mutable_videopipename();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetPipeInitParams.videoPipeName)
  return _s;
}
inline const std::string& SetPipeInitParams::_internal_videopipename() const {
  return _impl_.videopipename_.Get();
}
inline void SetPipeInitParams::_internal_set_videopipename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.videopipename_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPipeInitParams::_internal_mutable_videopipename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.videopipename_.Mutable( GetArenaForAllocation());
}
inline std::string* SetPipeInitParams::release_videopipename() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetPipeInitParams.videoPipeName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.videopipename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.videopipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetPipeInitParams::set_allocated_videopipename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.videopipename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.videopipename_.IsDefault()) {
          _impl_.videopipename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetPipeInitParams.videoPipeName)
}

// optional string sharePipeName = 2;
inline bool SetPipeInitParams::has_sharepipename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetPipeInitParams::clear_sharepipename() {
  _impl_.sharepipename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetPipeInitParams::sharepipename() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetPipeInitParams.sharePipeName)
  return _internal_sharepipename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetPipeInitParams::set_sharepipename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sharepipename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetPipeInitParams.sharePipeName)
}
inline std::string* SetPipeInitParams::mutable_sharepipename() {
  std::string* _s = _internal_mutable_sharepipename();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetPipeInitParams.sharePipeName)
  return _s;
}
inline const std::string& SetPipeInitParams::_internal_sharepipename() const {
  return _impl_.sharepipename_.Get();
}
inline void SetPipeInitParams::_internal_set_sharepipename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.sharepipename_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPipeInitParams::_internal_mutable_sharepipename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sharepipename_.Mutable( GetArenaForAllocation());
}
inline std::string* SetPipeInitParams::release_sharepipename() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetPipeInitParams.sharePipeName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.sharepipename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sharepipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetPipeInitParams::set_allocated_sharepipename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sharepipename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sharepipename_.IsDefault()) {
          _impl_.sharepipename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetPipeInitParams.sharePipeName)
}

// optional string audioPipeName = 3;
inline bool SetPipeInitParams::has_audiopipename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SetPipeInitParams::clear_audiopipename() {
  _impl_.audiopipename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SetPipeInitParams::audiopipename() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetPipeInitParams.audioPipeName)
  return _internal_audiopipename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetPipeInitParams::set_audiopipename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.audiopipename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetPipeInitParams.audioPipeName)
}
inline std::string* SetPipeInitParams::mutable_audiopipename() {
  std::string* _s = _internal_mutable_audiopipename();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetPipeInitParams.audioPipeName)
  return _s;
}
inline const std::string& SetPipeInitParams::_internal_audiopipename() const {
  return _impl_.audiopipename_.Get();
}
inline void SetPipeInitParams::_internal_set_audiopipename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.audiopipename_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPipeInitParams::_internal_mutable_audiopipename() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.audiopipename_.Mutable( GetArenaForAllocation());
}
inline std::string* SetPipeInitParams::release_audiopipename() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetPipeInitParams.audioPipeName)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.audiopipename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audiopipename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetPipeInitParams::set_allocated_audiopipename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.audiopipename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audiopipename_.IsDefault()) {
          _impl_.audiopipename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetPipeInitParams.audioPipeName)
}

// optional uint64 maxReadLength = 4;
inline bool SetPipeInitParams::has_maxreadlength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SetPipeInitParams::clear_maxreadlength() {
  _impl_.maxreadlength_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t SetPipeInitParams::maxreadlength() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetPipeInitParams.maxReadLength)
  return _internal_maxreadlength();
}
inline void SetPipeInitParams::set_maxreadlength(::uint64_t value) {
  _internal_set_maxreadlength(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetPipeInitParams.maxReadLength)
}
inline ::uint64_t SetPipeInitParams::_internal_maxreadlength() const {
  return _impl_.maxreadlength_;
}
inline void SetPipeInitParams::_internal_set_maxreadlength(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.maxreadlength_ = value;
}

// -------------------------------------------------------------------

// SetParticipantsChatPrivilegeParams

// optional int32 privilege = 1;
inline bool SetParticipantsChatPrivilegeParams::has_privilege() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetParticipantsChatPrivilegeParams::clear_privilege() {
  _impl_.privilege_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetParticipantsChatPrivilegeParams::privilege() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams.privilege)
  return _internal_privilege();
}
inline void SetParticipantsChatPrivilegeParams::set_privilege(::int32_t value) {
  _internal_set_privilege(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetParticipantsChatPrivilegeParams.privilege)
}
inline ::int32_t SetParticipantsChatPrivilegeParams::_internal_privilege() const {
  return _impl_.privilege_;
}
inline void SetParticipantsChatPrivilegeParams::_internal_set_privilege(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.privilege_ = value;
}

// -------------------------------------------------------------------

// ChatMessageIDParams

// optional string msgID = 1;
inline bool ChatMessageIDParams::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChatMessageIDParams::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatMessageIDParams::msgid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ChatMessageIDParams.msgID)
  return _internal_msgid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessageIDParams::set_msgid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msgid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ChatMessageIDParams.msgID)
}
inline std::string* ChatMessageIDParams::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.ChatMessageIDParams.msgID)
  return _s;
}
inline const std::string& ChatMessageIDParams::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void ChatMessageIDParams::_internal_set_msgid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessageIDParams::_internal_mutable_msgid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msgid_.Mutable( GetArenaForAllocation());
}
inline std::string* ChatMessageIDParams::release_msgid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.ChatMessageIDParams.msgID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.msgid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChatMessageIDParams::set_allocated_msgid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msgid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msgid_.IsDefault()) {
          _impl_.msgid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.ChatMessageIDParams.msgID)
}

// -------------------------------------------------------------------

// SetChatMessageBuilderParams

// optional string content = 1;
inline bool SetChatMessageBuilderParams::has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetChatMessageBuilderParams::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetChatMessageBuilderParams::content() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetChatMessageBuilderParams.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetChatMessageBuilderParams::set_content(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetChatMessageBuilderParams.content)
}
inline std::string* SetChatMessageBuilderParams::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetChatMessageBuilderParams.content)
  return _s;
}
inline const std::string& SetChatMessageBuilderParams::_internal_content() const {
  return _impl_.content_.Get();
}
inline void SetChatMessageBuilderParams::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* SetChatMessageBuilderParams::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* SetChatMessageBuilderParams::release_content() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetChatMessageBuilderParams.content)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.content_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetChatMessageBuilderParams::set_allocated_content(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetChatMessageBuilderParams.content)
}

// optional uint32 receiver = 2;
inline bool SetChatMessageBuilderParams::has_receiver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SetChatMessageBuilderParams::clear_receiver() {
  _impl_.receiver_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SetChatMessageBuilderParams::receiver() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetChatMessageBuilderParams.receiver)
  return _internal_receiver();
}
inline void SetChatMessageBuilderParams::set_receiver(::uint32_t value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetChatMessageBuilderParams.receiver)
}
inline ::uint32_t SetChatMessageBuilderParams::_internal_receiver() const {
  return _impl_.receiver_;
}
inline void SetChatMessageBuilderParams::_internal_set_receiver(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.receiver_ = value;
}

// optional string threadId = 3;
inline bool SetChatMessageBuilderParams::has_threadid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetChatMessageBuilderParams::clear_threadid() {
  _impl_.threadid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetChatMessageBuilderParams::threadid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetChatMessageBuilderParams.threadId)
  return _internal_threadid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetChatMessageBuilderParams::set_threadid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.threadid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetChatMessageBuilderParams.threadId)
}
inline std::string* SetChatMessageBuilderParams::mutable_threadid() {
  std::string* _s = _internal_mutable_threadid();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.SetChatMessageBuilderParams.threadId)
  return _s;
}
inline const std::string& SetChatMessageBuilderParams::_internal_threadid() const {
  return _impl_.threadid_.Get();
}
inline void SetChatMessageBuilderParams::_internal_set_threadid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.threadid_.Set(value, GetArenaForAllocation());
}
inline std::string* SetChatMessageBuilderParams::_internal_mutable_threadid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.threadid_.Mutable( GetArenaForAllocation());
}
inline std::string* SetChatMessageBuilderParams::release_threadid() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.SetChatMessageBuilderParams.threadId)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.threadid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.threadid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetChatMessageBuilderParams::set_allocated_threadid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.threadid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.threadid_.IsDefault()) {
          _impl_.threadid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.SetChatMessageBuilderParams.threadId)
}

// optional int32 type = 4;
inline bool SetChatMessageBuilderParams::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SetChatMessageBuilderParams::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SetChatMessageBuilderParams::type() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetChatMessageBuilderParams.type)
  return _internal_type();
}
inline void SetChatMessageBuilderParams::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetChatMessageBuilderParams.type)
}
inline ::int32_t SetChatMessageBuilderParams::_internal_type() const {
  return _impl_.type_;
}
inline void SetChatMessageBuilderParams::_internal_set_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}

// optional int32 positionStart = 5;
inline bool SetChatMessageBuilderParams::has_positionstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SetChatMessageBuilderParams::clear_positionstart() {
  _impl_.positionstart_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t SetChatMessageBuilderParams::positionstart() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetChatMessageBuilderParams.positionStart)
  return _internal_positionstart();
}
inline void SetChatMessageBuilderParams::set_positionstart(::int32_t value) {
  _internal_set_positionstart(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetChatMessageBuilderParams.positionStart)
}
inline ::int32_t SetChatMessageBuilderParams::_internal_positionstart() const {
  return _impl_.positionstart_;
}
inline void SetChatMessageBuilderParams::_internal_set_positionstart(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.positionstart_ = value;
}

// optional int32 positionEnd = 6;
inline bool SetChatMessageBuilderParams::has_positionend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SetChatMessageBuilderParams::clear_positionend() {
  _impl_.positionend_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t SetChatMessageBuilderParams::positionend() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetChatMessageBuilderParams.positionEnd)
  return _internal_positionend();
}
inline void SetChatMessageBuilderParams::set_positionend(::int32_t value) {
  _internal_set_positionend(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetChatMessageBuilderParams.positionEnd)
}
inline ::int32_t SetChatMessageBuilderParams::_internal_positionend() const {
  return _impl_.positionend_;
}
inline void SetChatMessageBuilderParams::_internal_set_positionend(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.positionend_ = value;
}

// optional bool bClearStyles = 7;
inline bool SetChatMessageBuilderParams::has_bclearstyles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SetChatMessageBuilderParams::clear_bclearstyles() {
  _impl_.bclearstyles_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool SetChatMessageBuilderParams::bclearstyles() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetChatMessageBuilderParams.bClearStyles)
  return _internal_bclearstyles();
}
inline void SetChatMessageBuilderParams::set_bclearstyles(bool value) {
  _internal_set_bclearstyles(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetChatMessageBuilderParams.bClearStyles)
}
inline bool SetChatMessageBuilderParams::_internal_bclearstyles() const {
  return _impl_.bclearstyles_;
}
inline void SetChatMessageBuilderParams::_internal_set_bclearstyles(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bclearstyles_ = value;
}

// optional bool bClear = 8;
inline bool SetChatMessageBuilderParams::has_bclear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SetChatMessageBuilderParams::clear_bclear() {
  _impl_.bclear_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool SetChatMessageBuilderParams::bclear() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetChatMessageBuilderParams.bClear)
  return _internal_bclear();
}
inline void SetChatMessageBuilderParams::set_bclear(bool value) {
  _internal_set_bclear(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetChatMessageBuilderParams.bClear)
}
inline bool SetChatMessageBuilderParams::_internal_bclear() const {
  return _impl_.bclear_;
}
inline void SetChatMessageBuilderParams::_internal_set_bclear(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bclear_ = value;
}

// -------------------------------------------------------------------

// EnableWaitingRoomOnEntryParams

// optional bool bEnable = 1;
inline bool EnableWaitingRoomOnEntryParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableWaitingRoomOnEntryParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableWaitingRoomOnEntryParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams.bEnable)
  return _internal_benable();
}
inline void EnableWaitingRoomOnEntryParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.EnableWaitingRoomOnEntryParams.bEnable)
}
inline bool EnableWaitingRoomOnEntryParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableWaitingRoomOnEntryParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// GetWaitingRoomUserInfoByIDParams

// optional uint32 userid = 1;
inline bool GetWaitingRoomUserInfoByIDParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetWaitingRoomUserInfoByIDParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t GetWaitingRoomUserInfoByIDParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams.userid)
  return _internal_userid();
}
inline void GetWaitingRoomUserInfoByIDParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.GetWaitingRoomUserInfoByIDParams.userid)
}
inline ::uint32_t GetWaitingRoomUserInfoByIDParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void GetWaitingRoomUserInfoByIDParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// AdmitToMeetingParams

// optional uint32 userid = 1;
inline bool AdmitToMeetingParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AdmitToMeetingParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t AdmitToMeetingParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AdmitToMeetingParams.userid)
  return _internal_userid();
}
inline void AdmitToMeetingParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AdmitToMeetingParams.userid)
}
inline ::uint32_t AdmitToMeetingParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void AdmitToMeetingParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// PutInWaitingRoomParams

// optional uint32 userid = 1;
inline bool PutInWaitingRoomParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PutInWaitingRoomParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t PutInWaitingRoomParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.PutInWaitingRoomParams.userid)
  return _internal_userid();
}
inline void PutInWaitingRoomParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.PutInWaitingRoomParams.userid)
}
inline ::uint32_t PutInWaitingRoomParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void PutInWaitingRoomParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// RenameUserParams

// optional uint32 userid = 1;
inline bool RenameUserParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RenameUserParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RenameUserParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RenameUserParams.userid)
  return _internal_userid();
}
inline void RenameUserParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RenameUserParams.userid)
}
inline ::uint32_t RenameUserParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void RenameUserParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.userid_ = value;
}

// optional string newName = 2;
inline bool RenameUserParams::has_newname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RenameUserParams::clear_newname() {
  _impl_.newname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RenameUserParams::newname() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.RenameUserParams.newName)
  return _internal_newname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RenameUserParams::set_newname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.newname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.RenameUserParams.newName)
}
inline std::string* RenameUserParams::mutable_newname() {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.RenameUserParams.newName)
  return _s;
}
inline const std::string& RenameUserParams::_internal_newname() const {
  return _impl_.newname_.Get();
}
inline void RenameUserParams::_internal_set_newname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.newname_.Set(value, GetArenaForAllocation());
}
inline std::string* RenameUserParams::_internal_mutable_newname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.newname_.Mutable( GetArenaForAllocation());
}
inline std::string* RenameUserParams::release_newname() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.RenameUserParams.newName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.newname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RenameUserParams::set_allocated_newname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.newname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.newname_.IsDefault()) {
          _impl_.newname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.RenameUserParams.newName)
}

// -------------------------------------------------------------------

// ExpelUserParams

// optional uint32 userid = 1;
inline bool ExpelUserParams::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ExpelUserParams::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ExpelUserParams::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.ExpelUserParams.userid)
  return _internal_userid();
}
inline void ExpelUserParams::set_userid(::uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.ExpelUserParams.userid)
}
inline ::uint32_t ExpelUserParams::_internal_userid() const {
  return _impl_.userid_;
}
inline void ExpelUserParams::_internal_set_userid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// AllowParticipantsToRequestCloudRecordingParams

// optional bool bAllow = 1;
inline bool AllowParticipantsToRequestCloudRecordingParams::has_ballow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AllowParticipantsToRequestCloudRecordingParams::clear_ballow() {
  _impl_.ballow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool AllowParticipantsToRequestCloudRecordingParams::ballow() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams.bAllow)
  return _internal_ballow();
}
inline void AllowParticipantsToRequestCloudRecordingParams::set_ballow(bool value) {
  _internal_set_ballow(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.AllowParticipantsToRequestCloudRecordingParams.bAllow)
}
inline bool AllowParticipantsToRequestCloudRecordingParams::_internal_ballow() const {
  return _impl_.ballow_;
}
inline void AllowParticipantsToRequestCloudRecordingParams::_internal_set_ballow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ballow_ = value;
}

// -------------------------------------------------------------------

// DenyRequestStartCloudRecordingParams

// optional bool bDenyAll = 1;
inline bool DenyRequestStartCloudRecordingParams::has_bdenyall() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DenyRequestStartCloudRecordingParams::clear_bdenyall() {
  _impl_.bdenyall_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DenyRequestStartCloudRecordingParams::bdenyall() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams.bDenyAll)
  return _internal_bdenyall();
}
inline void DenyRequestStartCloudRecordingParams::set_bdenyall(bool value) {
  _internal_set_bdenyall(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DenyRequestStartCloudRecordingParams.bDenyAll)
}
inline bool DenyRequestStartCloudRecordingParams::_internal_bdenyall() const {
  return _impl_.bdenyall_;
}
inline void DenyRequestStartCloudRecordingParams::_internal_set_bdenyall(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdenyall_ = value;
}

// -------------------------------------------------------------------

// SetEnableOptionParams

// optional uint32 option = 1;
inline bool SetEnableOptionParams::has_option() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetEnableOptionParams::clear_option() {
  _impl_.option_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SetEnableOptionParams::option() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.SetEnableOptionParams.option)
  return _internal_option();
}
inline void SetEnableOptionParams::set_option(::uint32_t value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.SetEnableOptionParams.option)
}
inline ::uint32_t SetEnableOptionParams::_internal_option() const {
  return _impl_.option_;
}
inline void SetEnableOptionParams::_internal_set_option(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.option_ = value;
}

// -------------------------------------------------------------------

// DeclineEnableParams

// optional bool bDeclineAll = 1;
inline bool DeclineEnableParams::has_bdeclineall() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DeclineEnableParams::clear_bdeclineall() {
  _impl_.bdeclineall_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DeclineEnableParams::bdeclineall() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.DeclineEnableParams.bDeclineAll)
  return _internal_bdeclineall();
}
inline void DeclineEnableParams::set_bdeclineall(bool value) {
  _internal_set_bdeclineall(value);
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.DeclineEnableParams.bDeclineAll)
}
inline bool DeclineEnableParams::_internal_bdeclineall() const {
  return _impl_.bdeclineall_;
}
inline void DeclineEnableParams::_internal_set_bdeclineall(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bdeclineall_ = value;
}

// -------------------------------------------------------------------

// InputScreenNameParams

// optional string screenName = 1;
inline bool InputScreenNameParams::has_screenname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InputScreenNameParams::clear_screenname() {
  _impl_.screenname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputScreenNameParams::screenname() const {
  // @@protoc_insertion_point(field_get:com.electron.sdk.proto.InputScreenNameParams.screenName)
  return _internal_screenname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputScreenNameParams::set_screenname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.screenname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.sdk.proto.InputScreenNameParams.screenName)
}
inline std::string* InputScreenNameParams::mutable_screenname() {
  std::string* _s = _internal_mutable_screenname();
  // @@protoc_insertion_point(field_mutable:com.electron.sdk.proto.InputScreenNameParams.screenName)
  return _s;
}
inline const std::string& InputScreenNameParams::_internal_screenname() const {
  return _impl_.screenname_.Get();
}
inline void InputScreenNameParams::_internal_set_screenname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.screenname_.Set(value, GetArenaForAllocation());
}
inline std::string* InputScreenNameParams::_internal_mutable_screenname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.screenname_.Mutable( GetArenaForAllocation());
}
inline std::string* InputScreenNameParams::release_screenname() {
  // @@protoc_insertion_point(field_release:com.electron.sdk.proto.InputScreenNameParams.screenName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.screenname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InputScreenNameParams::set_allocated_screenname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.screenname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.screenname_.IsDefault()) {
          _impl_.screenname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.sdk.proto.InputScreenNameParams.screenName)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sdk
}  // namespace electron
}  // namespace com


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_electron_5fsdk_2eproto_2epb_2eh
