#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef PRISM_SWIFT_H
#define PRISM_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppKit;
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Prism",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class PrismColor;
enum PZMCursorState : NSInteger;
@class PZMCursorStateBinding;

SWIFT_PROTOCOL_NAMED("BaseView")
@protocol PZMBaseView
/// Determines whether to enable animation in the view’s own updates (such as a fade-in/out or sliding text).
/// Declared in <code>AnimatedView</code>; defaults to <code>true</code>.
@property (nonatomic) BOOL enableAnimation;
/// Determines whether the view ignores any mouse or keyboard events sent to it. Useful for making a view
/// “unclickable”, without modifying its appearance.
@property (nonatomic) BOOL forbidInteraction;
/// Recursively sets <code>forbidInteraction</code> <code>= true</code> for <code>View</code> instances in the view’s subtree.
/// attention:
/// This does <em>not</em> propagate through view instances that do not inherit from <code>View</code>, but
/// this behavior may change in the future.
- (void)forbidInteractionInSubtree;
/// Recursively sets <code>forbidInteraction</code> <code>= false</code> for <code>View</code> instances in the view’s subtree.
/// attention:
/// this does <em>not</em> propagate through view instances that do not inherit from <code>View</code>, but
/// this behavior may change in the future.
- (void)enableInteractionInSubtree;
/// The view’s default background color.
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
/// The view’s background color, when it is hovered.
@property (nonatomic, strong) PrismColor * _Nullable hoveredBackgroundColor;
/// The view’s background color, while the mouse is held down during a click event.
@property (nonatomic, strong) PrismColor * _Nullable clickedBackgroundColor;
/// The radius of the view’s corners; higher values mean rounder corners.
/// Setting <code>cornerRadius</code> to be greater than <code>min(view.height, view.width)</code> may cause it to draw
/// unexpectedly.
@property (nonatomic) CGFloat cornerRadius;
/// The width of the view’s border, drawn around the same path as its background.
@property (nonatomic) CGFloat borderWidth;
/// The color of the view’s border.
@property (nonatomic, strong) PrismColor * _Nullable borderColor;
/// The color of the view’s border, when the view is hovered.
@property (nonatomic, strong) PrismColor * _Nullable hoveredBorderColor;
/// The color of the view’s border, while the mouse is held down during a click event.
@property (nonatomic, strong) PrismColor * _Nullable clickedBorderColor;
/// A function to be invoked when the view detects a change to its cursor state.
/// note:
/// if the view is not configured to track mouse events, this may never be invoked. Please refer
/// to each component’s class documentation for specific details.
- (void)cursorStateChangedTo:(enum PZMCursorState)state;
/// Determines whether the view should instantiate and maintain a tracking area <em>regardless</em> of its other set
/// properties.
/// Normally, <code>View</code> instances are lazy - they will not allocate a tracking area for themselves unless it
/// is needed (such as for tracking mouse events for hover states). This can be used if the logic for
/// determining whether the view needs to own a tracking area does not match your desired outcome. For example,
/// this could be useful if you are implementing a clickable view that does not draw a background - but also
/// consider using <code>InteractableView</code> instead.
/// If there is no tracking area when this is set to true, it will be created.
/// This variable can be safely set, or overriden as a calculated property.
/// important:
/// The view’s behavior after setting <a href="doc:/documentation/Prism/View/forbidTracking">doc:/documentation/Prism/View/forbidTracking</a><code> = true</code> <em>and</em> <a href="doc:/documentation/Prism/View/requiresTracking">doc:/documentation/Prism/View/requiresTracking</a><code> = true</code> is
/// undefined.
@property (nonatomic) BOOL requiresTracking;
/// Determines whether the view should never instantiate and maintain a tracking area <em>regardless</em> of its other set
/// properties.
/// Normally, <code>View</code> instances will always instantiate a <code>NSTrackingArea</code> if they have to (such as if hover and
/// clicked states exist). However, in cases such as where the view is merely used as a subview for drawing and is
/// managed by a superview that owns it and manages its subviews’ hover states, this may be used to forbid a view
/// from ever instantiating a tracking area for itself.
/// If there is a tracking area when this variable is set to false, it will be destroyed.
/// This variable can be safely set, or overriden as a calculated property.
/// important:
/// The view’s behavior after setting <code>forbidTracking</code> <code>= true</code> <em>and</em> <code>requiresTracking</code> <code>= true</code> is
/// undefined.
@property (nonatomic) BOOL forbidTracking;
@property (nonatomic, readonly) enum PZMCursorState cursorState;
@property (nonatomic, strong) PZMCursorStateBinding * _Nullable cursorStateBinding;
@end


/// Describes the interface through which you can set a <code>BaseView</code>’s cursor state.
/// Most Prism controls allow you to set their hover state; additionally, the default behavior of
/// <code>View</code> is to allow cursor state binding. However, this may be overridden in a subclass, so make sure
/// to check the relevant documentation if you encounter unexpected behavior.
SWIFT_PROTOCOL("_TtP5Prism19CursorStateBindable_")
@protocol CursorStateBindable <PZMBaseView>
/// The cursor state binding object for the view.
/// By default, <code>View</code> instances set up their own tracking areas when necessary (e.g., if a hover color is
/// set). Setting a non-<code>nil</code> <code>cursorStateBinding</code> allows the caller to set the cursor state in cases such as
/// when a view’s hover state is tracked by its superview.
/// note:
/// A non-<code>nil</code> <code>cursorStateBinding</code> will prevent the <code>View</code> from creating a tracking area.
@property (nonatomic, strong) PZMCursorStateBinding * _Nullable cursorStateBinding;
/// Returns a cursor state binding for the view, making one if necessary.
/// -Note: For views that do not support cursor state binding, this will always return <code>nil</code>.
- (PZMCursorStateBinding * _Nullable)makeCursorStateBinding SWIFT_WARN_UNUSED_RESULT;
@end


@class NSCoder;
@class NSEvent;

/// Prism’s self-managing, layer-backed, base view type.
/// <code>View</code> is a layer-backed view that manages its own layer, tracking area, and
/// hover states. This is meant to be subclassed by Prism itself and by other implementations
/// that want to integrate well with Prism.
/// If you are implementing a subclass, variables such as <code>backgroundColor</code> and <code>cornerRadius</code>
/// can be safely overridden and the changes will be reflected in the drawn view.
SWIFT_CLASS_NAMED("View")
@interface PZMView : NSView <CursorStateBindable>
/// Determines whether to enable animation in the view’s own updates (such as a fade-in/out or sliding text).
/// Declared in <code>AnimatedView</code>; defaults to <code>true</code>.
@property (nonatomic) BOOL enableAnimation;
/// Determines whether the view ignores any mouse or keyboard events sent to it. Useful for making a view
/// “unclickable”, without modifying its appearance.
@property (nonatomic) BOOL forbidInteraction;
/// Recursively sets <code>forbidInteraction</code> <code>= true</code> for <code>View</code> instances in the view’s subtree.
/// attention:
/// This does <em>not</em> propagate through view instances that do not inherit from <code>View</code>, but
/// this behavior may change in the future.
- (void)forbidInteractionInSubtree;
/// Recursively sets <code>forbidInteraction</code> <code>= false</code> for <code>View</code> instances in the view’s subtree.
/// attention:
/// this does <em>not</em> propagate through view instances that do not inherit from <code>View</code>, but
/// this behavior may change in the future.
- (void)enableInteractionInSubtree;
/// The view’s default background color.
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
/// The view’s background color, when it is hovered.
@property (nonatomic, strong) PrismColor * _Nullable hoveredBackgroundColor;
/// The view’s background color, while the mouse is held down during a click event.
@property (nonatomic, strong) PrismColor * _Nullable clickedBackgroundColor;
/// The radius of the view’s corners; higher values mean rounder corners.
/// Setting <code>cornerRadius</code> to be greater than <code>min(view.height, view.width)</code> may cause it to draw
/// unexpectedly.
@property (nonatomic) CGFloat cornerRadius;
/// The width of the view’s border, drawn around the same path as its background.
@property (nonatomic) CGFloat borderWidth;
/// The color of the view’s border.
@property (nonatomic, strong) PrismColor * _Nullable borderColor;
/// The color of the view’s border, when the view is hovered.
@property (nonatomic, strong) PrismColor * _Nullable hoveredBorderColor;
/// The color of the view’s border, while the mouse is held down during a click event.
@property (nonatomic, strong) PrismColor * _Nullable clickedBorderColor;
/// Determines whether the view should instantiate and maintain a tracking area <em>regardless</em> of its other set
/// properties.
/// Normally, <code>View</code> instances are lazy - they will not allocate a tracking area for themselves unless it
/// is needed (such as for tracking mouse events for hover states). This can be used if the logic for
/// determining whether the view needs to own a tracking area does not match your desired outcome. For example,
/// this could be useful if you are implementing a clickable view that does not draw a background - but also
/// consider using <code>InteractableView</code> instead.
/// If there is no tracking area when this is set to true, it will be created.
/// This variable can be safely set, or overriden as a calculated property.
/// important:
/// The view’s behavior after setting <a href="doc:/documentation/Prism/View/forbidTracking">doc:/documentation/Prism/View/forbidTracking</a><code> = true</code> <em>and</em> <a href="doc:/documentation/Prism/View/requiresTracking">doc:/documentation/Prism/View/requiresTracking</a><code> = true</code> is
/// undefined.
@property (nonatomic) BOOL requiresTracking;
/// Determines whether the view should never instantiate and maintain a tracking area <em>regardless</em> of its other set
/// properties.
/// Normally, <code>View</code> instances will always instantiate a <code>NSTrackingArea</code> if they have to (such as if hover and
/// clicked states exist). However, in cases such as where the view is merely used as a subview for drawing and is
/// managed by a superview that owns it and manages its subviews’ hover states, this may be used to forbid a view
/// from ever instantiating a tracking area for itself.
/// If there is a tracking area when this variable is set to false, it will be destroyed.
/// This variable can be safely set, or overriden as a calculated property.
/// important:
/// The view’s behavior after setting <code>forbidTracking</code> <code>= true</code> <em>and</em> <code>requiresTracking</code> <code>= true</code> is
/// undefined.
@property (nonatomic) BOOL forbidTracking;
@property (nonatomic, strong) PZMCursorStateBinding * _Nullable cursorStateBinding;
- (PZMCursorStateBinding * _Nullable)makeCursorStateBinding SWIFT_WARN_UNUSED_RESULT;
/// The view’s intrinsic content size will always return its overridden value (see <code>setIntrinsicContentSize(_:)</code>);
/// otherwise, it is always equal to <code>super.intrinsicContentSize</code>.
@property (nonatomic, readonly) NSSize intrinsicContentSize;
/// The view’s current cursor state.
@property (nonatomic, readonly) enum PZMCursorState cursorState;
/// A function to be invoked when the view detects a change to its cursor state.
/// note:
/// if the view is not configured to track mouse events, this may never be invoked. Please refer
/// to each component’s class documentation for specific details.
- (void)cursorStateChangedTo:(enum PZMCursorState)state;
@property (nonatomic) NSFocusRingType focusRingType;
/// Initializes an empty <code>View</code> instance with the given frame.
/// \param frame The <code>NSRect</code> for the frame.
///
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Invoked when the mouse enters the view - see <code>NSView.mouseEntered</code>.
/// This forwards the mouse event to <code>super</code> if <a href="doc:/documentation/Prism/View/forbidInteraction">doc:/documentation/Prism/View/forbidInteraction</a> is set.
/// important:
/// <code>View</code> subclasses <em>must</em> call <code>super.mouseEntered</code> for cursor states to
/// be properly set by this implementation. If <code>super.mouseEntered</code> is not invoked, the cursor
/// states must be managed manually.
/// \param event The mouse event.
///
- (void)mouseEntered:(NSEvent * _Nonnull)event;
/// Invoked when the mouse exits the view - see <code>NSView.mouseExited</code>.
/// This forwards the mouse event to <code>super</code> if <code>.forbidInteraction</code> is set.
/// important:
/// <code>View</code> subclasses <em>must</em> call <code>super.mouseExited</code> for cursor states to
/// be properly set. If <code>super.mouseExited</code> is not invoked, the cursor states must be managed
/// manually.
/// \param event The mouse event.
///
- (void)mouseExited:(NSEvent * _Nonnull)event;
/// Invoked when the view is clicked - see <code>NSView.mouseDown</code>.
/// This forwards the mouse event to <code>super</code> if <code>.forbidInteraction</code> is set.
/// important:
/// <code>View</code> subclasses <em>must</em> call <code>super.mouseDown</code> for cursor states to be
/// properly set. If <code>super.mouseDown</code> is not invoked, the cursor states must be managed manually.
/// \param event The mouse event.
///
- (void)mouseDown:(NSEvent * _Nonnull)event;
/// Invoked when a click on the view is released - see <code>NSView.mouseUp</code>.
/// This forwards the mouse event to <code>super</code> if <code>.forbidInteraction</code> is set.
/// important:
/// <code>View</code> subclasses <em>must</em> call <code>super.mouseUp</code> for cursor states to be properly set. If
/// <code>super.mouseUp</code> is not invoked, the cursor states must be managed manually.
/// \param event The mouse event.
///
- (void)mouseUp:(NSEvent * _Nonnull)event;
/// Updates the view’s root layer, with its calculated background and border color and width.
/// attention:
/// when overriding this, <code>super.updateLayer()</code> <em>must</em> be called.
- (void)updateLayer;
- (void)updateTrackingAreas;
/// Returns <code>nil</code> whenever <code>forbidInteraction</code> <code>== true</code>; otherwise, it is equal to <code>super.hitTest</code>.
- (NSView * _Nullable)hitTest:(NSPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Highlights the background or border of a view for a short duration.
/// This is useful to display a transient state, such as when you want to bring attention
/// to a specific <code>View</code>.
/// \param backgroundColor The color that the background will be highlighted as.
///
/// \param borderColor The color that the border will be highlighted as.
///
/// \param for duration The duration, in seconds, of the highlighting effect.
///
- (void)highlightWithBackgroundColor:(PrismColor * _Nullable)backgroundColor borderColor:(PrismColor * _Nullable)borderColor for:(double)duration;
@end

enum PZMAvatarGroupViewSize : NSInteger;
@class PZMAvatarGroupViewItem;
@class NSString;

/// Prism’s Avatar component; used to display an image that represents a user or similar entity.
SWIFT_CLASS_NAMED("AvatarGroupView")
@interface PZMAvatarGroupView : PZMView
@property (nonatomic) BOOL translatesAutoresizingMaskIntoConstraints;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Creates an avatar group view with given parameters.
/// \param size The size that the avatars will be shown in.
///
/// \param max The max number of users to show
///
- (nonnull instancetype)initWithSize:(enum PZMAvatarGroupViewSize)size max:(NSInteger)max OBJC_DESIGNATED_INITIALIZER;
/// The users to show on this view. The users exceeds max number will be ignored
@property (nonatomic, copy) NSArray<PZMAvatarGroupViewItem *> * _Nonnull users;
/// The label read by voiceover when voiceover focus on number button
@property (nonatomic, copy) NSString * _Nonnull numberButtonAccessibilityLabel;
/// The role read by voiceover when voiceover focus on number button
@property (nonatomic, copy) NSString * _Nonnull numberButtonAccessibilityRole;
/// The number displayed on the right part. If it is greater than 99, “99+” will be displayed. If it is less than 1, the number is hidden
@property (nonatomic) NSInteger userNumber;
/// Two closures will be release in this method
- (void)removeFromSuperview;
/// The ideal size
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("Item")
@interface PZMAvatarGroupViewItem : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The avatar sizes, as defined in the design specification.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMAvatarGroupViewSize, "Size", open) {
/// The small avatar size (24x24px).
  PZMAvatarGroupViewSizeSmall = 0,
/// The normal avatar size (32x32px).
  PZMAvatarGroupViewSizeNormal = 1,
/// The medium avatar size (40x40px).
  PZMAvatarGroupViewSizeMedium = 2,
};

@class NSImage;
enum PZMAvatarViewSize : NSInteger;

/// Prism’s Avatar component; used to display an image that represents a user or similar entity.
SWIFT_CLASS_NAMED("AvatarView")
@interface PZMAvatarView : PZMView
@property (nonatomic) BOOL translatesAutoresizingMaskIntoConstraints;
@property (nonatomic) CGFloat cornerRadius;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates an avatar with the given parameters.
/// \param label The label to be shown in the avatar.
///
/// \param image The image to be shown in the avatar; optional, defaults to <code>nil</code>.
///
/// \param size The size that the avatar will be shown in.
///
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label image:(NSImage * _Nullable)image size:(enum PZMAvatarViewSize)size OBJC_DESIGNATED_INITIALIZER;
/// Updates the view’s label and image.
/// \param label The new label to be shown.
///
/// \param image The new image to be shown.
///
- (void)setLabel:(NSString * _Nonnull)label image:(NSImage * _Nullable)image;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

/// The avatar sizes, as defined in the design specification.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMAvatarViewSize, "Size", open) {
/// The small avatar size (24x24px).
  PZMAvatarViewSizeSmall = 0,
/// The normal avatar size (32x32px).
  PZMAvatarViewSizeNormal = 1,
/// The medium avatar size (40x40px).
  PZMAvatarViewSizeMedium = 2,
/// The large avatar size (110x110px).
  PZMAvatarViewSizeLarge = 3,
};


/// A protocol declaring a base button interface.
SWIFT_PROTOCOL_NAMED("BaseButton")
@protocol PZMBaseButton
/// The button’s action, to be invoked when the user interacts with the button.
@property (nonatomic, copy) void (^ _Nonnull action)(id <PZMBaseButton> _Nonnull);
/// Determines whether the button’s action will be executed on a <code>mouseDown(with:)</code> event, as opposed to
/// <code>mouseUp(with:)</code>.
@property (nonatomic) BOOL runActionOnMouseDown;
/// Displays a progress indicator over the button.
/// If the progress indicator is already running, this does nothing.
/// important:
/// While the progress indicator is shown, interaction with the button is disabled.
- (void)showProgressIndicator;
/// Hides the button’s progress indicator, if it is shown.
/// If the progress indicator is already stopped, this does nothing.
- (void)hideProgressIndicator;
@end



SWIFT_CLASS_NAMED("BreadcrumbView")
@interface PZMBreadcrumbView : PZMView
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PZMToolTip;
@class PZMPopover;

/// Prism’s interactable view type.
/// Fills a role similar to <code>NSControl</code>, but <em>does not contain a cell</em>.
/// <code>InteractableView</code> is a (mostly) thin wrapper around <code>View</code> that exposes parameters for implementing
/// views that a user can <em>directly</em> interact with. It is common for a <code>InteractableView</code> instance to contain
/// <code>View</code> subviews, in cases where the parent view manages its children states and handles events on their
/// behalf.
SWIFT_CLASS_NAMED("InteractableView")
@interface PZMInteractableView : PZMView
/// Determines whether the view is enabled.
/// A disabled view will not accept first responder status and will not advertise itself as an accessibility element.
@property (nonatomic) BOOL enabled;
/// Determines whether the view is enabled.
/// important:
/// This is deprecated; use <code>enabled</code> instead.
@property (nonatomic) BOOL isEnabled SWIFT_DEPRECATED_MSG("", "enabled");
/// The tooltip model for the view; used to display a tooltip after a short delay when the view is hovered.
@property (nonatomic, strong) PZMToolTip * _Nullable toolTipModel;
/// The popover model for the view; used to display a popover when the view is hovered.
/// This value can be safely set to <code>nil</code> if there is no popover to display.
@property (nonatomic, strong) PZMPopover * _Nullable popoverModel;
@property (nonatomic) BOOL requiresTracking;
/// The hotkey shortcut to display on the tooltip for this view; optional.
@property (nonatomic, copy) NSString * _Nullable toolTipKey;
/// The tooltip text to display for this view; optional.
@property (nonatomic, copy) NSString * _Nullable toolTip;
/// Whether the view supports AX events; by default, this returns <a href="doc:/documentation/Prism/InteractableView/isEnabled">doc:/documentation/Prism/InteractableView/isEnabled</a>.
- (BOOL)isAccessibilityEnabled SWIFT_WARN_UNUSED_RESULT;
/// Whether the view advertises itself as an AX element; by default, this returns <a href="doc:/documentation/Prism/InteractableView/isEnabled">doc:/documentation/Prism/InteractableView/isEnabled</a>.
- (BOOL)isAccessibilityElement SWIFT_WARN_UNUSED_RESULT;
/// Whether the view accepts first responder status; by default, this returns <a href="doc:/documentation/Prism/InteractableView/isEnabled">doc:/documentation/Prism/InteractableView/isEnabled</a>.
@property (nonatomic, readonly) BOOL acceptsFirstResponder;
@property (nonatomic) NSFocusRingType focusRingType;
/// Uses <code>boundsBezierPath()</code> to draw a focus ring mask.
/// This function can be safely overridden.
- (void)drawFocusRingMask;
/// The bounds for the focus ring.
/// This variable can be safely overridden.
@property (nonatomic, readonly) NSRect focusRingMaskBounds;
- (void)mouseEntered:(NSEvent * _Nonnull)event;
- (void)mouseExited:(NSEvent * _Nonnull)event;
- (void)mouseDown:(NSEvent * _Nonnull)event;
@property (nonatomic, readonly) BOOL canBecomeKeyView;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum PZMButtonStyle : NSInteger;
enum PZMButtonSize : NSInteger;

/// Prism’s basic button type, used to display text and allow the user to take some action.
/// important:
/// This view manages its own style. Do <em>not</em> attempt to manually change the style of a
/// <code>Button</code> instance.
/// This view allows for horizontal expansion. It can be made wider, <em>but not less wide than</em> its
/// <code>intrinsicContentSize</code>.
/// important:
/// Do <em>not</em> attempt to vertically resize <code>Button</code> instances; a <code>Button</code>’s height is constrained to
/// its <code>intrinsicContentSize</code>.
/// Optionally, this view can also display a trailing or leading icon next to its text label.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=3-1"><em>Figma</em>: Button Design Specification</a>
SWIFT_CLASS_NAMED("Button")
@interface PZMButton : PZMInteractableView <PZMBaseButton>
/// The button’s action, to be invoked when the user interacts with the button.
@property (nonatomic, copy) void (^ _Nonnull action)(id <PZMBaseButton> _Nonnull);
/// Determines whether the button’s action will be executed on a <code>InteractableView/mouseDown(with:)</code> event, as
/// opposed to <code>InteractableView/mouseUp(with:)</code>. Defaults to <code>false</code>.
@property (nonatomic) BOOL runActionOnMouseDown;
@property (nonatomic, copy) NSString * _Nonnull label;
@property (nonatomic) enum PZMCursorState cursorState;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable hoveredBackgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable clickedBackgroundColor;
@property (nonatomic) BOOL wantsLayer;
@property (nonatomic, strong) PrismColor * _Nullable borderColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(NSRect)_ SWIFT_UNAVAILABLE;
/// Creates a button with the given parameters.
/// \param label The label to be shown.
///
/// \param style The button style.
///
/// \param size The button size.
///
/// \param action The action to be taken when the user clicks the button.
///
///
/// returns:
/// A <code>Button</code> instance with the given parameters.
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label style:(enum PZMButtonStyle)style size:(enum PZMButtonSize)size action:(void (^ _Nonnull)(id <PZMBaseButton> _Nonnull))action OBJC_DESIGNATED_INITIALIZER;
/// Creates a button with the given parameters and a trailing icon.
/// \param label The label to be shown.
///
/// \param style The button style.
///
/// \param size The button size.
///
/// \param action The action to be taken when the user clicks the button.
///
/// \param trailingIcon The icon to be shown in the button after the text.
///
///
/// returns:
/// A <code>Button</code> instance with the given parameters.
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label style:(enum PZMButtonStyle)style size:(enum PZMButtonSize)size action:(void (^ _Nonnull)(id <PZMBaseButton> _Nonnull))action trailingIcon:(NSImage * _Nonnull)trailingIcon OBJC_DESIGNATED_INITIALIZER;
/// Creates a button with the given parameters and a leading icon.
/// \param label The label to be shown.
///
/// \param style The button style.
///
/// \param size The button size.
///
/// \param action The action to be taken when the user clicks the button.
///
/// \param leadingIcon The icon to be shown in the button before the text.
///
///
/// returns:
/// A <code>Button</code> instance with the given parameters.
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label style:(enum PZMButtonStyle)style size:(enum PZMButtonSize)size action:(void (^ _Nonnull)(id <PZMBaseButton> _Nonnull))action leadingIcon:(NSImage * _Nonnull)leadingIcon OBJC_DESIGNATED_INITIALIZER;
/// Creates a button with the given parameters.
/// \param withLabel The label to be shown.
///
/// \param style The button style.
///
/// \param size The button size.
///
/// \param action The action to be taken when the user clicks the button.
///
///
/// returns:
/// A <code>Button</code> instance with the given parameters.
+ (PZMButton * _Nonnull)buttonWithLabel:(NSString * _Nonnull)withLabel style:(enum PZMButtonStyle)style size:(enum PZMButtonSize)size action:(void (^ _Nonnull)(id <PZMBaseButton> _Nonnull))action SWIFT_WARN_UNUSED_RESULT;
/// Creates a button with the given parameters and a trailing icon.
/// \param withLabel The label to be shown.
///
/// \param style The button style.
///
/// \param size The button size.
///
/// \param action The action to be taken when the user clicks the button.
///
/// \param trailingIcon The icon to be shown in the button after the text.
///
///
/// returns:
/// A <code>Button</code> instance with the given parameters.
+ (PZMButton * _Nonnull)buttonWithLabel:(NSString * _Nonnull)withLabel style:(enum PZMButtonStyle)style size:(enum PZMButtonSize)size action:(void (^ _Nonnull)(id <PZMBaseButton> _Nonnull))action leadingIcon:(NSImage * _Nonnull)leadingIcon SWIFT_WARN_UNUSED_RESULT;
/// Creates a button with the given parameters and a leading icon.
/// \param withLabel The label to be shown.
///
/// \param style The button style.
///
/// \param size The button size.
///
/// \param action The action to be taken when the user clicks the button.
///
/// \param leadingIcon The icon to be shown in the button before the text.
///
///
/// returns:
/// A <code>Button</code> instance with the given parameters.
+ (PZMButton * _Nonnull)buttonWithLabel:(NSString * _Nonnull)withLabel style:(enum PZMButtonStyle)style size:(enum PZMButtonSize)size action:(void (^ _Nonnull)(id <PZMBaseButton> _Nonnull))action trailingIcon:(NSImage * _Nonnull)trailingIcon SWIFT_WARN_UNUSED_RESULT;
/// Displays the button’s progress indicator and starts its animation.
- (void)showProgressIndicator;
/// Hides the button’s progress indicator.
- (void)hideProgressIndicator;
/// Handles the mouse down event.
/// If <code>runActionOnMouseDown</code> is set, the action is executed.
- (void)mouseDown:(NSEvent * _Nonnull)event;
/// Handles the mouse up event.
/// If <code>runActionOnMouseDown</code> is not set, the action is executed.
- (void)mouseUp:(NSEvent * _Nonnull)event;
/// Handles the key up event and sets the cursor state accordingly.
- (void)keyDown:(NSEvent * _Nonnull)event;
/// Handles the key up event and sets the cursor state accordingly.
- (void)keyUp:(NSEvent * _Nonnull)event;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
@property (nonatomic, readonly) BOOL wantsUpdateLayer;
- (void)updateLayer;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityTitle SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
@end

/// The button styles, as defined in the design specification.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMButtonStyle, "Style", open) {
/// The primary button style.
  PZMButtonStylePrimary = 0,
/// The secondary button style.
  PZMButtonStyleSecondary = 1,
/// The tertiary button style.
  PZMButtonStyleTertiary = 2,
/// The primary button style that indicates danger, for destructive actions.
  PZMButtonStylePrimaryDestructive = 3,
/// The secondary button style that indicates danger, for destructive actions.
  PZMButtonStyleSecondaryDestructive = 4,
/// The tertiary button style that indicates danger, for destructive actions.
  PZMButtonStyleTertiaryDestructive = 5,
};

/// The available button sizes.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMButtonSize, "Size", open) {
/// The small button size.
  PZMButtonSizeSmall = 0,
/// The medium button size.
  PZMButtonSizeMedium = 1,
};

@class PZMCheckboxItem;

/// Prism’s checkbox group view, used to display several checkboxes together as one single view.
/// This view is responsible for the layout of its checkbox items.
/// important:
/// Never attempt to make a <code>CheckboxGroupView</code> instance smaller than its <code>intrinsicContentSize</code>.
SWIFT_CLASS_NAMED("CheckboxGroupView")
@interface PZMCheckboxGroupView : PZMView
/// Instantiates a new checkbox group item with the given checkboxes and optional title.
/// \param items One or more <code>CheckboxView/Item</code> instances to be displayed in the group; required.
///
/// \param title A section title to display; optional.
///
///
/// returns:
/// A new <code>CheckboxGroupView</code> instance.
- (nonnull instancetype)initWithItems:(NSArray<PZMCheckboxItem *> * _Nonnull)items title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


/// Prism’s selectable view protocol.
/// <code>Selectable</code> is useful for defining consistent APIs with
/// stateful controls that may be selected via user interaction or application state changes.
SWIFT_PROTOCOL_NAMED("Selectable")
@protocol PZMSelectable <PZMBaseView>
/// Whether the view is selected.
@property (nonatomic) BOOL selected;
@end

enum PZMCheckboxViewState : NSInteger;

/// Prism’s checkbox view, used to toggle an option on or off.
/// <code>CheckboxView</code> instances display a checkbox and a label, and handle user keyboard and mouse events. A
/// <code>CheckboxView</code> instance may also have children, useful for an option with “sub-options”. A checkbox with
/// children will set its children’s statuses when it is toggled and will update its own selection state
/// when any of its children are toggled.
/// <ul>
///   <li>
///     See Also: <code>Item</code> for the model object to create a checkbox view instance with children.
///   </li>
/// </ul>
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-3"><em>Figma</em>: Checkbox Design Specification</a>
SWIFT_CLASS_NAMED("CheckboxView")
@interface PZMCheckboxView : PZMInteractableView <PZMSelectable>
/// The checkbox’s selection state.
@property (nonatomic) enum PZMCheckboxViewState state;
@property (nonatomic) BOOL selected;
@property (nonatomic) BOOL requiresTracking;
@property (nonatomic) enum PZMCursorState cursorState;
/// The checkbox label.
@property (nonatomic, copy) NSString * _Nonnull text;
/// An optional action to take when the state of the checkbox is changed.
@property (nonatomic, copy) void (^ _Nullable onStateChange)(PZMCheckboxView * _Nonnull);
/// Creates a checkbox from a <code>Item</code>.
/// This is useful for more complex checkboxes that have children and/or sub-options.
/// \param item The group item model.
///
///
/// returns:
/// A new <code>CheckboxView</code> instance.
- (nonnull instancetype)initWithItem:(PZMCheckboxItem * _Nonnull)item;
/// Creates a checkbox with the given text.
/// \param text The checkbox’s label.
///
///
/// returns:
/// A new <code>CheckboxView</code> instance.
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)mouseUp:(NSEvent * _Nonnull)event;
@property (nonatomic) NSSize intrinsicContentSize;
- (void)keyDown:(NSEvent * _Nonnull)event;
@property (nonatomic, readonly) BOOL wantsUpdateLayer;
- (void)updateLayer;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityTitle SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

/// A list of the possible checkbox states.
/// note:
/// <code>partial</code> is only applicable for a checkbox with children, where its children contain at least one
/// <code>selected</code> and at least one <code>deselected</code>, or one <code>partial</code> (if they have children of their own).
typedef SWIFT_ENUM_NAMED(NSInteger, PZMCheckboxViewState, "State", open) {
  PZMCheckboxViewStateSelected = 0,
  PZMCheckboxViewStatePartial = 1,
  PZMCheckboxViewStateDeselected = 2,
};


/// Prism’s checkbox group model.
/// <code>Item</code> are simple objects that contain text for a checkbox and, optionally,
/// an array of <code>Item</code> instances to be displayed as its children. Child items may contain
/// their own children.
SWIFT_CLASS_NAMED("Item")
@interface PZMCheckboxItem : NSObject
/// The text to be displayed on the checkbox’s label.
@property (nonatomic, copy) NSString * _Nonnull text;
/// The list of children to be displayed along with the checkbox.
@property (nonatomic, copy) NSArray<PZMCheckboxItem *> * _Nullable children;
/// An optional trailing icon to be displayed.
@property (nonatomic, strong) NSImage * _Nullable icon;
/// An optional popover to be displayed when <code>icon</code> is hovered.
/// note:
/// If <code>icon</code> is <code>nil</code>, this value is unused.
@property (nonatomic, strong) PZMPopover * _Nullable iconPopover;
/// The starting selection state for this checkbox item.
@property (nonatomic) BOOL isSelected;
/// An optional action to take when the state of the checkbox is changed.
@property (nonatomic, copy) void (^ _Nullable onStateChange)(PZMCheckboxView * _Nonnull);
/// Creates a new checkbox group item model object.
/// \param text The text to be displayed on the checkbox’s label.
///
/// \param children The list of children to be displayed along with this checkbox.
///
/// \param isSelected Whether the checkbox will be selected at instantiation time.
///
/// \param onStateChange A closure to be invoked when the state of the checkbox changes.
///
///
/// returns:
/// A new <code>Item</code> instance with the given label.
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text children:(NSArray<PZMCheckboxItem *> * _Nullable)children isSelected:(BOOL)isSelected onStateChange:(void (^ _Nullable)(PZMCheckboxView * _Nonnull))onStateChange OBJC_DESIGNATED_INITIALIZER;
/// Creates a new checkbox group item model object.
/// \param text The text to be displayed on the checkbox’s label.
///
/// \param children The list of children to be displayed along with this checkbox.
///
/// \param icon A trailing icon to be shown next to the text.
///
/// \param popover The popover to show when the icon is hovered.
///
/// \param isSelected Whether the checkbox will be selected at instantiation time.
///
/// \param onStateChange A closure to be invoked when the state of the checkbox changes.
///
///
/// returns:
/// A new <code>Item</code> instance with the given label.
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text children:(NSArray<PZMCheckboxItem *> * _Nullable)children icon:(NSImage * _Nonnull)icon iconPopover:(PZMPopover * _Nonnull)iconPopover isSelected:(BOOL)isSelected onStateChange:(void (^ _Nullable)(PZMCheckboxView * _Nonnull))onStateChange OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSStoryboard;
@class NSBundle;

SWIFT_CLASS_NAMED("ChipGroupCollectionItem")
@interface PZMChipGroupCollectionItem : NSCollectionViewItem
@property (nonatomic, readonly, copy) NSNibName _Nullable nibName;
@property (nonatomic, readonly, strong) NSStoryboard * _Nullable storyboard;
@property (nonatomic, readonly, strong) NSBundle * _Nullable nibBundle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSNibName _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)loadView;
@end

enum PZMChipViewSize : NSInteger;
@class NSCollectionView;
@class NSIndexPath;
@class NSCollectionViewLayout;

SWIFT_CLASS_NAMED("ChipGroupView")
@interface PZMChipGroupView : PZMInteractableView <NSCollectionViewDataSource, NSCollectionViewDelegateFlowLayout>
- (nonnull instancetype)initWithItems:(NSArray<NSString *> * _Nonnull)items selectedIndex:(NSInteger)selectedIndex chipSize:(enum PZMChipViewSize)chipSize OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (NSCollectionViewItem * _Nonnull)collectionView:(NSCollectionView * _Nonnull)collectionView itemForRepresentedObjectAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(NSCollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSSize)collectionView:(NSCollectionView * _Nonnull)collectionView layout:(NSCollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ChipView")
@interface PZMChipView : PZMInteractableView <PZMSelectable>
@property (nonatomic) BOOL selected;
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable hoveredBackgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable clickedBackgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable borderColor;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic) CGFloat cornerRadius;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic) NSSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PZMChipViewSize, "Size", open) {
  PZMChipViewSizeSmall = 0,
  PZMChipViewSizeMedium = 1,
};

@class NSColorSpace;

/// Prism’s self-managed color type.
/// <code>Color</code> instances offer light/dark theme support and return the correct color value for a property
/// depending on the current drawing appearance and their set values.
SWIFT_CLASS_NAMED("Color")
@interface PrismColor : NSColor
/// The color’s value for light drawing appearances.
@property (nonatomic, strong) NSColor * _Nonnull lightColor;
/// The color’s value for dark drawing appearances.
@property (nonatomic, strong) NSColor * _Nonnull darkColor;
/// Creates a new clear color instance.
///
/// returns:
/// A new <code>Color</code> instance, with light and dark colors set to <code>NSColor.clear</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new color instance with light and dark colors.
/// \param lightColor The color to be used for light drawing appearances.
///
/// \param darkColor The color to be used for dark drawing appearances.
///
///
/// returns:
/// A new <code>Color</code> instance, with light and dark colors set appropriately.
- (nonnull instancetype)initWithLightColor:(NSColor * _Nonnull)lightColor darkColor:(NSColor * _Nonnull)darkColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithPasteboardPropertyList:(id _Nonnull)propertyList ofType:(NSPasteboardType _Nonnull)type SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Creates a color from another <code>Color</code> instance.
/// \param color The <code>Color</code> to copy.
///
///
/// returns:
/// A copy of the given <code>Color</code>.
+ (PrismColor * _Nonnull)colorWithCopiedFrom:(PrismColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Creates a color with an <code>NSColor</code> instance.
/// \param color The <code>NSColor</code> to use for both light and dark themes.
///
///
/// returns:
/// A <code>Color</code> instance with the given color.
+ (PrismColor * _Nonnull)colorWithColor:(NSColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Creates a color with <code>NSColor</code> instances for light and dark themes.
/// \param light The <code>NSColor</code> to use for light themes.
///
/// \param dark The <code>NSColor</code> to use for dark themes.
///
///
/// returns:
/// A <code>Color</code> instance with the given colors.
+ (PrismColor * _Nonnull)colorWithLight:(NSColor * _Nonnull)light dark:(NSColor * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// Creates a color with RGB integer values for light and dark themes.
/// \param lightHex The RGB integer value to use for light themes, from 0 to 0xffffff.
///
/// \param darkHex The RGB integer to use for dark themes, from 0 to 0xffffff.
///
///
/// returns:
/// A <code>Color</code> instance with the given colors.
+ (PrismColor * _Nonnull)colorWithLightHex:(NSUInteger)lightHex darkHex:(NSUInteger)darkHex SWIFT_WARN_UNUSED_RESULT;
/// Creates a color with RGB integer and alpha values for light and dark themes.
/// \param light The RGB integer value to use for light themes, from 0 to 0xffffff.
///
/// \param lightAlpha The alpha value for the light color, from 0 to 1.
///
/// \param dark The RGB integer to use for dark themes, from 0 to 0xffffff.
///
/// \param darkAlpha The alpha value for the dark color, from 0 to 1.
///
///
/// returns:
/// A <code>Color</code> instance with the given colors.
+ (PrismColor * _Nonnull)colorWithLightHex:(NSUInteger)light lightAlpha:(CGFloat)lightAlpha darkHex:(NSUInteger)darkHex darkAlpha:(CGFloat)darkAlpha SWIFT_WARN_UNUSED_RESULT;
+ (PrismColor * _Nonnull)colorWithLightRed:(CGFloat)lightRed lightGreen:(CGFloat)lightGreen lightBlue:(CGFloat)lightBlue lightAlpha:(CGFloat)lightAlpha darkRed:(CGFloat)darkRed darkGreen:(CGFloat)darkGreen darkBlue:(CGFloat)darkBlue darkAlpha:(CGFloat)darkAlpha SWIFT_WARN_UNUSED_RESULT;
/// The color space for the calculated current color. See <code>NSColor.colorSpace</code>.
@property (nonatomic, readonly, strong) NSColorSpace * _Nonnull colorSpace;
/// Invokes <code>.set()</code> on the calculated current color. See <code>NSColor.set</code>.
- (void)set;
/// Invokes <code>.setFill()</code> on the calculated current color. See <code>NSColor.setFill</code>.
- (void)setFill;
/// Invokes <code>.setStroke()</code> on the calculated current color. See <code>NSColor.setStroke</code>.
- (void)setStroke;
/// Returns the color type for the calculated current color. See <code>NSColor.type</code>.
@property (nonatomic, readonly) NSColorType type;
/// Returns <code>.usingType(type:)</code> for the calculated current color. See <code>NSColor.usingType</code>.
- (NSColor * _Nullable)colorUsingType:(NSColorType)type SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>.getComponents(components:)</code> for the calculated current color. See <code>NSColor.getComponents</code>.
- (void)getComponents:(CGFloat * _Nonnull)components;
/// Returns the <code>CGColor</code> for the calculated current color.
@property (nonatomic, readonly) CGColorRef _Nonnull CGColor;
/// Returns the number of components for the calculated current color.
@property (nonatomic, readonly) NSInteger numberOfComponents;
/// Returns a copy of itself with the given alpha component for light and dark themes. See
/// <code>NSColor.withAlphaComponent</code>.
- (PrismColor * _Nonnull)colorWithAlphaComponent:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
/// Returns a copy of itself with the given color space for light and dark themes. See <code>NSColor.usingColorSpace</code>.
- (PrismColor * _Nullable)colorUsingColorSpace:(NSColorSpace * _Nonnull)space SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>.redComponent</code> for the calculated current color. See <code>NSColor.redComponent</code>.
@property (nonatomic, readonly) CGFloat redComponent;
/// Returns <code>.greenComponent</code> for the calculated current color. See <code>NSColor.greenComponent</code>.
@property (nonatomic, readonly) CGFloat greenComponent;
/// Returns <code>.blueComponent</code> for the calculated current color. See <code>NSColor.blueComponent</code>.
@property (nonatomic, readonly) CGFloat blueComponent;
/// Returns <code>.alphaComponent</code> for the calculated current color. See <code>NSColor.alphaComponent</code>.
@property (nonatomic, readonly) CGFloat alphaComponent;
/// Returns the RGBA components for the calculated current color. See <code>NSColor.getRed(_:, green:, blue:, alpha:)</code>.
- (void)getRed:(CGFloat * _Nullable)red green:(CGFloat * _Nullable)green blue:(CGFloat * _Nullable)blue alpha:(CGFloat * _Nullable)alpha;
/// Returns <code>.hueComponent</code> for the calculated current color. See <code>NSColor.hueComponent</code>.
@property (nonatomic, readonly) CGFloat hueComponent;
/// Returns <code>.saturationComponent</code> for the calculated current color. See <code>NSColor.saturationComponent</code>.
@property (nonatomic, readonly) CGFloat saturationComponent;
/// Returns <code>.brightnessComponent</code> for the calculated current color. See <code>NSColor.brightnessComponent</code>.
@property (nonatomic, readonly) CGFloat brightnessComponent;
/// Returns the HSBA components for the calculated current color. See
/// <code>NSColor.getHue(_:, saturation:, brightness:, alpha:)</code>.
- (void)getHue:(CGFloat * _Nullable)hue saturation:(CGFloat * _Nullable)saturation brightness:(CGFloat * _Nullable)brightness alpha:(CGFloat * _Nullable)alpha;
/// Returns <code>.whiteComponent</code> for the calculated current color. See <code>NSColor.whiteComponent</code>.
@property (nonatomic, readonly) CGFloat whiteComponent;
/// Returns <code>.cyanComponent</code> for the calculated current color. See <code>NSColor.cyanComponent</code>.
@property (nonatomic, readonly) CGFloat cyanComponent;
/// Returns <code>.magentaComponent</code> for the calculated current color. See <code>NSColor.magentaComponent</code>.
@property (nonatomic, readonly) CGFloat magentaComponent;
/// Returns <code>.yellowComponent</code> for the calculated current color. See <code>NSColor.yellowComponent</code>.
@property (nonatomic, readonly) CGFloat yellowComponent;
/// Returns <code>.blackComponent</code> for the calculated current color. See <code>NSColor.blackComponent</code>.
@property (nonatomic, readonly) CGFloat blackComponent;
/// Returns the CMYKA components for the calculated current color. See
/// <code>NSColor.getCyan(_:, magenta:, yellow:, black:, alpha:)</code>.
- (void)getCyan:(CGFloat * _Nullable)cyan magenta:(CGFloat * _Nullable)magenta yellow:(CGFloat * _Nullable)yellow black:(CGFloat * _Nullable)black alpha:(CGFloat * _Nullable)alpha;
@end


@interface PrismColor (SWIFT_EXTENSION(Prism))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull backgroundDefault;)
+ (PrismColor * _Nonnull)backgroundDefault SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull backgroundNeutral;)
+ (PrismColor * _Nonnull)backgroundNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderComplementary;)
+ (PrismColor * _Nonnull)borderComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderError;)
+ (PrismColor * _Nonnull)borderError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderNeutral;)
+ (PrismColor * _Nonnull)borderNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderPrimary;)
+ (PrismColor * _Nonnull)borderPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStrongComplementary;)
+ (PrismColor * _Nonnull)borderStrongComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStrongError;)
+ (PrismColor * _Nonnull)borderStrongError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStrongNeutral;)
+ (PrismColor * _Nonnull)borderStrongNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStrongPrimary;)
+ (PrismColor * _Nonnull)borderStrongPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStrongSuccess;)
+ (PrismColor * _Nonnull)borderStrongSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStrongSupplementary1;)
+ (PrismColor * _Nonnull)borderStrongSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStrongSupplementary2;)
+ (PrismColor * _Nonnull)borderStrongSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStrongWarning;)
+ (PrismColor * _Nonnull)borderStrongWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStubtleComplementary;)
+ (PrismColor * _Nonnull)borderStubtleComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStubtleSuccess;)
+ (PrismColor * _Nonnull)borderStubtleSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStubtleSupplementary1;)
+ (PrismColor * _Nonnull)borderStubtleSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderStubtleSupplementary2;)
+ (PrismColor * _Nonnull)borderStubtleSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderSubtleError;)
+ (PrismColor * _Nonnull)borderSubtleError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderSubtleNeutral;)
+ (PrismColor * _Nonnull)borderSubtleNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderSubtlePrimary;)
+ (PrismColor * _Nonnull)borderSubtlePrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderSubtleWarning;)
+ (PrismColor * _Nonnull)borderSubtleWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderSuccess;)
+ (PrismColor * _Nonnull)borderSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderSupplementary1;)
+ (PrismColor * _Nonnull)borderSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderSupplementary2;)
+ (PrismColor * _Nonnull)borderSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull borderWarning;)
+ (PrismColor * _Nonnull)borderWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull componentBorder;)
+ (PrismColor * _Nonnull)componentBorder SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillBlendStrongTransparent;)
+ (PrismColor * _Nonnull)fillBlendStrongTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillBlendSubtleTransparent;)
+ (PrismColor * _Nonnull)fillBlendSubtleTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillBlendTransparent;)
+ (PrismColor * _Nonnull)fillBlendTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillComplementary;)
+ (PrismColor * _Nonnull)fillComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillContraryStrongTransparent;)
+ (PrismColor * _Nonnull)fillContraryStrongTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillContrarySubtleTransparent;)
+ (PrismColor * _Nonnull)fillContrarySubtleTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillContraryTransparent;)
+ (PrismColor * _Nonnull)fillContraryTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillDefault;)
+ (PrismColor * _Nonnull)fillDefault SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillError;)
+ (PrismColor * _Nonnull)fillError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillGlobalDarkTransparent;)
+ (PrismColor * _Nonnull)fillGlobalDarkTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillGlobalError;)
+ (PrismColor * _Nonnull)fillGlobalError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillGlobalLightTransparent;)
+ (PrismColor * _Nonnull)fillGlobalLightTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillGlobalPrimary;)
+ (PrismColor * _Nonnull)fillGlobalPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillGlobalStrongDarkTransparent;)
+ (PrismColor * _Nonnull)fillGlobalStrongDarkTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillGlobalStrongLightTransparent;)
+ (PrismColor * _Nonnull)fillGlobalStrongLightTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillGlobalSubtleDarkTransparent;)
+ (PrismColor * _Nonnull)fillGlobalSubtleDarkTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillGlobalSubtleLightTransparent;)
+ (PrismColor * _Nonnull)fillGlobalSubtleLightTransparent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillNeutral;)
+ (PrismColor * _Nonnull)fillNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillPrimary;)
+ (PrismColor * _Nonnull)fillPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtleNeutral;)
+ (PrismColor * _Nonnull)fillSubtleNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtlerComplementary;)
+ (PrismColor * _Nonnull)fillSubtlerComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtlerError;)
+ (PrismColor * _Nonnull)fillSubtlerError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtlerNeutral;)
+ (PrismColor * _Nonnull)fillSubtlerNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtlerPrimary;)
+ (PrismColor * _Nonnull)fillSubtlerPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtlerSuccess;)
+ (PrismColor * _Nonnull)fillSubtlerSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtlerSupplementary1;)
+ (PrismColor * _Nonnull)fillSubtlerSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtlerSupplementary2;)
+ (PrismColor * _Nonnull)fillSubtlerSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSubtlerWarning;)
+ (PrismColor * _Nonnull)fillSubtlerWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSuccess;)
+ (PrismColor * _Nonnull)fillSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSupplementary1;)
+ (PrismColor * _Nonnull)fillSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillSupplementary2;)
+ (PrismColor * _Nonnull)fillSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull fillWarning;)
+ (PrismColor * _Nonnull)fillWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull iconComplementary;)
+ (PrismColor * _Nonnull)iconComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull iconError;)
+ (PrismColor * _Nonnull)iconError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull iconNeutral;)
+ (PrismColor * _Nonnull)iconNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull iconPrimary;)
+ (PrismColor * _Nonnull)iconPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull iconSuccess;)
+ (PrismColor * _Nonnull)iconSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull iconSupplementary1;)
+ (PrismColor * _Nonnull)iconSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull iconSupplementary2;)
+ (PrismColor * _Nonnull)iconSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull iconWarning;)
+ (PrismColor * _Nonnull)iconWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull inverseDefault;)
+ (PrismColor * _Nonnull)inverseDefault SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull inverseGlobalDefault;)
+ (PrismColor * _Nonnull)inverseGlobalDefault SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull inverseNeutral;)
+ (PrismColor * _Nonnull)inverseNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull complementaryHovered;)
+ (PrismColor * _Nonnull)complementaryHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull complementaryPressed;)
+ (PrismColor * _Nonnull)complementaryPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull contraryStrongTransparentHovered;)
+ (PrismColor * _Nonnull)contraryStrongTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull contraryStrongTransparentPressed;)
+ (PrismColor * _Nonnull)contraryStrongTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull contrarySubtleTransparentHovered;)
+ (PrismColor * _Nonnull)contrarySubtleTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull contrarySubtleTransparentPressed;)
+ (PrismColor * _Nonnull)contrarySubtleTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull contraryTransparentHovered;)
+ (PrismColor * _Nonnull)contraryTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull contraryTransparentPressed;)
+ (PrismColor * _Nonnull)contraryTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull disable;)
+ (PrismColor * _Nonnull)disable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull errorHovered;)
+ (PrismColor * _Nonnull)errorHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull errorPressed;)
+ (PrismColor * _Nonnull)errorPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalDarkTransparentHovered;)
+ (PrismColor * _Nonnull)globalDarkTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalDarkTransparentPressed;)
+ (PrismColor * _Nonnull)globalDarkTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalDisabled;)
+ (PrismColor * _Nonnull)globalDisabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalLightTransparentHovered;)
+ (PrismColor * _Nonnull)globalLightTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalLightTransparentPressed;)
+ (PrismColor * _Nonnull)globalLightTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalStrongDarkTransparentHovered;)
+ (PrismColor * _Nonnull)globalStrongDarkTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalStrongDarkTransparentPressed;)
+ (PrismColor * _Nonnull)globalStrongDarkTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalStrongLightTransparentHovered;)
+ (PrismColor * _Nonnull)globalStrongLightTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalStrongLightTransparentPressed;)
+ (PrismColor * _Nonnull)globalStrongLightTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalSubtleDarkTransparentHovered;)
+ (PrismColor * _Nonnull)globalSubtleDarkTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalSubtleDarkTransparentPressed;)
+ (PrismColor * _Nonnull)globalSubtleDarkTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalSubtleLightTransparentHovered;)
+ (PrismColor * _Nonnull)globalSubtleLightTransparentHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull globalSubtleLightTransparentPressed;)
+ (PrismColor * _Nonnull)globalSubtleLightTransparentPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull hover;)
+ (PrismColor * _Nonnull)hover SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull inactive;)
+ (PrismColor * _Nonnull)inactive SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull neutralHovered;)
+ (PrismColor * _Nonnull)neutralHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull neutralPressed;)
+ (PrismColor * _Nonnull)neutralPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull press;)
+ (PrismColor * _Nonnull)press SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull primaryHovered;)
+ (PrismColor * _Nonnull)primaryHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull primaryPressed;)
+ (PrismColor * _Nonnull)primaryPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleComplementaryHovered;)
+ (PrismColor * _Nonnull)subtleComplementaryHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleComplementaryPressed;)
+ (PrismColor * _Nonnull)subtleComplementaryPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleDisabled;)
+ (PrismColor * _Nonnull)subtleDisabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleErrorDisabled;)
+ (PrismColor * _Nonnull)subtleErrorDisabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleErrorHovered;)
+ (PrismColor * _Nonnull)subtleErrorHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleErrorPressed;)
+ (PrismColor * _Nonnull)subtleErrorPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleNeutralHovered;)
+ (PrismColor * _Nonnull)subtleNeutralHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleNeutralPressed;)
+ (PrismColor * _Nonnull)subtleNeutralPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtlePrimaryDisabled;)
+ (PrismColor * _Nonnull)subtlePrimaryDisabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtlePrimaryHovered;)
+ (PrismColor * _Nonnull)subtlePrimaryHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtlePrimaryPressed;)
+ (PrismColor * _Nonnull)subtlePrimaryPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleSuccessHovered;)
+ (PrismColor * _Nonnull)subtleSuccessHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleSuccessPressed;)
+ (PrismColor * _Nonnull)subtleSuccessPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleSupplementary1Hovered;)
+ (PrismColor * _Nonnull)subtleSupplementary1Hovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleSupplementary1Pressed;)
+ (PrismColor * _Nonnull)subtleSupplementary1Pressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleWarningHovered;)
+ (PrismColor * _Nonnull)subtleWarningHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull subtleWarningPressed;)
+ (PrismColor * _Nonnull)subtleWarningPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull successHovered;)
+ (PrismColor * _Nonnull)successHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull successPressed;)
+ (PrismColor * _Nonnull)successPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull supplementary1Hovered;)
+ (PrismColor * _Nonnull)supplementary1Hovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull supplementary1Pressed;)
+ (PrismColor * _Nonnull)supplementary1Pressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull supplementary2Hovered;)
+ (PrismColor * _Nonnull)supplementary2Hovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull supplementary2Pressed;)
+ (PrismColor * _Nonnull)supplementary2Pressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull sutbleSupplementary2Hovered;)
+ (PrismColor * _Nonnull)sutbleSupplementary2Hovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull sutbleSupplementary2Pressed;)
+ (PrismColor * _Nonnull)sutbleSupplementary2Pressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull warningHovered;)
+ (PrismColor * _Nonnull)warningHovered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull warningPressed;)
+ (PrismColor * _Nonnull)warningPressed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textComplementary;)
+ (PrismColor * _Nonnull)textComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textError;)
+ (PrismColor * _Nonnull)textError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textGlobalStrongWarning;)
+ (PrismColor * _Nonnull)textGlobalStrongWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textNeutral;)
+ (PrismColor * _Nonnull)textNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textPrimary;)
+ (PrismColor * _Nonnull)textPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongComplementary;)
+ (PrismColor * _Nonnull)textStrongComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongError;)
+ (PrismColor * _Nonnull)textStrongError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongNeutral;)
+ (PrismColor * _Nonnull)textStrongNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongPrimary;)
+ (PrismColor * _Nonnull)textStrongPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongSuccess;)
+ (PrismColor * _Nonnull)textStrongSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongSupplementary1;)
+ (PrismColor * _Nonnull)textStrongSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongSupplementary2;)
+ (PrismColor * _Nonnull)textStrongSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongWarning;)
+ (PrismColor * _Nonnull)textStrongWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongerComplementary;)
+ (PrismColor * _Nonnull)textStrongerComplementary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongerError;)
+ (PrismColor * _Nonnull)textStrongerError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongerNeutral;)
+ (PrismColor * _Nonnull)textStrongerNeutral SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongerPrimary;)
+ (PrismColor * _Nonnull)textStrongerPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongerSuccess;)
+ (PrismColor * _Nonnull)textStrongerSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongerSupplementary1;)
+ (PrismColor * _Nonnull)textStrongerSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongerSupplementary2;)
+ (PrismColor * _Nonnull)textStrongerSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textStrongerWarning;)
+ (PrismColor * _Nonnull)textStrongerWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textSuccess;)
+ (PrismColor * _Nonnull)textSuccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textSupplementary1;)
+ (PrismColor * _Nonnull)textSupplementary1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textSupplementary2;)
+ (PrismColor * _Nonnull)textSupplementary2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull textWarning;)
+ (PrismColor * _Nonnull)textWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PrismColor * _Nonnull underlayDark;)
+ (PrismColor * _Nonnull)underlayDark SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>Invertible</code> declares a protocol for views that have special styles
/// that need to be displayed against a different color background.
SWIFT_PROTOCOL_NAMED("Invertible")
@protocol PZMInvertible
/// Whether the view is currently inverted.
/// important:
/// When implementing a view that conforms to <code>InvertibleView</code>,
/// the view should support setting <code>isInverted</code> directly, and should update itself accordingly.
@property (nonatomic) BOOL inverted;
/// Inverts the view.
/// Invoking this is equivalent to setting <code>inverted</code>.
- (void)invert;
@end


/// Prism’s counter view, typically used for unread message or notification counts.
/// The view manages its own counter and draws it on screen.
/// <code>CounterView</code> instances, like other Prism views, resize themselves. No action is needed other than
/// setting <code>CounterView/count</code>, or calling <code>CounterView/increment()</code> or <code>CounterView/decrement()</code>.
/// note:
/// For counts greater than 99, this view displays “99+”. If the count is increased past 100 while
/// the view displays “99+”, the view is not updated. <em>The counter is always kept, regardless of whether
/// the view displays the literal value or “99+”</em>.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-0"><em>Figma</em>: Badge Design Specification</a>
SWIFT_CLASS_NAMED("CounterView")
@interface PZMCounterView : PZMView <PZMInvertible>
/// The count to be displayed on the view.
@property (nonatomic) NSInteger count;
/// An optional string to be read out by voiceover, to specify what is being counted by the view.
/// By default, this view reads out as <code>"\(countString) unread"</code>. In the event that we must specify
/// “unread <em>messages</em>”, for instance, we should set <code>accessibilityCountDescription</code> <code>= "messages"</code>.
@property (nonatomic, copy) NSString * _Nullable accessibilityCountDescription;
/// The corner radius for the counter.
/// This is a design constant and cannot be overridden.
@property (nonatomic) CGFloat cornerRadius;
/// The border width for the counter.
/// This is a design constant and cannot be overridden.
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
@property (nonatomic) BOOL inverted;
- (void)invert;
/// Creates a counter view with a zero count.
/// \param frame A frame for the view; this is ignored.
///
///
/// returns:
/// A <code>CounterView</code> instance, with <code>count</code> <code>= 0</code>.
- (nonnull instancetype)initWithFrame:(NSRect)_ OBJC_DESIGNATED_INITIALIZER;
/// Creates a counter view with a given count.
/// \param count The starting count for the counter view.
///
///
/// returns:
/// A <code>CounterView</code> instance with the given count.
- (nonnull instancetype)initWithCount:(NSInteger)count;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Utility function that returns a counter view with a given count.
/// \param count The starting count for the counter view.
///
///
/// returns:
/// A <code>CounterView</code> with the given count.
+ (PZMCounterView * _Nonnull)makeCounterViewWithCount:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// Increments the count by one, and updates the view’s text label (if necessary).
- (void)increment;
/// Decrements the count by one, and updates the view’s text label (if necessary).
- (void)decrement;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (NSString * _Nullable)accessibilityTitle SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAccessibilityElement SWIFT_WARN_UNUSED_RESULT;
@end

/// The possible states for a view that tracks mouse events.
/// <ul>
///   <li>
///     See also: <code>BaseView</code>.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, PZMCursorState, "CursorState", closed) {
/// A state indicating no interaction.
  PZMCursorStateNormal = 0,
/// A state indicating the cursor is hovered over an element.
  PZMCursorStateHovered = 1,
/// A state indicating the cursor is being held down over an element.
  PZMCursorStateClicked = 2,
};



/// An object that describes an interface to get and set a <code>View</code>’s cursor state.
SWIFT_CLASS_NAMED("CursorStateBinding")
@interface PZMCursorStateBinding : NSObject
/// The cursor state for <code>view</code>.
@property (nonatomic) enum PZMCursorState state;
/// The <code>View</code> instance whose cursor state is bound to this object.
@property (nonatomic, readonly, weak) id <CursorStateBindable> _Nullable view;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PZMDialogViewControllerStyle : NSInteger;
@class PZMDialogViewController;

/// Prism’s dialog model.
/// <code>Dialog</code> instances are used to contain all the information that a dialog displays,
/// including its actions.
/// For more details on the dialog implementation, see <code>DialogViewController</code>.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-8"><em>Figma</em>: Dialog Design Specification</a>
SWIFT_CLASS_NAMED("Dialog")
@interface PZMDialog : NSObject
/// The style of the dialog.
@property (nonatomic) enum PZMDialogViewControllerStyle style;
/// The body of the dialog.
@property (nonatomic, copy) NSString * _Nonnull body;
/// The title of the dialog, if any.
@property (nonatomic, copy) NSString * _Nullable title;
/// The icon to be displayed to the left of the title, if any.
@property (nonatomic, strong) NSImage * _Nullable titleIcon;
/// The action to be taken when the primary button is clicked.
@property (nonatomic, copy) void (^ _Nullable primaryAction)(PZMDialogViewController * _Nonnull);
/// The text of the primary button.
@property (nonatomic, copy) NSString * _Nullable primaryActionText;
/// The action to be taken when the secondary button is clicked.
@property (nonatomic, copy) void (^ _Nullable secondaryAction)(PZMDialogViewController * _Nonnull);
/// The text of the secondary button.
@property (nonatomic, copy) NSString * _Nullable secondaryActionText;
/// The URL that should be opened when the link is clicked, if any.
@property (nonatomic, copy) NSString * _Nullable linkURL;
/// The text to be shown for <code>.linkURL</code>.
@property (nonatomic, copy) NSString * _Nullable linkText;
/// The footnote text.
@property (nonatomic, copy) NSString * _Nullable footnote;
/// The label for the checkbox.
@property (nonatomic, copy) NSString * _Nullable checkboxText;
/// Whether the dialog should show a close button or not.
@property (nonatomic) BOOL showCloseButton;
/// An optional <code>Callable</code> to be invoked when the close button is clicked.
@property (nonatomic, copy) void (^ _Nullable closeButtonHandler)(void);
/// Creates and returns a <code>Dialog</code> instance.
/// \param style The style of the dialog.
///
/// \param body The body of the dialog.
///
///
/// returns:
/// A new <code>Dialog</code> instance.
- (nonnull instancetype)initWithStyle:(enum PZMDialogViewControllerStyle)style body:(NSString * _Nonnull)body OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a <code>Dialog</code> instance with no contents.
///
/// returns:
/// An empty <code>Dialog</code> instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Prism’s dialog view controller; used to display a dialog on screen.
/// <code>DialogViewController</code> instances own a dialog, and are displayed in a <code>Window</code> instance.
SWIFT_CLASS_NAMED("DialogViewController")
@interface PZMDialogViewController : NSViewController
@property (nonatomic, readonly, copy) NSNibName _Nullable nibName;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNibName:(NSNibName _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear;
@end

/// The style of the dialog; determines the width of the dialog.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMDialogViewControllerStyle, "Style", open) {
  PZMDialogViewControllerStyleNarrow = 0,
  PZMDialogViewControllerStyleWide = 1,
};

/// Value representing a direction in an x,y coordinate system.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMDirection, "Direction", open) {
  PZMDirectionDown = 0,
  PZMDirectionUp = 1,
  PZMDirectionLeft = 2,
  PZMDirectionRight = 3,
};

@class PZMMenu;

SWIFT_PROTOCOL_NAMED("MenuDelegate")
@protocol PZMMenuDelegate
@optional
/// Invoked immediately before a dropdown menu dismisses its panel.
/// This function is invoked regardless of whether the window was dismissed programmatically or via
/// user action (such as by hitting <code><escape></code> or by clicking outside of the menu panel).
- (void)dropdownMenuWillDismiss:(PZMMenu * _Nonnull)sender;
/// Invoked when a dropdown menu dismisses its panel.
/// This function is invoked regardless of whether the window was dismissed programmatically or via
/// user action (such as by hitting <code><escape></code> or by clicking outside of the menu panel).
- (void)dropdownMenuDidDismiss:(PZMMenu * _Nonnull)sender;
/// Invoked when a <code>Menu</code> item is selected.
- (void)dropdownMenu:(PZMMenu * _Nonnull)sender didSelectItemAt:(NSInteger)index;
@end


/// Prism’s common base class for all the input field types.
/// warning:
/// Do <em>not</em> attempt to instantiate an <code>InputField</code> directly outside of Prism; use the available
/// subclasses instead.
SWIFT_CLASS_NAMED("InputField")
@interface PZMInputField : PZMView
/// Whether the input field is enabled or not.
@property (nonatomic) BOOL enabled;
/// Whether the input field is in read-only mode.
@property (nonatomic) BOOL readOnly;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)updateLayer;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

@class NSURL;

/// A backwards-compatible bridge to Objective-C for <code>InputField/Decoration</code>.
/// <code>PZMInputFieldDecoration</code> instances map 1:1 to <code>InputField/Decoration</code>.
/// note:
/// You should not instantiate this class directly; instead, use one of the provided static methods
/// that return instances with their corresponding <code>InputField/Decoration</code>.
SWIFT_CLASS_NAMED("_PrismOCBridge_Decoration")
@interface PZMInputFieldDecoration : NSObject
/// Denotes whether the <code>InputField</code> is required or optional.
/// <code>required(true)</code> displays a red asterisk next to the label; <code>required(false)</code> displays
/// “(Optional)” next to the label.
/// warning:
/// Omitting <code>required(_:)</code> is <em>not</em> equivalent to <code>required(false)</code>. To hide the
/// “required” asterisk and the optional label, remove <code>required(_:)</code> from your list of decorations.
/// <ul>
///   <li>
///     See Also: <code>InputField/Decoration/required(_:)</code>
///   </li>
/// </ul>
+ (PZMInputFieldDecoration * _Nonnull)required:(BOOL)isRequired SWIFT_WARN_UNUSED_RESULT;
/// A popover to display when the user hovers the “information” icon next to the label.
+ (PZMInputFieldDecoration * _Nonnull)informationWithPopover:(PZMPopover * _Nonnull)popover SWIFT_WARN_UNUSED_RESULT;
/// A link to display on the top-right corner of the view, above the bubble.
+ (PZMInputFieldDecoration * _Nonnull)linkWithLabel:(NSString * _Nonnull)label :(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// A help string to display under the bubble.
+ (PZMInputFieldDecoration * _Nonnull)help:(NSString * _Nonnull)helpText SWIFT_WARN_UNUSED_RESULT;
/// A character counter with a limit, to be displayed under the bubble.
+ (PZMInputFieldDecoration * _Nonnull)counterWithLimit:(NSInteger)limit SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PZMDropdownViewItem;

/// Prism’s Input Field component that displays a <code>Menu</code> when clicked.
/// <code>DropdownInputField</code> instances contain <code>MenuItem</code> instances, which are used to construct a
/// <code>Menu</code> instance which, in turn, displays a <code>MenuWindow</code>.
/// This is a one-step solution to create a dropdown menu with arbitrary content, but for cases
/// where a dropdown menu must be created from another event (such as a left-click), see <code>Menu</code>.
SWIFT_CLASS_NAMED("DropdownInputField")
@interface PZMDropdownView : PZMInputField <PZMMenuDelegate>
@property (nonatomic) BOOL readOnly;
@property (nonatomic) BOOL enabled;
/// The items to be shown in the menu view.
@property (nonatomic, copy) NSArray<PZMDropdownViewItem *> * _Nonnull items;
/// The currently selected index.
@property (nonatomic) NSInteger selectedIndex;
/// Initializes a new <code>DropdownInputField</code> with the given options.
/// \param header The text to be shown on the control that creates the dropdown menu.
///
/// \param items The items to be displayed on the actual dropdown menu.
///
/// \param selectedIndex The index of the starting selection.
///
/// \param decorations Any <code>InputField/Decoration</code> instances to be displayed around the input field.
///
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header items:(NSArray<PZMDropdownViewItem *> * _Nonnull)items selectedIndex:(NSInteger)selectedIndex _ocDecorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations;
/// Selects the item at <code>index</code>.
/// If <code>index</code> is out of bounds or is already selected, this is a no-op.
/// \param index The index of the item to be selected.
///
- (void)selectWithIndex:(NSInteger)index;
- (void)dropdownMenuWillDismiss:(PZMMenu * _Nonnull)sender;
- (void)dropdownMenuDidDismiss:(PZMMenu * _Nonnull)sender;
- (void)dropdownMenu:(PZMMenu * _Nonnull)sender didSelectItemAt:(NSInteger)index;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityTitle SWIFT_WARN_UNUSED_RESULT;
@end


/// An object corresponding to one item in a <code>DropdownInputField</code>.
/// When the menu is displayed, each <code>Item</code> is displayed in a <code>Menu</code> in its own view; this is managed
/// by the <code>DropdownInputField</code> instance.
SWIFT_CLASS_NAMED("Item")
@interface PZMDropdownViewItem : NSObject
/// The item label.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// An action to be run when the item is seleted.
@property (nonatomic, copy) void (^ _Nullable action)(PZMDropdownViewItem * _Nonnull);
/// An optional context; useful for <code>action</code>.
@property (nonatomic) id _Nullable context;
/// Creates a new <code>Item</code> with a label and optional action and context.
/// \param label The item label.
///
/// \param action An optional action to be invoked when the item is selected.
///
/// \param context An optional context to be stored within the instance.
///
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label action:(void (^ _Nullable)(PZMDropdownViewItem * _Nonnull))action context:(id _Nullable)context OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PZMBaseButtonStyle : NSInteger;

/// Prism’s implementation of the home buttons, to be displayed on a home screen or similar primary display.
SWIFT_CLASS_NAMED("HomeButton")
@interface PZMHomeButton : PZMInteractableView <PZMBaseButton>
@property (nonatomic, copy) void (^ _Nonnull action)(id <PZMBaseButton> _Nonnull);
@property (nonatomic) BOOL runActionOnMouseDown;
@property (nonatomic) BOOL forbidTracking;
@property (nonatomic, readonly) BOOL canBecomeKeyView;
@property (nonatomic, readonly) BOOL acceptsFirstResponder;
/// Initializes a new <code>HomeButton</code> instance.
/// \param label The label to be shown under the button.
///
/// \param style The style for the button.
///
/// \param image The icon to be shown in the button.
///
/// \param action The action to be taken when the button is clicked.
///
///
/// returns:
/// A new <code>HomeButton</code> instance with the given options.
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label style:(enum PZMBaseButtonStyle)style image:(NSImage * _Nonnull)image action:(void (^ _Nonnull)(id <PZMBaseButton> _Nonnull))action OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)showProgressIndicator;
- (void)hideProgressIndicator;
- (BOOL)isAccessibilityElement SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAccessibilityEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

/// The available button styles.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMBaseButtonStyle, "Style", open) {
/// The normal home button style.
/// This style commonly takes a primary button role.
  PZMBaseButtonStyleNormal = 0,
/// The highlighted home button style.
/// This style usually displays an important action that needs to be emphasized.
  PZMBaseButtonStyleHighlighted = 1,
/// The destructive home button style.
/// This style usually displays irreversible actions.
  PZMBaseButtonStyleDestructive = 2,
};

enum PZMIconButtonStyle : NSInteger;
enum PZMIconButtonSize : NSInteger;

/// Prism’s implementation of an icon-only button, useful for contextual menus and other actions.
/// This view manages its own size and style. Do <em>not</em> attempt to manually change the size or style of a <code>IconButton</code>
/// instance.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=3-1"><em>Figma</em>: Button Design Specification</a>
SWIFT_CLASS_NAMED("IconButton")
@interface PZMIconButton : PZMInteractableView <PZMBaseButton>
/// Whether this button supports binary selection states.
@property (nonatomic, readonly) BOOL selectable;
/// The current binary selection state of the button.
@property (nonatomic) BOOL selected;
/// The button’s action, to be invoked when the user interacts with the button.
@property (nonatomic, copy) void (^ _Nonnull action)(id <PZMBaseButton> _Nonnull);
/// Determines whether the button’s action will be executed on a <code>mouseDown(with:)</code> event, as opposed to
/// <code>mouseUp(with:)</code>. Defaults to <code>false</code>.
@property (nonatomic) BOOL runActionOnMouseDown;
/// The icon shown in the button.
@property (nonatomic, strong) NSImage * _Nonnull image;
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) enum PZMCursorState cursorState;
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable hoveredBackgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable clickedBackgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable borderColor;
@property (nonatomic) CGFloat borderWidth;
/// Initializes a new <code>IconButton</code> instance.
/// \param image The icon to be shown in the button.
///
/// \param style The style for the button.
///
/// \param size The size of the button.
///
/// \param action The action to be taken when the button is clicked.
///
///
/// returns:
/// A new <code>IconButton</code> instance with the given options.
- (nonnull instancetype)initWithImage:(NSImage * _Nonnull)image style:(enum PZMIconButtonStyle)style size:(enum PZMIconButtonSize)size action:(void (^ _Nonnull)(id <PZMBaseButton> _Nonnull))action OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(NSRect)_ SWIFT_UNAVAILABLE;
- (void)showProgressIndicator;
- (void)hideProgressIndicator;
/// Handles the mouse down event.
/// If <code>runActionOnMouseDown</code> is set, the action is executed.
- (void)mouseDown:(NSEvent * _Nonnull)event;
/// Handles the mouse up event.
/// If <code>runActionOnMouseDown</code> is not set, the action is executed.
- (void)mouseUp:(NSEvent * _Nonnull)event;
/// Handles the key up event and sets the cursor state accordingly.
- (void)keyDown:(NSEvent * _Nonnull)event;
/// Handles the key up event and sets the cursor state accordingly.
- (void)keyUp:(NSEvent * _Nonnull)event;
- (void)updateLayer;
/// Toggles the selection state of the button instance.
/// important:
/// Only <code>Style/tertiary</code> buttons are selectable; for other <code>Style</code> values,
/// this is a no-op.
- (void)toggle;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
@end

/// The possible icon button styles.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMIconButtonStyle, "Style", open) {
/// The primary icon button style.
  PZMIconButtonStylePrimary = 0,
/// The secodary icon button style.
  PZMIconButtonStyleSecondary = 1,
/// The tertiary icon button style.
  PZMIconButtonStyleTertiary = 2,
/// The overlay icon button style.
/// Buttons of this style are typically used in transparent or translucent overlays.
  PZMIconButtonStyleOverlay = 3,
};

/// The possible icon button sizes.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMIconButtonSize, "Size", open) {
/// The small icon button size.
  PZMIconButtonSizeSmall = 0,
/// The medium icon button size.
  PZMIconButtonSizeMedium = 1,
};





SWIFT_CLASS("_TtC5Prism16LayoutConstraint")
@interface LayoutConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LayoutConstraint (SWIFT_EXTENSION(Prism))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

enum PZMLinkViewStyle : NSInteger;
@class NSLayoutYAxisAnchor;

/// Prism’s Link component, which displays some text and allows the user to open a URL.
/// <code>LinkView</code> is similar to, <em>but not a subclass of</em>, <code>Button</code>. It contains and
/// manages an <code>NSTextField</code> instance to display text.
SWIFT_CLASS_NAMED("LinkView")
@interface PZMLinkView : PZMInteractableView
@property (nonatomic) NSFocusRingType focusRingType;
@property (nonatomic) BOOL requiresTracking;
@property (nonatomic) BOOL enabled;
/// Creates a new <code>LinkView</code> instance with some text, a URL, and optionally a <code>Style</code>.
/// Returns: A new <code>LinkView</code> instance.
/// \param text The label to be displayed.
///
/// \param url The URL to be opened when the link receives an event.
///
/// \param style The <code>Style</code> to be used; optional.
///
/// \param fontSize The font size for the text displayed.
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text url:(NSURL * _Nonnull)url style:(enum PZMLinkViewStyle)style fontSize:(CGFloat)fontSize OBJC_DESIGNATED_INITIALIZER;
/// Creates a new <code>LinkView</code> instance with some text, a URL, and optionally a <code>Style</code>.
/// Returns: A new <code>LinkView</code> instance.
/// \param text The label to be displayed.
///
/// \param url The URL to be opened when the link receives an event.
///
/// \param style The <code>Style</code> to be used; optional.
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text url:(NSURL * _Nonnull)url style:(enum PZMLinkViewStyle)style;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic) NSSize intrinsicContentSize;
- (void)mouseDown:(NSEvent * _Nonnull)event;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)mouseEntered:(NSEvent * _Nonnull)event;
- (void)mouseExited:(NSEvent * _Nonnull)event;
- (void)keyDown:(NSEvent * _Nonnull)event;
/// Sets the view’s URL.
/// This method may be useful when the same <code>LinkView</code> instance is reused with the same
/// text but with different URLs (such as when implementing a page-style control).
/// \param url The new URL.
///
- (void)setURL:(NSURL * _Nonnull)url;
@property (nonatomic, readonly) NSEdgeInsets alignmentRectInsets;
- (NSRect)alignmentRectForFrame:(NSRect)frame SWIFT_WARN_UNUSED_RESULT;
- (NSRect)frameForAlignmentRect:(NSRect)alignmentRect SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) NSLayoutYAxisAnchor * _Nonnull firstBaselineAnchor;
@property (nonatomic, readonly, strong) NSLayoutYAxisAnchor * _Nonnull lastBaselineAnchor;
@property (nonatomic, readonly) CGFloat baselineOffsetFromBottom;
@property (nonatomic, readonly) CGFloat firstBaselineOffsetFromTop;
@property (nonatomic, readonly) CGFloat lastBaselineOffsetFromBottom;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityTitle SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

/// The available styles for a <code>LinkView</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMLinkViewStyle, "Style", open) {
/// The standalone link style.
/// This link style displays a trailing arrow (↗, U+2197) next to the provided label.
  PZMLinkViewStyleStandalone = 0,
/// The inline link style.
/// This link style displays the provided label, correctly styled (including color), but with no
/// extra ornamentation.
  PZMLinkViewStyleInline = 1,
};

@class PZMMenuItem;
enum PZMRectEdge : NSInteger;

/// Prism’s dropdown menu implementation, often used for contextual options.
/// <code>Menu</code> instances manage their own window and lay their items out automatically
/// when shown.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=41282-150295"><em>Figma</em>: Menu Design Specification</a>
SWIFT_CLASS_NAMED("Menu")
@interface PZMMenu : NSObject <NSWindowDelegate, PZMMenuDelegate>
/// The <code>Menu</code>’s delegate object.
/// <ul>
///   <li>
///     See Also: <code>MenuDelegate</code>.
///   </li>
/// </ul>
@property (nonatomic, weak) id <PZMMenuDelegate> _Nullable delegate;
/// The items to be shown in the menu.
@property (nonatomic, copy) NSArray<PZMMenuItem *> * _Nonnull items;
/// An optional desired width for the menu.
/// If <code>desiredWidth</code> is a nonzero, positive number, the menu will attempt to display its view
/// in the set width. If <code>desiredWidth</code> exceeds the maximum width of the <code>Menu</code>, the maximum allowable
/// width will be used instead. If <code>desiredWidth</code> is less than the minimum width required to display the
/// entire contents of the menu, the minimum required width is used instead.
@property (nonatomic) CGFloat desiredWidth;
/// Instantiates a menu with the given items.
/// \param items The items in the menu.
///
///
/// returns:
/// A new <code>Menu</code> instance.
- (nonnull instancetype)initWithItems:(NSArray<PZMMenuItem *> * _Nonnull)_ocItems;
/// Displays the menu with its current items on the screen, positioned relative to a view.
/// The menu’s position on the screen is determined by a reference point in screen space, an anchor point in the
/// menu’s coordinate space, and a direction.
/// The reference point is calculated using a combination of a <code>View</code> and a <code>RectEdge</code> (e.g.,
/// some <code>Button</code>‘s  <code>RectEdge/bottomLeft</code> edge).
/// The anchor point is determined by <code>pinnedBy</code> (e.g., the menu’s <code>RectEdge/topRight</code>), and is placed at the same
/// point on the screen as the reference point.
/// Once the reference point and anchor point are the same point on the screen, the menu is drawn in the given
/// direction. If <code>Direction/up</code> is given, for example, the menu is drawn entirely <em>above</em> the anchor point (if
/// possible, within screen bounds). Conversely, if <code>Direction/down</code> is given, then the menu is drawn entirely
/// <em>below</em> the anchor point (again, if possible).
/// \param edge The corner of the view to be used as a reference point.
///
/// \param view The view whose corner will be used as a reference point.
///
/// \param pinnedBy The edge of <em>the menu</em> to be placed at the reference point.
///
/// \param inDirection The direction that the menu should be displayed in, in relation to the reference point.
///
/// \param horizontalOffset A horizontal offset for the menu’s starting position.
///
/// \param verticalOffset A vertical offset for the menu’s starting position.
///
- (void)appearWithAdjacentTo:(enum PZMRectEdge)edge ofView:(PZMView * _Nonnull)view pinnedBy:(enum PZMRectEdge)pinnedBy inDirection:(enum PZMDirection)inDirection horizontalOffset:(double)horizontalOffset verticalOffset:(double)verticalOffset SWIFT_DEPRECATED_MSG("", "appearAdjacentToEdge:ofView:pinnedBy:inDirection:horizontalOffset:verticalOffset:");
/// Displays the menu with its current items on the screen, positioned relative to a view.
/// The menu’s position on the screen is determined by a reference point in screen space, an anchor point in the
/// menu’s coordinate space, and a direction.
/// The reference point is calculated using a combination of a <code>View</code> and a <code>RectEdge</code> (e.g.,
/// some <code>Button</code>‘s  <code>RectEdge/bottomLeft</code> edge).
/// The anchor point is determined by <code>pinnedBy</code> (e.g., the menu’s <code>RectEdge/topRight</code>), and is placed at the same
/// point on the screen as the reference point.
/// Once the reference point and anchor point are the same point on the screen, the menu is drawn in the given
/// direction. If <code>Direction/up</code> is given, for example, the menu is drawn entirely <em>above</em> the anchor point (if
/// possible, within screen bounds). Conversely, if <code>Direction/down</code> is given, then the menu is drawn entirely
/// <em>below</em> the anchor point (again, if possible).
/// \param edge The corner of the view to be used as a reference point.
///
/// \param view The view whose corner will be used as a reference point.
///
/// \param pinnedBy The edge of <em>the menu</em> to be placed at the reference point.
///
/// \param inDirection The direction that the menu should be displayed in, in relation to the reference point.
///
/// \param horizontalOffset A horizontal offset for the menu’s starting position.
///
/// \param verticalOffset A vertical offset for the menu’s starting position.
///
- (void)appearAdjacentToEdge:(enum PZMRectEdge)edge ofView:(id <PZMBaseView> _Nonnull)view pinnedBy:(enum PZMRectEdge)pinnedBy inDirection:(enum PZMDirection)inDirection horizontalOffset:(double)horizontalOffset verticalOffset:(double)verticalOffset;
/// Invoked immediately before a child is dismissed.
/// \param menu The child menu that will be dismissed.
///
- (void)dropdownMenuWillDismiss:(PZMMenu * _Nonnull)menu;
/// Invoked when a child menu is dismissed.
/// \param menu The child menu that was dismissed.
///
- (void)dropdownMenuDidDismiss:(PZMMenu * _Nonnull)menu;
- (void)dropdownMenu:(PZMMenu * _Nonnull)sender didSelectItemAt:(NSInteger)index;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A backwards-compatible bridge to Objective-C for <code>Menu/Item</code>.
/// <code>PZMMenuItem</code> instances map 1:1 to <code>Menu/Item</code>.
/// note:
/// You should not instantiate this class directly; instead, use one of the provided static methods
/// that return instances with their corresponding <code>Menu/Item</code>.
SWIFT_CLASS_NAMED("_PrismOCBridge_Item")
@interface PZMMenuItem : NSObject
+ (PZMMenuItem * _Nonnull)itemWithLabel:(NSString * _Nonnull)label action:(void (^ _Nonnull)(PZMMenuItem * _Nonnull))ocAction SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "basicItemWithLabel:action:image:direction:");
/// A basic item type that displays some text and invokes an action when appropriate.
/// \param label The label displayed on the menu item.
///
/// \param action The closure to be invoked when the user clicks the item.
///
/// \param image An optional image to be displayed.
///
/// \param in The direction that <code>image</code> should be displayed in; required when <code>image</code> is provided. Must be  <code>Direction/left</code> or <code>Direction/right</code>.
///
+ (PZMMenuItem * _Nonnull)basicItemWithLabel:(NSString * _Nonnull)label action:(void (^ _Nonnull)(PZMMenuItem * _Nonnull))ocAction image:(NSImage * _Nonnull)image direction:(enum PZMDirection)direction SWIFT_WARN_UNUSED_RESULT;
/// A basic item type that displays some text and invokes an action when appropriate.
/// \param label The label displayed on the menu item.
///
/// \param action The closure to be invoked when the user clicks the item.
///
+ (PZMMenuItem * _Nonnull)basicItemWithLabel:(NSString * _Nonnull)label action:(void (^ _Nonnull)(PZMMenuItem * _Nonnull))ocAction SWIFT_WARN_UNUSED_RESULT;
/// A selectable item that displays some text and a check mark when it is selected.
/// This type of item is frequently used in single-selection dropdown menus.
/// \param label The label displayed on the menu item.
///
/// \param selected Whether the item is currently selected.
///
/// \param checkmarkDirection The direction that the checkmark should be displayed in, when the item is selected.
///
/// \param image An image to be displayed in the cell.
///
+ (PZMMenuItem * _Nonnull)selectableItemWithLabel:(NSString * _Nonnull)label selected:(BOOL)selected checkmarkDirection:(enum PZMDirection)checkmarkDirection SWIFT_WARN_UNUSED_RESULT;
/// A selectable item that displays some text and a check mark when it is selected.
/// This type of item is frequently used in single-selection dropdown menus.
/// \param label The label displayed on the menu item.
///
+ (PZMMenuItem * _Nonnull)selectableItemWithLabel:(NSString * _Nonnull)label SWIFT_WARN_UNUSED_RESULT;
/// A selectable item that displays some text and a checkbox.
/// This type of item is frequently used in multiple-selection dropdown menus.
/// \param label The label displayed on the menu item.
///
/// \param state The starting state of the checkbox.
///
/// \param checkboxDirection The direction the checkbox should be displayed in.
///
+ (PZMMenuItem * _Nonnull)checkboxItemWithLabel:(NSString * _Nonnull)label state:(enum PZMCheckboxViewState)state checkboxDirection:(enum PZMDirection)checkboxDirection SWIFT_WARN_UNUSED_RESULT;
/// A selectable item that displays some text and a checkbox.
/// This type of item is frequently used in multiple-selection dropdown menus.
/// \param label The label displayed on the menu item.
///
/// \param state The starting state of the checkbox.
///
+ (PZMMenuItem * _Nonnull)checkboxItemWithLabel:(NSString * _Nonnull)label state:(enum PZMCheckboxViewState)state SWIFT_WARN_UNUSED_RESULT;
/// A selectable item that displays some text and a checkbox.
/// This type of item is frequently used in multiple-selection dropdown menus.
/// \param label The label displayed on the menu item.
///
/// \param state The starting state of the checkbox.
///
+ (PZMMenuItem * _Nonnull)checkboxItemWithLabel:(NSString * _Nonnull)label SWIFT_WARN_UNUSED_RESULT;
/// An item that displays some text denoting a section title.
/// \param title The label displayed on the menu item.
///
+ (PZMMenuItem * _Nonnull)sectionItemWithTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// An item that displays some text and displays a child menu when appropriate.
/// \param label The label displayed on the menu item.
///
/// \param children The <code>Item</code> instances to be displayed in the child menu.
///
/// \param image An optional image to be displayed.
///
/// \param on The direction that <code>image</code> should be displayed in; required when <code>image</code> is provided. Must be  <code>Direction/left</code> or <code>Direction/right</code>.
///
+ (PZMMenuItem * _Nonnull)parentItemWithLabel:(NSString * _Nonnull)label children:(NSArray<PZMMenuItem *> * _Nonnull)children image:(NSImage * _Nonnull)image direction:(enum PZMDirection)direction selectionHandler:(void (^ _Nullable)(PZMMenuItem * _Nonnull, NSInteger))selectionHandler SWIFT_WARN_UNUSED_RESULT;
/// An item that displays some text and displays a child menu when appropriate.
/// \param label The label displayed on the menu item.
///
/// \param children The <code>Item</code> instances to be displayed in the child menu.
///
+ (PZMMenuItem * _Nonnull)parentWithLabel:(NSString * _Nonnull)label children:(NSArray<PZMMenuItem *> * _Nonnull)children SWIFT_WARN_UNUSED_RESULT;
/// An item that displays a divider line.
+ (PZMMenuItem * _Nonnull)dividerItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class PZMModalDecoration;

/// Prism’s model object for modal UI elements, such as popovers and toasts.
/// <code>Modal</code> instances contain all the information, including actions, that make up a
/// modal. Specific types of modal objects may contain additional information, such as an image or a sentiment.
SWIFT_CLASS_NAMED("Modal")
@interface PZMModal : NSObject
/// The body of the modal; required.
@property (nonatomic, copy) NSString * _Nonnull body;
/// A context to be passed to one of the <code>Modal</code>’s button actions, if any.
@property (nonatomic) id _Nullable context;
/// The decorations to be displayed in the modal.
@property (nonatomic, copy) NSArray<PZMModalDecoration *> * _Nonnull decorations;
/// Initializes a modal with a body and optional decorations and context.
/// \param body The body of the modal.
///
/// \param decorations The decorations to be displayed in the modal (see <code>Modal/Decoration</code>).
///
/// \param context An optional context to be passed to a primary or secondary button displayed in the modal.
///
- (nonnull instancetype)initWithBody:(NSString * _Nonnull)body decorations:(NSArray<PZMModalDecoration *> * _Nonnull)decorations context:(id _Nullable)context;
/// Whether this popover contains user-interactable elements.
/// User-interactable elements include:
/// <ul>
///   <li>
///     Link (displayed bottom-left),
///   </li>
///   <li>
///     Close button (displayed top-right) and,
///   </li>
///   <li>
///     Actions (displayed bottom-right).
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL containsInteractables;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A backwards-compatible bridge to Objective-C for <code>Modal/Decoration</code>.
/// <code>PZMModalDecoration</code> instances map 1:1 to <code>Modal/Decoration</code>.
/// note:
/// You should not instantiate this class directly; instead, use one of the provided static methods
/// that return instances with their corresponding <code>Modal/Decoration</code>.
SWIFT_CLASS_NAMED("_PrismOCBridge_Decoration")
@interface PZMModalDecoration : NSObject
/// A title for the notification.
+ (PZMModalDecoration * _Nonnull)title:(NSString * _Nonnull)label SWIFT_WARN_UNUSED_RESULT;
/// A link for the notification; shown in the bottom left.
+ (PZMModalDecoration * _Nonnull)linkWithLabel:(NSString * _Nonnull)label :(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// A close button on the top right.
/// note:
/// This decoration will prevent <code>UserNotification</code>s from being dismissed by a timer. For
/// more detail, see <code>Window</code>.
+ (PZMModalDecoration * _Nonnull)closeButton SWIFT_WARN_UNUSED_RESULT;
/// A primary button, with a given label and action.
/// note:
/// This decoration will prevent <code>UserNotification</code>s from being dismissed by a timer. For
/// more detail, see <code>Window</code>.
/// @available(swift, obsoleted: 0.1, message: “Do not use this type directly in Swift; use Decoration instead.”)
+ (PZMModalDecoration * _Nonnull)primaryButtonWithLabel:(NSString * _Nonnull)label :(void (^ _Nonnull)(id _Nullable))action SWIFT_WARN_UNUSED_RESULT;
/// A secondary button, with a given label and action.
/// note:
/// This decoration will prevent <code>UserNotification</code>s from being dismissed by a timer. For
/// more detail, see <code>Window</code>.
+ (PZMModalDecoration * _Nonnull)secondaryButtonWithLabel:(NSString * _Nonnull)label :(void (^ _Nonnull)(id _Nullable))action SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Prism’s modifier key enum.
/// This is defined for convenience and is typically used to configure or display key combination
/// shortcuts.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMModifierKey, "ModifierKey", open) {
  PZMModifierKeyShift = 0,
  PZMModifierKeyOption = 1,
  PZMModifierKeyCommand = 2,
  PZMModifierKeyControl = 3,
};








@interface NSImage (SWIFT_EXTENSION(Prism))
- (NSImage * _Nonnull)tinted:(PrismColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
+ (NSImage * _Nullable)prismImageForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@end





@interface NSLocale (SWIFT_EXTENSION(Prism))
@property (nonatomic, readonly) BOOL is12Hour;
@property (nonatomic, readonly) BOOL is24Hour;
@end







/// Prism’s notifier view, typically used as a small indicator of unseen activity.
/// <code>NotifierView</code> instances are always the same size. Do <em>not</em> attempt to resize a <code>NotifierView</code> instance.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-0"><em>Figma</em>: Badge Design Specification</a>
SWIFT_CLASS_NAMED("NotifierView")
@interface PZMNotifierView : PZMView <PZMInvertible>
/// The corner radius for the view.
/// This is a design constant and cannot be overridden.
@property (nonatomic) CGFloat cornerRadius;
/// The background color for the view.
/// This is a design constant and cannot be overriden.
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
@property (nonatomic) BOOL inverted;
- (void)invert;
/// Creates a notifier view.
///
/// returns:
/// A <code>NotifierView</code> instance.
- (nonnull instancetype)init;
/// Creates a notifier view.
/// \param frame A frame for the view; this is ignored.
///
///
/// returns:
/// A <code>NotifierView</code> instance.
- (nonnull instancetype)initWithFrame:(NSRect)_ OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class NSNotification;
@class NSControl;
@class NSTextView;

/// Prism’s Input Field component for integer numeric input.
/// <code>NumberInputField</code> instances may enforce minimum and maximum values if desired.
SWIFT_CLASS_NAMED("NumberInputField")
@interface PZMNumberInputField : PZMInputField <NSTextFieldDelegate>
@property (nonatomic) BOOL readOnly;
@property (nonatomic) BOOL enabled;
/// The current integer value of the text field.
@property (nonatomic) NSInteger intValue;
@property (nonatomic, readonly) BOOL wantsUpdateLayer;
@property (nonatomic, copy) void (^ _Nullable onUpdate)(PZMNumberInputField * _Nonnull, double);
/// Instantiates a new <code>NumberInputField</code> with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param decorations Any <code>InputField/Decoration</code> instances to display around the view.
///
/// \param startingValue A starting integer value for the field.
///
/// \param range An optional range that limits the maximum and minimum values for the input.
///
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header decorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations startingValue:(NSInteger)startingValue range:(NSRange)range onUpdate:(void (^ _Nullable)(PZMNumberInputField * _Nonnull, double))onUpdate;
/// Instantiates a new <code>NumberInputField</code> with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param decorations Any <code>InputField/Decoration</code> instances to display around the view.
///
/// \param startingValue A starting integer value for the field.
///
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header decorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations startingValue:(NSInteger)startingValue onUpdate:(void (^ _Nullable)(PZMNumberInputField * _Nonnull, double))onUpdate;
- (void)updateLayer;
- (void)controlTextDidChange:(NSNotification * _Nonnull)obj;
- (BOOL)control:(NSControl * _Nonnull)control textView:(NSTextView * _Nonnull)textView doCommandBySelector:(SEL _Nonnull)commandSelector SWIFT_WARN_UNUSED_RESULT;
- (void)controlTextDidEndEditing:(NSNotification * _Nonnull)obj;
- (void)control:(NSControl * _Nonnull)control didFailToValidatePartialString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable)error;
@end

/// Value representing an orientation in an x,y coordinate system.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMOrientation, "Orientation", open) {
  PZMOrientationHorizontal = 0,
  PZMOrientationVertical = 1,
};


/// Prism’s panel type.
/// <code>Panel</code> is based off of <code>Window</code> and behaves similarly to <code>NSPanel</code> instances. <code>Panel</code>
/// instances are useful for displaying transient windows that display only temporarily until some
/// user action, disappear after a set time, or both.
/// <code>Panel</code> instances are typically used for toasts, banners, and menus.
SWIFT_CLASS_NAMED("Panel")
@interface PZMPanel : NSPanel
@property (nonatomic) BOOL canBecomeKeyWindow;
@property (nonatomic) BOOL dismissWhenResigningKey;
- (nonnull instancetype)init;
- (void)appearAdjacentToEdge:(enum PZMRectEdge)edge ofView:(id <PZMBaseView> _Nonnull)view pinnedBy:(enum PZMRectEdge)pinnedBy inDirection:(enum PZMDirection)inDirection horizontalOffset:(double)horizontalOffset verticalOffset:(double)verticalOffset;
- (nonnull instancetype)initWithContentRect:(NSRect)contentRect styleMask:(NSWindowStyleMask)style backing:(NSBackingStoreType)backingStoreType defer:(BOOL)flag SWIFT_UNAVAILABLE;
@end

@class PZMPasswordInputFieldPredicate;

/// Prism’s Input Field component for passwords and other sensitive input.
SWIFT_CLASS_NAMED("PasswordInputField")
@interface PZMPasswordInputField : PZMInputField <NSTextFieldDelegate>
@property (nonatomic) BOOL readOnly;
@property (nonatomic) BOOL enabled;
/// The current value input into the password field.
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
/// Instantiates a password input field with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param placeholder The text to be shown in the bubble if there is no input.
///
/// \param decorations Any <code>PZMInputFieldDecoration</code> instances to display around the view.
///
/// \param predicates Any <code>PasswordInputField/Predicate</code> instances to be applied to the password.
///
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header placeholder:(NSString * _Nonnull)placeholder decorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations predicates:(NSArray<PZMPasswordInputFieldPredicate *> * _Nonnull)predicates;
/// Instantiates a password input field with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param placeholder The text to be shown in the bubble if there is no input.
///
/// \param decorations Any <code>PZMInputFieldDecoration</code> instances to display around the view.
///
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header placeholder:(NSString * _Nonnull)placeholder decorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations;
/// Instantiates a password input field with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param placeholder The text to be shown in the bubble if there is no input.
///
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header placeholder:(NSString * _Nonnull)placeholder;
@end


/// A predicate that can be applied to a string and returns success or failure.
/// <code>Predicate</code> instances are typically used to validate input (e.g., must contain a letter and a number)
/// and require a closure to apply to the <code>String</code> input, as well as an error string (to be displayed in case
/// of failure).
SWIFT_CLASS_NAMED("Predicate")
@interface PZMPasswordInputFieldPredicate : NSObject
/// Instantiates a predicate with a given closure and error text.
/// note:
/// <code>predicate</code> should return <code>true</code> on success (for valid input), and <code>false</code> on failure (for
/// illegal input).
/// \param predicate The closure that defines the predicate.
///
/// \param errorText The error text that displays when the predicate check fails.
///
///
/// returns:
/// A new <code>PasswordInputField/Predicate</code>.
+ (PZMPasswordInputFieldPredicate * _Nonnull)predicate:(NSString * _Nonnull)errorText :(BOOL (^ _Nonnull)(NSString * _Nonnull))predicate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ArrowStyle : NSInteger;

/// Prism’s popover model object.
/// <code>Popover</code> instances contain all the information in <code>Modal</code> and, additionally, have an <code>Popover/arrowStyle-swift.property</code> field to determine the position and direction of the
/// “arrow” on the edge of the popover panel.
/// Popovers are managed by <code>InteractableView</code> instances; for more details, see
/// <code>InteractableView/popoverModel</code>.
SWIFT_CLASS_NAMED("Popover")
@interface PZMPopover : PZMModal
/// Initializes a popover with a body, arrow style, and optional decorations and context.
/// \param body The body of the popover.
///
/// \param arrowStyle The <code>ArrowStyle-swift.enum</code> for the popover.
///
/// \param decorations The decorations to be displayed in the modal (see <code>Modal/Decoration</code>).
///
/// \param context An optional context to be passed to a primary or secondary button displayed in the modal.
///
- (nonnull instancetype)initWithBody:(NSString * _Nonnull)body arrowStyle:(enum ArrowStyle)arrowStyle decorations:(NSArray<PZMModalDecoration *> * _Nonnull)decorations context:(id _Nullable)context;
/// The arrow style for the popover.
@property (nonatomic) enum ArrowStyle arrowStyle;
@end

/// The possible arrow styles for a popover.
/// <code>top</code>, <code>bottom</code>, <code>left</code>, and <code>right</code> are always centered on their respective panel edges. Other values
/// are offset in a direction parallel to the side of the view rectangle they appear on. For example, <code>topRight</code>
/// will display an arrow along the top edge of the panel, offset to the right (+x in a non-inverted coordinate
/// space), and <code>rightBottom</code> will display an arrow along the right edge of the panel, offset to the bottom (-y
/// in a non-inverted coordinate space).
/// The values are named as <code>.{rectangleEdge}{offset}</code>, where <code>{rectangleEdge}</code> is the side of the
/// rectangle the arrow will be displayed in (such as <code>left</code> or <code>top</code>) and <code>{offset}</code> is an optional offset
/// in a direction parallel to <code>{rectangleEdge}</code> (such as <code>Top</code> or <code>Bottom</code> for a <code>top {rectangleEdge}</code>.
/// important:
/// values such as <code>bottomLeft</code> and <code>leftBottom</code> are <em>not</em> the same and will display the panel
/// and its arrow in different positions.
typedef SWIFT_ENUM(NSInteger, ArrowStyle, open) {
/// An arrow on the top of the bubble, centered on its x-axis.
  ArrowStyleTop = 0,
/// An arrow on the top of the bubble, near its top-right edge.
  ArrowStyleTopRight = 1,
/// An arrow on the top of the bubble, near its top-left edge.
  ArrowStyleTopLeft = 2,
/// An arrow on the bottom of the bubble, centered on its x-axis.
  ArrowStyleBottom = 3,
/// An arrow on the bottom of the bubble, near its bottom-left edge.
  ArrowStyleBottomRight = 4,
/// An arrow on the bottom of the bubble, near its bottom-right edge.
  ArrowStyleBottomLeft = 5,
/// An arrow on the left of the bubble, centered on its y-axis.
  ArrowStyleLeft = 6,
/// An arrow on the left of the bubble, near its top-left edge.
  ArrowStyleLeftTop = 7,
/// An arrow on the left of the bubble, near its bottom-left edge.
  ArrowStyleLeftBottom = 8,
/// An arrow on the right of the bubble, centered on its y-axis.
  ArrowStyleRight = 9,
/// An arrow on the right of the bubble, near its top-right edge.
  ArrowStyleRightTop = 10,
/// An arrow on the right of the bubble, near its bottom-right edge.
  ArrowStyleRightBottom = 11,
  ArrowStyleNone = 12,
};

typedef SWIFT_ENUM_NAMED(NSInteger, PZMPresence, "Presence", open) {
  PZMPresenceOnline = 0,
  PZMPresenceMobile = 1,
  PZMPresenceAway = 2,
  PZMPresenceOffline = 3,
  PZMPresenceOutOfOffice = 4,
  PZMPresenceInMeeting = 5,
  PZMPresenceInCall = 6,
  PZMPresenceInCalendarEvent = 7,
  PZMPresenceBusy = 8,
  PZMPresenceDoNotDisturb = 9,
  PZMPresenceBlocked = 10,
  PZMPresenceDeactivated = 11,
};


/// Prism’s presence icon view; displays a small icon showing a user’s presence status.
/// <code>PresenceIconView</code> instances are always the same size. Do <em>not</em> attempt to resize a <code>PresenceIconView</code> instance.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=40902-110467&mode=dev"><em>Figma</em>: Presence Indicator Design Specification</a>
SWIFT_CLASS_NAMED("PresenceIconView")
@interface PZMPresenceIconView : PZMView
/// The current presence being displayed.
@property (nonatomic) enum PZMPresence presence;
/// Initializes a <code>PresenceIconView</code> with the given presence.
/// \param presence The starting presence of the view.
///
- (nonnull instancetype)initWithPresence:(enum PZMPresence)presence OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

@protocol PrismCoreDelegate;

/// Prism’s singleton interface that allows callers to set a delegate for the framework.
/// Since Prism is not the entry point of the application, it requires a delegate to provide certain
/// information (such as the main application window, or the window that the host application wants
/// Prism to treat as its main window).
SWIFT_CLASS("_TtC5Prism9PrismCore")
@interface PrismCore : NSObject
/// Sets <code>PrismCore</code> up with a given delegate.
/// \param delegate The delegate that Prism will use.
///
+ (void)startWithDelegate:(id <PrismCoreDelegate> _Nonnull)delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSWindow;

SWIFT_PROTOCOL("_TtP5Prism17PrismCoreDelegate_")
@protocol PrismCoreDelegate
- (NSWindow * _Nullable)getMainWindow SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL enableKeyboardNavigation;
@end

@class PZMRadioButtonItem;

/// Prism’s radio button component, typically used as part of a group.
/// This is a simple view that is responsible for drawing the radio circle and a label attached to it. In most
/// instances, <code>RadioGroupView</code> will be more useful.
/// <ul>
///   <li>
///     See Also: <code>RadioGroupView</code> to create radio button groups that are automatically managed by Prism.
///   </li>
/// </ul>
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-10"><em>Figma</em>: Radio Button Design Specification</a>
SWIFT_CLASS_NAMED("RadioButton")
@interface PZMRadioButton : PZMInteractableView <PZMSelectable>
/// A closure to be invoked when the radio button is selected.
@property (nonatomic, copy) void (^ _Nullable onSelect)(PZMRadioButton * _Nonnull);
/// The text label to be shown next to the circle.
@property (nonatomic, copy) NSString * _Nullable text;
/// Whether the view is selected.
@property (nonatomic) BOOL selected;
@property (nonatomic) enum PZMCursorState cursorState;
@property (nonatomic) BOOL requiresTracking;
/// Creates a radio button with an empty string.
/// \param frame A frame for the view; this is ignored.
///
///
/// returns:
/// A new instance of <code>RadioButton</code>.
- (nonnull instancetype)initWithFrame:(NSRect)_ SWIFT_UNAVAILABLE;
/// Creates a radio button with the given parameters.
/// \param text The text to be shown in the button.
///
/// \param isSelected Whether the button is selected when it is instantiated.
///
///
/// returns:
/// a new instance of <code>RadioButton</code>.
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text isSelected:(BOOL)isSelected;
/// Creates a radio button with the given parameters.
/// \param item A radio group item to display in the button.
///
/// \param isSelected Whether the view is selected at instantiation time; optional, defaults to <code>false</code>.
///
///
/// returns:
/// A new <code>RadioButton</code> instance.
- (nonnull instancetype)initWithItem:(PZMRadioButtonItem * _Nonnull)item isSelected:(BOOL)isSelected OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)keyDown:(NSEvent * _Nonnull)event;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityTitle SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityValue SWIFT_WARN_UNUSED_RESULT;
@end


/// Prism’s model for a single radio button.
/// <code>Item</code> instances contain all the information necessary to instantiate and display
/// a radio button.
SWIFT_CLASS_NAMED("Item")
@interface PZMRadioButtonItem : NSObject
/// The radio button’s text.
@property (nonatomic, copy) NSString * _Nonnull text;
/// The radio button’s trailing icon, if any.
@property (nonatomic, strong) NSImage * _Nullable icon;
/// The popover that is shown when the button’s icon is hovered.
/// note:
/// If <code>icon</code> is <code>nil</code>, this field is unused.
@property (nonatomic, strong) PZMPopover * _Nullable iconPopover;
/// Creates a new <code>Item</code> instance with the given text.
/// \param text The text to be displayed in the radio button.
///
///
/// returns:
/// A new <code>Item</code> instance.
- (nonnull instancetype)init:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
/// Creates a new <code>Item</code> instance with the given parameters.
/// \param text The text to be displayed in the radio button.
///
/// \param icon The trailing icon to be displayed alongside <code>text</code>.
///
/// \param iconPopover The popover to be displayed when <code>icon</code> is hovered.
///
///
/// returns:
/// A new <code>Item</code> instance.
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text icon:(NSImage * _Nonnull)icon iconPopover:(PZMPopover * _Nonnull)iconPopover OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Prism’s radio button group component, containing of one or more <code>RadioButton</code> instances.
/// This view handles its subviews’ selection and mouse states.
/// <ul>
///   <li>
///     See Also: <code>RadioButton</code> for creating single radio buttons outside of a group.
///   </li>
/// </ul>
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-10"><em>Figma</em>: Radio Button Design Specification</a>
SWIFT_CLASS_NAMED("RadioGroupView")
@interface PZMRadioGroupView : PZMView
/// An optional closure to be invoked when the selection changes.
@property (nonatomic, copy) void (^ _Nullable onSelectionChange)(PZMRadioGroupView * _Nonnull, NSInteger);
/// The currently selected index.
@property (nonatomic, readonly) NSInteger currentSelection;
/// Creates a view with the given items and the selected index.
/// \param stringItems The labels for each item in the group, in order.
///
/// \param title The title for the section; optional.
///
/// \param selectedIndex The index for the selected item; optional, defaults to <code>0</code>.
///
/// \param onSelectionChange An optional closure to be invoked when the selection changes.
///
///
/// returns:
/// A new <code>RadioGroupView</code> instance.
- (nonnull instancetype)initWithStringItems:(NSArray<NSString *> * _Nonnull)items title:(NSString * _Nullable)title selectedIndex:(NSInteger)selectedIndex alignment:(NSLayoutAttribute)alignment onSelectionChange:(void (^ _Nullable)(PZMRadioGroupView * _Nonnull, NSInteger))onSelectionChange;
/// Creates a view with the given items and the selected index.
/// \param items The items in the group, in order.
///
/// \param title The title for the section; optional.
///
/// \param selectedIndex The index for the selected item.
///
/// \param onSelectionChange An optional closure to be invoked when the selection changes.
///
///
/// returns:
/// A new <code>RadioGroupView</code> instance.
- (nonnull instancetype)initWithItems:(NSArray<PZMRadioButtonItem *> * _Nonnull)items title:(NSString * _Nullable)title selectedIndex:(NSInteger)selectedIndex alignment:(NSLayoutAttribute)alignment onSelectionChange:(void (^ _Nullable)(PZMRadioGroupView * _Nonnull, NSInteger))onSelectionChange OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

/// A value representing an edge corner.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMRectEdge, "RectEdge", open) {
  PZMRectEdgeTop = 0,
  PZMRectEdgeBottom = 1,
  PZMRectEdgeLeft = 2,
  PZMRectEdgeRight = 3,
  PZMRectEdgeCenter = 4,
  PZMRectEdgeTopLeft = 5,
  PZMRectEdgeTopRight = 6,
  PZMRectEdgeBottomLeft = 7,
  PZMRectEdgeBottomRight = 8,
};

@protocol PZMSegmentedControlDelegate;
@class PZMSegmentedControlItem;

/// Prism’s segmented control component; acts as a filter and allows the user to choose one out of a handful of options.
/// <code>SegmentedControl</code> instances draw a list of items horizontally on screen, and allow the user to select
/// one of those options. They are useful as filters, such as for when we want to allow the user to choose between
/// a number of different filters for the data, or when we want to allow for the user to choose between 2 or more
/// display modes (e.g., list vs. grid).
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=40970-109354"><em>Figma</em>: Segmented Control Design Specification</a>
SWIFT_CLASS_NAMED("SegmentedControl")
@interface PZMSegmentedControl : PZMInteractableView
/// The segmented control’s delegate.
/// The delegate is notified whenever the segmented control selection changes.
@property (nonatomic, strong) id <PZMSegmentedControlDelegate> _Nullable delegate;
/// The currently selected item.
@property (nonatomic, readonly, strong) PZMSegmentedControlItem * _Nonnull currentSelection;
/// The index for the currently selected item.
@property (nonatomic, readonly) NSInteger currentSelectionIndex;
- (void)forbidInteractionInSubtree;
- (void)enableInteractionInSubtree;
@property (nonatomic) CGFloat cornerRadius;
/// Creates a segmented control with a given list of items.
/// \param items The array of items to be shown.
///
///
/// returns:
/// A new instance of <code>SegmentedControl</code>.
- (nullable instancetype)initWithItems:(NSArray<PZMSegmentedControlItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The size that fits this view’s contents, including spacing and all items.
/// complexity:
/// This implementation runs in <code>O(n)</code>, where <code>n</code> is the number of subviews.
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (void)keyDown:(NSEvent * _Nonnull)event;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


/// Prism’s object for a segmented control item.
/// These items are merely a model for an item to be displayed in <code>SegmentedControl</code> instances. Each
/// item is displayed by a separate instance of <code>SegmentedControlItemView</code>.
SWIFT_CLASS_NAMED("Item")
@interface PZMSegmentedControlItem : NSObject
/// The item’s label.
@property (nonatomic, copy) NSString * _Nullable label;
/// The item’s trailing icon.
@property (nonatomic, strong) NSImage * _Nullable icon;
/// The action to be taken when this item is selected.
@property (nonatomic, copy) void (^ _Nullable action)(PZMSegmentedControl * _Nonnull);
/// Returns an item with a specified label and action.
/// \param label The label to be shown.
///
/// \param action The action to be taken when the view is clicked.
///
///
/// returns:
/// a new <code>Item</code> instance.
+ (PZMSegmentedControlItem * _Nonnull)itemWithLabel:(NSString * _Nonnull)label action:(void (^ _Nullable)(PZMSegmentedControl * _Nonnull))action SWIFT_WARN_UNUSED_RESULT;
/// Returns an item with a specified icon and action.
/// \param icon The icon to be shown.
///
/// \param action The action to be taken when the view is clicked.
///
///
/// returns:
/// a new <code>Item</code> instance.
+ (PZMSegmentedControlItem * _Nonnull)itemWithIcon:(NSImage * _Nonnull)icon action:(void (^ _Nullable)(PZMSegmentedControl * _Nonnull))action SWIFT_WARN_UNUSED_RESULT;
/// Returns an item with a specified label, icon, and action.
/// \param label The label to be shown.
///
/// \param icon The icon to be shown.
///
/// \param action The action to be taken when the view is clicked.
///
///
/// returns:
/// a new <code>Item</code> instance.
+ (PZMSegmentedControlItem * _Nonnull)itemWithLabel:(NSString * _Nonnull)label icon:(NSImage * _Nonnull)icon action:(void (^ _Nullable)(PZMSegmentedControl * _Nonnull))action SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("SegmentedControlDelegate")
@protocol PZMSegmentedControlDelegate
@optional
/// Invoked <em>after</em> the segmented control is done updating its UI to reflect a new selection.
/// \param control The control that received the click event.
///
/// \param item The newly selected item.
///
- (void)segmentedControl:(PZMSegmentedControl * _Nonnull)control didSelect:(PZMSegmentedControlItem * _Nonnull)item;
/// Invoked <em>before</em> the segmented control updates its UI, immediately after it receives an event to select
/// a different item.
/// important:
/// This function is invoked <em>before</em> <code>SegmentedControl/currentSelection</code> and
/// <code>SegmentedControl/currentSelectionIndex</code> are updated. To get the new selection index or item,
/// use the arguments passed into the delegate function call.
/// \param control The control that received the event.
///
/// \param item The item that will be selected after this delegate method returns.
///
/// \param newIndex The index of <code>item</code>.
///
- (void)segmentedControl:(PZMSegmentedControl * _Nonnull)control willSelect:(PZMSegmentedControlItem * _Nonnull)item newIndex:(NSInteger)newIndex;
@end


/// The available sentiments for notifications and other elements.
/// Sentiments are typically used to determine text color or icons to be displayed next to a message,
/// such as an error toast or a warning banner.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMSentiment, "Sentiment", open) {
  PZMSentimentInformation = 0,
  PZMSentimentSuccess = 1,
  PZMSentimentWarning = 2,
  PZMSentimentDanger = 3,
};

@class PZMSliderViewDecoration;

/// Prism’s slider control.
/// <code>SliderView</code> instances may display a continuous or discrete slider control. By default,
/// sliders are continuous. To make a <code>SliderView</code> with discrete values, use <code>init(withValue:stepCount:)</code> with
/// <code>stepCount > 2</code>.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-12"><em>Figma</em>: Slider Design Specification</a>
SWIFT_CLASS_NAMED("SliderView")
@interface PZMSliderView : PZMInteractableView
/// Whether or not the slider is stepped.
/// <ul>
///   <li>
///     See also: <code>stepCount</code> in <code>init(withValue:stepCount:)</code>.
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL stepped;
/// Whether the slider view should show a tooltip when the circle is dragged.
@property (nonatomic) BOOL showsValueToolTip;
/// An optional closure to be invoked when the slider value is updated.
@property (nonatomic, copy) void (^ _Nullable onValueChange)(PZMSliderView * _Nonnull);
@property (nonatomic) NSRect frame;
@property (nonatomic) BOOL acceptsFirstResponder;
@property (nonatomic) BOOL canBecomeKeyView;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL requiresTracking;
@property (nonatomic) enum PZMCursorState cursorState;
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)initWithFrame:(NSRect)_ SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates a new slider control.
/// \param value The starting value for the slider.
///
/// \param decorations A list of <code>Decoration</code>s to be displayed around the slider.
///
/// \param onValueChange An optional closure to be invoked when the value changes.
///
///
/// returns:
/// A new <code>SliderView</code> instance.
- (nonnull instancetype)initWithValue:(double)value decorations:(NSArray<PZMSliderViewDecoration *> * _Nonnull)decorations onValueChange:(void (^ _Nullable)(PZMSliderView * _Nonnull))onValueChange;
- (void)updateLayer;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)mouseDown:(NSEvent * _Nonnull)event;
- (void)mouseDragged:(NSEvent * _Nonnull)event;
- (void)keyDown:(NSEvent * _Nonnull)event;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
@end


/// A backwards-compatible bridge to Objective-C for <code>SliderView/Decoration</code>.
/// <code>PZMSliderViewDecoration</code> instances map 1:1 to <code>SliderView/Decoration</code>.
/// note:
/// You should not instantiate this class directly; instead, use one of the provided static methods
/// that return instances with their corresponding <code>SliderView/Decoration</code>.
SWIFT_CLASS_NAMED("_PrismOCBridge_Decoration")
@interface PZMSliderViewDecoration : NSObject
/// A label on the leading edge of the slider.
+ (PZMSliderViewDecoration * _Nonnull)leadingLabel:(NSString * _Nonnull)label SWIFT_WARN_UNUSED_RESULT;
/// A label on the trailing edge of the slider.
+ (PZMSliderViewDecoration * _Nonnull)trailingLabel:(NSString * _Nonnull)label SWIFT_WARN_UNUSED_RESULT;
/// An icon on the leading edge of the slider.
+ (PZMSliderViewDecoration * _Nonnull)leadingImage:(NSImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// An icon on the trailing edge of the slider.
+ (PZMSliderViewDecoration * _Nonnull)trailingImage:(NSImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// A trailing <code>NumberInputField</code> that displays and controls the slider value.
+ (PZMSliderViewDecoration * _Nonnull)inputField SWIFT_WARN_UNUSED_RESULT;
/// A number of steps on the slider.
/// This is used to create sliders with discrete levels, rather than a continuous slider in the <code>0...1</code> range.
+ (PZMSliderViewDecoration * _Nonnull)stepWithCount:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Prism’s stepped progress indicator component, used to display progress with multi-step actions.
/// This component is commonly used for multi-step processes, such as a checkout or sign-up page. Its state can
/// be advanced or regressed using <code>increment()</code> and <code>decrement()</code>.
/// <code>SteppedProgressIndicator</code> instances manage their own size, but will display correctly with any
/// size greater than <code>minimumSize</code>.
/// important:
/// Do <em>not</em> attempt to make this view smaller than <code>minimumSize</code>.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=40902-110468"><em>Figma</em>: Stepped Progress Indicator Design Specification</a>
SWIFT_CLASS_NAMED("SteppedProgressIndicator")
@interface PZMSteppedProgressIndicator : PZMView
/// Creates a stepped progress indicator with a list of items and an orientation.
/// Optionally, takes an active index. Defaults to zero (first item).
/// \param items 2 or more item labels to be displayed.
///
/// \param orientation The orientation of the progress indicator.
///
/// \param activeIndex The currently selected index.
///
- (nonnull instancetype)initWithItems:(NSArray<NSString *> * _Nonnull)items orientation:(enum PZMOrientation)orientation activeIndex:(NSInteger)activeIndex OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The minimum size for the view, given its items and the layout constants.
/// complexity:
/// This runs in <code>O(n)</code>, where <code>n</code> is the number of items.
///
/// returns:
/// The minimum size for the view to lay itself out correctly.
@property (nonatomic, readonly) NSSize minimumSize;
- (void)setFrameSize:(NSSize)newSize;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
/// Advances the progress indicator to the next step.
/// If the last step is already complete, this does nothing.
- (void)increment;
/// Regresses the progress indicator to the next step.
/// If the first step is pending, this does nothing.
- (void)decrement;
- (void)updateLayer;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("TableCellView")
@interface PZMTableCellView : NSTableCellView <CursorStateBindable>
/// Determines whether to enable animation in the view’s own updates (such as a fade-in/out or sliding text).
/// Declared in <code>AnimatedView</code>; defaults to <code>true</code>.
@property (nonatomic) BOOL enableAnimation;
@property (nonatomic, readonly) BOOL propagatesKeyEvents;
/// Determines whether the view ignores any mouse or keyboard events sent to it. Useful for making a view
/// “unclickable”, without modifying its appearance.
@property (nonatomic) BOOL forbidInteraction;
/// Recursively sets <code>forbidInteraction</code> <code>= true</code> for <code>View</code> instances in the view’s subtree.
/// attention:
/// This does <em>not</em> propagate through view instances that do not inherit from <code>View</code>, but
/// this behavior may change in the future.
- (void)forbidInteractionInSubtree;
/// Recursively sets <code>forbidInteraction</code> <code>= false</code> for <code>View</code> instances in the view’s subtree.
/// attention:
/// this does <em>not</em> propagate through view instances that do not inherit from <code>View</code>, but
/// this behavior may change in the future.
- (void)enableInteractionInSubtree;
/// The view’s default background color.
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
/// The view’s background color, when it is hovered.
@property (nonatomic, strong) PrismColor * _Nullable hoveredBackgroundColor;
/// The view’s background color, while the mouse is held down during a click event.
@property (nonatomic, strong) PrismColor * _Nullable clickedBackgroundColor;
/// The radius of the view’s corners; higher values mean rounder corners.
/// Setting <code>cornerRadius</code> to be greater than <code>min(view.height, view.width)</code> may cause it to draw
/// unexpectedly.
@property (nonatomic) CGFloat cornerRadius;
/// The width of the view’s border, drawn around the same path as its background.
@property (nonatomic) CGFloat borderWidth;
/// The color of the view’s border.
@property (nonatomic, strong) PrismColor * _Nullable borderColor;
/// The color of the view’s border, when the view is hovered.
@property (nonatomic, strong) PrismColor * _Nullable hoveredBorderColor;
/// The color of the view’s border, while the mouse is held down during a click event.
@property (nonatomic, strong) PrismColor * _Nullable clickedBorderColor;
/// Determines whether the view should instantiate and maintain a tracking area <em>regardless</em> of its other set
/// properties.
/// Normally, <code>View</code> instances are lazy - they will not allocate a tracking area for themselves unless it
/// is needed (such as for tracking mouse events for hover states). This can be used if the logic for
/// determining whether the view needs to own a tracking area does not match your desired outcome. For example,
/// this could be useful if you are implementing a clickable view that does not draw a background - but also
/// consider using <code>InteractableView</code> instead.
/// If there is no tracking area when this is set to true, it will be created.
/// This variable can be safely set, or overriden as a calculated property.
/// important:
/// The view’s behavior after setting <a href="doc:/documentation/Prism/View/forbidTracking">doc:/documentation/Prism/View/forbidTracking</a><code> = true</code> <em>and</em> <a href="doc:/documentation/Prism/View/requiresTracking">doc:/documentation/Prism/View/requiresTracking</a><code> = true</code> is
/// undefined.
@property (nonatomic) BOOL requiresTracking;
/// Determines whether the view should never instantiate and maintain a tracking area <em>regardless</em> of its other set
/// properties.
/// Normally, <code>View</code> instances will always instantiate a <code>NSTrackingArea</code> if they have to (such as if hover and
/// clicked states exist). However, in cases such as where the view is merely used as a subview for drawing and is
/// managed by a superview that owns it and manages its subviews’ hover states, this may be used to forbid a view
/// from ever instantiating a tracking area for itself.
/// If there is a tracking area when this variable is set to false, it will be destroyed.
/// This variable can be safely set, or overriden as a calculated property.
/// important:
/// The view’s behavior after setting <code>forbidTracking</code> <code>= true</code> <em>and</em> <code>requiresTracking</code> <code>= true</code> is
/// undefined.
@property (nonatomic) BOOL forbidTracking;
@property (nonatomic, strong) PZMCursorStateBinding * _Nullable cursorStateBinding;
- (PZMCursorStateBinding * _Nullable)makeCursorStateBinding SWIFT_WARN_UNUSED_RESULT;
/// The view’s intrinsic content size will always return its overridden value (see <code>setIntrinsicContentSize(_:)</code>);
/// otherwise, it is always equal to <code>super.intrinsicContentSize</code>.
@property (nonatomic, readonly) NSSize intrinsicContentSize;
/// The view’s current cursor state.
@property (nonatomic, readonly) enum PZMCursorState cursorState;
/// A function to be invoked when the view detects a change to its cursor state.
/// note:
/// if the view is not configured to track mouse events, this may never be invoked. Please refer
/// to each component’s class documentation for specific details.
- (void)cursorStateChangedTo:(enum PZMCursorState)state;
/// Initializes an empty <code>View</code> instance with the given frame.
/// \param frame The <code>NSRect</code> for the frame.
///
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Invoked when the mouse enters the view - see <code>NSView.mouseEntered</code>.
/// This forwards the mouse event to <code>super</code> if <a href="doc:/documentation/Prism/View/forbidInteraction">doc:/documentation/Prism/View/forbidInteraction</a> is set.
/// important:
/// <code>View</code> subclasses <em>must</em> call <code>super.mouseEntered</code> for cursor states to
/// be properly set by this implementation. If <code>super.mouseEntered</code> is not invoked, the cursor
/// states must be managed manually.
/// \param event The mouse event.
///
- (void)mouseEntered:(NSEvent * _Nonnull)event;
/// Invoked when the mouse exits the view - see <code>NSView.mouseExited</code>.
/// This forwards the mouse event to <code>super</code> if <code>.forbidInteraction</code> is set.
/// important:
/// <code>View</code> subclasses <em>must</em> call <code>super.mouseExited</code> for cursor states to
/// be properly set. If <code>super.mouseExited</code> is not invoked, the cursor states must be managed
/// manually.
/// \param event The mouse event.
///
- (void)mouseExited:(NSEvent * _Nonnull)event;
/// Invoked when the view is clicked - see <code>NSView.mouseDown</code>.
/// This forwards the mouse event to <code>super</code> if <code>.forbidInteraction</code> is set.
/// important:
/// <code>View</code> subclasses <em>must</em> call <code>super.mouseDown</code> for cursor states to be
/// properly set. If <code>super.mouseDown</code> is not invoked, the cursor states must be managed manually.
/// \param event The mouse event.
///
- (void)mouseDown:(NSEvent * _Nonnull)event;
/// Invoked when a click on the view is released - see <code>NSView.mouseUp</code>.
/// This forwards the mouse event to <code>super</code> if <code>.forbidInteraction</code> is set.
/// important:
/// <code>View</code> subclasses <em>must</em> call <code>super.mouseUp</code> for cursor states to be properly set. If
/// <code>super.mouseUp</code> is not invoked, the cursor states must be managed manually.
/// \param event The mouse event.
///
- (void)mouseUp:(NSEvent * _Nonnull)event;
/// Updates the view’s root layer, with its calculated background and border color and width.
/// attention:
/// when overriding this, <code>super.updateLayer()</code> <em>must</em> be called.
- (void)updateLayer;
- (void)updateTrackingAreas;
/// The view’s center point, in its own coordinate system.
///
/// returns:
/// An <code>NSPoint</code> instance at the view’s center.
@property (nonatomic, readonly) NSPoint centerPoint;
/// Returns <code>nil</code> whenever <code>forbidInteraction</code> <code>== true</code>; otherwise, it is equal to <code>super.hitTest</code>.
- (NSView * _Nullable)hitTest:(NSPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Highlights the background or border of a view for a short duration.
/// This is useful to display a transient state, such as when you want to bring attention
/// to a specific <code>View</code>.
/// \param backgroundColor The color that the background will be highlighted as.
///
/// \param borderColor The color that the border will be highlighted as.
///
/// \param for duration The duration, in seconds, of the highlighting effect.
///
- (void)highlightWithBackgroundColor:(PrismColor * _Nullable)backgroundColor borderColor:(PrismColor * _Nullable)borderColor for:(double)duration;
@end

enum PZMTextBadgeStyle : NSInteger;

/// Prism’s text Badge component, commonly used for “beta” and “new” labels.
/// <code>TextBadge</code> instances resize themselves to fit their content. Do not manually
/// resize these instances.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-0"><em>Figma</em>: Badge Design Specification</a>
SWIFT_CLASS_NAMED("TextBadge")
@interface PZMTextBadge : PZMView <PZMInvertible>
/// The label contents.
@property (nonatomic, copy) NSString * _Nonnull text;
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
@property (nonatomic, strong) PrismColor * _Nullable borderColor;
/// The corner radius for the label.
/// This is a design constant and cannot be overridden.
@property (nonatomic) CGFloat cornerRadius;
/// The border width for the label.
/// This is a design constant and cannot be overridden.
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic) BOOL inverted;
- (void)invert;
/// Creates a label with given text, background, and border colors.
/// \param text The badge text.
///
/// \param style The style of the badge.
///
///
/// returns:
/// A <code>TextBadge</code> instance with the specified parameters.
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text style:(enum PZMTextBadgeStyle)style OBJC_DESIGNATED_INITIALIZER;
/// Creates an empty label with default colors.
/// \param frame A frame for the view; this is ignored.
///
///
/// returns:
/// A <code>TextBadge</code> instance.
- (nonnull instancetype)initWithFrame:(NSRect)_ OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Utility function that returns a “BETA” badge, as defined in the design specification.
///
/// returns:
/// A <code>TextBadge</code> instance with the “BETA” style and text.
+ (PZMTextBadge * _Nonnull)makeBetaBadge SWIFT_WARN_UNUSED_RESULT;
/// Utility function that returns a “NEW” badge, as defined in the design specification.
///
/// returns:
/// A <code>TextBadge</code> instance with the “NEW” style and text.
+ (PZMTextBadge * _Nonnull)makeNewBadge SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSSize intrinsicContentSize;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityTitle SWIFT_WARN_UNUSED_RESULT;
@end

/// The available styles of badge.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMTextBadgeStyle, "Style", open) {
/// A primary badge style, to emphasize a label or action.
/// “New” labels are typically drawn in this style.
  PZMTextBadgeStylePrimary = 0,
/// A default badge style, typically used for badges that do not fall into any other category.
  PZMTextBadgeStyleUncategorized = 1,
/// A badge that indicates a successful operation.
  PZMTextBadgeStylePositive = 2,
/// A warning/in progress badge.
  PZMTextBadgeStyleProgress = 3,
/// A badge that indicates a failed operation.
  PZMTextBadgeStyleNegative = 4,
/// A special badge style, to emphasize a label or action.
/// “Beta” labels are typically drawn in this style.
  PZMTextBadgeStyleSpecial = 5,
};

@protocol PZMTextInputFieldDelegate;
@class PZMTextInputFieldPredicate;

/// Prism’s Input Field component for text.
/// <code>TextInputField</code> support a wide range of configurations. For more details,
/// see <code>InputField/Decoration</code> and <code>TextInputField/Variant</code>.
SWIFT_CLASS_NAMED("TextInputField")
@interface PZMTextInputField : PZMInputField <NSTextFieldDelegate>
@property (nonatomic, weak) id <PZMTextInputFieldDelegate> _Nullable delegate;
@property (nonatomic, readonly) BOOL hasError;
@property (nonatomic) BOOL readOnly;
@property (nonatomic) BOOL enabled;
/// The predicates that are applied to the user input.
@property (nonatomic, copy) NSArray<PZMTextInputFieldPredicate *> * _Nonnull predicates;
- (void)updateLayer;
- (void)controlTextDidChange:(NSNotification * _Nonnull)obj;
- (BOOL)control:(NSControl * _Nonnull)control textView:(NSTextView * _Nonnull)textView doCommandBySelector:(SEL _Nonnull)commandSelector SWIFT_WARN_UNUSED_RESULT;
/// Instantiates a search text field with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param placeholder The text to be shown in the bubble if there is no input.
///
/// \param decorations Any <code>PZMInputFieldDecoration</code> instances to display around the view.
///
- (nonnull instancetype)initSearchFieldWithHeader:(NSString * _Nonnull)header placeholder:(NSString * _Nonnull)placeholder decorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations;
/// Instantiates a resizable text field with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param placeholder The text to be shown in the bubble if there is no input.
///
/// \param decorations Any <code>PZMInputFieldDecoration</code> instances to display around the view.
///
- (nonnull instancetype)initResizableFieldWithHeader:(NSString * _Nonnull)header placeholder:(NSString * _Nonnull)placeholder decorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations;
/// Instantiates a prefixed text field with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param placeholder The text to be shown in the bubble if there is no input.
///
/// \param decorations Any <code>PZMInputFieldDecoration</code> instances to display around the view.
///
/// \param prefix The prefix to be displayed in the view.
///
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header placeholder:(NSString * _Nonnull)placeholder decorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations prefix:(NSString * _Nonnull)prefix;
/// Instantiates a basic text field with the given options.
/// \param header The header to be displayed above the bubble.
///
/// \param placeholder The text to be shown in the bubble if there is no input.
///
/// \param decorations Any <code>PZMInputFieldDecoration</code> instances to display around the view.
///
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header placeholder:(NSString * _Nonnull)placeholder decorations:(NSArray<PZMInputFieldDecoration *> * _Nonnull)decorations;
/// The string currently in the input field.
/// note:
/// For <code>Variant/prefixed(_:)</code>, this value includes the prefix.
@property (nonatomic, copy) NSString * _Nonnull stringValue;
@end


/// A predicate that can be applied to a string and returns success or failure.
/// <code>Predicate</code> instances are typically used to validate input (e.g., must contain a letter and a number) and
/// require a closure to apply to the <code>String</code> input, as well as an error string (to be displayed in case of
/// failure).
SWIFT_CLASS_NAMED("Predicate")
@interface PZMTextInputFieldPredicate : NSObject
/// Instantiates a predicate with a given closure and error text.
/// note:
/// <code>predicate</code> should return <code>true</code> on success (for valid input), and <code>false</code> on failure (for
/// illegal input).
/// \param predicate The closure that defines the predicate.
///
/// \param errorText The error text that displays when the predicate check fails.
///
///
/// returns:
/// A new <code>TextInputField/Predicate</code>.
+ (PZMTextInputFieldPredicate * _Nonnull)predicate:(NSString * _Nonnull)errorText :(BOOL (^ _Nonnull)(NSString * _Nonnull))predicate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("TextInputFieldDelegate")
@protocol PZMTextInputFieldDelegate
@optional
- (void)textInputField:(PZMTextInputField * _Nonnull)sender didUpdate:(NSString * _Nonnull)text;
- (void)textInputField:(PZMTextInputField * _Nonnull)sender didChangePredicateValidationState:(BOOL)success;
@end

enum PZMToggleViewSize : NSInteger;

/// Prism’s toggle component. Used for turning something on or off.
/// <code>ToggleView</code> instances are always a constant size, defined by their size
/// parameter. Do not manually resize these instances.
/// <h2>Reference</h2>
/// <a href="https://www.figma.com/file/fLGhhzkzA1tlvZOg00to2L/Prism-Component-Library-(MVP)?type=design&node-id=683-13"><em>Figma</em>: Toggle Design Specification</a>
SWIFT_CLASS_NAMED("ToggleView")
@interface PZMToggleView : PZMInteractableView
/// Whether the toggle view is toggled “on” or “off”.
@property (nonatomic) BOOL boolValue;
/// A function to invoke when this view is toggled on or off.
@property (nonatomic, copy) void (^ _Nullable onToggle)(PZMToggleView * _Nonnull);
@property (nonatomic, readonly) NSSize intrinsicContentSize;
@property (nonatomic) CGFloat cornerRadius;
/// The toggle’s background color, calculated with <code>boolValue</code>.
/// This is a design constant, but may be overridden in a subclass.
@property (nonatomic, strong) PrismColor * _Nullable backgroundColor;
/// The toggle’s hover background color, calculated with <code>boolValue</code>.
/// This is a design constant, but may be overridden in a subclass.
@property (nonatomic, strong) PrismColor * _Nullable hoveredBackgroundColor;
/// The toggle’s clicked background color, calculated with <code>boolValue</code>.
/// This is a design constant, but may be overridden in a subclass.
@property (nonatomic, strong) PrismColor * _Nullable clickedBackgroundColor;
/// Creates a toggle view with the specified size.
/// \param size the size of the toggle view.
///
///
/// returns:
/// A <code>ToggleView</code> instance with the specified size.
- (nonnull instancetype)initWithSize:(enum PZMToggleViewSize)size onToggle:(void (^ _Nullable)(PZMToggleView * _Nonnull))onToggle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)updateLayer;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)keyDown:(NSEvent * _Nonnull)event;
- (NSAccessibilityRole _Nullable)accessibilityRole SWIFT_WARN_UNUSED_RESULT;
- (NSAccessibilitySubrole _Nullable)accessibilitySubrole SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityRoleDescription SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAccessibilityElement SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end

/// Values defining the possible toggle view sizes.
typedef SWIFT_ENUM_NAMED(NSInteger, PZMToggleViewSize, "Size", open) {
/// The small toggle size.
  PZMToggleViewSizeSmall = 0,
/// The medium toggle size.
  PZMToggleViewSizeMedium = 1,
};


/// Prism’s tooltip model object.
/// Add a <code>ToolTip</code> instance to a <code>InteractableView</code>’s <code>InteractableView/toolTipModel</code> property to have
/// the view instance display a tooltip after a short delay when hovered.
SWIFT_CLASS_NAMED("ToolTip")
@interface PZMToolTip : NSObject
/// The tooltip’s primary label; typically used to describe the action.
@property (nonatomic, copy) NSString * _Nonnull label;
/// The tooltip’s keyboard shortcut key.
@property (nonatomic, copy) NSString * _Nullable key;
/// Creates and returns a new tooltip with the given label and key.
/// \param label The action label.
///
/// \param key The key shortcut, if any.
///
///
/// returns:
/// A new <code>ToolTip</code> instance.
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label key:(NSString * _Nullable)key OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Prism’s notification model object.
/// <code>UserNotification</code> instances are <code>Modal</code> instances that contain an additional <code>sentiment</code> field.
/// Typical use cases include toasts and banners.
SWIFT_CLASS_NAMED("UserNotification")
@interface PZMUserNotification : PZMModal
/// The notification sentiment.
@property (nonatomic) enum PZMSentiment sentiment;
/// Initializes a new notification.
/// \param body The body of the notification.
///
/// \param sentiment The notification’s <code>Sentiment</code>.
///
/// \param decorations The decorations to be displayed in the notification (see <code>Modal/Decoration</code>).
///
/// \param context An optional context to be passed to a primary or secondary button displayed in the modal.
///
- (nonnull instancetype)initWithBody:(NSString * _Nonnull)body sentiment:(enum PZMSentiment)sentiment decorations:(NSArray<PZMModalDecoration *> * _Nonnull)decorations context:(id _Nullable)context;
@end



/// Prism’s window type.
/// <code>Window</code> offers utilities such as the ability to display an alert that blocks interaction
/// with the window contents, but mostly behaves like an <code>NSWindow</code> instance.
SWIFT_CLASS_NAMED("Window")
@interface PZMWindow : NSWindow
@property (nonatomic) BOOL canBecomeKeyWindow;
- (nonnull instancetype)initWithContentRect:(NSRect)contentRect styleMask:(NSWindowStyleMask)style backing:(NSBackingStoreType)backingStoreType defer:(BOOL)flag SWIFT_UNAVAILABLE;
/// Displays an alert with the given options.
/// If the window does not have a content view, this is a no-op.
/// \param options The options and contents for the dialog.
///
- (void)showAlertWith:(PZMDialog * _Nonnull)options;
/// Dismisses the currently visible alert.
/// If no alert is visible on the window, this is a no-op.
- (void)dismissAlert;
/// Displays a <code>UserNotification</code> object as a toast on the window.
/// \param notification The notification to be shown as a toast.
///
- (void)showToastForNotification:(PZMUserNotification * _Nonnull)notification;
/// Displays a <code>UserNotification</code> object as a banner on the window.
/// \param notification The notification to be shown as a banner.
///
- (void)showBannerForNotification:(PZMUserNotification * _Nonnull)notification;
@property (nonatomic) BOOL autorecalculatesKeyViewLoop;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
